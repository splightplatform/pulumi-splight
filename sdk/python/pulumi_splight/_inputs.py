# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ActionAssetArgs',
    'ActionAssetArgsDict',
    'ActionSetpointArgs',
    'ActionSetpointArgsDict',
    'ActionSetpointAttributeArgs',
    'ActionSetpointAttributeArgsDict',
    'AlertAlertItemArgs',
    'AlertAlertItemArgsDict',
    'AlertAlertItemQueryFilterAssetArgs',
    'AlertAlertItemQueryFilterAssetArgsDict',
    'AlertAlertItemQueryFilterAttributeArgs',
    'AlertAlertItemQueryFilterAttributeArgsDict',
    'AlertRelatedAssetArgs',
    'AlertRelatedAssetArgsDict',
    'AlertTagArgs',
    'AlertTagArgsDict',
    'AlertThresholdArgs',
    'AlertThresholdArgsDict',
    'AlgorithmInputArgs',
    'AlgorithmInputArgsDict',
    'AlgorithmTagArgs',
    'AlgorithmTagArgsDict',
    'AssetKindArgs',
    'AssetKindArgsDict',
    'AssetRelationAssetArgs',
    'AssetRelationAssetArgsDict',
    'AssetRelationRelatedAssetArgs',
    'AssetRelationRelatedAssetArgsDict',
    'AssetRelationRelatedAssetKindArgs',
    'AssetRelationRelatedAssetKindArgsDict',
    'AssetTagArgs',
    'AssetTagArgsDict',
    'BusKindArgs',
    'BusKindArgsDict',
    'BusNominalVoltageArgs',
    'BusNominalVoltageArgsDict',
    'BusTagArgs',
    'BusTagArgsDict',
    'CommandActionArgs',
    'CommandActionArgsDict',
    'CommandActionAssetArgs',
    'CommandActionAssetArgsDict',
    'ComponentInputArgs',
    'ComponentInputArgsDict',
    'ComponentRoutineConfigArgs',
    'ComponentRoutineConfigArgsDict',
    'ComponentRoutineInputArgs',
    'ComponentRoutineInputArgsDict',
    'ComponentRoutineInputValueArgs',
    'ComponentRoutineInputValueArgsDict',
    'ComponentRoutineOutputArgs',
    'ComponentRoutineOutputArgsDict',
    'ComponentRoutineOutputValueArgs',
    'ComponentRoutineOutputValueArgsDict',
    'ComponentTagArgs',
    'ComponentTagArgsDict',
    'ConnectorInputArgs',
    'ConnectorInputArgsDict',
    'ConnectorTagArgs',
    'ConnectorTagArgsDict',
    'DashboardActionlistChartChartItemArgs',
    'DashboardActionlistChartChartItemArgsDict',
    'DashboardActionlistChartChartItemQueryFilterAssetArgs',
    'DashboardActionlistChartChartItemQueryFilterAssetArgsDict',
    'DashboardActionlistChartChartItemQueryFilterAttributeArgs',
    'DashboardActionlistChartChartItemQueryFilterAttributeArgsDict',
    'DashboardActionlistChartThresholdArgs',
    'DashboardActionlistChartThresholdArgsDict',
    'DashboardActionlistChartValueMappingArgs',
    'DashboardActionlistChartValueMappingArgsDict',
    'DashboardAlerteventsChartChartItemArgs',
    'DashboardAlerteventsChartChartItemArgsDict',
    'DashboardAlerteventsChartChartItemQueryFilterAssetArgs',
    'DashboardAlerteventsChartChartItemQueryFilterAssetArgsDict',
    'DashboardAlerteventsChartChartItemQueryFilterAttributeArgs',
    'DashboardAlerteventsChartChartItemQueryFilterAttributeArgsDict',
    'DashboardAlerteventsChartThresholdArgs',
    'DashboardAlerteventsChartThresholdArgsDict',
    'DashboardAlerteventsChartValueMappingArgs',
    'DashboardAlerteventsChartValueMappingArgsDict',
    'DashboardAlertlistChartChartItemArgs',
    'DashboardAlertlistChartChartItemArgsDict',
    'DashboardAlertlistChartChartItemQueryFilterAssetArgs',
    'DashboardAlertlistChartChartItemQueryFilterAssetArgsDict',
    'DashboardAlertlistChartChartItemQueryFilterAttributeArgs',
    'DashboardAlertlistChartChartItemQueryFilterAttributeArgsDict',
    'DashboardAlertlistChartThresholdArgs',
    'DashboardAlertlistChartThresholdArgsDict',
    'DashboardAlertlistChartValueMappingArgs',
    'DashboardAlertlistChartValueMappingArgsDict',
    'DashboardAssetlistChartChartItemArgs',
    'DashboardAssetlistChartChartItemArgsDict',
    'DashboardAssetlistChartChartItemQueryFilterAssetArgs',
    'DashboardAssetlistChartChartItemQueryFilterAssetArgsDict',
    'DashboardAssetlistChartChartItemQueryFilterAttributeArgs',
    'DashboardAssetlistChartChartItemQueryFilterAttributeArgsDict',
    'DashboardAssetlistChartThresholdArgs',
    'DashboardAssetlistChartThresholdArgsDict',
    'DashboardAssetlistChartValueMappingArgs',
    'DashboardAssetlistChartValueMappingArgsDict',
    'DashboardBarChartChartItemArgs',
    'DashboardBarChartChartItemArgsDict',
    'DashboardBarChartChartItemQueryFilterAssetArgs',
    'DashboardBarChartChartItemQueryFilterAssetArgsDict',
    'DashboardBarChartChartItemQueryFilterAttributeArgs',
    'DashboardBarChartChartItemQueryFilterAttributeArgsDict',
    'DashboardBarChartThresholdArgs',
    'DashboardBarChartThresholdArgsDict',
    'DashboardBarChartValueMappingArgs',
    'DashboardBarChartValueMappingArgsDict',
    'DashboardBargaugeChartChartItemArgs',
    'DashboardBargaugeChartChartItemArgsDict',
    'DashboardBargaugeChartChartItemQueryFilterAssetArgs',
    'DashboardBargaugeChartChartItemQueryFilterAssetArgsDict',
    'DashboardBargaugeChartChartItemQueryFilterAttributeArgs',
    'DashboardBargaugeChartChartItemQueryFilterAttributeArgsDict',
    'DashboardBargaugeChartThresholdArgs',
    'DashboardBargaugeChartThresholdArgsDict',
    'DashboardBargaugeChartValueMappingArgs',
    'DashboardBargaugeChartValueMappingArgsDict',
    'DashboardCommandlistChartChartItemArgs',
    'DashboardCommandlistChartChartItemArgsDict',
    'DashboardCommandlistChartChartItemQueryFilterAssetArgs',
    'DashboardCommandlistChartChartItemQueryFilterAssetArgsDict',
    'DashboardCommandlistChartChartItemQueryFilterAttributeArgs',
    'DashboardCommandlistChartChartItemQueryFilterAttributeArgsDict',
    'DashboardCommandlistChartThresholdArgs',
    'DashboardCommandlistChartThresholdArgsDict',
    'DashboardCommandlistChartValueMappingArgs',
    'DashboardCommandlistChartValueMappingArgsDict',
    'DashboardGaugeChartChartItemArgs',
    'DashboardGaugeChartChartItemArgsDict',
    'DashboardGaugeChartChartItemQueryFilterAssetArgs',
    'DashboardGaugeChartChartItemQueryFilterAssetArgsDict',
    'DashboardGaugeChartChartItemQueryFilterAttributeArgs',
    'DashboardGaugeChartChartItemQueryFilterAttributeArgsDict',
    'DashboardGaugeChartThresholdArgs',
    'DashboardGaugeChartThresholdArgsDict',
    'DashboardGaugeChartValueMappingArgs',
    'DashboardGaugeChartValueMappingArgsDict',
    'DashboardHistogramChartChartItemArgs',
    'DashboardHistogramChartChartItemArgsDict',
    'DashboardHistogramChartChartItemQueryFilterAssetArgs',
    'DashboardHistogramChartChartItemQueryFilterAssetArgsDict',
    'DashboardHistogramChartChartItemQueryFilterAttributeArgs',
    'DashboardHistogramChartChartItemQueryFilterAttributeArgsDict',
    'DashboardHistogramChartThresholdArgs',
    'DashboardHistogramChartThresholdArgsDict',
    'DashboardHistogramChartValueMappingArgs',
    'DashboardHistogramChartValueMappingArgsDict',
    'DashboardImageChartChartItemArgs',
    'DashboardImageChartChartItemArgsDict',
    'DashboardImageChartChartItemQueryFilterAssetArgs',
    'DashboardImageChartChartItemQueryFilterAssetArgsDict',
    'DashboardImageChartChartItemQueryFilterAttributeArgs',
    'DashboardImageChartChartItemQueryFilterAttributeArgsDict',
    'DashboardImageChartThresholdArgs',
    'DashboardImageChartThresholdArgsDict',
    'DashboardImageChartValueMappingArgs',
    'DashboardImageChartValueMappingArgsDict',
    'DashboardRelatedAssetArgs',
    'DashboardRelatedAssetArgsDict',
    'DashboardStatChartChartItemArgs',
    'DashboardStatChartChartItemArgsDict',
    'DashboardStatChartChartItemQueryFilterAssetArgs',
    'DashboardStatChartChartItemQueryFilterAssetArgsDict',
    'DashboardStatChartChartItemQueryFilterAttributeArgs',
    'DashboardStatChartChartItemQueryFilterAttributeArgsDict',
    'DashboardStatChartThresholdArgs',
    'DashboardStatChartThresholdArgsDict',
    'DashboardStatChartValueMappingArgs',
    'DashboardStatChartValueMappingArgsDict',
    'DashboardTableChartChartItemArgs',
    'DashboardTableChartChartItemArgsDict',
    'DashboardTableChartChartItemQueryFilterAssetArgs',
    'DashboardTableChartChartItemQueryFilterAssetArgsDict',
    'DashboardTableChartChartItemQueryFilterAttributeArgs',
    'DashboardTableChartChartItemQueryFilterAttributeArgsDict',
    'DashboardTableChartThresholdArgs',
    'DashboardTableChartThresholdArgsDict',
    'DashboardTableChartValueMappingArgs',
    'DashboardTableChartValueMappingArgsDict',
    'DashboardTagArgs',
    'DashboardTagArgsDict',
    'DashboardTextChartChartItemArgs',
    'DashboardTextChartChartItemArgsDict',
    'DashboardTextChartChartItemQueryFilterAssetArgs',
    'DashboardTextChartChartItemQueryFilterAssetArgsDict',
    'DashboardTextChartChartItemQueryFilterAttributeArgs',
    'DashboardTextChartChartItemQueryFilterAttributeArgsDict',
    'DashboardTextChartThresholdArgs',
    'DashboardTextChartThresholdArgsDict',
    'DashboardTextChartValueMappingArgs',
    'DashboardTextChartValueMappingArgsDict',
    'DashboardTimeseriesChartChartItemArgs',
    'DashboardTimeseriesChartChartItemArgsDict',
    'DashboardTimeseriesChartChartItemQueryFilterAssetArgs',
    'DashboardTimeseriesChartChartItemQueryFilterAssetArgsDict',
    'DashboardTimeseriesChartChartItemQueryFilterAttributeArgs',
    'DashboardTimeseriesChartChartItemQueryFilterAttributeArgsDict',
    'DashboardTimeseriesChartThresholdArgs',
    'DashboardTimeseriesChartThresholdArgsDict',
    'DashboardTimeseriesChartValueMappingArgs',
    'DashboardTimeseriesChartValueMappingArgsDict',
    'ExternalGridKindArgs',
    'ExternalGridKindArgsDict',
    'ExternalGridTagArgs',
    'ExternalGridTagArgsDict',
    'FileRelatedAssetArgs',
    'FileRelatedAssetArgsDict',
    'FileTagArgs',
    'FileTagArgsDict',
    'FunctionFunctionItemArgs',
    'FunctionFunctionItemArgsDict',
    'FunctionFunctionItemQueryFilterAssetArgs',
    'FunctionFunctionItemQueryFilterAssetArgsDict',
    'FunctionFunctionItemQueryFilterAttributeArgs',
    'FunctionFunctionItemQueryFilterAttributeArgsDict',
    'FunctionTagArgs',
    'FunctionTagArgsDict',
    'FunctionTargetAssetArgs',
    'FunctionTargetAssetArgsDict',
    'FunctionTargetAttributeArgs',
    'FunctionTargetAttributeArgsDict',
    'GeneratorActivePowerArgs',
    'GeneratorActivePowerArgsDict',
    'GeneratorCo2CoefficientArgs',
    'GeneratorCo2CoefficientArgsDict',
    'GeneratorDailyEmissionAvoidedArgs',
    'GeneratorDailyEmissionAvoidedArgsDict',
    'GeneratorDailyEnergyArgs',
    'GeneratorDailyEnergyArgsDict',
    'GeneratorKindArgs',
    'GeneratorKindArgsDict',
    'GeneratorReactivePowerArgs',
    'GeneratorReactivePowerArgsDict',
    'GeneratorTagArgs',
    'GeneratorTagArgsDict',
    'GridKindArgs',
    'GridKindArgsDict',
    'GridTagArgs',
    'GridTagArgsDict',
    'InverterAccumulatedEnergyArgs',
    'InverterAccumulatedEnergyArgsDict',
    'InverterActivePowerArgs',
    'InverterActivePowerArgsDict',
    'InverterDailyEnergyArgs',
    'InverterDailyEnergyArgsDict',
    'InverterEnergyMeasurementTypeArgs',
    'InverterEnergyMeasurementTypeArgsDict',
    'InverterKindArgs',
    'InverterKindArgsDict',
    'InverterMakeArgs',
    'InverterMakeArgsDict',
    'InverterMaxActivePowerArgs',
    'InverterMaxActivePowerArgsDict',
    'InverterModelArgs',
    'InverterModelArgsDict',
    'InverterRawDailyEnergyArgs',
    'InverterRawDailyEnergyArgsDict',
    'InverterSerialNumberArgs',
    'InverterSerialNumberArgsDict',
    'InverterTagArgs',
    'InverterTagArgsDict',
    'InverterTemperatureArgs',
    'InverterTemperatureArgsDict',
    'LineAbsorptivityArgs',
    'LineAbsorptivityArgsDict',
    'LineActivePowerArgs',
    'LineActivePowerArgsDict',
    'LineActivePowerEndArgs',
    'LineActivePowerEndArgsDict',
    'LineAmpacityArgs',
    'LineAmpacityArgsDict',
    'LineAtmosphereArgs',
    'LineAtmosphereArgsDict',
    'LineCapacitanceArgs',
    'LineCapacitanceArgsDict',
    'LineConductanceArgs',
    'LineConductanceArgsDict',
    'LineCurrentArgs',
    'LineCurrentArgsDict',
    'LineCurrentRArgs',
    'LineCurrentRArgsDict',
    'LineCurrentTArgs',
    'LineCurrentTArgsDict',
    'LineDiameterArgs',
    'LineDiameterArgsDict',
    'LineEmissivityArgs',
    'LineEmissivityArgsDict',
    'LineEnergyArgs',
    'LineEnergyArgsDict',
    'LineKindArgs',
    'LineKindArgsDict',
    'LineLengthArgs',
    'LineLengthArgsDict',
    'LineMaxTemperatureArgs',
    'LineMaxTemperatureArgsDict',
    'LineMaximumAllowedCurrentArgs',
    'LineMaximumAllowedCurrentArgsDict',
    'LineMaximumAllowedPowerArgs',
    'LineMaximumAllowedPowerArgsDict',
    'LineMaximumAllowedTemperatureArgs',
    'LineMaximumAllowedTemperatureArgsDict',
    'LineMaximumAllowedTemperatureLteArgs',
    'LineMaximumAllowedTemperatureLteArgsDict',
    'LineMaximumAllowedTemperatureSteArgs',
    'LineMaximumAllowedTemperatureSteArgsDict',
    'LineNumberOfConductorsArgs',
    'LineNumberOfConductorsArgsDict',
    'LineReactanceArgs',
    'LineReactanceArgsDict',
    'LineReactivePowerArgs',
    'LineReactivePowerArgsDict',
    'LineReferenceResistanceArgs',
    'LineReferenceResistanceArgsDict',
    'LineResistanceArgs',
    'LineResistanceArgsDict',
    'LineSafetyMarginForPowerArgs',
    'LineSafetyMarginForPowerArgsDict',
    'LineSusceptanceArgs',
    'LineSusceptanceArgsDict',
    'LineTagArgs',
    'LineTagArgsDict',
    'LineTemperatureCoeffResistanceArgs',
    'LineTemperatureCoeffResistanceArgsDict',
    'LineVoltageRArgs',
    'LineVoltageRArgsDict',
    'LineVoltageStArgs',
    'LineVoltageStArgsDict',
    'LineVoltageTrArgs',
    'LineVoltageTrArgsDict',
    'SegmentAltitudeArgs',
    'SegmentAltitudeArgsDict',
    'SegmentAzimuthArgs',
    'SegmentAzimuthArgsDict',
    'SegmentCumulativeDistanceArgs',
    'SegmentCumulativeDistanceArgsDict',
    'SegmentKindArgs',
    'SegmentKindArgsDict',
    'SegmentTagArgs',
    'SegmentTagArgsDict',
    'SegmentTemperatureArgs',
    'SegmentTemperatureArgsDict',
    'SegmentWindDirectionArgs',
    'SegmentWindDirectionArgsDict',
    'SegmentWindSpeedArgs',
    'SegmentWindSpeedArgsDict',
    'ServerConfigArgs',
    'ServerConfigArgsDict',
    'ServerEnvVarArgs',
    'ServerEnvVarArgsDict',
    'ServerPortArgs',
    'ServerPortArgsDict',
    'ServerTagArgs',
    'ServerTagArgsDict',
    'SlackLineKindArgs',
    'SlackLineKindArgsDict',
    'SlackLineTagArgs',
    'SlackLineTagArgsDict',
]

MYPY = False

if not MYPY:
    class ActionAssetArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        asset id
        """
        name: pulumi.Input[str]
        """
        asset name
        """
elif False:
    ActionAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAssetArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: asset id
        :param pulumi.Input[str] name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        asset name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ActionSetpointArgsDict(TypedDict):
        attribute: pulumi.Input['ActionSetpointAttributeArgsDict']
        """
        the target attribute of the setpoint which should also be an attribute of the specified asset
        """
        value: pulumi.Input[str]
        """
        JSON encoded scalar value
        """
        id: NotRequired[pulumi.Input[str]]
        """
        setpoint Id
        """
        name: NotRequired[pulumi.Input[str]]
        """
        setpoint name
        """
elif False:
    ActionSetpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSetpointArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input['ActionSetpointAttributeArgs'],
                 value: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ActionSetpointAttributeArgs'] attribute: the target attribute of the setpoint which should also be an attribute of the specified asset
        :param pulumi.Input[str] value: JSON encoded scalar value
        :param pulumi.Input[str] id: setpoint Id
        :param pulumi.Input[str] name: setpoint name
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input['ActionSetpointAttributeArgs']:
        """
        the target attribute of the setpoint which should also be an attribute of the specified asset
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input['ActionSetpointAttributeArgs']):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        JSON encoded scalar value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        setpoint Id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        setpoint name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ActionSetpointAttributeArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        attribute id
        """
        name: pulumi.Input[str]
        """
        attribute name
        """
elif False:
    ActionSetpointAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSetpointAttributeArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: attribute id
        :param pulumi.Input[str] name: attribute name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        attribute id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        attribute name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AlertAlertItemArgsDict(TypedDict):
        expression: pulumi.Input[str]
        """
        how the expression is shown (i.e 'A * 2')
        """
        expression_plain: pulumi.Input[str]
        """
        actual mongo query containing the expression
        """
        query_filter_asset: pulumi.Input['AlertAlertItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['AlertAlertItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_group_function: pulumi.Input[str]
        """
        function used to aggregate data
        """
        query_group_unit: pulumi.Input[str]
        """
        time window to apply the aggregation
        """
        query_plain: pulumi.Input[str]
        """
        actual mongo query
        """
        ref_id: pulumi.Input[str]
        """
        identifier of the variable (i.e 'A')
        """
        type: pulumi.Input[str]
        """
        either QUERY or EXPRESSION
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the function item
        """
elif False:
    AlertAlertItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertAlertItemArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['AlertAlertItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['AlertAlertItemQueryFilterAttributeArgs'],
                 query_group_function: pulumi.Input[str],
                 query_group_unit: pulumi.Input[str],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: how the expression is shown (i.e 'A * 2')
        :param pulumi.Input[str] expression_plain: actual mongo query containing the expression
        :param pulumi.Input['AlertAlertItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['AlertAlertItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        :param pulumi.Input[str] query_group_function: function used to aggregate data
        :param pulumi.Input[str] query_group_unit: time window to apply the aggregation
        :param pulumi.Input[str] query_plain: actual mongo query
        :param pulumi.Input[str] ref_id: identifier of the variable (i.e 'A')
        :param pulumi.Input[str] type: either QUERY or EXPRESSION
        :param pulumi.Input[str] id: Id of the function item
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_group_function", query_group_function)
        pulumi.set(__self__, "query_group_unit", query_group_unit)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        how the expression is shown (i.e 'A * 2')
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        """
        actual mongo query containing the expression
        """
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['AlertAlertItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['AlertAlertItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['AlertAlertItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['AlertAlertItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> pulumi.Input[str]:
        """
        function used to aggregate data
        """
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> pulumi.Input[str]:
        """
        time window to apply the aggregation
        """
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        """
        actual mongo query
        """
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        """
        identifier of the variable (i.e 'A')
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        either QUERY or EXPRESSION
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the function item
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class AlertAlertItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    AlertAlertItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertAlertItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AlertAlertItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    AlertAlertItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertAlertItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AlertRelatedAssetArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        asset id
        """
        name: pulumi.Input[str]
        """
        asset name
        """
elif False:
    AlertRelatedAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertRelatedAssetArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: asset id
        :param pulumi.Input[str] name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        asset name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AlertTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    AlertTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AlertThresholdArgsDict(TypedDict):
        status: pulumi.Input[str]
        """
        [alert|warning|no_alert] status value for the threshold
        """
        value: pulumi.Input[float]
        """
        value to be considered to compare
        """
        status_text: NotRequired[pulumi.Input[str]]
        """
        optional custom value to be displayed in the platform.
        """
elif False:
    AlertThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertThresholdArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 value: pulumi.Input[float],
                 status_text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: [alert|warning|no_alert] status value for the threshold
        :param pulumi.Input[float] value: value to be considered to compare
        :param pulumi.Input[str] status_text: optional custom value to be displayed in the platform.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "value", value)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        [alert|warning|no_alert] status value for the threshold
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        value to be considered to compare
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[pulumi.Input[str]]:
        """
        optional custom value to be displayed in the platform.
        """
        return pulumi.get(self, "status_text")

    @status_text.setter
    def status_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_text", value)


if not MYPY:
    class AlgorithmInputArgsDict(TypedDict):
        name: pulumi.Input[str]
        type: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
        multiple: NotRequired[pulumi.Input[bool]]
        required: NotRequired[pulumi.Input[bool]]
        sensitive: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    AlgorithmInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlgorithmInputArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 multiple: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 sensitive: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def multiple(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multiple")

    @multiple.setter
    def multiple(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multiple", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sensitive")

    @sensitive.setter
    def sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sensitive", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AlgorithmTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    AlgorithmTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlgorithmTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AssetKindArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        kind id
        """
        name: pulumi.Input[str]
        """
        kind name
        """
elif False:
    AssetKindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssetKindArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: kind id
        :param pulumi.Input[str] name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        kind name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AssetRelationAssetArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        asset id
        """
        name: pulumi.Input[str]
        """
        asset name
        """
elif False:
    AssetRelationAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssetRelationAssetArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: asset id
        :param pulumi.Input[str] name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        asset name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AssetRelationRelatedAssetArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        asset id
        """
        name: pulumi.Input[str]
        """
        asset name
        """
elif False:
    AssetRelationRelatedAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssetRelationRelatedAssetArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: asset id
        :param pulumi.Input[str] name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        asset name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AssetRelationRelatedAssetKindArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        kind id
        """
        name: pulumi.Input[str]
        """
        kind name
        """
elif False:
    AssetRelationRelatedAssetKindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssetRelationRelatedAssetKindArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: kind id
        :param pulumi.Input[str] name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        kind name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AssetTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    AssetTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssetTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class BusKindArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        kind id
        """
        name: pulumi.Input[str]
        """
        kind name
        """
elif False:
    BusKindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BusKindArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: kind id
        :param pulumi.Input[str] name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        kind name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class BusNominalVoltageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    BusNominalVoltageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BusNominalVoltageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class BusTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    BusTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BusTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class CommandActionArgsDict(TypedDict):
        asset: pulumi.Input['CommandActionAssetArgsDict']
        """
        asset associated with the action (to be deprecated)
        """
        id: pulumi.Input[str]
        """
        action Id
        """
        name: pulumi.Input[str]
        """
        setpoint name
        """
elif False:
    CommandActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CommandActionArgs:
    def __init__(__self__, *,
                 asset: pulumi.Input['CommandActionAssetArgs'],
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input['CommandActionAssetArgs'] asset: asset associated with the action (to be deprecated)
        :param pulumi.Input[str] id: action Id
        :param pulumi.Input[str] name: setpoint name
        """
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def asset(self) -> pulumi.Input['CommandActionAssetArgs']:
        """
        asset associated with the action (to be deprecated)
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: pulumi.Input['CommandActionAssetArgs']):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        action Id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        setpoint name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class CommandActionAssetArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        asset id
        """
        name: pulumi.Input[str]
        """
        asset name
        """
elif False:
    CommandActionAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CommandActionAssetArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: asset id
        :param pulumi.Input[str] name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        asset name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ComponentInputArgsDict(TypedDict):
        name: pulumi.Input[str]
        type: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
        multiple: NotRequired[pulumi.Input[bool]]
        required: NotRequired[pulumi.Input[bool]]
        sensitive: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ComponentInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentInputArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 multiple: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 sensitive: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def multiple(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multiple")

    @multiple.setter
    def multiple(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multiple", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sensitive")

    @sensitive.setter
    def sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sensitive", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComponentRoutineConfigArgsDict(TypedDict):
        name: pulumi.Input[str]
        type: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
        multiple: NotRequired[pulumi.Input[bool]]
        required: NotRequired[pulumi.Input[bool]]
        sensitive: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ComponentRoutineConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentRoutineConfigArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 multiple: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 sensitive: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def multiple(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multiple")

    @multiple.setter
    def multiple(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multiple", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sensitive")

    @sensitive.setter
    def sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sensitive", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComponentRoutineInputArgsDict(TypedDict):
        name: pulumi.Input[str]
        value_type: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
        multiple: NotRequired[pulumi.Input[bool]]
        required: NotRequired[pulumi.Input[bool]]
        type: NotRequired[pulumi.Input[str]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComponentRoutineInputValueArgsDict']]]]
elif False:
    ComponentRoutineInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentRoutineInputArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 multiple: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentRoutineInputValueArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value_type", value_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def multiple(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multiple")

    @multiple.setter
    def multiple(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multiple", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentRoutineInputValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentRoutineInputValueArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ComponentRoutineInputValueArgsDict(TypedDict):
        asset: pulumi.Input[str]
        attribute: pulumi.Input[str]
elif False:
    ComponentRoutineInputValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentRoutineInputValueArgs:
    def __init__(__self__, *,
                 asset: pulumi.Input[str],
                 attribute: pulumi.Input[str]):
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "attribute", attribute)

    @property
    @pulumi.getter
    def asset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: pulumi.Input[str]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)


if not MYPY:
    class ComponentRoutineOutputArgsDict(TypedDict):
        name: pulumi.Input[str]
        value_type: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
        multiple: NotRequired[pulumi.Input[bool]]
        required: NotRequired[pulumi.Input[bool]]
        type: NotRequired[pulumi.Input[str]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComponentRoutineOutputValueArgsDict']]]]
elif False:
    ComponentRoutineOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentRoutineOutputArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 multiple: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentRoutineOutputValueArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value_type", value_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def multiple(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multiple")

    @multiple.setter
    def multiple(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multiple", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentRoutineOutputValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentRoutineOutputValueArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ComponentRoutineOutputValueArgsDict(TypedDict):
        asset: pulumi.Input[str]
        attribute: pulumi.Input[str]
elif False:
    ComponentRoutineOutputValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentRoutineOutputValueArgs:
    def __init__(__self__, *,
                 asset: pulumi.Input[str],
                 attribute: pulumi.Input[str]):
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "attribute", attribute)

    @property
    @pulumi.getter
    def asset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: pulumi.Input[str]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)


if not MYPY:
    class ComponentTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    ComponentTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ConnectorInputArgsDict(TypedDict):
        name: pulumi.Input[str]
        type: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
        multiple: NotRequired[pulumi.Input[bool]]
        required: NotRequired[pulumi.Input[bool]]
        sensitive: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ConnectorInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectorInputArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 multiple: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 sensitive: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def multiple(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multiple")

    @multiple.setter
    def multiple(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multiple", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sensitive")

    @sensitive.setter
    def sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sensitive", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ConnectorTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    ConnectorTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectorTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardActionlistChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardActionlistChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardActionlistChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardActionlistChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardActionlistChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardActionlistChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardActionlistChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardActionlistChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardActionlistChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardActionlistChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardActionlistChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardActionlistChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardActionlistChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardActionlistChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardActionlistChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardActionlistChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardActionlistChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardActionlistChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardActionlistChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardActionlistChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardActionlistChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardActionlistChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardActionlistChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardActionlistChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardActionlistChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardAlerteventsChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardAlerteventsChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardAlerteventsChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardAlerteventsChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAlerteventsChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardAlerteventsChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardAlerteventsChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardAlerteventsChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardAlerteventsChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardAlerteventsChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardAlerteventsChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardAlerteventsChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardAlerteventsChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardAlerteventsChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardAlerteventsChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAlerteventsChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardAlerteventsChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardAlerteventsChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAlerteventsChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardAlerteventsChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardAlerteventsChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAlerteventsChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardAlerteventsChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardAlerteventsChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAlerteventsChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardAlertlistChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardAlertlistChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardAlertlistChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardAlertlistChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAlertlistChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardAlertlistChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardAlertlistChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardAlertlistChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardAlertlistChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardAlertlistChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardAlertlistChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardAlertlistChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardAlertlistChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardAlertlistChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardAlertlistChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAlertlistChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardAlertlistChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardAlertlistChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAlertlistChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardAlertlistChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardAlertlistChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAlertlistChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardAlertlistChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardAlertlistChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAlertlistChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardAssetlistChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardAssetlistChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardAssetlistChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardAssetlistChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAssetlistChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardAssetlistChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardAssetlistChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardAssetlistChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardAssetlistChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardAssetlistChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardAssetlistChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardAssetlistChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardAssetlistChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardAssetlistChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardAssetlistChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAssetlistChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardAssetlistChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardAssetlistChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAssetlistChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardAssetlistChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardAssetlistChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAssetlistChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardAssetlistChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardAssetlistChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardAssetlistChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardBarChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardBarChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardBarChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardBarChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardBarChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardBarChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardBarChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardBarChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardBarChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardBarChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardBarChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardBarChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardBarChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardBarChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardBarChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardBarChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardBarChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardBarChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardBarChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardBarChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardBarChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardBarChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardBarChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardBarChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardBarChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardBargaugeChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardBargaugeChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardBargaugeChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardBargaugeChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardBargaugeChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardBargaugeChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardBargaugeChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardBargaugeChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardBargaugeChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardBargaugeChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardBargaugeChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardBargaugeChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardBargaugeChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardBargaugeChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardBargaugeChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardBargaugeChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardBargaugeChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardBargaugeChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardBargaugeChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardBargaugeChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardBargaugeChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardBargaugeChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardBargaugeChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardBargaugeChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardBargaugeChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardCommandlistChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardCommandlistChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardCommandlistChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardCommandlistChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardCommandlistChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardCommandlistChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardCommandlistChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardCommandlistChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardCommandlistChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardCommandlistChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardCommandlistChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardCommandlistChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardCommandlistChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardCommandlistChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardCommandlistChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardCommandlistChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardCommandlistChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardCommandlistChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardCommandlistChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardCommandlistChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardCommandlistChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardCommandlistChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardCommandlistChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardCommandlistChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardCommandlistChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardGaugeChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardGaugeChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardGaugeChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardGaugeChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardGaugeChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardGaugeChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardGaugeChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardGaugeChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardGaugeChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardGaugeChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardGaugeChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardGaugeChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardGaugeChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardGaugeChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardGaugeChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardGaugeChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardGaugeChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardGaugeChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardGaugeChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardGaugeChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardGaugeChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardGaugeChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardGaugeChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardGaugeChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardGaugeChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardHistogramChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardHistogramChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardHistogramChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardHistogramChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardHistogramChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardHistogramChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardHistogramChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardHistogramChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardHistogramChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardHistogramChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardHistogramChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardHistogramChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardHistogramChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardHistogramChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardHistogramChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardHistogramChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardHistogramChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardHistogramChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardHistogramChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardHistogramChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardHistogramChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardHistogramChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardHistogramChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardHistogramChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardHistogramChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardImageChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardImageChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardImageChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardImageChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardImageChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardImageChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardImageChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardImageChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardImageChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardImageChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardImageChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardImageChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardImageChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardImageChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardImageChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardImageChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardImageChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardImageChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardImageChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardImageChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardImageChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardImageChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardImageChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardImageChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardImageChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardRelatedAssetArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        asset id
        """
        name: pulumi.Input[str]
        """
        asset name
        """
elif False:
    DashboardRelatedAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardRelatedAssetArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: asset id
        :param pulumi.Input[str] name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        asset name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardStatChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardStatChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardStatChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardStatChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardStatChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardStatChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardStatChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardStatChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardStatChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardStatChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardStatChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardStatChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardStatChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardStatChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardStatChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardStatChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardStatChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardStatChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardStatChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardStatChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardStatChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardStatChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardStatChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardStatChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardStatChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardTableChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardTableChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardTableChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardTableChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTableChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardTableChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardTableChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardTableChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardTableChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardTableChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardTableChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardTableChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardTableChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardTableChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardTableChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTableChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardTableChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardTableChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTableChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardTableChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardTableChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTableChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardTableChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardTableChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTableChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    DashboardTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardTextChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardTextChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardTextChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardTextChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTextChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardTextChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardTextChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardTextChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardTextChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardTextChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardTextChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardTextChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardTextChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardTextChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardTextChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTextChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardTextChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardTextChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTextChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardTextChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardTextChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTextChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardTextChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardTextChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTextChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardTimeseriesChartChartItemArgsDict(TypedDict):
        color: pulumi.Input[str]
        expression_plain: pulumi.Input[str]
        query_filter_asset: pulumi.Input['DashboardTimeseriesChartChartItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['DashboardTimeseriesChartChartItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_plain: pulumi.Input[str]
        ref_id: pulumi.Input[str]
        type: pulumi.Input[str]
        hidden: NotRequired[pulumi.Input[bool]]
        label: NotRequired[pulumi.Input[str]]
        query_group_function: NotRequired[pulumi.Input[str]]
        query_group_unit: NotRequired[pulumi.Input[str]]
        query_limit: NotRequired[pulumi.Input[int]]
        query_sort_direction: NotRequired[pulumi.Input[int]]
elif False:
    DashboardTimeseriesChartChartItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTimeseriesChartChartItemArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['DashboardTimeseriesChartChartItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['DashboardTimeseriesChartChartItemQueryFilterAttributeArgs'],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 query_group_function: Optional[pulumi.Input[str]] = None,
                 query_group_unit: Optional[pulumi.Input[str]] = None,
                 query_limit: Optional[pulumi.Input[int]] = None,
                 query_sort_direction: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DashboardTimeseriesChartChartItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['DashboardTimeseriesChartChartItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['DashboardTimeseriesChartChartItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['DashboardTimeseriesChartChartItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['DashboardTimeseriesChartChartItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['DashboardTimeseriesChartChartItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_limit")

    @query_limit.setter
    def query_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_limit", value)

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_sort_direction")

    @query_sort_direction.setter
    def query_sort_direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_sort_direction", value)


if not MYPY:
    class DashboardTimeseriesChartChartItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardTimeseriesChartChartItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTimeseriesChartChartItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardTimeseriesChartChartItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    DashboardTimeseriesChartChartItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTimeseriesChartChartItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardTimeseriesChartThresholdArgsDict(TypedDict):
        color: pulumi.Input[str]
        display_text: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    DashboardTimeseriesChartThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTimeseriesChartThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 display_text: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DashboardTimeseriesChartValueMappingArgsDict(TypedDict):
        display_text: pulumi.Input[str]
        match_value: pulumi.Input[str]
        order: pulumi.Input[int]
        type: pulumi.Input[str]
elif False:
    DashboardTimeseriesChartValueMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardTimeseriesChartValueMappingArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 match_value: pulumi.Input[str],
                 order: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ExternalGridKindArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        kind id
        """
        name: pulumi.Input[str]
        """
        kind name
        """
elif False:
    ExternalGridKindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalGridKindArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: kind id
        :param pulumi.Input[str] name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        kind name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ExternalGridTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    ExternalGridTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalGridTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class FileRelatedAssetArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        asset id
        """
        name: pulumi.Input[str]
        """
        asset name
        """
elif False:
    FileRelatedAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FileRelatedAssetArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: asset id
        :param pulumi.Input[str] name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        asset name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class FileTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    FileTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FileTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class FunctionFunctionItemArgsDict(TypedDict):
        expression: pulumi.Input[str]
        """
        how the expression is shown (i.e 'A * 2')
        """
        expression_plain: pulumi.Input[str]
        """
        actual mongo query containing the expression
        """
        query_filter_asset: pulumi.Input['FunctionFunctionItemQueryFilterAssetArgsDict']
        """
        Asset filter
        """
        query_filter_attribute: pulumi.Input['FunctionFunctionItemQueryFilterAttributeArgsDict']
        """
        Attribute filter
        """
        query_group_function: pulumi.Input[str]
        """
        function used to aggregate data
        """
        query_group_unit: pulumi.Input[str]
        """
        time window to apply the aggregation
        """
        query_plain: pulumi.Input[str]
        """
        actual mongo query
        """
        ref_id: pulumi.Input[str]
        """
        identifier of the variable (i.e 'A')
        """
        type: pulumi.Input[str]
        """
        either QUERY or EXPRESSION
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the function item
        """
elif False:
    FunctionFunctionItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionFunctionItemArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 expression_plain: pulumi.Input[str],
                 query_filter_asset: pulumi.Input['FunctionFunctionItemQueryFilterAssetArgs'],
                 query_filter_attribute: pulumi.Input['FunctionFunctionItemQueryFilterAttributeArgs'],
                 query_group_function: pulumi.Input[str],
                 query_group_unit: pulumi.Input[str],
                 query_plain: pulumi.Input[str],
                 ref_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: how the expression is shown (i.e 'A * 2')
        :param pulumi.Input[str] expression_plain: actual mongo query containing the expression
        :param pulumi.Input['FunctionFunctionItemQueryFilterAssetArgs'] query_filter_asset: Asset filter
        :param pulumi.Input['FunctionFunctionItemQueryFilterAttributeArgs'] query_filter_attribute: Attribute filter
        :param pulumi.Input[str] query_group_function: function used to aggregate data
        :param pulumi.Input[str] query_group_unit: time window to apply the aggregation
        :param pulumi.Input[str] query_plain: actual mongo query
        :param pulumi.Input[str] ref_id: identifier of the variable (i.e 'A')
        :param pulumi.Input[str] type: either QUERY or EXPRESSION
        :param pulumi.Input[str] id: Id of the function item
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_group_function", query_group_function)
        pulumi.set(__self__, "query_group_unit", query_group_unit)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        how the expression is shown (i.e 'A * 2')
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> pulumi.Input[str]:
        """
        actual mongo query containing the expression
        """
        return pulumi.get(self, "expression_plain")

    @expression_plain.setter
    def expression_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_plain", value)

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> pulumi.Input['FunctionFunctionItemQueryFilterAssetArgs']:
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @query_filter_asset.setter
    def query_filter_asset(self, value: pulumi.Input['FunctionFunctionItemQueryFilterAssetArgs']):
        pulumi.set(self, "query_filter_asset", value)

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> pulumi.Input['FunctionFunctionItemQueryFilterAttributeArgs']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @query_filter_attribute.setter
    def query_filter_attribute(self, value: pulumi.Input['FunctionFunctionItemQueryFilterAttributeArgs']):
        pulumi.set(self, "query_filter_attribute", value)

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> pulumi.Input[str]:
        """
        function used to aggregate data
        """
        return pulumi.get(self, "query_group_function")

    @query_group_function.setter
    def query_group_function(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_group_function", value)

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> pulumi.Input[str]:
        """
        time window to apply the aggregation
        """
        return pulumi.get(self, "query_group_unit")

    @query_group_unit.setter
    def query_group_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_group_unit", value)

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> pulumi.Input[str]:
        """
        actual mongo query
        """
        return pulumi.get(self, "query_plain")

    @query_plain.setter
    def query_plain(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_plain", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        """
        identifier of the variable (i.e 'A')
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        either QUERY or EXPRESSION
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the function item
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class FunctionFunctionItemQueryFilterAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    FunctionFunctionItemQueryFilterAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionFunctionItemQueryFilterAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class FunctionFunctionItemQueryFilterAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of the resource
        """
elif False:
    FunctionFunctionItemQueryFilterAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionFunctionItemQueryFilterAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: type of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the resource
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class FunctionTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    FunctionTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class FunctionTargetAssetArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
elif False:
    FunctionTargetAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionTargetAssetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class FunctionTargetAttributeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of the resource
        """
elif False:
    FunctionTargetAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionTargetAttributeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: type of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the resource
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class GeneratorActivePowerArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    GeneratorActivePowerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GeneratorActivePowerArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class GeneratorCo2CoefficientArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    GeneratorCo2CoefficientArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GeneratorCo2CoefficientArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class GeneratorDailyEmissionAvoidedArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    GeneratorDailyEmissionAvoidedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GeneratorDailyEmissionAvoidedArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class GeneratorDailyEnergyArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    GeneratorDailyEnergyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GeneratorDailyEnergyArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class GeneratorKindArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        kind id
        """
        name: pulumi.Input[str]
        """
        kind name
        """
elif False:
    GeneratorKindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GeneratorKindArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: kind id
        :param pulumi.Input[str] name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        kind name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class GeneratorReactivePowerArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    GeneratorReactivePowerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GeneratorReactivePowerArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class GeneratorTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    GeneratorTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GeneratorTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class GridKindArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        kind id
        """
        name: pulumi.Input[str]
        """
        kind name
        """
elif False:
    GridKindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GridKindArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: kind id
        :param pulumi.Input[str] name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        kind name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class GridTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    GridTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GridTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class InverterAccumulatedEnergyArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    InverterAccumulatedEnergyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterAccumulatedEnergyArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class InverterActivePowerArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    InverterActivePowerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterActivePowerArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class InverterDailyEnergyArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    InverterDailyEnergyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterDailyEnergyArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class InverterEnergyMeasurementTypeArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    InverterEnergyMeasurementTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterEnergyMeasurementTypeArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class InverterKindArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        kind id
        """
        name: pulumi.Input[str]
        """
        kind name
        """
elif False:
    InverterKindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterKindArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: kind id
        :param pulumi.Input[str] name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        kind name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class InverterMakeArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    InverterMakeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterMakeArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class InverterMaxActivePowerArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    InverterMaxActivePowerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterMaxActivePowerArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class InverterModelArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    InverterModelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterModelArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class InverterRawDailyEnergyArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    InverterRawDailyEnergyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterRawDailyEnergyArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class InverterSerialNumberArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    InverterSerialNumberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterSerialNumberArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class InverterTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    InverterTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class InverterTemperatureArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    InverterTemperatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InverterTemperatureArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineAbsorptivityArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineAbsorptivityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineAbsorptivityArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineActivePowerArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineActivePowerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineActivePowerArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineActivePowerEndArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineActivePowerEndArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineActivePowerEndArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineAmpacityArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineAmpacityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineAmpacityArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineAtmosphereArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineAtmosphereArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineAtmosphereArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineCapacitanceArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineCapacitanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineCapacitanceArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineConductanceArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineConductanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineConductanceArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineCurrentArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineCurrentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineCurrentArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineCurrentRArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineCurrentRArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineCurrentRArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineCurrentTArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineCurrentTArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineCurrentTArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineDiameterArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineDiameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineDiameterArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineEmissivityArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineEmissivityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineEmissivityArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineEnergyArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineEnergyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineEnergyArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineKindArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        kind id
        """
        name: pulumi.Input[str]
        """
        kind name
        """
elif False:
    LineKindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineKindArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: kind id
        :param pulumi.Input[str] name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        kind name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class LineLengthArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineLengthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineLengthArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineMaxTemperatureArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineMaxTemperatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineMaxTemperatureArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineMaximumAllowedCurrentArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineMaximumAllowedCurrentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineMaximumAllowedCurrentArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineMaximumAllowedPowerArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineMaximumAllowedPowerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineMaximumAllowedPowerArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineMaximumAllowedTemperatureArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineMaximumAllowedTemperatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineMaximumAllowedTemperatureArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineMaximumAllowedTemperatureLteArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineMaximumAllowedTemperatureLteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineMaximumAllowedTemperatureLteArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineMaximumAllowedTemperatureSteArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineMaximumAllowedTemperatureSteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineMaximumAllowedTemperatureSteArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineNumberOfConductorsArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineNumberOfConductorsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineNumberOfConductorsArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineReactanceArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineReactanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineReactanceArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineReactivePowerArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineReactivePowerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineReactivePowerArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineReferenceResistanceArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineReferenceResistanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineReferenceResistanceArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineResistanceArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineResistanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineResistanceArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineSafetyMarginForPowerArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineSafetyMarginForPowerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineSafetyMarginForPowerArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineSusceptanceArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineSusceptanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineSusceptanceArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    LineTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class LineTemperatureCoeffResistanceArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineTemperatureCoeffResistanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineTemperatureCoeffResistanceArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineVoltageRArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineVoltageRArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineVoltageRArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineVoltageStArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineVoltageStArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineVoltageStArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class LineVoltageTrArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    LineVoltageTrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineVoltageTrArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class SegmentAltitudeArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    SegmentAltitudeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SegmentAltitudeArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class SegmentAzimuthArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    SegmentAzimuthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SegmentAzimuthArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class SegmentCumulativeDistanceArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        metadata value
        """
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    SegmentCumulativeDistanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SegmentCumulativeDistanceArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: metadata value
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class SegmentKindArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        kind id
        """
        name: pulumi.Input[str]
        """
        kind name
        """
elif False:
    SegmentKindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SegmentKindArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: kind id
        :param pulumi.Input[str] name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        kind name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class SegmentTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    SegmentTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SegmentTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class SegmentTemperatureArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    SegmentTemperatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SegmentTemperatureArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class SegmentWindDirectionArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    SegmentWindDirectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SegmentWindDirectionArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class SegmentWindSpeedArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[str]]
        """
        reference to the asset to be linked to
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the resource
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        unit of measure
        """
elif False:
    SegmentWindSpeedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SegmentWindSpeedArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] asset: reference to the asset to be linked to
        :param pulumi.Input[str] id: id of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[str] type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param pulumi.Input[str] unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class ServerConfigArgsDict(TypedDict):
        name: pulumi.Input[str]
        type: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
        multiple: NotRequired[pulumi.Input[bool]]
        required: NotRequired[pulumi.Input[bool]]
        sensitive: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    ServerConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerConfigArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 multiple: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 sensitive: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def multiple(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multiple")

    @multiple.setter
    def multiple(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multiple", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sensitive")

    @sensitive.setter
    def sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sensitive", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServerEnvVarArgsDict(TypedDict):
        name: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    ServerEnvVarArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerEnvVarArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ServerPortArgsDict(TypedDict):
        exposed_port: pulumi.Input[int]
        internal_port: pulumi.Input[int]
        name: pulumi.Input[str]
        protocol: pulumi.Input[str]
elif False:
    ServerPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerPortArgs:
    def __init__(__self__, *,
                 exposed_port: pulumi.Input[int],
                 internal_port: pulumi.Input[int],
                 name: pulumi.Input[str],
                 protocol: pulumi.Input[str]):
        pulumi.set(__self__, "exposed_port", exposed_port)
        pulumi.set(__self__, "internal_port", internal_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="exposedPort")
    def exposed_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "exposed_port")

    @exposed_port.setter
    def exposed_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "exposed_port", value)

    @property
    @pulumi.getter(name="internalPort")
    def internal_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "internal_port")

    @internal_port.setter
    def internal_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "internal_port", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class ServerTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    ServerTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class SlackLineKindArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        kind id
        """
        name: pulumi.Input[str]
        """
        kind name
        """
elif False:
    SlackLineKindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SlackLineKindArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: kind id
        :param pulumi.Input[str] name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        kind name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class SlackLineTagArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        tag id
        """
        name: pulumi.Input[str]
        """
        tag name
        """
elif False:
    SlackLineTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SlackLineTagArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: tag id
        :param pulumi.Input[str] name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


