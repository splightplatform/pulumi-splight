# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AlertAlertItem',
    'AlertThreshold',
    'AssetKind',
    'ComponentInput',
    'ComponentRoutineConfig',
    'ComponentRoutineInput',
    'ComponentRoutineInputValue',
    'ComponentRoutineOutput',
    'ComponentRoutineOutputValue',
    'DashboardChartChartItem',
    'DashboardChartChartItemQueryFilterAsset',
    'DashboardChartChartItemQueryFilterAttribute',
    'DashboardChartThreshold',
    'DashboardChartValueMapping',
    'FunctionFunctionItem',
    'GetAssetKindsKindResult',
]

@pulumi.output_type
class AlertAlertItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertAlertItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertAlertItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertAlertItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_plain: str,
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 id: Optional[str] = None):
        """
        :param str id: optional id
        """
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        optional id
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AlertThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusText":
            suggest = "status_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: str,
                 value: float,
                 status_text: Optional[str] = None):
        """
        :param str status: [alert|warning|no_alert] status value for the threshold
        :param float value: value to be considered to compare
        :param str status_text: optional custom value to be displayed in the platform.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "value", value)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        [alert|warning|no_alert] status value for the threshold
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        value to be considered to compare
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[str]:
        """
        optional custom value to be displayed in the platform.
        """
        return pulumi.get(self, "status_text")


@pulumi.output_type
class AssetKind(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: kind id
        :param str name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        kind name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ComponentInput(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 description: Optional[str] = None,
                 multiple: Optional[bool] = None,
                 required: Optional[bool] = None,
                 sensitive: Optional[bool] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def multiple(self) -> Optional[bool]:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ComponentRoutineConfig(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 description: Optional[str] = None,
                 multiple: Optional[bool] = None,
                 required: Optional[bool] = None,
                 sensitive: Optional[bool] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def multiple(self) -> Optional[bool]:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ComponentRoutineInput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentRoutineInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentRoutineInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentRoutineInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 value_type: str,
                 description: Optional[str] = None,
                 multiple: Optional[bool] = None,
                 required: Optional[bool] = None,
                 sensitive: Optional[bool] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence['outputs.ComponentRoutineInputValue']] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value_type", value_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def multiple(self) -> Optional[bool]:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ComponentRoutineInputValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ComponentRoutineInputValue(dict):
    def __init__(__self__, *,
                 asset: str,
                 attribute: str):
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "attribute", attribute)

    @property
    @pulumi.getter
    def asset(self) -> str:
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")


@pulumi.output_type
class ComponentRoutineOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentRoutineOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentRoutineOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentRoutineOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 value_type: str,
                 description: Optional[str] = None,
                 multiple: Optional[bool] = None,
                 required: Optional[bool] = None,
                 sensitive: Optional[bool] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence['outputs.ComponentRoutineOutputValue']] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value_type", value_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def multiple(self) -> Optional[bool]:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ComponentRoutineOutputValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ComponentRoutineOutputValue(dict):
    def __init__(__self__, *,
                 asset: str,
                 attribute: str):
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "attribute", attribute)

    @property
    @pulumi.getter
    def asset(self) -> str:
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")


@pulumi.output_type
class DashboardChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_filter_asset: Optional['outputs.DashboardChartChartItemQueryFilterAsset'] = None,
                 query_filter_attribute: Optional['outputs.DashboardChartChartItemQueryFilterAttribute'] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardChartChartItemQueryFilterAssetArgs' query_filter_asset: asset filter
        :param 'DashboardChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_filter_asset is not None:
            pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        if query_filter_attribute is not None:
            pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> Optional['outputs.DashboardChartChartItemQueryFilterAsset']:
        """
        asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> Optional['outputs.DashboardChartChartItemQueryFilterAttribute']:
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class FunctionFunctionItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionFunctionItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionFunctionItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionFunctionItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_plain: str,
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 id: Optional[str] = None):
        """
        :param str id: optional id
        """
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        optional id
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetAssetKindsKindResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


