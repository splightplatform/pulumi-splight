# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'ActionAsset',
    'ActionSetpoint',
    'ActionSetpointAttribute',
    'AlertAlertItem',
    'AlertAlertItemQueryFilterAsset',
    'AlertAlertItemQueryFilterAttribute',
    'AlertRelatedAsset',
    'AlertTag',
    'AlertThreshold',
    'AlgorithmInput',
    'AlgorithmTag',
    'AssetKind',
    'AssetRelationAsset',
    'AssetRelationRelatedAsset',
    'AssetRelationRelatedAssetKind',
    'AssetTag',
    'BusKind',
    'BusNominalVoltage',
    'BusTag',
    'CommandAction',
    'CommandActionAsset',
    'ComponentRoutineConfig',
    'ComponentRoutineInput',
    'ComponentRoutineInputValue',
    'ComponentRoutineOutput',
    'ComponentRoutineOutputValue',
    'ConnectorInput',
    'ConnectorTag',
    'DashboardActionlistChartChartItem',
    'DashboardActionlistChartChartItemQueryFilterAsset',
    'DashboardActionlistChartChartItemQueryFilterAttribute',
    'DashboardActionlistChartThreshold',
    'DashboardActionlistChartValueMapping',
    'DashboardAlerteventsChartChartItem',
    'DashboardAlerteventsChartChartItemQueryFilterAsset',
    'DashboardAlerteventsChartChartItemQueryFilterAttribute',
    'DashboardAlerteventsChartThreshold',
    'DashboardAlerteventsChartValueMapping',
    'DashboardAlertlistChartChartItem',
    'DashboardAlertlistChartChartItemQueryFilterAsset',
    'DashboardAlertlistChartChartItemQueryFilterAttribute',
    'DashboardAlertlistChartThreshold',
    'DashboardAlertlistChartValueMapping',
    'DashboardAssetlistChartChartItem',
    'DashboardAssetlistChartChartItemQueryFilterAsset',
    'DashboardAssetlistChartChartItemQueryFilterAttribute',
    'DashboardAssetlistChartThreshold',
    'DashboardAssetlistChartValueMapping',
    'DashboardBarChartChartItem',
    'DashboardBarChartChartItemQueryFilterAsset',
    'DashboardBarChartChartItemQueryFilterAttribute',
    'DashboardBarChartThreshold',
    'DashboardBarChartValueMapping',
    'DashboardBargaugeChartChartItem',
    'DashboardBargaugeChartChartItemQueryFilterAsset',
    'DashboardBargaugeChartChartItemQueryFilterAttribute',
    'DashboardBargaugeChartThreshold',
    'DashboardBargaugeChartValueMapping',
    'DashboardCommandlistChartChartItem',
    'DashboardCommandlistChartChartItemQueryFilterAsset',
    'DashboardCommandlistChartChartItemQueryFilterAttribute',
    'DashboardCommandlistChartThreshold',
    'DashboardCommandlistChartValueMapping',
    'DashboardGaugeChartChartItem',
    'DashboardGaugeChartChartItemQueryFilterAsset',
    'DashboardGaugeChartChartItemQueryFilterAttribute',
    'DashboardGaugeChartThreshold',
    'DashboardGaugeChartValueMapping',
    'DashboardHistogramChartChartItem',
    'DashboardHistogramChartChartItemQueryFilterAsset',
    'DashboardHistogramChartChartItemQueryFilterAttribute',
    'DashboardHistogramChartThreshold',
    'DashboardHistogramChartValueMapping',
    'DashboardImageChartChartItem',
    'DashboardImageChartChartItemQueryFilterAsset',
    'DashboardImageChartChartItemQueryFilterAttribute',
    'DashboardImageChartThreshold',
    'DashboardImageChartValueMapping',
    'DashboardRelatedAsset',
    'DashboardStatChartChartItem',
    'DashboardStatChartChartItemQueryFilterAsset',
    'DashboardStatChartChartItemQueryFilterAttribute',
    'DashboardStatChartThreshold',
    'DashboardStatChartValueMapping',
    'DashboardTableChartChartItem',
    'DashboardTableChartChartItemQueryFilterAsset',
    'DashboardTableChartChartItemQueryFilterAttribute',
    'DashboardTableChartThreshold',
    'DashboardTableChartValueMapping',
    'DashboardTag',
    'DashboardTextChartChartItem',
    'DashboardTextChartChartItemQueryFilterAsset',
    'DashboardTextChartChartItemQueryFilterAttribute',
    'DashboardTextChartThreshold',
    'DashboardTextChartValueMapping',
    'DashboardTimeseriesChartChartItem',
    'DashboardTimeseriesChartChartItemQueryFilterAsset',
    'DashboardTimeseriesChartChartItemQueryFilterAttribute',
    'DashboardTimeseriesChartThreshold',
    'DashboardTimeseriesChartValueMapping',
    'ExternalGridKind',
    'ExternalGridTag',
    'FileRelatedAsset',
    'FileTag',
    'FunctionFunctionItem',
    'FunctionFunctionItemQueryFilterAsset',
    'FunctionFunctionItemQueryFilterAttribute',
    'FunctionTag',
    'FunctionTargetAsset',
    'FunctionTargetAttribute',
    'GeneratorActivePower',
    'GeneratorCo2Coefficient',
    'GeneratorDailyEmissionAvoided',
    'GeneratorDailyEnergy',
    'GeneratorKind',
    'GeneratorReactivePower',
    'GeneratorTag',
    'GridKind',
    'GridTag',
    'InverterAccumulatedEnergy',
    'InverterActivePower',
    'InverterDailyEnergy',
    'InverterEnergyMeasurementType',
    'InverterKind',
    'InverterMake',
    'InverterMaxActivePower',
    'InverterModel',
    'InverterRawDailyEnergy',
    'InverterSerialNumber',
    'InverterTag',
    'InverterTemperature',
    'LineAbsorptivity',
    'LineActivePower',
    'LineActivePowerEnd',
    'LineAmpacity',
    'LineAtmosphere',
    'LineCapacitance',
    'LineConductance',
    'LineCurrent',
    'LineCurrentR',
    'LineCurrentT',
    'LineDiameter',
    'LineEmissivity',
    'LineEnergy',
    'LineKind',
    'LineLength',
    'LineMaxTemperature',
    'LineMaximumAllowedCurrent',
    'LineMaximumAllowedPower',
    'LineMaximumAllowedTemperature',
    'LineMaximumAllowedTemperatureLte',
    'LineMaximumAllowedTemperatureSte',
    'LineNumberOfConductors',
    'LineReactance',
    'LineReactivePower',
    'LineReferenceResistance',
    'LineResistance',
    'LineSafetyMarginForPower',
    'LineSusceptance',
    'LineTag',
    'LineTemperatureCoeffResistance',
    'LineVoltageR',
    'LineVoltageSt',
    'LineVoltageTr',
    'SegmentAltitude',
    'SegmentAzimuth',
    'SegmentCumulativeDistance',
    'SegmentKind',
    'SegmentTag',
    'SegmentTemperature',
    'SegmentWindDirection',
    'SegmentWindSpeed',
    'ServerConfig',
    'ServerEnvVar',
    'ServerPort',
    'ServerTag',
    'SlackLineKind',
    'SlackLineTag',
    'GetAssetKindsKindResult',
    'GetBusesTagResult',
    'GetGeneratorsTagResult',
    'GetGridsTagResult',
    'GetLinesTagResult',
    'GetTagsTagResult',
]

@pulumi.output_type
class ActionAsset(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: asset id
        :param str name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        asset name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ActionSetpoint(dict):
    def __init__(__self__, *,
                 attribute: 'outputs.ActionSetpointAttribute',
                 value: str,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param 'ActionSetpointAttributeArgs' attribute: the target attribute of the setpoint which should also be an attribute of the specified asset
        :param str value: JSON encoded scalar value
        :param str id: setpoint Id
        :param str name: setpoint name
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def attribute(self) -> 'outputs.ActionSetpointAttribute':
        """
        the target attribute of the setpoint which should also be an attribute of the specified asset
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        JSON encoded scalar value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        setpoint Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        setpoint name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ActionSetpointAttribute(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: attribute id
        :param str name: attribute name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        attribute id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        attribute name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AlertAlertItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertAlertItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertAlertItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertAlertItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.AlertAlertItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.AlertAlertItemQueryFilterAttribute',
                 query_group_function: str,
                 query_group_unit: str,
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 id: Optional[str] = None):
        """
        :param str expression: how the expression is shown (i.e 'A * 2')
        :param str expression_plain: actual mongo query containing the expression
        :param 'AlertAlertItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'AlertAlertItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        :param str query_group_function: function used to aggregate data
        :param str query_group_unit: time window to apply the aggregation
        :param str query_plain: actual mongo query
        :param str ref_id: identifier of the variable (i.e 'A')
        :param str type: either QUERY or EXPRESSION
        :param str id: Id of the function item
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_group_function", query_group_function)
        pulumi.set(__self__, "query_group_unit", query_group_unit)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        how the expression is shown (i.e 'A * 2')
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        """
        actual mongo query containing the expression
        """
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.AlertAlertItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.AlertAlertItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> str:
        """
        function used to aggregate data
        """
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> str:
        """
        time window to apply the aggregation
        """
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        """
        actual mongo query
        """
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        """
        identifier of the variable (i.e 'A')
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        either QUERY or EXPRESSION
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the function item
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AlertAlertItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AlertAlertItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AlertRelatedAsset(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: asset id
        :param str name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        asset name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AlertTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AlertThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusText":
            suggest = "status_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: str,
                 value: float,
                 status_text: Optional[str] = None):
        """
        :param str status: [alert|warning|no_alert] status value for the threshold
        :param float value: value to be considered to compare
        :param str status_text: optional custom value to be displayed in the platform.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "value", value)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        [alert|warning|no_alert] status value for the threshold
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        value to be considered to compare
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[str]:
        """
        optional custom value to be displayed in the platform.
        """
        return pulumi.get(self, "status_text")


@pulumi.output_type
class AlgorithmInput(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 description: Optional[str] = None,
                 multiple: Optional[bool] = None,
                 required: Optional[bool] = None,
                 sensitive: Optional[bool] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def multiple(self) -> Optional[bool]:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlgorithmTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AssetKind(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: kind id
        :param str name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        kind name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AssetRelationAsset(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: asset id
        :param str name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        asset name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AssetRelationRelatedAsset(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: asset id
        :param str name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        asset name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AssetRelationRelatedAssetKind(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: kind id
        :param str name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        kind name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AssetTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class BusKind(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: kind id
        :param str name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        kind name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class BusNominalVoltage(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class BusTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CommandAction(dict):
    def __init__(__self__, *,
                 asset: 'outputs.CommandActionAsset',
                 id: str,
                 name: str):
        """
        :param 'CommandActionAssetArgs' asset: asset associated with the action (to be deprecated)
        :param str id: action Id
        :param str name: setpoint name
        """
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def asset(self) -> 'outputs.CommandActionAsset':
        """
        asset associated with the action (to be deprecated)
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        action Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        setpoint name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CommandActionAsset(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: asset id
        :param str name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        asset name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ComponentRoutineConfig(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 description: Optional[str] = None,
                 multiple: Optional[bool] = None,
                 required: Optional[bool] = None,
                 sensitive: Optional[bool] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def multiple(self) -> Optional[bool]:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ComponentRoutineInput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentRoutineInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentRoutineInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentRoutineInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 value_type: str,
                 description: Optional[str] = None,
                 multiple: Optional[bool] = None,
                 required: Optional[bool] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence['outputs.ComponentRoutineInputValue']] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value_type", value_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def multiple(self) -> Optional[bool]:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ComponentRoutineInputValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ComponentRoutineInputValue(dict):
    def __init__(__self__, *,
                 asset: str,
                 attribute: str):
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "attribute", attribute)

    @property
    @pulumi.getter
    def asset(self) -> str:
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")


@pulumi.output_type
class ComponentRoutineOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentRoutineOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentRoutineOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentRoutineOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 value_type: str,
                 description: Optional[str] = None,
                 multiple: Optional[bool] = None,
                 required: Optional[bool] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence['outputs.ComponentRoutineOutputValue']] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value_type", value_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def multiple(self) -> Optional[bool]:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.ComponentRoutineOutputValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ComponentRoutineOutputValue(dict):
    def __init__(__self__, *,
                 asset: str,
                 attribute: str):
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "attribute", attribute)

    @property
    @pulumi.getter
    def asset(self) -> str:
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")


@pulumi.output_type
class ConnectorInput(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 description: Optional[str] = None,
                 multiple: Optional[bool] = None,
                 required: Optional[bool] = None,
                 sensitive: Optional[bool] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def multiple(self) -> Optional[bool]:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ConnectorTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardActionlistChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardActionlistChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardActionlistChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardActionlistChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardActionlistChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardActionlistChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardActionlistChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardActionlistChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardActionlistChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardActionlistChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardActionlistChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardActionlistChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardActionlistChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardActionlistChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardActionlistChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardActionlistChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardActionlistChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardActionlistChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardActionlistChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardActionlistChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardAlerteventsChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardAlerteventsChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardAlerteventsChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardAlerteventsChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardAlerteventsChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardAlerteventsChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardAlerteventsChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardAlerteventsChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardAlerteventsChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardAlerteventsChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardAlerteventsChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardAlerteventsChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardAlerteventsChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardAlerteventsChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardAlerteventsChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardAlerteventsChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardAlerteventsChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardAlerteventsChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardAlerteventsChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardAlerteventsChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardAlertlistChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardAlertlistChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardAlertlistChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardAlertlistChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardAlertlistChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardAlertlistChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardAlertlistChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardAlertlistChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardAlertlistChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardAlertlistChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardAlertlistChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardAlertlistChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardAlertlistChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardAlertlistChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardAlertlistChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardAlertlistChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardAlertlistChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardAlertlistChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardAlertlistChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardAlertlistChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardAssetlistChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardAssetlistChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardAssetlistChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardAssetlistChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardAssetlistChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardAssetlistChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardAssetlistChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardAssetlistChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardAssetlistChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardAssetlistChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardAssetlistChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardAssetlistChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardAssetlistChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardAssetlistChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardAssetlistChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardAssetlistChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardAssetlistChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardAssetlistChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardAssetlistChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardAssetlistChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardBarChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardBarChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardBarChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardBarChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardBarChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardBarChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardBarChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardBarChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardBarChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardBarChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardBarChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardBarChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardBarChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardBarChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardBarChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardBarChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardBarChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardBarChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardBarChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardBarChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardBargaugeChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardBargaugeChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardBargaugeChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardBargaugeChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardBargaugeChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardBargaugeChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardBargaugeChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardBargaugeChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardBargaugeChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardBargaugeChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardBargaugeChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardBargaugeChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardBargaugeChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardBargaugeChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardBargaugeChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardBargaugeChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardBargaugeChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardBargaugeChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardBargaugeChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardBargaugeChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardCommandlistChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardCommandlistChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardCommandlistChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardCommandlistChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardCommandlistChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardCommandlistChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardCommandlistChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardCommandlistChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardCommandlistChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardCommandlistChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardCommandlistChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardCommandlistChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardCommandlistChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardCommandlistChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardCommandlistChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardCommandlistChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardCommandlistChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardCommandlistChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardCommandlistChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardCommandlistChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardGaugeChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardGaugeChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardGaugeChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardGaugeChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardGaugeChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardGaugeChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardGaugeChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardGaugeChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardGaugeChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardGaugeChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardGaugeChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardGaugeChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardGaugeChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardGaugeChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardGaugeChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardGaugeChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardGaugeChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardGaugeChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardGaugeChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardGaugeChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardHistogramChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardHistogramChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardHistogramChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardHistogramChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardHistogramChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardHistogramChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardHistogramChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardHistogramChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardHistogramChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardHistogramChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardHistogramChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardHistogramChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardHistogramChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardHistogramChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardHistogramChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardHistogramChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardHistogramChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardHistogramChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardHistogramChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardHistogramChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardImageChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardImageChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardImageChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardImageChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardImageChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardImageChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardImageChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardImageChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardImageChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardImageChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardImageChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardImageChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardImageChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardImageChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardImageChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardImageChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardImageChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardImageChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardImageChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardImageChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardRelatedAsset(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: asset id
        :param str name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        asset name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardStatChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardStatChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardStatChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardStatChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardStatChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardStatChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardStatChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardStatChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardStatChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardStatChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardStatChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardStatChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardStatChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardStatChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardStatChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardStatChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardStatChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardStatChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardStatChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardStatChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardTableChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTableChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTableChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTableChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardTableChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardTableChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardTableChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardTableChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardTableChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardTableChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardTableChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardTableChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardTableChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTableChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTableChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTableChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardTableChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTableChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTableChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTableChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardTextChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTextChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTextChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTextChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardTextChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardTextChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardTextChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardTextChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardTextChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardTextChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardTextChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardTextChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardTextChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTextChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTextChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTextChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardTextChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTextChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTextChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTextChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardTimeseriesChartChartItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryLimit":
            suggest = "query_limit"
        elif key == "querySortDirection":
            suggest = "query_sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeseriesChartChartItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeseriesChartChartItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeseriesChartChartItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.DashboardTimeseriesChartChartItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.DashboardTimeseriesChartChartItemQueryFilterAttribute',
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 query_group_function: Optional[str] = None,
                 query_group_unit: Optional[str] = None,
                 query_limit: Optional[int] = None,
                 query_sort_direction: Optional[int] = None):
        """
        :param 'DashboardTimeseriesChartChartItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'DashboardTimeseriesChartChartItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if query_group_function is not None:
            pulumi.set(__self__, "query_group_function", query_group_function)
        if query_group_unit is not None:
            pulumi.set(__self__, "query_group_unit", query_group_unit)
        if query_limit is not None:
            pulumi.set(__self__, "query_limit", query_limit)
        if query_sort_direction is not None:
            pulumi.set(__self__, "query_sort_direction", query_sort_direction)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.DashboardTimeseriesChartChartItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.DashboardTimeseriesChartChartItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> Optional[str]:
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> Optional[str]:
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryLimit")
    def query_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_limit")

    @property
    @pulumi.getter(name="querySortDirection")
    def query_sort_direction(self) -> Optional[int]:
        return pulumi.get(self, "query_sort_direction")


@pulumi.output_type
class DashboardTimeseriesChartChartItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardTimeseriesChartChartItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardTimeseriesChartThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeseriesChartThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeseriesChartThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeseriesChartThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 display_text: str,
                 value: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardTimeseriesChartValueMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeseriesChartValueMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeseriesChartValueMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeseriesChartValueMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 match_value: str,
                 order: int,
                 type: str):
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class ExternalGridKind(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: kind id
        :param str name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        kind name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ExternalGridTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FileRelatedAsset(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: asset id
        :param str name: asset name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        asset id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        asset name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FileTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FunctionFunctionItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionPlain":
            suggest = "expression_plain"
        elif key == "queryFilterAsset":
            suggest = "query_filter_asset"
        elif key == "queryFilterAttribute":
            suggest = "query_filter_attribute"
        elif key == "queryGroupFunction":
            suggest = "query_group_function"
        elif key == "queryGroupUnit":
            suggest = "query_group_unit"
        elif key == "queryPlain":
            suggest = "query_plain"
        elif key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionFunctionItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionFunctionItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionFunctionItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 expression_plain: str,
                 query_filter_asset: 'outputs.FunctionFunctionItemQueryFilterAsset',
                 query_filter_attribute: 'outputs.FunctionFunctionItemQueryFilterAttribute',
                 query_group_function: str,
                 query_group_unit: str,
                 query_plain: str,
                 ref_id: str,
                 type: str,
                 id: Optional[str] = None):
        """
        :param str expression: how the expression is shown (i.e 'A * 2')
        :param str expression_plain: actual mongo query containing the expression
        :param 'FunctionFunctionItemQueryFilterAssetArgs' query_filter_asset: Asset filter
        :param 'FunctionFunctionItemQueryFilterAttributeArgs' query_filter_attribute: Attribute filter
        :param str query_group_function: function used to aggregate data
        :param str query_group_unit: time window to apply the aggregation
        :param str query_plain: actual mongo query
        :param str ref_id: identifier of the variable (i.e 'A')
        :param str type: either QUERY or EXPRESSION
        :param str id: Id of the function item
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "expression_plain", expression_plain)
        pulumi.set(__self__, "query_filter_asset", query_filter_asset)
        pulumi.set(__self__, "query_filter_attribute", query_filter_attribute)
        pulumi.set(__self__, "query_group_function", query_group_function)
        pulumi.set(__self__, "query_group_unit", query_group_unit)
        pulumi.set(__self__, "query_plain", query_plain)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        how the expression is shown (i.e 'A * 2')
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="expressionPlain")
    def expression_plain(self) -> str:
        """
        actual mongo query containing the expression
        """
        return pulumi.get(self, "expression_plain")

    @property
    @pulumi.getter(name="queryFilterAsset")
    def query_filter_asset(self) -> 'outputs.FunctionFunctionItemQueryFilterAsset':
        """
        Asset filter
        """
        return pulumi.get(self, "query_filter_asset")

    @property
    @pulumi.getter(name="queryFilterAttribute")
    def query_filter_attribute(self) -> 'outputs.FunctionFunctionItemQueryFilterAttribute':
        """
        Attribute filter
        """
        return pulumi.get(self, "query_filter_attribute")

    @property
    @pulumi.getter(name="queryGroupFunction")
    def query_group_function(self) -> str:
        """
        function used to aggregate data
        """
        return pulumi.get(self, "query_group_function")

    @property
    @pulumi.getter(name="queryGroupUnit")
    def query_group_unit(self) -> str:
        """
        time window to apply the aggregation
        """
        return pulumi.get(self, "query_group_unit")

    @property
    @pulumi.getter(name="queryPlain")
    def query_plain(self) -> str:
        """
        actual mongo query
        """
        return pulumi.get(self, "query_plain")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        """
        identifier of the variable (i.e 'A')
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        either QUERY or EXPRESSION
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the function item
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class FunctionFunctionItemQueryFilterAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FunctionFunctionItemQueryFilterAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        :param str type: type of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of the resource
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FunctionTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FunctionTargetAsset(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FunctionTargetAttribute(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        :param str type: type of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of the resource
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GeneratorActivePower(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GeneratorCo2Coefficient(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GeneratorDailyEmissionAvoided(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GeneratorDailyEnergy(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GeneratorKind(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: kind id
        :param str name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        kind name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GeneratorReactivePower(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GeneratorTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GridKind(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: kind id
        :param str name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        kind name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GridTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InverterAccumulatedEnergy(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class InverterActivePower(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class InverterDailyEnergy(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class InverterEnergyMeasurementType(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class InverterKind(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: kind id
        :param str name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        kind name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InverterMake(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class InverterMaxActivePower(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class InverterModel(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class InverterRawDailyEnergy(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class InverterSerialNumber(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class InverterTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InverterTemperature(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineAbsorptivity(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineActivePower(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineActivePowerEnd(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineAmpacity(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineAtmosphere(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineCapacitance(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineConductance(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineCurrent(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineCurrentR(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineCurrentT(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineDiameter(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineEmissivity(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineEnergy(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineKind(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: kind id
        :param str name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        kind name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class LineLength(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineMaxTemperature(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineMaximumAllowedCurrent(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineMaximumAllowedPower(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineMaximumAllowedTemperature(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineMaximumAllowedTemperatureLte(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineMaximumAllowedTemperatureSte(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineNumberOfConductors(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineReactance(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineReactivePower(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineReferenceResistance(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineResistance(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineSafetyMarginForPower(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineSusceptance(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class LineTemperatureCoeffResistance(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineVoltageR(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineVoltageSt(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LineVoltageTr(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class SegmentAltitude(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class SegmentAzimuth(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class SegmentCumulativeDistance(dict):
    def __init__(__self__, *,
                 value: str,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str value: metadata value
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        pulumi.set(__self__, "value", value)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        metadata value
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class SegmentKind(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: kind id
        :param str name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        kind name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SegmentTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SegmentTemperature(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class SegmentWindDirection(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class SegmentWindSpeed(dict):
    def __init__(__self__, *,
                 asset: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str asset: reference to the asset to be linked to
        :param str id: id of the resource
        :param str name: name of the resource
        :param str type: [String|Boolean|Number] type of the data to be ingested in this attribute
        :param str unit: unit of measure
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        """
        reference to the asset to be linked to
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        [String|Boolean|Number] type of the data to be ingested in this attribute
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        unit of measure
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class ServerConfig(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 description: Optional[str] = None,
                 multiple: Optional[bool] = None,
                 required: Optional[bool] = None,
                 sensitive: Optional[bool] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple is not None:
            pulumi.set(__self__, "multiple", multiple)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sensitive is not None:
            pulumi.set(__self__, "sensitive", sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def multiple(self) -> Optional[bool]:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServerEnvVar(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServerPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exposedPort":
            suggest = "exposed_port"
        elif key == "internalPort":
            suggest = "internal_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exposed_port: int,
                 internal_port: int,
                 name: str,
                 protocol: str):
        pulumi.set(__self__, "exposed_port", exposed_port)
        pulumi.set(__self__, "internal_port", internal_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="exposedPort")
    def exposed_port(self) -> int:
        return pulumi.get(self, "exposed_port")

    @property
    @pulumi.getter(name="internalPort")
    def internal_port(self) -> int:
        return pulumi.get(self, "internal_port")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class ServerTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SlackLineKind(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: kind id
        :param str name: kind name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        kind id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        kind name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SlackLineTag(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: tag id
        :param str name: tag name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        tag id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        tag name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAssetKindsKindResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetBusesTagResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetGeneratorsTagResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetGridsTagResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLinesTagResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Id of the resource
        :param str name: name of the resource
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the resource
        """
        return pulumi.get(self, "name")


