# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TransformerArgs', 'Transformer']

@pulumi.input_type
class TransformerArgs:
    def __init__(__self__, *,
                 capacitance: pulumi.Input['TransformerCapacitanceArgs'],
                 conductance: pulumi.Input['TransformerConductanceArgs'],
                 maximum_allowed_current: pulumi.Input['TransformerMaximumAllowedCurrentArgs'],
                 maximum_allowed_power: pulumi.Input['TransformerMaximumAllowedPowerArgs'],
                 reactance: pulumi.Input['TransformerReactanceArgs'],
                 resistance: pulumi.Input['TransformerResistanceArgs'],
                 safety_margin_for_power: pulumi.Input['TransformerSafetyMarginForPowerArgs'],
                 standard_type: pulumi.Input['TransformerStandardTypeArgs'],
                 tap_pos: pulumi.Input['TransformerTapPosArgs'],
                 xn_ohm: pulumi.Input['TransformerXnOhmArgs'],
                 description: Optional[pulumi.Input[str]] = None,
                 geometry: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerTagArgs']]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Transformer resource.
        :param pulumi.Input['TransformerCapacitanceArgs'] capacitance: attribute of the resource
        :param pulumi.Input['TransformerConductanceArgs'] conductance: attribute of the resource
        :param pulumi.Input['TransformerMaximumAllowedCurrentArgs'] maximum_allowed_current: attribute of the resource
        :param pulumi.Input['TransformerMaximumAllowedPowerArgs'] maximum_allowed_power: attribute of the resource
        :param pulumi.Input['TransformerReactanceArgs'] reactance: attribute of the resource
        :param pulumi.Input['TransformerResistanceArgs'] resistance: attribute of the resource
        :param pulumi.Input['TransformerSafetyMarginForPowerArgs'] safety_margin_for_power: attribute of the resource
        :param pulumi.Input['TransformerStandardTypeArgs'] standard_type: attribute of the resource
        :param pulumi.Input['TransformerTapPosArgs'] tap_pos: attribute of the resource
        :param pulumi.Input['TransformerXnOhmArgs'] xn_ohm: attribute of the resource
        :param pulumi.Input[str] description: description of the resource
        :param pulumi.Input[str] geometry: geo position and shape of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerTagArgs']]] tags: tags of the resource
        :param pulumi.Input[str] timezone: timezone that overrides location-based timezone of the resource
        """
        pulumi.set(__self__, "capacitance", capacitance)
        pulumi.set(__self__, "conductance", conductance)
        pulumi.set(__self__, "maximum_allowed_current", maximum_allowed_current)
        pulumi.set(__self__, "maximum_allowed_power", maximum_allowed_power)
        pulumi.set(__self__, "reactance", reactance)
        pulumi.set(__self__, "resistance", resistance)
        pulumi.set(__self__, "safety_margin_for_power", safety_margin_for_power)
        pulumi.set(__self__, "standard_type", standard_type)
        pulumi.set(__self__, "tap_pos", tap_pos)
        pulumi.set(__self__, "xn_ohm", xn_ohm)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if geometry is not None:
            pulumi.set(__self__, "geometry", geometry)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def capacitance(self) -> pulumi.Input['TransformerCapacitanceArgs']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "capacitance")

    @capacitance.setter
    def capacitance(self, value: pulumi.Input['TransformerCapacitanceArgs']):
        pulumi.set(self, "capacitance", value)

    @property
    @pulumi.getter
    def conductance(self) -> pulumi.Input['TransformerConductanceArgs']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "conductance")

    @conductance.setter
    def conductance(self, value: pulumi.Input['TransformerConductanceArgs']):
        pulumi.set(self, "conductance", value)

    @property
    @pulumi.getter(name="maximumAllowedCurrent")
    def maximum_allowed_current(self) -> pulumi.Input['TransformerMaximumAllowedCurrentArgs']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "maximum_allowed_current")

    @maximum_allowed_current.setter
    def maximum_allowed_current(self, value: pulumi.Input['TransformerMaximumAllowedCurrentArgs']):
        pulumi.set(self, "maximum_allowed_current", value)

    @property
    @pulumi.getter(name="maximumAllowedPower")
    def maximum_allowed_power(self) -> pulumi.Input['TransformerMaximumAllowedPowerArgs']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "maximum_allowed_power")

    @maximum_allowed_power.setter
    def maximum_allowed_power(self, value: pulumi.Input['TransformerMaximumAllowedPowerArgs']):
        pulumi.set(self, "maximum_allowed_power", value)

    @property
    @pulumi.getter
    def reactance(self) -> pulumi.Input['TransformerReactanceArgs']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "reactance")

    @reactance.setter
    def reactance(self, value: pulumi.Input['TransformerReactanceArgs']):
        pulumi.set(self, "reactance", value)

    @property
    @pulumi.getter
    def resistance(self) -> pulumi.Input['TransformerResistanceArgs']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "resistance")

    @resistance.setter
    def resistance(self, value: pulumi.Input['TransformerResistanceArgs']):
        pulumi.set(self, "resistance", value)

    @property
    @pulumi.getter(name="safetyMarginForPower")
    def safety_margin_for_power(self) -> pulumi.Input['TransformerSafetyMarginForPowerArgs']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "safety_margin_for_power")

    @safety_margin_for_power.setter
    def safety_margin_for_power(self, value: pulumi.Input['TransformerSafetyMarginForPowerArgs']):
        pulumi.set(self, "safety_margin_for_power", value)

    @property
    @pulumi.getter(name="standardType")
    def standard_type(self) -> pulumi.Input['TransformerStandardTypeArgs']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "standard_type")

    @standard_type.setter
    def standard_type(self, value: pulumi.Input['TransformerStandardTypeArgs']):
        pulumi.set(self, "standard_type", value)

    @property
    @pulumi.getter(name="tapPos")
    def tap_pos(self) -> pulumi.Input['TransformerTapPosArgs']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "tap_pos")

    @tap_pos.setter
    def tap_pos(self, value: pulumi.Input['TransformerTapPosArgs']):
        pulumi.set(self, "tap_pos", value)

    @property
    @pulumi.getter(name="xnOhm")
    def xn_ohm(self) -> pulumi.Input['TransformerXnOhmArgs']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "xn_ohm")

    @xn_ohm.setter
    def xn_ohm(self, value: pulumi.Input['TransformerXnOhmArgs']):
        pulumi.set(self, "xn_ohm", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of the resource
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def geometry(self) -> Optional[pulumi.Input[str]]:
        """
        geo position and shape of the resource
        """
        return pulumi.get(self, "geometry")

    @geometry.setter
    def geometry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geometry", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerTagArgs']]]]:
        """
        tags of the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        timezone that overrides location-based timezone of the resource
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class _TransformerState:
    def __init__(__self__, *,
                 active_power_hvs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerHvArgs']]]] = None,
                 active_power_losses: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerLossArgs']]]] = None,
                 active_power_lvs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerLvArgs']]]] = None,
                 capacitance: Optional[pulumi.Input['TransformerCapacitanceArgs']] = None,
                 conductance: Optional[pulumi.Input['TransformerConductanceArgs']] = None,
                 contingencies: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerContingencyArgs']]]] = None,
                 current_hvs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerCurrentHvArgs']]]] = None,
                 current_lvs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerCurrentLvArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 geometry: Optional[pulumi.Input[str]] = None,
                 kinds: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerKindArgs']]]] = None,
                 maximum_allowed_current: Optional[pulumi.Input['TransformerMaximumAllowedCurrentArgs']] = None,
                 maximum_allowed_power: Optional[pulumi.Input['TransformerMaximumAllowedPowerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reactance: Optional[pulumi.Input['TransformerReactanceArgs']] = None,
                 reactive_power_hvs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerHvArgs']]]] = None,
                 reactive_power_losses: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerLossArgs']]]] = None,
                 reactive_power_lvs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerLvArgs']]]] = None,
                 resistance: Optional[pulumi.Input['TransformerResistanceArgs']] = None,
                 safety_margin_for_power: Optional[pulumi.Input['TransformerSafetyMarginForPowerArgs']] = None,
                 standard_type: Optional[pulumi.Input['TransformerStandardTypeArgs']] = None,
                 switch_status_hvs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerSwitchStatusHvArgs']]]] = None,
                 switch_status_lvs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerSwitchStatusLvArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerTagArgs']]]] = None,
                 tap_pos: Optional[pulumi.Input['TransformerTapPosArgs']] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 voltage_hvs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerVoltageHvArgs']]]] = None,
                 voltage_lvs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerVoltageLvArgs']]]] = None,
                 xn_ohm: Optional[pulumi.Input['TransformerXnOhmArgs']] = None):
        """
        Input properties used for looking up and filtering Transformer resources.
        :param pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerHvArgs']]] active_power_hvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerLossArgs']]] active_power_losses: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerLvArgs']]] active_power_lvs: attribute of the resource
        :param pulumi.Input['TransformerCapacitanceArgs'] capacitance: attribute of the resource
        :param pulumi.Input['TransformerConductanceArgs'] conductance: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerContingencyArgs']]] contingencies: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerCurrentHvArgs']]] current_hvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerCurrentLvArgs']]] current_lvs: attribute of the resource
        :param pulumi.Input[str] description: description of the resource
        :param pulumi.Input[str] geometry: geo position and shape of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerKindArgs']]] kinds: kind of the resource
        :param pulumi.Input['TransformerMaximumAllowedCurrentArgs'] maximum_allowed_current: attribute of the resource
        :param pulumi.Input['TransformerMaximumAllowedPowerArgs'] maximum_allowed_power: attribute of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input['TransformerReactanceArgs'] reactance: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerHvArgs']]] reactive_power_hvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerLossArgs']]] reactive_power_losses: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerLvArgs']]] reactive_power_lvs: attribute of the resource
        :param pulumi.Input['TransformerResistanceArgs'] resistance: attribute of the resource
        :param pulumi.Input['TransformerSafetyMarginForPowerArgs'] safety_margin_for_power: attribute of the resource
        :param pulumi.Input['TransformerStandardTypeArgs'] standard_type: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerSwitchStatusHvArgs']]] switch_status_hvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerSwitchStatusLvArgs']]] switch_status_lvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerTagArgs']]] tags: tags of the resource
        :param pulumi.Input['TransformerTapPosArgs'] tap_pos: attribute of the resource
        :param pulumi.Input[str] timezone: timezone that overrides location-based timezone of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerVoltageHvArgs']]] voltage_hvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input['TransformerVoltageLvArgs']]] voltage_lvs: attribute of the resource
        :param pulumi.Input['TransformerXnOhmArgs'] xn_ohm: attribute of the resource
        """
        if active_power_hvs is not None:
            pulumi.set(__self__, "active_power_hvs", active_power_hvs)
        if active_power_losses is not None:
            pulumi.set(__self__, "active_power_losses", active_power_losses)
        if active_power_lvs is not None:
            pulumi.set(__self__, "active_power_lvs", active_power_lvs)
        if capacitance is not None:
            pulumi.set(__self__, "capacitance", capacitance)
        if conductance is not None:
            pulumi.set(__self__, "conductance", conductance)
        if contingencies is not None:
            pulumi.set(__self__, "contingencies", contingencies)
        if current_hvs is not None:
            pulumi.set(__self__, "current_hvs", current_hvs)
        if current_lvs is not None:
            pulumi.set(__self__, "current_lvs", current_lvs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if geometry is not None:
            pulumi.set(__self__, "geometry", geometry)
        if kinds is not None:
            pulumi.set(__self__, "kinds", kinds)
        if maximum_allowed_current is not None:
            pulumi.set(__self__, "maximum_allowed_current", maximum_allowed_current)
        if maximum_allowed_power is not None:
            pulumi.set(__self__, "maximum_allowed_power", maximum_allowed_power)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reactance is not None:
            pulumi.set(__self__, "reactance", reactance)
        if reactive_power_hvs is not None:
            pulumi.set(__self__, "reactive_power_hvs", reactive_power_hvs)
        if reactive_power_losses is not None:
            pulumi.set(__self__, "reactive_power_losses", reactive_power_losses)
        if reactive_power_lvs is not None:
            pulumi.set(__self__, "reactive_power_lvs", reactive_power_lvs)
        if resistance is not None:
            pulumi.set(__self__, "resistance", resistance)
        if safety_margin_for_power is not None:
            pulumi.set(__self__, "safety_margin_for_power", safety_margin_for_power)
        if standard_type is not None:
            pulumi.set(__self__, "standard_type", standard_type)
        if switch_status_hvs is not None:
            pulumi.set(__self__, "switch_status_hvs", switch_status_hvs)
        if switch_status_lvs is not None:
            pulumi.set(__self__, "switch_status_lvs", switch_status_lvs)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tap_pos is not None:
            pulumi.set(__self__, "tap_pos", tap_pos)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if voltage_hvs is not None:
            pulumi.set(__self__, "voltage_hvs", voltage_hvs)
        if voltage_lvs is not None:
            pulumi.set(__self__, "voltage_lvs", voltage_lvs)
        if xn_ohm is not None:
            pulumi.set(__self__, "xn_ohm", xn_ohm)

    @property
    @pulumi.getter(name="activePowerHvs")
    def active_power_hvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerHvArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "active_power_hvs")

    @active_power_hvs.setter
    def active_power_hvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerHvArgs']]]]):
        pulumi.set(self, "active_power_hvs", value)

    @property
    @pulumi.getter(name="activePowerLosses")
    def active_power_losses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerLossArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "active_power_losses")

    @active_power_losses.setter
    def active_power_losses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerLossArgs']]]]):
        pulumi.set(self, "active_power_losses", value)

    @property
    @pulumi.getter(name="activePowerLvs")
    def active_power_lvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerLvArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "active_power_lvs")

    @active_power_lvs.setter
    def active_power_lvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerActivePowerLvArgs']]]]):
        pulumi.set(self, "active_power_lvs", value)

    @property
    @pulumi.getter
    def capacitance(self) -> Optional[pulumi.Input['TransformerCapacitanceArgs']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "capacitance")

    @capacitance.setter
    def capacitance(self, value: Optional[pulumi.Input['TransformerCapacitanceArgs']]):
        pulumi.set(self, "capacitance", value)

    @property
    @pulumi.getter
    def conductance(self) -> Optional[pulumi.Input['TransformerConductanceArgs']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "conductance")

    @conductance.setter
    def conductance(self, value: Optional[pulumi.Input['TransformerConductanceArgs']]):
        pulumi.set(self, "conductance", value)

    @property
    @pulumi.getter
    def contingencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerContingencyArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "contingencies")

    @contingencies.setter
    def contingencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerContingencyArgs']]]]):
        pulumi.set(self, "contingencies", value)

    @property
    @pulumi.getter(name="currentHvs")
    def current_hvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerCurrentHvArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "current_hvs")

    @current_hvs.setter
    def current_hvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerCurrentHvArgs']]]]):
        pulumi.set(self, "current_hvs", value)

    @property
    @pulumi.getter(name="currentLvs")
    def current_lvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerCurrentLvArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "current_lvs")

    @current_lvs.setter
    def current_lvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerCurrentLvArgs']]]]):
        pulumi.set(self, "current_lvs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of the resource
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def geometry(self) -> Optional[pulumi.Input[str]]:
        """
        geo position and shape of the resource
        """
        return pulumi.get(self, "geometry")

    @geometry.setter
    def geometry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geometry", value)

    @property
    @pulumi.getter
    def kinds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerKindArgs']]]]:
        """
        kind of the resource
        """
        return pulumi.get(self, "kinds")

    @kinds.setter
    def kinds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerKindArgs']]]]):
        pulumi.set(self, "kinds", value)

    @property
    @pulumi.getter(name="maximumAllowedCurrent")
    def maximum_allowed_current(self) -> Optional[pulumi.Input['TransformerMaximumAllowedCurrentArgs']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "maximum_allowed_current")

    @maximum_allowed_current.setter
    def maximum_allowed_current(self, value: Optional[pulumi.Input['TransformerMaximumAllowedCurrentArgs']]):
        pulumi.set(self, "maximum_allowed_current", value)

    @property
    @pulumi.getter(name="maximumAllowedPower")
    def maximum_allowed_power(self) -> Optional[pulumi.Input['TransformerMaximumAllowedPowerArgs']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "maximum_allowed_power")

    @maximum_allowed_power.setter
    def maximum_allowed_power(self, value: Optional[pulumi.Input['TransformerMaximumAllowedPowerArgs']]):
        pulumi.set(self, "maximum_allowed_power", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def reactance(self) -> Optional[pulumi.Input['TransformerReactanceArgs']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "reactance")

    @reactance.setter
    def reactance(self, value: Optional[pulumi.Input['TransformerReactanceArgs']]):
        pulumi.set(self, "reactance", value)

    @property
    @pulumi.getter(name="reactivePowerHvs")
    def reactive_power_hvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerHvArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "reactive_power_hvs")

    @reactive_power_hvs.setter
    def reactive_power_hvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerHvArgs']]]]):
        pulumi.set(self, "reactive_power_hvs", value)

    @property
    @pulumi.getter(name="reactivePowerLosses")
    def reactive_power_losses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerLossArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "reactive_power_losses")

    @reactive_power_losses.setter
    def reactive_power_losses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerLossArgs']]]]):
        pulumi.set(self, "reactive_power_losses", value)

    @property
    @pulumi.getter(name="reactivePowerLvs")
    def reactive_power_lvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerLvArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "reactive_power_lvs")

    @reactive_power_lvs.setter
    def reactive_power_lvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerReactivePowerLvArgs']]]]):
        pulumi.set(self, "reactive_power_lvs", value)

    @property
    @pulumi.getter
    def resistance(self) -> Optional[pulumi.Input['TransformerResistanceArgs']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "resistance")

    @resistance.setter
    def resistance(self, value: Optional[pulumi.Input['TransformerResistanceArgs']]):
        pulumi.set(self, "resistance", value)

    @property
    @pulumi.getter(name="safetyMarginForPower")
    def safety_margin_for_power(self) -> Optional[pulumi.Input['TransformerSafetyMarginForPowerArgs']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "safety_margin_for_power")

    @safety_margin_for_power.setter
    def safety_margin_for_power(self, value: Optional[pulumi.Input['TransformerSafetyMarginForPowerArgs']]):
        pulumi.set(self, "safety_margin_for_power", value)

    @property
    @pulumi.getter(name="standardType")
    def standard_type(self) -> Optional[pulumi.Input['TransformerStandardTypeArgs']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "standard_type")

    @standard_type.setter
    def standard_type(self, value: Optional[pulumi.Input['TransformerStandardTypeArgs']]):
        pulumi.set(self, "standard_type", value)

    @property
    @pulumi.getter(name="switchStatusHvs")
    def switch_status_hvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerSwitchStatusHvArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "switch_status_hvs")

    @switch_status_hvs.setter
    def switch_status_hvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerSwitchStatusHvArgs']]]]):
        pulumi.set(self, "switch_status_hvs", value)

    @property
    @pulumi.getter(name="switchStatusLvs")
    def switch_status_lvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerSwitchStatusLvArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "switch_status_lvs")

    @switch_status_lvs.setter
    def switch_status_lvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerSwitchStatusLvArgs']]]]):
        pulumi.set(self, "switch_status_lvs", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerTagArgs']]]]:
        """
        tags of the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tapPos")
    def tap_pos(self) -> Optional[pulumi.Input['TransformerTapPosArgs']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "tap_pos")

    @tap_pos.setter
    def tap_pos(self, value: Optional[pulumi.Input['TransformerTapPosArgs']]):
        pulumi.set(self, "tap_pos", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        timezone that overrides location-based timezone of the resource
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="voltageHvs")
    def voltage_hvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerVoltageHvArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "voltage_hvs")

    @voltage_hvs.setter
    def voltage_hvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerVoltageHvArgs']]]]):
        pulumi.set(self, "voltage_hvs", value)

    @property
    @pulumi.getter(name="voltageLvs")
    def voltage_lvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformerVoltageLvArgs']]]]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "voltage_lvs")

    @voltage_lvs.setter
    def voltage_lvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformerVoltageLvArgs']]]]):
        pulumi.set(self, "voltage_lvs", value)

    @property
    @pulumi.getter(name="xnOhm")
    def xn_ohm(self) -> Optional[pulumi.Input['TransformerXnOhmArgs']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "xn_ohm")

    @xn_ohm.setter
    def xn_ohm(self, value: Optional[pulumi.Input['TransformerXnOhmArgs']]):
        pulumi.set(self, "xn_ohm", value)


class Transformer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacitance: Optional[pulumi.Input[Union['TransformerCapacitanceArgs', 'TransformerCapacitanceArgsDict']]] = None,
                 conductance: Optional[pulumi.Input[Union['TransformerConductanceArgs', 'TransformerConductanceArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 geometry: Optional[pulumi.Input[str]] = None,
                 maximum_allowed_current: Optional[pulumi.Input[Union['TransformerMaximumAllowedCurrentArgs', 'TransformerMaximumAllowedCurrentArgsDict']]] = None,
                 maximum_allowed_power: Optional[pulumi.Input[Union['TransformerMaximumAllowedPowerArgs', 'TransformerMaximumAllowedPowerArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reactance: Optional[pulumi.Input[Union['TransformerReactanceArgs', 'TransformerReactanceArgsDict']]] = None,
                 resistance: Optional[pulumi.Input[Union['TransformerResistanceArgs', 'TransformerResistanceArgsDict']]] = None,
                 safety_margin_for_power: Optional[pulumi.Input[Union['TransformerSafetyMarginForPowerArgs', 'TransformerSafetyMarginForPowerArgsDict']]] = None,
                 standard_type: Optional[pulumi.Input[Union['TransformerStandardTypeArgs', 'TransformerStandardTypeArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerTagArgs', 'TransformerTagArgsDict']]]]] = None,
                 tap_pos: Optional[pulumi.Input[Union['TransformerTapPosArgs', 'TransformerTapPosArgsDict']]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 xn_ohm: Optional[pulumi.Input[Union['TransformerXnOhmArgs', 'TransformerXnOhmArgsDict']]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Import

        ```sh
        $ pulumi import splight:index/transformer:Transformer [options] splight_transformer.<name> <transformer_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['TransformerCapacitanceArgs', 'TransformerCapacitanceArgsDict']] capacitance: attribute of the resource
        :param pulumi.Input[Union['TransformerConductanceArgs', 'TransformerConductanceArgsDict']] conductance: attribute of the resource
        :param pulumi.Input[str] description: description of the resource
        :param pulumi.Input[str] geometry: geo position and shape of the resource
        :param pulumi.Input[Union['TransformerMaximumAllowedCurrentArgs', 'TransformerMaximumAllowedCurrentArgsDict']] maximum_allowed_current: attribute of the resource
        :param pulumi.Input[Union['TransformerMaximumAllowedPowerArgs', 'TransformerMaximumAllowedPowerArgsDict']] maximum_allowed_power: attribute of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[Union['TransformerReactanceArgs', 'TransformerReactanceArgsDict']] reactance: attribute of the resource
        :param pulumi.Input[Union['TransformerResistanceArgs', 'TransformerResistanceArgsDict']] resistance: attribute of the resource
        :param pulumi.Input[Union['TransformerSafetyMarginForPowerArgs', 'TransformerSafetyMarginForPowerArgsDict']] safety_margin_for_power: attribute of the resource
        :param pulumi.Input[Union['TransformerStandardTypeArgs', 'TransformerStandardTypeArgsDict']] standard_type: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerTagArgs', 'TransformerTagArgsDict']]]] tags: tags of the resource
        :param pulumi.Input[Union['TransformerTapPosArgs', 'TransformerTapPosArgsDict']] tap_pos: attribute of the resource
        :param pulumi.Input[str] timezone: timezone that overrides location-based timezone of the resource
        :param pulumi.Input[Union['TransformerXnOhmArgs', 'TransformerXnOhmArgsDict']] xn_ohm: attribute of the resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TransformerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Import

        ```sh
        $ pulumi import splight:index/transformer:Transformer [options] splight_transformer.<name> <transformer_id>
        ```

        :param str resource_name: The name of the resource.
        :param TransformerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TransformerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacitance: Optional[pulumi.Input[Union['TransformerCapacitanceArgs', 'TransformerCapacitanceArgsDict']]] = None,
                 conductance: Optional[pulumi.Input[Union['TransformerConductanceArgs', 'TransformerConductanceArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 geometry: Optional[pulumi.Input[str]] = None,
                 maximum_allowed_current: Optional[pulumi.Input[Union['TransformerMaximumAllowedCurrentArgs', 'TransformerMaximumAllowedCurrentArgsDict']]] = None,
                 maximum_allowed_power: Optional[pulumi.Input[Union['TransformerMaximumAllowedPowerArgs', 'TransformerMaximumAllowedPowerArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reactance: Optional[pulumi.Input[Union['TransformerReactanceArgs', 'TransformerReactanceArgsDict']]] = None,
                 resistance: Optional[pulumi.Input[Union['TransformerResistanceArgs', 'TransformerResistanceArgsDict']]] = None,
                 safety_margin_for_power: Optional[pulumi.Input[Union['TransformerSafetyMarginForPowerArgs', 'TransformerSafetyMarginForPowerArgsDict']]] = None,
                 standard_type: Optional[pulumi.Input[Union['TransformerStandardTypeArgs', 'TransformerStandardTypeArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerTagArgs', 'TransformerTagArgsDict']]]]] = None,
                 tap_pos: Optional[pulumi.Input[Union['TransformerTapPosArgs', 'TransformerTapPosArgsDict']]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 xn_ohm: Optional[pulumi.Input[Union['TransformerXnOhmArgs', 'TransformerXnOhmArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TransformerArgs.__new__(TransformerArgs)

            if capacitance is None and not opts.urn:
                raise TypeError("Missing required property 'capacitance'")
            __props__.__dict__["capacitance"] = capacitance
            if conductance is None and not opts.urn:
                raise TypeError("Missing required property 'conductance'")
            __props__.__dict__["conductance"] = conductance
            __props__.__dict__["description"] = description
            __props__.__dict__["geometry"] = geometry
            if maximum_allowed_current is None and not opts.urn:
                raise TypeError("Missing required property 'maximum_allowed_current'")
            __props__.__dict__["maximum_allowed_current"] = maximum_allowed_current
            if maximum_allowed_power is None and not opts.urn:
                raise TypeError("Missing required property 'maximum_allowed_power'")
            __props__.__dict__["maximum_allowed_power"] = maximum_allowed_power
            __props__.__dict__["name"] = name
            if reactance is None and not opts.urn:
                raise TypeError("Missing required property 'reactance'")
            __props__.__dict__["reactance"] = reactance
            if resistance is None and not opts.urn:
                raise TypeError("Missing required property 'resistance'")
            __props__.__dict__["resistance"] = resistance
            if safety_margin_for_power is None and not opts.urn:
                raise TypeError("Missing required property 'safety_margin_for_power'")
            __props__.__dict__["safety_margin_for_power"] = safety_margin_for_power
            if standard_type is None and not opts.urn:
                raise TypeError("Missing required property 'standard_type'")
            __props__.__dict__["standard_type"] = standard_type
            __props__.__dict__["tags"] = tags
            if tap_pos is None and not opts.urn:
                raise TypeError("Missing required property 'tap_pos'")
            __props__.__dict__["tap_pos"] = tap_pos
            __props__.__dict__["timezone"] = timezone
            if xn_ohm is None and not opts.urn:
                raise TypeError("Missing required property 'xn_ohm'")
            __props__.__dict__["xn_ohm"] = xn_ohm
            __props__.__dict__["active_power_hvs"] = None
            __props__.__dict__["active_power_losses"] = None
            __props__.__dict__["active_power_lvs"] = None
            __props__.__dict__["contingencies"] = None
            __props__.__dict__["current_hvs"] = None
            __props__.__dict__["current_lvs"] = None
            __props__.__dict__["kinds"] = None
            __props__.__dict__["reactive_power_hvs"] = None
            __props__.__dict__["reactive_power_losses"] = None
            __props__.__dict__["reactive_power_lvs"] = None
            __props__.__dict__["switch_status_hvs"] = None
            __props__.__dict__["switch_status_lvs"] = None
            __props__.__dict__["voltage_hvs"] = None
            __props__.__dict__["voltage_lvs"] = None
        super(Transformer, __self__).__init__(
            'splight:index/transformer:Transformer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_power_hvs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerActivePowerHvArgs', 'TransformerActivePowerHvArgsDict']]]]] = None,
            active_power_losses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerActivePowerLossArgs', 'TransformerActivePowerLossArgsDict']]]]] = None,
            active_power_lvs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerActivePowerLvArgs', 'TransformerActivePowerLvArgsDict']]]]] = None,
            capacitance: Optional[pulumi.Input[Union['TransformerCapacitanceArgs', 'TransformerCapacitanceArgsDict']]] = None,
            conductance: Optional[pulumi.Input[Union['TransformerConductanceArgs', 'TransformerConductanceArgsDict']]] = None,
            contingencies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerContingencyArgs', 'TransformerContingencyArgsDict']]]]] = None,
            current_hvs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerCurrentHvArgs', 'TransformerCurrentHvArgsDict']]]]] = None,
            current_lvs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerCurrentLvArgs', 'TransformerCurrentLvArgsDict']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            geometry: Optional[pulumi.Input[str]] = None,
            kinds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerKindArgs', 'TransformerKindArgsDict']]]]] = None,
            maximum_allowed_current: Optional[pulumi.Input[Union['TransformerMaximumAllowedCurrentArgs', 'TransformerMaximumAllowedCurrentArgsDict']]] = None,
            maximum_allowed_power: Optional[pulumi.Input[Union['TransformerMaximumAllowedPowerArgs', 'TransformerMaximumAllowedPowerArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            reactance: Optional[pulumi.Input[Union['TransformerReactanceArgs', 'TransformerReactanceArgsDict']]] = None,
            reactive_power_hvs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerReactivePowerHvArgs', 'TransformerReactivePowerHvArgsDict']]]]] = None,
            reactive_power_losses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerReactivePowerLossArgs', 'TransformerReactivePowerLossArgsDict']]]]] = None,
            reactive_power_lvs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerReactivePowerLvArgs', 'TransformerReactivePowerLvArgsDict']]]]] = None,
            resistance: Optional[pulumi.Input[Union['TransformerResistanceArgs', 'TransformerResistanceArgsDict']]] = None,
            safety_margin_for_power: Optional[pulumi.Input[Union['TransformerSafetyMarginForPowerArgs', 'TransformerSafetyMarginForPowerArgsDict']]] = None,
            standard_type: Optional[pulumi.Input[Union['TransformerStandardTypeArgs', 'TransformerStandardTypeArgsDict']]] = None,
            switch_status_hvs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerSwitchStatusHvArgs', 'TransformerSwitchStatusHvArgsDict']]]]] = None,
            switch_status_lvs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerSwitchStatusLvArgs', 'TransformerSwitchStatusLvArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerTagArgs', 'TransformerTagArgsDict']]]]] = None,
            tap_pos: Optional[pulumi.Input[Union['TransformerTapPosArgs', 'TransformerTapPosArgsDict']]] = None,
            timezone: Optional[pulumi.Input[str]] = None,
            voltage_hvs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerVoltageHvArgs', 'TransformerVoltageHvArgsDict']]]]] = None,
            voltage_lvs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransformerVoltageLvArgs', 'TransformerVoltageLvArgsDict']]]]] = None,
            xn_ohm: Optional[pulumi.Input[Union['TransformerXnOhmArgs', 'TransformerXnOhmArgsDict']]] = None) -> 'Transformer':
        """
        Get an existing Transformer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerActivePowerHvArgs', 'TransformerActivePowerHvArgsDict']]]] active_power_hvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerActivePowerLossArgs', 'TransformerActivePowerLossArgsDict']]]] active_power_losses: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerActivePowerLvArgs', 'TransformerActivePowerLvArgsDict']]]] active_power_lvs: attribute of the resource
        :param pulumi.Input[Union['TransformerCapacitanceArgs', 'TransformerCapacitanceArgsDict']] capacitance: attribute of the resource
        :param pulumi.Input[Union['TransformerConductanceArgs', 'TransformerConductanceArgsDict']] conductance: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerContingencyArgs', 'TransformerContingencyArgsDict']]]] contingencies: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerCurrentHvArgs', 'TransformerCurrentHvArgsDict']]]] current_hvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerCurrentLvArgs', 'TransformerCurrentLvArgsDict']]]] current_lvs: attribute of the resource
        :param pulumi.Input[str] description: description of the resource
        :param pulumi.Input[str] geometry: geo position and shape of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerKindArgs', 'TransformerKindArgsDict']]]] kinds: kind of the resource
        :param pulumi.Input[Union['TransformerMaximumAllowedCurrentArgs', 'TransformerMaximumAllowedCurrentArgsDict']] maximum_allowed_current: attribute of the resource
        :param pulumi.Input[Union['TransformerMaximumAllowedPowerArgs', 'TransformerMaximumAllowedPowerArgsDict']] maximum_allowed_power: attribute of the resource
        :param pulumi.Input[str] name: name of the resource
        :param pulumi.Input[Union['TransformerReactanceArgs', 'TransformerReactanceArgsDict']] reactance: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerReactivePowerHvArgs', 'TransformerReactivePowerHvArgsDict']]]] reactive_power_hvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerReactivePowerLossArgs', 'TransformerReactivePowerLossArgsDict']]]] reactive_power_losses: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerReactivePowerLvArgs', 'TransformerReactivePowerLvArgsDict']]]] reactive_power_lvs: attribute of the resource
        :param pulumi.Input[Union['TransformerResistanceArgs', 'TransformerResistanceArgsDict']] resistance: attribute of the resource
        :param pulumi.Input[Union['TransformerSafetyMarginForPowerArgs', 'TransformerSafetyMarginForPowerArgsDict']] safety_margin_for_power: attribute of the resource
        :param pulumi.Input[Union['TransformerStandardTypeArgs', 'TransformerStandardTypeArgsDict']] standard_type: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerSwitchStatusHvArgs', 'TransformerSwitchStatusHvArgsDict']]]] switch_status_hvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerSwitchStatusLvArgs', 'TransformerSwitchStatusLvArgsDict']]]] switch_status_lvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerTagArgs', 'TransformerTagArgsDict']]]] tags: tags of the resource
        :param pulumi.Input[Union['TransformerTapPosArgs', 'TransformerTapPosArgsDict']] tap_pos: attribute of the resource
        :param pulumi.Input[str] timezone: timezone that overrides location-based timezone of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerVoltageHvArgs', 'TransformerVoltageHvArgsDict']]]] voltage_hvs: attribute of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransformerVoltageLvArgs', 'TransformerVoltageLvArgsDict']]]] voltage_lvs: attribute of the resource
        :param pulumi.Input[Union['TransformerXnOhmArgs', 'TransformerXnOhmArgsDict']] xn_ohm: attribute of the resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TransformerState.__new__(_TransformerState)

        __props__.__dict__["active_power_hvs"] = active_power_hvs
        __props__.__dict__["active_power_losses"] = active_power_losses
        __props__.__dict__["active_power_lvs"] = active_power_lvs
        __props__.__dict__["capacitance"] = capacitance
        __props__.__dict__["conductance"] = conductance
        __props__.__dict__["contingencies"] = contingencies
        __props__.__dict__["current_hvs"] = current_hvs
        __props__.__dict__["current_lvs"] = current_lvs
        __props__.__dict__["description"] = description
        __props__.__dict__["geometry"] = geometry
        __props__.__dict__["kinds"] = kinds
        __props__.__dict__["maximum_allowed_current"] = maximum_allowed_current
        __props__.__dict__["maximum_allowed_power"] = maximum_allowed_power
        __props__.__dict__["name"] = name
        __props__.__dict__["reactance"] = reactance
        __props__.__dict__["reactive_power_hvs"] = reactive_power_hvs
        __props__.__dict__["reactive_power_losses"] = reactive_power_losses
        __props__.__dict__["reactive_power_lvs"] = reactive_power_lvs
        __props__.__dict__["resistance"] = resistance
        __props__.__dict__["safety_margin_for_power"] = safety_margin_for_power
        __props__.__dict__["standard_type"] = standard_type
        __props__.__dict__["switch_status_hvs"] = switch_status_hvs
        __props__.__dict__["switch_status_lvs"] = switch_status_lvs
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tap_pos"] = tap_pos
        __props__.__dict__["timezone"] = timezone
        __props__.__dict__["voltage_hvs"] = voltage_hvs
        __props__.__dict__["voltage_lvs"] = voltage_lvs
        __props__.__dict__["xn_ohm"] = xn_ohm
        return Transformer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activePowerHvs")
    def active_power_hvs(self) -> pulumi.Output[Sequence['outputs.TransformerActivePowerHv']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "active_power_hvs")

    @property
    @pulumi.getter(name="activePowerLosses")
    def active_power_losses(self) -> pulumi.Output[Sequence['outputs.TransformerActivePowerLoss']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "active_power_losses")

    @property
    @pulumi.getter(name="activePowerLvs")
    def active_power_lvs(self) -> pulumi.Output[Sequence['outputs.TransformerActivePowerLv']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "active_power_lvs")

    @property
    @pulumi.getter
    def capacitance(self) -> pulumi.Output['outputs.TransformerCapacitance']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "capacitance")

    @property
    @pulumi.getter
    def conductance(self) -> pulumi.Output['outputs.TransformerConductance']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "conductance")

    @property
    @pulumi.getter
    def contingencies(self) -> pulumi.Output[Sequence['outputs.TransformerContingency']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "contingencies")

    @property
    @pulumi.getter(name="currentHvs")
    def current_hvs(self) -> pulumi.Output[Sequence['outputs.TransformerCurrentHv']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "current_hvs")

    @property
    @pulumi.getter(name="currentLvs")
    def current_lvs(self) -> pulumi.Output[Sequence['outputs.TransformerCurrentLv']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "current_lvs")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        description of the resource
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def geometry(self) -> pulumi.Output[Optional[str]]:
        """
        geo position and shape of the resource
        """
        return pulumi.get(self, "geometry")

    @property
    @pulumi.getter
    def kinds(self) -> pulumi.Output[Sequence['outputs.TransformerKind']]:
        """
        kind of the resource
        """
        return pulumi.get(self, "kinds")

    @property
    @pulumi.getter(name="maximumAllowedCurrent")
    def maximum_allowed_current(self) -> pulumi.Output['outputs.TransformerMaximumAllowedCurrent']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "maximum_allowed_current")

    @property
    @pulumi.getter(name="maximumAllowedPower")
    def maximum_allowed_power(self) -> pulumi.Output['outputs.TransformerMaximumAllowedPower']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "maximum_allowed_power")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def reactance(self) -> pulumi.Output['outputs.TransformerReactance']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "reactance")

    @property
    @pulumi.getter(name="reactivePowerHvs")
    def reactive_power_hvs(self) -> pulumi.Output[Sequence['outputs.TransformerReactivePowerHv']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "reactive_power_hvs")

    @property
    @pulumi.getter(name="reactivePowerLosses")
    def reactive_power_losses(self) -> pulumi.Output[Sequence['outputs.TransformerReactivePowerLoss']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "reactive_power_losses")

    @property
    @pulumi.getter(name="reactivePowerLvs")
    def reactive_power_lvs(self) -> pulumi.Output[Sequence['outputs.TransformerReactivePowerLv']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "reactive_power_lvs")

    @property
    @pulumi.getter
    def resistance(self) -> pulumi.Output['outputs.TransformerResistance']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "resistance")

    @property
    @pulumi.getter(name="safetyMarginForPower")
    def safety_margin_for_power(self) -> pulumi.Output['outputs.TransformerSafetyMarginForPower']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "safety_margin_for_power")

    @property
    @pulumi.getter(name="standardType")
    def standard_type(self) -> pulumi.Output['outputs.TransformerStandardType']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "standard_type")

    @property
    @pulumi.getter(name="switchStatusHvs")
    def switch_status_hvs(self) -> pulumi.Output[Sequence['outputs.TransformerSwitchStatusHv']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "switch_status_hvs")

    @property
    @pulumi.getter(name="switchStatusLvs")
    def switch_status_lvs(self) -> pulumi.Output[Sequence['outputs.TransformerSwitchStatusLv']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "switch_status_lvs")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.TransformerTag']]]:
        """
        tags of the resource
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tapPos")
    def tap_pos(self) -> pulumi.Output['outputs.TransformerTapPos']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "tap_pos")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[Optional[str]]:
        """
        timezone that overrides location-based timezone of the resource
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="voltageHvs")
    def voltage_hvs(self) -> pulumi.Output[Sequence['outputs.TransformerVoltageHv']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "voltage_hvs")

    @property
    @pulumi.getter(name="voltageLvs")
    def voltage_lvs(self) -> pulumi.Output[Sequence['outputs.TransformerVoltageLv']]:
        """
        attribute of the resource
        """
        return pulumi.get(self, "voltage_lvs")

    @property
    @pulumi.getter(name="xnOhm")
    def xn_ohm(self) -> pulumi.Output['outputs.TransformerXnOhm']:
        """
        attribute of the resource
        """
        return pulumi.get(self, "xn_ohm")

