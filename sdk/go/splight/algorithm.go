// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import splight:index/algorithm:Algorithm [options] splight_algorithm.<name> <algorithm_id>
// ```
type Algorithm struct {
	pulumi.CustomResourceState

	// optional description to add details of the resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// static config parameters of the routine
	Inputs AlgorithmInputTypeArrayOutput `pulumi:"inputs"`
	// log level of the algorithm
	LogLevel pulumi.StringPtrOutput `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize pulumi.StringPtrOutput `pulumi:"machineInstanceSize"`
	// the name of the algorithm to be created
	Name pulumi.StringOutput `pulumi:"name"`
	// id of the compute node where the algorithm runs
	Node pulumi.StringPtrOutput `pulumi:"node"`
	// restart policy of the algorithm
	RestartPolicy pulumi.StringPtrOutput `pulumi:"restartPolicy"`
	// tags of the resource
	Tags AlgorithmTagArrayOutput `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub algorithm
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewAlgorithm registers a new resource with the given unique name, arguments, and options.
func NewAlgorithm(ctx *pulumi.Context,
	name string, args *AlgorithmArgs, opts ...pulumi.ResourceOption) (*Algorithm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Algorithm
	err := ctx.RegisterResource("splight:index/algorithm:Algorithm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlgorithm gets an existing Algorithm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlgorithm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlgorithmState, opts ...pulumi.ResourceOption) (*Algorithm, error) {
	var resource Algorithm
	err := ctx.ReadResource("splight:index/algorithm:Algorithm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Algorithm resources.
type algorithmState struct {
	// optional description to add details of the resource
	Description *string `pulumi:"description"`
	// static config parameters of the routine
	Inputs []AlgorithmInputType `pulumi:"inputs"`
	// log level of the algorithm
	LogLevel *string `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize *string `pulumi:"machineInstanceSize"`
	// the name of the algorithm to be created
	Name *string `pulumi:"name"`
	// id of the compute node where the algorithm runs
	Node *string `pulumi:"node"`
	// restart policy of the algorithm
	RestartPolicy *string `pulumi:"restartPolicy"`
	// tags of the resource
	Tags []AlgorithmTag `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub algorithm
	Version *string `pulumi:"version"`
}

type AlgorithmState struct {
	// optional description to add details of the resource
	Description pulumi.StringPtrInput
	// static config parameters of the routine
	Inputs AlgorithmInputTypeArrayInput
	// log level of the algorithm
	LogLevel pulumi.StringPtrInput
	// instance size
	MachineInstanceSize pulumi.StringPtrInput
	// the name of the algorithm to be created
	Name pulumi.StringPtrInput
	// id of the compute node where the algorithm runs
	Node pulumi.StringPtrInput
	// restart policy of the algorithm
	RestartPolicy pulumi.StringPtrInput
	// tags of the resource
	Tags AlgorithmTagArrayInput
	// [NAME-VERSION] the version of the hub algorithm
	Version pulumi.StringPtrInput
}

func (AlgorithmState) ElementType() reflect.Type {
	return reflect.TypeOf((*algorithmState)(nil)).Elem()
}

type algorithmArgs struct {
	// optional description to add details of the resource
	Description *string `pulumi:"description"`
	// static config parameters of the routine
	Inputs []AlgorithmInputType `pulumi:"inputs"`
	// log level of the algorithm
	LogLevel *string `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize *string `pulumi:"machineInstanceSize"`
	// the name of the algorithm to be created
	Name *string `pulumi:"name"`
	// id of the compute node where the algorithm runs
	Node *string `pulumi:"node"`
	// restart policy of the algorithm
	RestartPolicy *string `pulumi:"restartPolicy"`
	// tags of the resource
	Tags []AlgorithmTag `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub algorithm
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Algorithm resource.
type AlgorithmArgs struct {
	// optional description to add details of the resource
	Description pulumi.StringPtrInput
	// static config parameters of the routine
	Inputs AlgorithmInputTypeArrayInput
	// log level of the algorithm
	LogLevel pulumi.StringPtrInput
	// instance size
	MachineInstanceSize pulumi.StringPtrInput
	// the name of the algorithm to be created
	Name pulumi.StringPtrInput
	// id of the compute node where the algorithm runs
	Node pulumi.StringPtrInput
	// restart policy of the algorithm
	RestartPolicy pulumi.StringPtrInput
	// tags of the resource
	Tags AlgorithmTagArrayInput
	// [NAME-VERSION] the version of the hub algorithm
	Version pulumi.StringInput
}

func (AlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*algorithmArgs)(nil)).Elem()
}

type AlgorithmInput interface {
	pulumi.Input

	ToAlgorithmOutput() AlgorithmOutput
	ToAlgorithmOutputWithContext(ctx context.Context) AlgorithmOutput
}

func (*Algorithm) ElementType() reflect.Type {
	return reflect.TypeOf((**Algorithm)(nil)).Elem()
}

func (i *Algorithm) ToAlgorithmOutput() AlgorithmOutput {
	return i.ToAlgorithmOutputWithContext(context.Background())
}

func (i *Algorithm) ToAlgorithmOutputWithContext(ctx context.Context) AlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlgorithmOutput)
}

// AlgorithmArrayInput is an input type that accepts AlgorithmArray and AlgorithmArrayOutput values.
// You can construct a concrete instance of `AlgorithmArrayInput` via:
//
//	AlgorithmArray{ AlgorithmArgs{...} }
type AlgorithmArrayInput interface {
	pulumi.Input

	ToAlgorithmArrayOutput() AlgorithmArrayOutput
	ToAlgorithmArrayOutputWithContext(context.Context) AlgorithmArrayOutput
}

type AlgorithmArray []AlgorithmInput

func (AlgorithmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Algorithm)(nil)).Elem()
}

func (i AlgorithmArray) ToAlgorithmArrayOutput() AlgorithmArrayOutput {
	return i.ToAlgorithmArrayOutputWithContext(context.Background())
}

func (i AlgorithmArray) ToAlgorithmArrayOutputWithContext(ctx context.Context) AlgorithmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlgorithmArrayOutput)
}

// AlgorithmMapInput is an input type that accepts AlgorithmMap and AlgorithmMapOutput values.
// You can construct a concrete instance of `AlgorithmMapInput` via:
//
//	AlgorithmMap{ "key": AlgorithmArgs{...} }
type AlgorithmMapInput interface {
	pulumi.Input

	ToAlgorithmMapOutput() AlgorithmMapOutput
	ToAlgorithmMapOutputWithContext(context.Context) AlgorithmMapOutput
}

type AlgorithmMap map[string]AlgorithmInput

func (AlgorithmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Algorithm)(nil)).Elem()
}

func (i AlgorithmMap) ToAlgorithmMapOutput() AlgorithmMapOutput {
	return i.ToAlgorithmMapOutputWithContext(context.Background())
}

func (i AlgorithmMap) ToAlgorithmMapOutputWithContext(ctx context.Context) AlgorithmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlgorithmMapOutput)
}

type AlgorithmOutput struct{ *pulumi.OutputState }

func (AlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Algorithm)(nil)).Elem()
}

func (o AlgorithmOutput) ToAlgorithmOutput() AlgorithmOutput {
	return o
}

func (o AlgorithmOutput) ToAlgorithmOutputWithContext(ctx context.Context) AlgorithmOutput {
	return o
}

// optional description to add details of the resource
func (o AlgorithmOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Algorithm) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// static config parameters of the routine
func (o AlgorithmOutput) Inputs() AlgorithmInputTypeArrayOutput {
	return o.ApplyT(func(v *Algorithm) AlgorithmInputTypeArrayOutput { return v.Inputs }).(AlgorithmInputTypeArrayOutput)
}

// log level of the algorithm
func (o AlgorithmOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Algorithm) pulumi.StringPtrOutput { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// instance size
func (o AlgorithmOutput) MachineInstanceSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Algorithm) pulumi.StringPtrOutput { return v.MachineInstanceSize }).(pulumi.StringPtrOutput)
}

// the name of the algorithm to be created
func (o AlgorithmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Algorithm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// id of the compute node where the algorithm runs
func (o AlgorithmOutput) Node() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Algorithm) pulumi.StringPtrOutput { return v.Node }).(pulumi.StringPtrOutput)
}

// restart policy of the algorithm
func (o AlgorithmOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Algorithm) pulumi.StringPtrOutput { return v.RestartPolicy }).(pulumi.StringPtrOutput)
}

// tags of the resource
func (o AlgorithmOutput) Tags() AlgorithmTagArrayOutput {
	return o.ApplyT(func(v *Algorithm) AlgorithmTagArrayOutput { return v.Tags }).(AlgorithmTagArrayOutput)
}

// [NAME-VERSION] the version of the hub algorithm
func (o AlgorithmOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Algorithm) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type AlgorithmArrayOutput struct{ *pulumi.OutputState }

func (AlgorithmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Algorithm)(nil)).Elem()
}

func (o AlgorithmArrayOutput) ToAlgorithmArrayOutput() AlgorithmArrayOutput {
	return o
}

func (o AlgorithmArrayOutput) ToAlgorithmArrayOutputWithContext(ctx context.Context) AlgorithmArrayOutput {
	return o
}

func (o AlgorithmArrayOutput) Index(i pulumi.IntInput) AlgorithmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Algorithm {
		return vs[0].([]*Algorithm)[vs[1].(int)]
	}).(AlgorithmOutput)
}

type AlgorithmMapOutput struct{ *pulumi.OutputState }

func (AlgorithmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Algorithm)(nil)).Elem()
}

func (o AlgorithmMapOutput) ToAlgorithmMapOutput() AlgorithmMapOutput {
	return o
}

func (o AlgorithmMapOutput) ToAlgorithmMapOutputWithContext(ctx context.Context) AlgorithmMapOutput {
	return o
}

func (o AlgorithmMapOutput) MapIndex(k pulumi.StringInput) AlgorithmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Algorithm {
		return vs[0].(map[string]*Algorithm)[vs[1].(string)]
	}).(AlgorithmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlgorithmInput)(nil)).Elem(), &Algorithm{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlgorithmArrayInput)(nil)).Elem(), AlgorithmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlgorithmMapInput)(nil)).Elem(), AlgorithmMap{})
	pulumi.RegisterOutputType(AlgorithmOutput{})
	pulumi.RegisterOutputType(AlgorithmArrayOutput{})
	pulumi.RegisterOutputType(AlgorithmMapOutput{})
}
