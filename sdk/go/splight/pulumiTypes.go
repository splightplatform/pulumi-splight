// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

var _ = internal.GetEnvOrDefault

type AlertAlertItem struct {
	ExpressionPlain string `pulumi:"expressionPlain"`
	// optional id
	Id         *string `pulumi:"id"`
	QueryPlain string  `pulumi:"queryPlain"`
	RefId      string  `pulumi:"refId"`
	Type       string  `pulumi:"type"`
}

// AlertAlertItemInput is an input type that accepts AlertAlertItemArgs and AlertAlertItemOutput values.
// You can construct a concrete instance of `AlertAlertItemInput` via:
//
//	AlertAlertItemArgs{...}
type AlertAlertItemInput interface {
	pulumi.Input

	ToAlertAlertItemOutput() AlertAlertItemOutput
	ToAlertAlertItemOutputWithContext(context.Context) AlertAlertItemOutput
}

type AlertAlertItemArgs struct {
	ExpressionPlain pulumi.StringInput `pulumi:"expressionPlain"`
	// optional id
	Id         pulumi.StringPtrInput `pulumi:"id"`
	QueryPlain pulumi.StringInput    `pulumi:"queryPlain"`
	RefId      pulumi.StringInput    `pulumi:"refId"`
	Type       pulumi.StringInput    `pulumi:"type"`
}

func (AlertAlertItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertItem)(nil)).Elem()
}

func (i AlertAlertItemArgs) ToAlertAlertItemOutput() AlertAlertItemOutput {
	return i.ToAlertAlertItemOutputWithContext(context.Background())
}

func (i AlertAlertItemArgs) ToAlertAlertItemOutputWithContext(ctx context.Context) AlertAlertItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertItemOutput)
}

// AlertAlertItemArrayInput is an input type that accepts AlertAlertItemArray and AlertAlertItemArrayOutput values.
// You can construct a concrete instance of `AlertAlertItemArrayInput` via:
//
//	AlertAlertItemArray{ AlertAlertItemArgs{...} }
type AlertAlertItemArrayInput interface {
	pulumi.Input

	ToAlertAlertItemArrayOutput() AlertAlertItemArrayOutput
	ToAlertAlertItemArrayOutputWithContext(context.Context) AlertAlertItemArrayOutput
}

type AlertAlertItemArray []AlertAlertItemInput

func (AlertAlertItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertAlertItem)(nil)).Elem()
}

func (i AlertAlertItemArray) ToAlertAlertItemArrayOutput() AlertAlertItemArrayOutput {
	return i.ToAlertAlertItemArrayOutputWithContext(context.Background())
}

func (i AlertAlertItemArray) ToAlertAlertItemArrayOutputWithContext(ctx context.Context) AlertAlertItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertItemArrayOutput)
}

type AlertAlertItemOutput struct{ *pulumi.OutputState }

func (AlertAlertItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertItem)(nil)).Elem()
}

func (o AlertAlertItemOutput) ToAlertAlertItemOutput() AlertAlertItemOutput {
	return o
}

func (o AlertAlertItemOutput) ToAlertAlertItemOutputWithContext(ctx context.Context) AlertAlertItemOutput {
	return o
}

func (o AlertAlertItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

// optional id
func (o AlertAlertItemOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertAlertItem) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o AlertAlertItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o AlertAlertItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o AlertAlertItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertItem) string { return v.Type }).(pulumi.StringOutput)
}

type AlertAlertItemArrayOutput struct{ *pulumi.OutputState }

func (AlertAlertItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertAlertItem)(nil)).Elem()
}

func (o AlertAlertItemArrayOutput) ToAlertAlertItemArrayOutput() AlertAlertItemArrayOutput {
	return o
}

func (o AlertAlertItemArrayOutput) ToAlertAlertItemArrayOutputWithContext(ctx context.Context) AlertAlertItemArrayOutput {
	return o
}

func (o AlertAlertItemArrayOutput) Index(i pulumi.IntInput) AlertAlertItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertAlertItem {
		return vs[0].([]AlertAlertItem)[vs[1].(int)]
	}).(AlertAlertItemOutput)
}

type AlertThreshold struct {
	// [alert|warning|no_alert] status value for the threshold
	Status string `pulumi:"status"`
	// optional custom value to be displayed in the platform.
	StatusText *string `pulumi:"statusText"`
	// value to be considered to compare
	Value float64 `pulumi:"value"`
}

// AlertThresholdInput is an input type that accepts AlertThresholdArgs and AlertThresholdOutput values.
// You can construct a concrete instance of `AlertThresholdInput` via:
//
//	AlertThresholdArgs{...}
type AlertThresholdInput interface {
	pulumi.Input

	ToAlertThresholdOutput() AlertThresholdOutput
	ToAlertThresholdOutputWithContext(context.Context) AlertThresholdOutput
}

type AlertThresholdArgs struct {
	// [alert|warning|no_alert] status value for the threshold
	Status pulumi.StringInput `pulumi:"status"`
	// optional custom value to be displayed in the platform.
	StatusText pulumi.StringPtrInput `pulumi:"statusText"`
	// value to be considered to compare
	Value pulumi.Float64Input `pulumi:"value"`
}

func (AlertThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertThreshold)(nil)).Elem()
}

func (i AlertThresholdArgs) ToAlertThresholdOutput() AlertThresholdOutput {
	return i.ToAlertThresholdOutputWithContext(context.Background())
}

func (i AlertThresholdArgs) ToAlertThresholdOutputWithContext(ctx context.Context) AlertThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertThresholdOutput)
}

// AlertThresholdArrayInput is an input type that accepts AlertThresholdArray and AlertThresholdArrayOutput values.
// You can construct a concrete instance of `AlertThresholdArrayInput` via:
//
//	AlertThresholdArray{ AlertThresholdArgs{...} }
type AlertThresholdArrayInput interface {
	pulumi.Input

	ToAlertThresholdArrayOutput() AlertThresholdArrayOutput
	ToAlertThresholdArrayOutputWithContext(context.Context) AlertThresholdArrayOutput
}

type AlertThresholdArray []AlertThresholdInput

func (AlertThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertThreshold)(nil)).Elem()
}

func (i AlertThresholdArray) ToAlertThresholdArrayOutput() AlertThresholdArrayOutput {
	return i.ToAlertThresholdArrayOutputWithContext(context.Background())
}

func (i AlertThresholdArray) ToAlertThresholdArrayOutputWithContext(ctx context.Context) AlertThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertThresholdArrayOutput)
}

type AlertThresholdOutput struct{ *pulumi.OutputState }

func (AlertThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertThreshold)(nil)).Elem()
}

func (o AlertThresholdOutput) ToAlertThresholdOutput() AlertThresholdOutput {
	return o
}

func (o AlertThresholdOutput) ToAlertThresholdOutputWithContext(ctx context.Context) AlertThresholdOutput {
	return o
}

// [alert|warning|no_alert] status value for the threshold
func (o AlertThresholdOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AlertThreshold) string { return v.Status }).(pulumi.StringOutput)
}

// optional custom value to be displayed in the platform.
func (o AlertThresholdOutput) StatusText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertThreshold) *string { return v.StatusText }).(pulumi.StringPtrOutput)
}

// value to be considered to compare
func (o AlertThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v AlertThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type AlertThresholdArrayOutput struct{ *pulumi.OutputState }

func (AlertThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertThreshold)(nil)).Elem()
}

func (o AlertThresholdArrayOutput) ToAlertThresholdArrayOutput() AlertThresholdArrayOutput {
	return o
}

func (o AlertThresholdArrayOutput) ToAlertThresholdArrayOutputWithContext(ctx context.Context) AlertThresholdArrayOutput {
	return o
}

func (o AlertThresholdArrayOutput) Index(i pulumi.IntInput) AlertThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertThreshold {
		return vs[0].([]AlertThreshold)[vs[1].(int)]
	}).(AlertThresholdOutput)
}

type AssetKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// AssetKindInput is an input type that accepts AssetKindArgs and AssetKindOutput values.
// You can construct a concrete instance of `AssetKindInput` via:
//
//	AssetKindArgs{...}
type AssetKindInput interface {
	pulumi.Input

	ToAssetKindOutput() AssetKindOutput
	ToAssetKindOutputWithContext(context.Context) AssetKindOutput
}

type AssetKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (AssetKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetKind)(nil)).Elem()
}

func (i AssetKindArgs) ToAssetKindOutput() AssetKindOutput {
	return i.ToAssetKindOutputWithContext(context.Background())
}

func (i AssetKindArgs) ToAssetKindOutputWithContext(ctx context.Context) AssetKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetKindOutput)
}

// AssetKindArrayInput is an input type that accepts AssetKindArray and AssetKindArrayOutput values.
// You can construct a concrete instance of `AssetKindArrayInput` via:
//
//	AssetKindArray{ AssetKindArgs{...} }
type AssetKindArrayInput interface {
	pulumi.Input

	ToAssetKindArrayOutput() AssetKindArrayOutput
	ToAssetKindArrayOutputWithContext(context.Context) AssetKindArrayOutput
}

type AssetKindArray []AssetKindInput

func (AssetKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetKind)(nil)).Elem()
}

func (i AssetKindArray) ToAssetKindArrayOutput() AssetKindArrayOutput {
	return i.ToAssetKindArrayOutputWithContext(context.Background())
}

func (i AssetKindArray) ToAssetKindArrayOutputWithContext(ctx context.Context) AssetKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetKindArrayOutput)
}

type AssetKindOutput struct{ *pulumi.OutputState }

func (AssetKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetKind)(nil)).Elem()
}

func (o AssetKindOutput) ToAssetKindOutput() AssetKindOutput {
	return o
}

func (o AssetKindOutput) ToAssetKindOutputWithContext(ctx context.Context) AssetKindOutput {
	return o
}

// kind id
func (o AssetKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AssetKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o AssetKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetKind) string { return v.Name }).(pulumi.StringOutput)
}

type AssetKindArrayOutput struct{ *pulumi.OutputState }

func (AssetKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetKind)(nil)).Elem()
}

func (o AssetKindArrayOutput) ToAssetKindArrayOutput() AssetKindArrayOutput {
	return o
}

func (o AssetKindArrayOutput) ToAssetKindArrayOutputWithContext(ctx context.Context) AssetKindArrayOutput {
	return o
}

func (o AssetKindArrayOutput) Index(i pulumi.IntInput) AssetKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetKind {
		return vs[0].([]AssetKind)[vs[1].(int)]
	}).(AssetKindOutput)
}

type ComponentInputType struct {
	Description *string `pulumi:"description"`
	Multiple    *bool   `pulumi:"multiple"`
	Name        string  `pulumi:"name"`
	Required    *bool   `pulumi:"required"`
	Sensitive   *bool   `pulumi:"sensitive"`
	Type        string  `pulumi:"type"`
	Value       *string `pulumi:"value"`
}

// ComponentInputTypeInput is an input type that accepts ComponentInputTypeArgs and ComponentInputTypeOutput values.
// You can construct a concrete instance of `ComponentInputTypeInput` via:
//
//	ComponentInputTypeArgs{...}
type ComponentInputTypeInput interface {
	pulumi.Input

	ToComponentInputTypeOutput() ComponentInputTypeOutput
	ToComponentInputTypeOutputWithContext(context.Context) ComponentInputTypeOutput
}

type ComponentInputTypeArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Multiple    pulumi.BoolPtrInput   `pulumi:"multiple"`
	Name        pulumi.StringInput    `pulumi:"name"`
	Required    pulumi.BoolPtrInput   `pulumi:"required"`
	Sensitive   pulumi.BoolPtrInput   `pulumi:"sensitive"`
	Type        pulumi.StringInput    `pulumi:"type"`
	Value       pulumi.StringPtrInput `pulumi:"value"`
}

func (ComponentInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentInputType)(nil)).Elem()
}

func (i ComponentInputTypeArgs) ToComponentInputTypeOutput() ComponentInputTypeOutput {
	return i.ToComponentInputTypeOutputWithContext(context.Background())
}

func (i ComponentInputTypeArgs) ToComponentInputTypeOutputWithContext(ctx context.Context) ComponentInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentInputTypeOutput)
}

// ComponentInputTypeArrayInput is an input type that accepts ComponentInputTypeArray and ComponentInputTypeArrayOutput values.
// You can construct a concrete instance of `ComponentInputTypeArrayInput` via:
//
//	ComponentInputTypeArray{ ComponentInputTypeArgs{...} }
type ComponentInputTypeArrayInput interface {
	pulumi.Input

	ToComponentInputTypeArrayOutput() ComponentInputTypeArrayOutput
	ToComponentInputTypeArrayOutputWithContext(context.Context) ComponentInputTypeArrayOutput
}

type ComponentInputTypeArray []ComponentInputTypeInput

func (ComponentInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentInputType)(nil)).Elem()
}

func (i ComponentInputTypeArray) ToComponentInputTypeArrayOutput() ComponentInputTypeArrayOutput {
	return i.ToComponentInputTypeArrayOutputWithContext(context.Background())
}

func (i ComponentInputTypeArray) ToComponentInputTypeArrayOutputWithContext(ctx context.Context) ComponentInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentInputTypeArrayOutput)
}

type ComponentInputTypeOutput struct{ *pulumi.OutputState }

func (ComponentInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentInputType)(nil)).Elem()
}

func (o ComponentInputTypeOutput) ToComponentInputTypeOutput() ComponentInputTypeOutput {
	return o
}

func (o ComponentInputTypeOutput) ToComponentInputTypeOutputWithContext(ctx context.Context) ComponentInputTypeOutput {
	return o
}

func (o ComponentInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ComponentInputTypeOutput) Multiple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentInputType) *bool { return v.Multiple }).(pulumi.BoolPtrOutput)
}

func (o ComponentInputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentInputType) string { return v.Name }).(pulumi.StringOutput)
}

func (o ComponentInputTypeOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentInputType) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o ComponentInputTypeOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentInputType) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

func (o ComponentInputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentInputType) string { return v.Type }).(pulumi.StringOutput)
}

func (o ComponentInputTypeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentInputType) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ComponentInputTypeArrayOutput struct{ *pulumi.OutputState }

func (ComponentInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentInputType)(nil)).Elem()
}

func (o ComponentInputTypeArrayOutput) ToComponentInputTypeArrayOutput() ComponentInputTypeArrayOutput {
	return o
}

func (o ComponentInputTypeArrayOutput) ToComponentInputTypeArrayOutputWithContext(ctx context.Context) ComponentInputTypeArrayOutput {
	return o
}

func (o ComponentInputTypeArrayOutput) Index(i pulumi.IntInput) ComponentInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentInputType {
		return vs[0].([]ComponentInputType)[vs[1].(int)]
	}).(ComponentInputTypeOutput)
}

type ComponentRoutineConfig struct {
	Description *string `pulumi:"description"`
	Multiple    *bool   `pulumi:"multiple"`
	Name        string  `pulumi:"name"`
	Required    *bool   `pulumi:"required"`
	Sensitive   *bool   `pulumi:"sensitive"`
	Type        string  `pulumi:"type"`
	Value       *string `pulumi:"value"`
}

// ComponentRoutineConfigInput is an input type that accepts ComponentRoutineConfigArgs and ComponentRoutineConfigOutput values.
// You can construct a concrete instance of `ComponentRoutineConfigInput` via:
//
//	ComponentRoutineConfigArgs{...}
type ComponentRoutineConfigInput interface {
	pulumi.Input

	ToComponentRoutineConfigOutput() ComponentRoutineConfigOutput
	ToComponentRoutineConfigOutputWithContext(context.Context) ComponentRoutineConfigOutput
}

type ComponentRoutineConfigArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Multiple    pulumi.BoolPtrInput   `pulumi:"multiple"`
	Name        pulumi.StringInput    `pulumi:"name"`
	Required    pulumi.BoolPtrInput   `pulumi:"required"`
	Sensitive   pulumi.BoolPtrInput   `pulumi:"sensitive"`
	Type        pulumi.StringInput    `pulumi:"type"`
	Value       pulumi.StringPtrInput `pulumi:"value"`
}

func (ComponentRoutineConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineConfig)(nil)).Elem()
}

func (i ComponentRoutineConfigArgs) ToComponentRoutineConfigOutput() ComponentRoutineConfigOutput {
	return i.ToComponentRoutineConfigOutputWithContext(context.Background())
}

func (i ComponentRoutineConfigArgs) ToComponentRoutineConfigOutputWithContext(ctx context.Context) ComponentRoutineConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineConfigOutput)
}

// ComponentRoutineConfigArrayInput is an input type that accepts ComponentRoutineConfigArray and ComponentRoutineConfigArrayOutput values.
// You can construct a concrete instance of `ComponentRoutineConfigArrayInput` via:
//
//	ComponentRoutineConfigArray{ ComponentRoutineConfigArgs{...} }
type ComponentRoutineConfigArrayInput interface {
	pulumi.Input

	ToComponentRoutineConfigArrayOutput() ComponentRoutineConfigArrayOutput
	ToComponentRoutineConfigArrayOutputWithContext(context.Context) ComponentRoutineConfigArrayOutput
}

type ComponentRoutineConfigArray []ComponentRoutineConfigInput

func (ComponentRoutineConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineConfig)(nil)).Elem()
}

func (i ComponentRoutineConfigArray) ToComponentRoutineConfigArrayOutput() ComponentRoutineConfigArrayOutput {
	return i.ToComponentRoutineConfigArrayOutputWithContext(context.Background())
}

func (i ComponentRoutineConfigArray) ToComponentRoutineConfigArrayOutputWithContext(ctx context.Context) ComponentRoutineConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineConfigArrayOutput)
}

type ComponentRoutineConfigOutput struct{ *pulumi.OutputState }

func (ComponentRoutineConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineConfig)(nil)).Elem()
}

func (o ComponentRoutineConfigOutput) ToComponentRoutineConfigOutput() ComponentRoutineConfigOutput {
	return o
}

func (o ComponentRoutineConfigOutput) ToComponentRoutineConfigOutputWithContext(ctx context.Context) ComponentRoutineConfigOutput {
	return o
}

func (o ComponentRoutineConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ComponentRoutineConfigOutput) Multiple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) *bool { return v.Multiple }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) string { return v.Name }).(pulumi.StringOutput)
}

func (o ComponentRoutineConfigOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineConfigOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) string { return v.Type }).(pulumi.StringOutput)
}

func (o ComponentRoutineConfigOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ComponentRoutineConfigArrayOutput struct{ *pulumi.OutputState }

func (ComponentRoutineConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineConfig)(nil)).Elem()
}

func (o ComponentRoutineConfigArrayOutput) ToComponentRoutineConfigArrayOutput() ComponentRoutineConfigArrayOutput {
	return o
}

func (o ComponentRoutineConfigArrayOutput) ToComponentRoutineConfigArrayOutputWithContext(ctx context.Context) ComponentRoutineConfigArrayOutput {
	return o
}

func (o ComponentRoutineConfigArrayOutput) Index(i pulumi.IntInput) ComponentRoutineConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentRoutineConfig {
		return vs[0].([]ComponentRoutineConfig)[vs[1].(int)]
	}).(ComponentRoutineConfigOutput)
}

type ComponentRoutineInputType struct {
	Description *string                      `pulumi:"description"`
	Multiple    *bool                        `pulumi:"multiple"`
	Name        string                       `pulumi:"name"`
	Required    *bool                        `pulumi:"required"`
	Sensitive   *bool                        `pulumi:"sensitive"`
	Type        *string                      `pulumi:"type"`
	ValueType   string                       `pulumi:"valueType"`
	Values      []ComponentRoutineInputValue `pulumi:"values"`
}

// ComponentRoutineInputTypeInput is an input type that accepts ComponentRoutineInputTypeArgs and ComponentRoutineInputTypeOutput values.
// You can construct a concrete instance of `ComponentRoutineInputTypeInput` via:
//
//	ComponentRoutineInputTypeArgs{...}
type ComponentRoutineInputTypeInput interface {
	pulumi.Input

	ToComponentRoutineInputTypeOutput() ComponentRoutineInputTypeOutput
	ToComponentRoutineInputTypeOutputWithContext(context.Context) ComponentRoutineInputTypeOutput
}

type ComponentRoutineInputTypeArgs struct {
	Description pulumi.StringPtrInput                `pulumi:"description"`
	Multiple    pulumi.BoolPtrInput                  `pulumi:"multiple"`
	Name        pulumi.StringInput                   `pulumi:"name"`
	Required    pulumi.BoolPtrInput                  `pulumi:"required"`
	Sensitive   pulumi.BoolPtrInput                  `pulumi:"sensitive"`
	Type        pulumi.StringPtrInput                `pulumi:"type"`
	ValueType   pulumi.StringInput                   `pulumi:"valueType"`
	Values      ComponentRoutineInputValueArrayInput `pulumi:"values"`
}

func (ComponentRoutineInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineInputType)(nil)).Elem()
}

func (i ComponentRoutineInputTypeArgs) ToComponentRoutineInputTypeOutput() ComponentRoutineInputTypeOutput {
	return i.ToComponentRoutineInputTypeOutputWithContext(context.Background())
}

func (i ComponentRoutineInputTypeArgs) ToComponentRoutineInputTypeOutputWithContext(ctx context.Context) ComponentRoutineInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineInputTypeOutput)
}

// ComponentRoutineInputTypeArrayInput is an input type that accepts ComponentRoutineInputTypeArray and ComponentRoutineInputTypeArrayOutput values.
// You can construct a concrete instance of `ComponentRoutineInputTypeArrayInput` via:
//
//	ComponentRoutineInputTypeArray{ ComponentRoutineInputTypeArgs{...} }
type ComponentRoutineInputTypeArrayInput interface {
	pulumi.Input

	ToComponentRoutineInputTypeArrayOutput() ComponentRoutineInputTypeArrayOutput
	ToComponentRoutineInputTypeArrayOutputWithContext(context.Context) ComponentRoutineInputTypeArrayOutput
}

type ComponentRoutineInputTypeArray []ComponentRoutineInputTypeInput

func (ComponentRoutineInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineInputType)(nil)).Elem()
}

func (i ComponentRoutineInputTypeArray) ToComponentRoutineInputTypeArrayOutput() ComponentRoutineInputTypeArrayOutput {
	return i.ToComponentRoutineInputTypeArrayOutputWithContext(context.Background())
}

func (i ComponentRoutineInputTypeArray) ToComponentRoutineInputTypeArrayOutputWithContext(ctx context.Context) ComponentRoutineInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineInputTypeArrayOutput)
}

type ComponentRoutineInputTypeOutput struct{ *pulumi.OutputState }

func (ComponentRoutineInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineInputType)(nil)).Elem()
}

func (o ComponentRoutineInputTypeOutput) ToComponentRoutineInputTypeOutput() ComponentRoutineInputTypeOutput {
	return o
}

func (o ComponentRoutineInputTypeOutput) ToComponentRoutineInputTypeOutputWithContext(ctx context.Context) ComponentRoutineInputTypeOutput {
	return o
}

func (o ComponentRoutineInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ComponentRoutineInputTypeOutput) Multiple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) *bool { return v.Multiple }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineInputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) string { return v.Name }).(pulumi.StringOutput)
}

func (o ComponentRoutineInputTypeOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineInputTypeOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineInputTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ComponentRoutineInputTypeOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) string { return v.ValueType }).(pulumi.StringOutput)
}

func (o ComponentRoutineInputTypeOutput) Values() ComponentRoutineInputValueArrayOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) []ComponentRoutineInputValue { return v.Values }).(ComponentRoutineInputValueArrayOutput)
}

type ComponentRoutineInputTypeArrayOutput struct{ *pulumi.OutputState }

func (ComponentRoutineInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineInputType)(nil)).Elem()
}

func (o ComponentRoutineInputTypeArrayOutput) ToComponentRoutineInputTypeArrayOutput() ComponentRoutineInputTypeArrayOutput {
	return o
}

func (o ComponentRoutineInputTypeArrayOutput) ToComponentRoutineInputTypeArrayOutputWithContext(ctx context.Context) ComponentRoutineInputTypeArrayOutput {
	return o
}

func (o ComponentRoutineInputTypeArrayOutput) Index(i pulumi.IntInput) ComponentRoutineInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentRoutineInputType {
		return vs[0].([]ComponentRoutineInputType)[vs[1].(int)]
	}).(ComponentRoutineInputTypeOutput)
}

type ComponentRoutineInputValue struct {
	Asset     string `pulumi:"asset"`
	Attribute string `pulumi:"attribute"`
}

// ComponentRoutineInputValueInput is an input type that accepts ComponentRoutineInputValueArgs and ComponentRoutineInputValueOutput values.
// You can construct a concrete instance of `ComponentRoutineInputValueInput` via:
//
//	ComponentRoutineInputValueArgs{...}
type ComponentRoutineInputValueInput interface {
	pulumi.Input

	ToComponentRoutineInputValueOutput() ComponentRoutineInputValueOutput
	ToComponentRoutineInputValueOutputWithContext(context.Context) ComponentRoutineInputValueOutput
}

type ComponentRoutineInputValueArgs struct {
	Asset     pulumi.StringInput `pulumi:"asset"`
	Attribute pulumi.StringInput `pulumi:"attribute"`
}

func (ComponentRoutineInputValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineInputValue)(nil)).Elem()
}

func (i ComponentRoutineInputValueArgs) ToComponentRoutineInputValueOutput() ComponentRoutineInputValueOutput {
	return i.ToComponentRoutineInputValueOutputWithContext(context.Background())
}

func (i ComponentRoutineInputValueArgs) ToComponentRoutineInputValueOutputWithContext(ctx context.Context) ComponentRoutineInputValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineInputValueOutput)
}

// ComponentRoutineInputValueArrayInput is an input type that accepts ComponentRoutineInputValueArray and ComponentRoutineInputValueArrayOutput values.
// You can construct a concrete instance of `ComponentRoutineInputValueArrayInput` via:
//
//	ComponentRoutineInputValueArray{ ComponentRoutineInputValueArgs{...} }
type ComponentRoutineInputValueArrayInput interface {
	pulumi.Input

	ToComponentRoutineInputValueArrayOutput() ComponentRoutineInputValueArrayOutput
	ToComponentRoutineInputValueArrayOutputWithContext(context.Context) ComponentRoutineInputValueArrayOutput
}

type ComponentRoutineInputValueArray []ComponentRoutineInputValueInput

func (ComponentRoutineInputValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineInputValue)(nil)).Elem()
}

func (i ComponentRoutineInputValueArray) ToComponentRoutineInputValueArrayOutput() ComponentRoutineInputValueArrayOutput {
	return i.ToComponentRoutineInputValueArrayOutputWithContext(context.Background())
}

func (i ComponentRoutineInputValueArray) ToComponentRoutineInputValueArrayOutputWithContext(ctx context.Context) ComponentRoutineInputValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineInputValueArrayOutput)
}

type ComponentRoutineInputValueOutput struct{ *pulumi.OutputState }

func (ComponentRoutineInputValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineInputValue)(nil)).Elem()
}

func (o ComponentRoutineInputValueOutput) ToComponentRoutineInputValueOutput() ComponentRoutineInputValueOutput {
	return o
}

func (o ComponentRoutineInputValueOutput) ToComponentRoutineInputValueOutputWithContext(ctx context.Context) ComponentRoutineInputValueOutput {
	return o
}

func (o ComponentRoutineInputValueOutput) Asset() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineInputValue) string { return v.Asset }).(pulumi.StringOutput)
}

func (o ComponentRoutineInputValueOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineInputValue) string { return v.Attribute }).(pulumi.StringOutput)
}

type ComponentRoutineInputValueArrayOutput struct{ *pulumi.OutputState }

func (ComponentRoutineInputValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineInputValue)(nil)).Elem()
}

func (o ComponentRoutineInputValueArrayOutput) ToComponentRoutineInputValueArrayOutput() ComponentRoutineInputValueArrayOutput {
	return o
}

func (o ComponentRoutineInputValueArrayOutput) ToComponentRoutineInputValueArrayOutputWithContext(ctx context.Context) ComponentRoutineInputValueArrayOutput {
	return o
}

func (o ComponentRoutineInputValueArrayOutput) Index(i pulumi.IntInput) ComponentRoutineInputValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentRoutineInputValue {
		return vs[0].([]ComponentRoutineInputValue)[vs[1].(int)]
	}).(ComponentRoutineInputValueOutput)
}

type ComponentRoutineOutputType struct {
	Description *string                       `pulumi:"description"`
	Multiple    *bool                         `pulumi:"multiple"`
	Name        string                        `pulumi:"name"`
	Required    *bool                         `pulumi:"required"`
	Sensitive   *bool                         `pulumi:"sensitive"`
	Type        *string                       `pulumi:"type"`
	ValueType   string                        `pulumi:"valueType"`
	Values      []ComponentRoutineOutputValue `pulumi:"values"`
}

// ComponentRoutineOutputTypeInput is an input type that accepts ComponentRoutineOutputTypeArgs and ComponentRoutineOutputTypeOutput values.
// You can construct a concrete instance of `ComponentRoutineOutputTypeInput` via:
//
//	ComponentRoutineOutputTypeArgs{...}
type ComponentRoutineOutputTypeInput interface {
	pulumi.Input

	ToComponentRoutineOutputTypeOutput() ComponentRoutineOutputTypeOutput
	ToComponentRoutineOutputTypeOutputWithContext(context.Context) ComponentRoutineOutputTypeOutput
}

type ComponentRoutineOutputTypeArgs struct {
	Description pulumi.StringPtrInput                 `pulumi:"description"`
	Multiple    pulumi.BoolPtrInput                   `pulumi:"multiple"`
	Name        pulumi.StringInput                    `pulumi:"name"`
	Required    pulumi.BoolPtrInput                   `pulumi:"required"`
	Sensitive   pulumi.BoolPtrInput                   `pulumi:"sensitive"`
	Type        pulumi.StringPtrInput                 `pulumi:"type"`
	ValueType   pulumi.StringInput                    `pulumi:"valueType"`
	Values      ComponentRoutineOutputValueArrayInput `pulumi:"values"`
}

func (ComponentRoutineOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineOutputType)(nil)).Elem()
}

func (i ComponentRoutineOutputTypeArgs) ToComponentRoutineOutputTypeOutput() ComponentRoutineOutputTypeOutput {
	return i.ToComponentRoutineOutputTypeOutputWithContext(context.Background())
}

func (i ComponentRoutineOutputTypeArgs) ToComponentRoutineOutputTypeOutputWithContext(ctx context.Context) ComponentRoutineOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineOutputTypeOutput)
}

// ComponentRoutineOutputTypeArrayInput is an input type that accepts ComponentRoutineOutputTypeArray and ComponentRoutineOutputTypeArrayOutput values.
// You can construct a concrete instance of `ComponentRoutineOutputTypeArrayInput` via:
//
//	ComponentRoutineOutputTypeArray{ ComponentRoutineOutputTypeArgs{...} }
type ComponentRoutineOutputTypeArrayInput interface {
	pulumi.Input

	ToComponentRoutineOutputTypeArrayOutput() ComponentRoutineOutputTypeArrayOutput
	ToComponentRoutineOutputTypeArrayOutputWithContext(context.Context) ComponentRoutineOutputTypeArrayOutput
}

type ComponentRoutineOutputTypeArray []ComponentRoutineOutputTypeInput

func (ComponentRoutineOutputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineOutputType)(nil)).Elem()
}

func (i ComponentRoutineOutputTypeArray) ToComponentRoutineOutputTypeArrayOutput() ComponentRoutineOutputTypeArrayOutput {
	return i.ToComponentRoutineOutputTypeArrayOutputWithContext(context.Background())
}

func (i ComponentRoutineOutputTypeArray) ToComponentRoutineOutputTypeArrayOutputWithContext(ctx context.Context) ComponentRoutineOutputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineOutputTypeArrayOutput)
}

type ComponentRoutineOutputTypeOutput struct{ *pulumi.OutputState }

func (ComponentRoutineOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineOutputType)(nil)).Elem()
}

func (o ComponentRoutineOutputTypeOutput) ToComponentRoutineOutputTypeOutput() ComponentRoutineOutputTypeOutput {
	return o
}

func (o ComponentRoutineOutputTypeOutput) ToComponentRoutineOutputTypeOutputWithContext(ctx context.Context) ComponentRoutineOutputTypeOutput {
	return o
}

func (o ComponentRoutineOutputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ComponentRoutineOutputTypeOutput) Multiple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) *bool { return v.Multiple }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineOutputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) string { return v.Name }).(pulumi.StringOutput)
}

func (o ComponentRoutineOutputTypeOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineOutputTypeOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineOutputTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ComponentRoutineOutputTypeOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) string { return v.ValueType }).(pulumi.StringOutput)
}

func (o ComponentRoutineOutputTypeOutput) Values() ComponentRoutineOutputValueArrayOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) []ComponentRoutineOutputValue { return v.Values }).(ComponentRoutineOutputValueArrayOutput)
}

type ComponentRoutineOutputTypeArrayOutput struct{ *pulumi.OutputState }

func (ComponentRoutineOutputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineOutputType)(nil)).Elem()
}

func (o ComponentRoutineOutputTypeArrayOutput) ToComponentRoutineOutputTypeArrayOutput() ComponentRoutineOutputTypeArrayOutput {
	return o
}

func (o ComponentRoutineOutputTypeArrayOutput) ToComponentRoutineOutputTypeArrayOutputWithContext(ctx context.Context) ComponentRoutineOutputTypeArrayOutput {
	return o
}

func (o ComponentRoutineOutputTypeArrayOutput) Index(i pulumi.IntInput) ComponentRoutineOutputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentRoutineOutputType {
		return vs[0].([]ComponentRoutineOutputType)[vs[1].(int)]
	}).(ComponentRoutineOutputTypeOutput)
}

type ComponentRoutineOutputValue struct {
	Asset     string `pulumi:"asset"`
	Attribute string `pulumi:"attribute"`
}

// ComponentRoutineOutputValueInput is an input type that accepts ComponentRoutineOutputValueArgs and ComponentRoutineOutputValueOutput values.
// You can construct a concrete instance of `ComponentRoutineOutputValueInput` via:
//
//	ComponentRoutineOutputValueArgs{...}
type ComponentRoutineOutputValueInput interface {
	pulumi.Input

	ToComponentRoutineOutputValueOutput() ComponentRoutineOutputValueOutput
	ToComponentRoutineOutputValueOutputWithContext(context.Context) ComponentRoutineOutputValueOutput
}

type ComponentRoutineOutputValueArgs struct {
	Asset     pulumi.StringInput `pulumi:"asset"`
	Attribute pulumi.StringInput `pulumi:"attribute"`
}

func (ComponentRoutineOutputValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineOutputValue)(nil)).Elem()
}

func (i ComponentRoutineOutputValueArgs) ToComponentRoutineOutputValueOutput() ComponentRoutineOutputValueOutput {
	return i.ToComponentRoutineOutputValueOutputWithContext(context.Background())
}

func (i ComponentRoutineOutputValueArgs) ToComponentRoutineOutputValueOutputWithContext(ctx context.Context) ComponentRoutineOutputValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineOutputValueOutput)
}

// ComponentRoutineOutputValueArrayInput is an input type that accepts ComponentRoutineOutputValueArray and ComponentRoutineOutputValueArrayOutput values.
// You can construct a concrete instance of `ComponentRoutineOutputValueArrayInput` via:
//
//	ComponentRoutineOutputValueArray{ ComponentRoutineOutputValueArgs{...} }
type ComponentRoutineOutputValueArrayInput interface {
	pulumi.Input

	ToComponentRoutineOutputValueArrayOutput() ComponentRoutineOutputValueArrayOutput
	ToComponentRoutineOutputValueArrayOutputWithContext(context.Context) ComponentRoutineOutputValueArrayOutput
}

type ComponentRoutineOutputValueArray []ComponentRoutineOutputValueInput

func (ComponentRoutineOutputValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineOutputValue)(nil)).Elem()
}

func (i ComponentRoutineOutputValueArray) ToComponentRoutineOutputValueArrayOutput() ComponentRoutineOutputValueArrayOutput {
	return i.ToComponentRoutineOutputValueArrayOutputWithContext(context.Background())
}

func (i ComponentRoutineOutputValueArray) ToComponentRoutineOutputValueArrayOutputWithContext(ctx context.Context) ComponentRoutineOutputValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineOutputValueArrayOutput)
}

type ComponentRoutineOutputValueOutput struct{ *pulumi.OutputState }

func (ComponentRoutineOutputValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineOutputValue)(nil)).Elem()
}

func (o ComponentRoutineOutputValueOutput) ToComponentRoutineOutputValueOutput() ComponentRoutineOutputValueOutput {
	return o
}

func (o ComponentRoutineOutputValueOutput) ToComponentRoutineOutputValueOutputWithContext(ctx context.Context) ComponentRoutineOutputValueOutput {
	return o
}

func (o ComponentRoutineOutputValueOutput) Asset() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineOutputValue) string { return v.Asset }).(pulumi.StringOutput)
}

func (o ComponentRoutineOutputValueOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineOutputValue) string { return v.Attribute }).(pulumi.StringOutput)
}

type ComponentRoutineOutputValueArrayOutput struct{ *pulumi.OutputState }

func (ComponentRoutineOutputValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineOutputValue)(nil)).Elem()
}

func (o ComponentRoutineOutputValueArrayOutput) ToComponentRoutineOutputValueArrayOutput() ComponentRoutineOutputValueArrayOutput {
	return o
}

func (o ComponentRoutineOutputValueArrayOutput) ToComponentRoutineOutputValueArrayOutputWithContext(ctx context.Context) ComponentRoutineOutputValueArrayOutput {
	return o
}

func (o ComponentRoutineOutputValueArrayOutput) Index(i pulumi.IntInput) ComponentRoutineOutputValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentRoutineOutputValue {
		return vs[0].([]ComponentRoutineOutputValue)[vs[1].(int)]
	}).(ComponentRoutineOutputValueOutput)
}

type DashboardChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// asset filter
	QueryFilterAsset *DashboardChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute *DashboardChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                      `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                      `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                         `pulumi:"queryLimit"`
	QueryPlain           string                                       `pulumi:"queryPlain"`
	QuerySortDirection   *int                                         `pulumi:"querySortDirection"`
	RefId                string                                       `pulumi:"refId"`
	Type                 string                                       `pulumi:"type"`
}

// DashboardChartChartItemInput is an input type that accepts DashboardChartChartItemArgs and DashboardChartChartItemOutput values.
// You can construct a concrete instance of `DashboardChartChartItemInput` via:
//
//	DashboardChartChartItemArgs{...}
type DashboardChartChartItemInput interface {
	pulumi.Input

	ToDashboardChartChartItemOutput() DashboardChartChartItemOutput
	ToDashboardChartChartItemOutputWithContext(context.Context) DashboardChartChartItemOutput
}

type DashboardChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// asset filter
	QueryFilterAsset DashboardChartChartItemQueryFilterAssetPtrInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardChartChartItemQueryFilterAttributePtrInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                               `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                               `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                  `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                  `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                  `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                  `pulumi:"refId"`
	Type                 pulumi.StringInput                                  `pulumi:"type"`
}

func (DashboardChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChartChartItem)(nil)).Elem()
}

func (i DashboardChartChartItemArgs) ToDashboardChartChartItemOutput() DashboardChartChartItemOutput {
	return i.ToDashboardChartChartItemOutputWithContext(context.Background())
}

func (i DashboardChartChartItemArgs) ToDashboardChartChartItemOutputWithContext(ctx context.Context) DashboardChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartChartItemOutput)
}

// DashboardChartChartItemArrayInput is an input type that accepts DashboardChartChartItemArray and DashboardChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardChartChartItemArrayInput` via:
//
//	DashboardChartChartItemArray{ DashboardChartChartItemArgs{...} }
type DashboardChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardChartChartItemArrayOutput() DashboardChartChartItemArrayOutput
	ToDashboardChartChartItemArrayOutputWithContext(context.Context) DashboardChartChartItemArrayOutput
}

type DashboardChartChartItemArray []DashboardChartChartItemInput

func (DashboardChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardChartChartItem)(nil)).Elem()
}

func (i DashboardChartChartItemArray) ToDashboardChartChartItemArrayOutput() DashboardChartChartItemArrayOutput {
	return i.ToDashboardChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardChartChartItemArray) ToDashboardChartChartItemArrayOutputWithContext(ctx context.Context) DashboardChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartChartItemArrayOutput)
}

type DashboardChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChartChartItem)(nil)).Elem()
}

func (o DashboardChartChartItemOutput) ToDashboardChartChartItemOutput() DashboardChartChartItemOutput {
	return o
}

func (o DashboardChartChartItemOutput) ToDashboardChartChartItemOutputWithContext(ctx context.Context) DashboardChartChartItemOutput {
	return o
}

func (o DashboardChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// asset filter
func (o DashboardChartChartItemOutput) QueryFilterAsset() DashboardChartChartItemQueryFilterAssetPtrOutput {
	return o.ApplyT(func(v DashboardChartChartItem) *DashboardChartChartItemQueryFilterAsset { return v.QueryFilterAsset }).(DashboardChartChartItemQueryFilterAssetPtrOutput)
}

// Attribute filter
func (o DashboardChartChartItemOutput) QueryFilterAttribute() DashboardChartChartItemQueryFilterAttributePtrOutput {
	return o.ApplyT(func(v DashboardChartChartItem) *DashboardChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardChartChartItemQueryFilterAttributePtrOutput)
}

func (o DashboardChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardChartChartItem)(nil)).Elem()
}

func (o DashboardChartChartItemArrayOutput) ToDashboardChartChartItemArrayOutput() DashboardChartChartItemArrayOutput {
	return o
}

func (o DashboardChartChartItemArrayOutput) ToDashboardChartChartItemArrayOutputWithContext(ctx context.Context) DashboardChartChartItemArrayOutput {
	return o
}

func (o DashboardChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardChartChartItem {
		return vs[0].([]DashboardChartChartItem)[vs[1].(int)]
	}).(DashboardChartChartItemOutput)
}

type DashboardChartChartItemQueryFilterAsset struct {
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// DashboardChartChartItemQueryFilterAssetInput is an input type that accepts DashboardChartChartItemQueryFilterAssetArgs and DashboardChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardChartChartItemQueryFilterAssetInput` via:
//
//	DashboardChartChartItemQueryFilterAssetArgs{...}
type DashboardChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardChartChartItemQueryFilterAssetOutput() DashboardChartChartItemQueryFilterAssetOutput
	ToDashboardChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardChartChartItemQueryFilterAssetOutput
}

type DashboardChartChartItemQueryFilterAssetArgs struct {
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (DashboardChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardChartChartItemQueryFilterAssetArgs) ToDashboardChartChartItemQueryFilterAssetOutput() DashboardChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardChartChartItemQueryFilterAssetArgs) ToDashboardChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartChartItemQueryFilterAssetOutput)
}

func (i DashboardChartChartItemQueryFilterAssetArgs) ToDashboardChartChartItemQueryFilterAssetPtrOutput() DashboardChartChartItemQueryFilterAssetPtrOutput {
	return i.ToDashboardChartChartItemQueryFilterAssetPtrOutputWithContext(context.Background())
}

func (i DashboardChartChartItemQueryFilterAssetArgs) ToDashboardChartChartItemQueryFilterAssetPtrOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartChartItemQueryFilterAssetOutput).ToDashboardChartChartItemQueryFilterAssetPtrOutputWithContext(ctx)
}

// DashboardChartChartItemQueryFilterAssetPtrInput is an input type that accepts DashboardChartChartItemQueryFilterAssetArgs, DashboardChartChartItemQueryFilterAssetPtr and DashboardChartChartItemQueryFilterAssetPtrOutput values.
// You can construct a concrete instance of `DashboardChartChartItemQueryFilterAssetPtrInput` via:
//
//	        DashboardChartChartItemQueryFilterAssetArgs{...}
//
//	or:
//
//	        nil
type DashboardChartChartItemQueryFilterAssetPtrInput interface {
	pulumi.Input

	ToDashboardChartChartItemQueryFilterAssetPtrOutput() DashboardChartChartItemQueryFilterAssetPtrOutput
	ToDashboardChartChartItemQueryFilterAssetPtrOutputWithContext(context.Context) DashboardChartChartItemQueryFilterAssetPtrOutput
}

type dashboardChartChartItemQueryFilterAssetPtrType DashboardChartChartItemQueryFilterAssetArgs

func DashboardChartChartItemQueryFilterAssetPtr(v *DashboardChartChartItemQueryFilterAssetArgs) DashboardChartChartItemQueryFilterAssetPtrInput {
	return (*dashboardChartChartItemQueryFilterAssetPtrType)(v)
}

func (*dashboardChartChartItemQueryFilterAssetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i *dashboardChartChartItemQueryFilterAssetPtrType) ToDashboardChartChartItemQueryFilterAssetPtrOutput() DashboardChartChartItemQueryFilterAssetPtrOutput {
	return i.ToDashboardChartChartItemQueryFilterAssetPtrOutputWithContext(context.Background())
}

func (i *dashboardChartChartItemQueryFilterAssetPtrType) ToDashboardChartChartItemQueryFilterAssetPtrOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartChartItemQueryFilterAssetPtrOutput)
}

type DashboardChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardChartChartItemQueryFilterAssetOutput) ToDashboardChartChartItemQueryFilterAssetOutput() DashboardChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardChartChartItemQueryFilterAssetOutput) ToDashboardChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardChartChartItemQueryFilterAssetOutput) ToDashboardChartChartItemQueryFilterAssetPtrOutput() DashboardChartChartItemQueryFilterAssetPtrOutput {
	return o.ToDashboardChartChartItemQueryFilterAssetPtrOutputWithContext(context.Background())
}

func (o DashboardChartChartItemQueryFilterAssetOutput) ToDashboardChartChartItemQueryFilterAssetPtrOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAssetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardChartChartItemQueryFilterAsset) *DashboardChartChartItemQueryFilterAsset {
		return &v
	}).(DashboardChartChartItemQueryFilterAssetPtrOutput)
}

// The ID of this resource.
func (o DashboardChartChartItemQueryFilterAssetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartChartItemQueryFilterAsset) string { return v.Id }).(pulumi.StringOutput)
}

func (o DashboardChartChartItemQueryFilterAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartChartItemQueryFilterAsset) string { return v.Name }).(pulumi.StringOutput)
}

type DashboardChartChartItemQueryFilterAssetPtrOutput struct{ *pulumi.OutputState }

func (DashboardChartChartItemQueryFilterAssetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardChartChartItemQueryFilterAssetPtrOutput) ToDashboardChartChartItemQueryFilterAssetPtrOutput() DashboardChartChartItemQueryFilterAssetPtrOutput {
	return o
}

func (o DashboardChartChartItemQueryFilterAssetPtrOutput) ToDashboardChartChartItemQueryFilterAssetPtrOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAssetPtrOutput {
	return o
}

func (o DashboardChartChartItemQueryFilterAssetPtrOutput) Elem() DashboardChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v *DashboardChartChartItemQueryFilterAsset) DashboardChartChartItemQueryFilterAsset {
		if v != nil {
			return *v
		}
		var ret DashboardChartChartItemQueryFilterAsset
		return ret
	}).(DashboardChartChartItemQueryFilterAssetOutput)
}

// The ID of this resource.
func (o DashboardChartChartItemQueryFilterAssetPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardChartChartItemQueryFilterAsset) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

func (o DashboardChartChartItemQueryFilterAssetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardChartChartItemQueryFilterAsset) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type DashboardChartChartItemQueryFilterAttribute struct {
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// DashboardChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardChartChartItemQueryFilterAttributeArgs and DashboardChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardChartChartItemQueryFilterAttributeArgs{...}
type DashboardChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardChartChartItemQueryFilterAttributeOutput() DashboardChartChartItemQueryFilterAttributeOutput
	ToDashboardChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardChartChartItemQueryFilterAttributeOutput
}

type DashboardChartChartItemQueryFilterAttributeArgs struct {
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (DashboardChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardChartChartItemQueryFilterAttributeArgs) ToDashboardChartChartItemQueryFilterAttributeOutput() DashboardChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardChartChartItemQueryFilterAttributeArgs) ToDashboardChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartChartItemQueryFilterAttributeOutput)
}

func (i DashboardChartChartItemQueryFilterAttributeArgs) ToDashboardChartChartItemQueryFilterAttributePtrOutput() DashboardChartChartItemQueryFilterAttributePtrOutput {
	return i.ToDashboardChartChartItemQueryFilterAttributePtrOutputWithContext(context.Background())
}

func (i DashboardChartChartItemQueryFilterAttributeArgs) ToDashboardChartChartItemQueryFilterAttributePtrOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAttributePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartChartItemQueryFilterAttributeOutput).ToDashboardChartChartItemQueryFilterAttributePtrOutputWithContext(ctx)
}

// DashboardChartChartItemQueryFilterAttributePtrInput is an input type that accepts DashboardChartChartItemQueryFilterAttributeArgs, DashboardChartChartItemQueryFilterAttributePtr and DashboardChartChartItemQueryFilterAttributePtrOutput values.
// You can construct a concrete instance of `DashboardChartChartItemQueryFilterAttributePtrInput` via:
//
//	        DashboardChartChartItemQueryFilterAttributeArgs{...}
//
//	or:
//
//	        nil
type DashboardChartChartItemQueryFilterAttributePtrInput interface {
	pulumi.Input

	ToDashboardChartChartItemQueryFilterAttributePtrOutput() DashboardChartChartItemQueryFilterAttributePtrOutput
	ToDashboardChartChartItemQueryFilterAttributePtrOutputWithContext(context.Context) DashboardChartChartItemQueryFilterAttributePtrOutput
}

type dashboardChartChartItemQueryFilterAttributePtrType DashboardChartChartItemQueryFilterAttributeArgs

func DashboardChartChartItemQueryFilterAttributePtr(v *DashboardChartChartItemQueryFilterAttributeArgs) DashboardChartChartItemQueryFilterAttributePtrInput {
	return (*dashboardChartChartItemQueryFilterAttributePtrType)(v)
}

func (*dashboardChartChartItemQueryFilterAttributePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i *dashboardChartChartItemQueryFilterAttributePtrType) ToDashboardChartChartItemQueryFilterAttributePtrOutput() DashboardChartChartItemQueryFilterAttributePtrOutput {
	return i.ToDashboardChartChartItemQueryFilterAttributePtrOutputWithContext(context.Background())
}

func (i *dashboardChartChartItemQueryFilterAttributePtrType) ToDashboardChartChartItemQueryFilterAttributePtrOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAttributePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartChartItemQueryFilterAttributePtrOutput)
}

type DashboardChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardChartChartItemQueryFilterAttributeOutput) ToDashboardChartChartItemQueryFilterAttributeOutput() DashboardChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardChartChartItemQueryFilterAttributeOutput) ToDashboardChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardChartChartItemQueryFilterAttributeOutput) ToDashboardChartChartItemQueryFilterAttributePtrOutput() DashboardChartChartItemQueryFilterAttributePtrOutput {
	return o.ToDashboardChartChartItemQueryFilterAttributePtrOutputWithContext(context.Background())
}

func (o DashboardChartChartItemQueryFilterAttributeOutput) ToDashboardChartChartItemQueryFilterAttributePtrOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAttributePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardChartChartItemQueryFilterAttribute) *DashboardChartChartItemQueryFilterAttribute {
		return &v
	}).(DashboardChartChartItemQueryFilterAttributePtrOutput)
}

// The ID of this resource.
func (o DashboardChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartChartItemQueryFilterAttribute) string { return v.Id }).(pulumi.StringOutput)
}

func (o DashboardChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartChartItemQueryFilterAttribute) string { return v.Name }).(pulumi.StringOutput)
}

type DashboardChartChartItemQueryFilterAttributePtrOutput struct{ *pulumi.OutputState }

func (DashboardChartChartItemQueryFilterAttributePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardChartChartItemQueryFilterAttributePtrOutput) ToDashboardChartChartItemQueryFilterAttributePtrOutput() DashboardChartChartItemQueryFilterAttributePtrOutput {
	return o
}

func (o DashboardChartChartItemQueryFilterAttributePtrOutput) ToDashboardChartChartItemQueryFilterAttributePtrOutputWithContext(ctx context.Context) DashboardChartChartItemQueryFilterAttributePtrOutput {
	return o
}

func (o DashboardChartChartItemQueryFilterAttributePtrOutput) Elem() DashboardChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v *DashboardChartChartItemQueryFilterAttribute) DashboardChartChartItemQueryFilterAttribute {
		if v != nil {
			return *v
		}
		var ret DashboardChartChartItemQueryFilterAttribute
		return ret
	}).(DashboardChartChartItemQueryFilterAttributeOutput)
}

// The ID of this resource.
func (o DashboardChartChartItemQueryFilterAttributePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardChartChartItemQueryFilterAttribute) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

func (o DashboardChartChartItemQueryFilterAttributePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardChartChartItemQueryFilterAttribute) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type DashboardChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardChartThresholdInput is an input type that accepts DashboardChartThresholdArgs and DashboardChartThresholdOutput values.
// You can construct a concrete instance of `DashboardChartThresholdInput` via:
//
//	DashboardChartThresholdArgs{...}
type DashboardChartThresholdInput interface {
	pulumi.Input

	ToDashboardChartThresholdOutput() DashboardChartThresholdOutput
	ToDashboardChartThresholdOutputWithContext(context.Context) DashboardChartThresholdOutput
}

type DashboardChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChartThreshold)(nil)).Elem()
}

func (i DashboardChartThresholdArgs) ToDashboardChartThresholdOutput() DashboardChartThresholdOutput {
	return i.ToDashboardChartThresholdOutputWithContext(context.Background())
}

func (i DashboardChartThresholdArgs) ToDashboardChartThresholdOutputWithContext(ctx context.Context) DashboardChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartThresholdOutput)
}

// DashboardChartThresholdArrayInput is an input type that accepts DashboardChartThresholdArray and DashboardChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardChartThresholdArrayInput` via:
//
//	DashboardChartThresholdArray{ DashboardChartThresholdArgs{...} }
type DashboardChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardChartThresholdArrayOutput() DashboardChartThresholdArrayOutput
	ToDashboardChartThresholdArrayOutputWithContext(context.Context) DashboardChartThresholdArrayOutput
}

type DashboardChartThresholdArray []DashboardChartThresholdInput

func (DashboardChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardChartThreshold)(nil)).Elem()
}

func (i DashboardChartThresholdArray) ToDashboardChartThresholdArrayOutput() DashboardChartThresholdArrayOutput {
	return i.ToDashboardChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardChartThresholdArray) ToDashboardChartThresholdArrayOutputWithContext(ctx context.Context) DashboardChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartThresholdArrayOutput)
}

type DashboardChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChartThreshold)(nil)).Elem()
}

func (o DashboardChartThresholdOutput) ToDashboardChartThresholdOutput() DashboardChartThresholdOutput {
	return o
}

func (o DashboardChartThresholdOutput) ToDashboardChartThresholdOutputWithContext(ctx context.Context) DashboardChartThresholdOutput {
	return o
}

func (o DashboardChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardChartThreshold)(nil)).Elem()
}

func (o DashboardChartThresholdArrayOutput) ToDashboardChartThresholdArrayOutput() DashboardChartThresholdArrayOutput {
	return o
}

func (o DashboardChartThresholdArrayOutput) ToDashboardChartThresholdArrayOutputWithContext(ctx context.Context) DashboardChartThresholdArrayOutput {
	return o
}

func (o DashboardChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardChartThreshold {
		return vs[0].([]DashboardChartThreshold)[vs[1].(int)]
	}).(DashboardChartThresholdOutput)
}

type DashboardChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardChartValueMappingInput is an input type that accepts DashboardChartValueMappingArgs and DashboardChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardChartValueMappingInput` via:
//
//	DashboardChartValueMappingArgs{...}
type DashboardChartValueMappingInput interface {
	pulumi.Input

	ToDashboardChartValueMappingOutput() DashboardChartValueMappingOutput
	ToDashboardChartValueMappingOutputWithContext(context.Context) DashboardChartValueMappingOutput
}

type DashboardChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChartValueMapping)(nil)).Elem()
}

func (i DashboardChartValueMappingArgs) ToDashboardChartValueMappingOutput() DashboardChartValueMappingOutput {
	return i.ToDashboardChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardChartValueMappingArgs) ToDashboardChartValueMappingOutputWithContext(ctx context.Context) DashboardChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartValueMappingOutput)
}

// DashboardChartValueMappingArrayInput is an input type that accepts DashboardChartValueMappingArray and DashboardChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardChartValueMappingArrayInput` via:
//
//	DashboardChartValueMappingArray{ DashboardChartValueMappingArgs{...} }
type DashboardChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardChartValueMappingArrayOutput() DashboardChartValueMappingArrayOutput
	ToDashboardChartValueMappingArrayOutputWithContext(context.Context) DashboardChartValueMappingArrayOutput
}

type DashboardChartValueMappingArray []DashboardChartValueMappingInput

func (DashboardChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardChartValueMapping)(nil)).Elem()
}

func (i DashboardChartValueMappingArray) ToDashboardChartValueMappingArrayOutput() DashboardChartValueMappingArrayOutput {
	return i.ToDashboardChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardChartValueMappingArray) ToDashboardChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartValueMappingArrayOutput)
}

type DashboardChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardChartValueMapping)(nil)).Elem()
}

func (o DashboardChartValueMappingOutput) ToDashboardChartValueMappingOutput() DashboardChartValueMappingOutput {
	return o
}

func (o DashboardChartValueMappingOutput) ToDashboardChartValueMappingOutputWithContext(ctx context.Context) DashboardChartValueMappingOutput {
	return o
}

func (o DashboardChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardChartValueMapping)(nil)).Elem()
}

func (o DashboardChartValueMappingArrayOutput) ToDashboardChartValueMappingArrayOutput() DashboardChartValueMappingArrayOutput {
	return o
}

func (o DashboardChartValueMappingArrayOutput) ToDashboardChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardChartValueMappingArrayOutput {
	return o
}

func (o DashboardChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardChartValueMapping {
		return vs[0].([]DashboardChartValueMapping)[vs[1].(int)]
	}).(DashboardChartValueMappingOutput)
}

type FunctionFunctionItem struct {
	ExpressionPlain string `pulumi:"expressionPlain"`
	// optional id
	Id         *string `pulumi:"id"`
	QueryPlain string  `pulumi:"queryPlain"`
	RefId      string  `pulumi:"refId"`
	Type       string  `pulumi:"type"`
}

// FunctionFunctionItemInput is an input type that accepts FunctionFunctionItemArgs and FunctionFunctionItemOutput values.
// You can construct a concrete instance of `FunctionFunctionItemInput` via:
//
//	FunctionFunctionItemArgs{...}
type FunctionFunctionItemInput interface {
	pulumi.Input

	ToFunctionFunctionItemOutput() FunctionFunctionItemOutput
	ToFunctionFunctionItemOutputWithContext(context.Context) FunctionFunctionItemOutput
}

type FunctionFunctionItemArgs struct {
	ExpressionPlain pulumi.StringInput `pulumi:"expressionPlain"`
	// optional id
	Id         pulumi.StringPtrInput `pulumi:"id"`
	QueryPlain pulumi.StringInput    `pulumi:"queryPlain"`
	RefId      pulumi.StringInput    `pulumi:"refId"`
	Type       pulumi.StringInput    `pulumi:"type"`
}

func (FunctionFunctionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFunctionItem)(nil)).Elem()
}

func (i FunctionFunctionItemArgs) ToFunctionFunctionItemOutput() FunctionFunctionItemOutput {
	return i.ToFunctionFunctionItemOutputWithContext(context.Background())
}

func (i FunctionFunctionItemArgs) ToFunctionFunctionItemOutputWithContext(ctx context.Context) FunctionFunctionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionFunctionItemOutput)
}

// FunctionFunctionItemArrayInput is an input type that accepts FunctionFunctionItemArray and FunctionFunctionItemArrayOutput values.
// You can construct a concrete instance of `FunctionFunctionItemArrayInput` via:
//
//	FunctionFunctionItemArray{ FunctionFunctionItemArgs{...} }
type FunctionFunctionItemArrayInput interface {
	pulumi.Input

	ToFunctionFunctionItemArrayOutput() FunctionFunctionItemArrayOutput
	ToFunctionFunctionItemArrayOutputWithContext(context.Context) FunctionFunctionItemArrayOutput
}

type FunctionFunctionItemArray []FunctionFunctionItemInput

func (FunctionFunctionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionFunctionItem)(nil)).Elem()
}

func (i FunctionFunctionItemArray) ToFunctionFunctionItemArrayOutput() FunctionFunctionItemArrayOutput {
	return i.ToFunctionFunctionItemArrayOutputWithContext(context.Background())
}

func (i FunctionFunctionItemArray) ToFunctionFunctionItemArrayOutputWithContext(ctx context.Context) FunctionFunctionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionFunctionItemArrayOutput)
}

type FunctionFunctionItemOutput struct{ *pulumi.OutputState }

func (FunctionFunctionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFunctionItem)(nil)).Elem()
}

func (o FunctionFunctionItemOutput) ToFunctionFunctionItemOutput() FunctionFunctionItemOutput {
	return o
}

func (o FunctionFunctionItemOutput) ToFunctionFunctionItemOutputWithContext(ctx context.Context) FunctionFunctionItemOutput {
	return o
}

func (o FunctionFunctionItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFunctionItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

// optional id
func (o FunctionFunctionItemOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionFunctionItem) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o FunctionFunctionItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFunctionItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o FunctionFunctionItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFunctionItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o FunctionFunctionItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFunctionItem) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionFunctionItemArrayOutput struct{ *pulumi.OutputState }

func (FunctionFunctionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionFunctionItem)(nil)).Elem()
}

func (o FunctionFunctionItemArrayOutput) ToFunctionFunctionItemArrayOutput() FunctionFunctionItemArrayOutput {
	return o
}

func (o FunctionFunctionItemArrayOutput) ToFunctionFunctionItemArrayOutputWithContext(ctx context.Context) FunctionFunctionItemArrayOutput {
	return o
}

func (o FunctionFunctionItemArrayOutput) Index(i pulumi.IntInput) FunctionFunctionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionFunctionItem {
		return vs[0].([]FunctionFunctionItem)[vs[1].(int)]
	}).(FunctionFunctionItemOutput)
}

type GetAssetKindsKind struct {
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// GetAssetKindsKindInput is an input type that accepts GetAssetKindsKindArgs and GetAssetKindsKindOutput values.
// You can construct a concrete instance of `GetAssetKindsKindInput` via:
//
//	GetAssetKindsKindArgs{...}
type GetAssetKindsKindInput interface {
	pulumi.Input

	ToGetAssetKindsKindOutput() GetAssetKindsKindOutput
	ToGetAssetKindsKindOutputWithContext(context.Context) GetAssetKindsKindOutput
}

type GetAssetKindsKindArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAssetKindsKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAssetKindsKind)(nil)).Elem()
}

func (i GetAssetKindsKindArgs) ToGetAssetKindsKindOutput() GetAssetKindsKindOutput {
	return i.ToGetAssetKindsKindOutputWithContext(context.Background())
}

func (i GetAssetKindsKindArgs) ToGetAssetKindsKindOutputWithContext(ctx context.Context) GetAssetKindsKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAssetKindsKindOutput)
}

// GetAssetKindsKindArrayInput is an input type that accepts GetAssetKindsKindArray and GetAssetKindsKindArrayOutput values.
// You can construct a concrete instance of `GetAssetKindsKindArrayInput` via:
//
//	GetAssetKindsKindArray{ GetAssetKindsKindArgs{...} }
type GetAssetKindsKindArrayInput interface {
	pulumi.Input

	ToGetAssetKindsKindArrayOutput() GetAssetKindsKindArrayOutput
	ToGetAssetKindsKindArrayOutputWithContext(context.Context) GetAssetKindsKindArrayOutput
}

type GetAssetKindsKindArray []GetAssetKindsKindInput

func (GetAssetKindsKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAssetKindsKind)(nil)).Elem()
}

func (i GetAssetKindsKindArray) ToGetAssetKindsKindArrayOutput() GetAssetKindsKindArrayOutput {
	return i.ToGetAssetKindsKindArrayOutputWithContext(context.Background())
}

func (i GetAssetKindsKindArray) ToGetAssetKindsKindArrayOutputWithContext(ctx context.Context) GetAssetKindsKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAssetKindsKindArrayOutput)
}

type GetAssetKindsKindOutput struct{ *pulumi.OutputState }

func (GetAssetKindsKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAssetKindsKind)(nil)).Elem()
}

func (o GetAssetKindsKindOutput) ToGetAssetKindsKindOutput() GetAssetKindsKindOutput {
	return o
}

func (o GetAssetKindsKindOutput) ToGetAssetKindsKindOutputWithContext(ctx context.Context) GetAssetKindsKindOutput {
	return o
}

func (o GetAssetKindsKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAssetKindsKind) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAssetKindsKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAssetKindsKind) string { return v.Name }).(pulumi.StringOutput)
}

type GetAssetKindsKindArrayOutput struct{ *pulumi.OutputState }

func (GetAssetKindsKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAssetKindsKind)(nil)).Elem()
}

func (o GetAssetKindsKindArrayOutput) ToGetAssetKindsKindArrayOutput() GetAssetKindsKindArrayOutput {
	return o
}

func (o GetAssetKindsKindArrayOutput) ToGetAssetKindsKindArrayOutputWithContext(ctx context.Context) GetAssetKindsKindArrayOutput {
	return o
}

func (o GetAssetKindsKindArrayOutput) Index(i pulumi.IntInput) GetAssetKindsKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAssetKindsKind {
		return vs[0].([]GetAssetKindsKind)[vs[1].(int)]
	}).(GetAssetKindsKindOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertAlertItemInput)(nil)).Elem(), AlertAlertItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertAlertItemArrayInput)(nil)).Elem(), AlertAlertItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertThresholdInput)(nil)).Elem(), AlertThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertThresholdArrayInput)(nil)).Elem(), AlertThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetKindInput)(nil)).Elem(), AssetKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetKindArrayInput)(nil)).Elem(), AssetKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInputTypeInput)(nil)).Elem(), ComponentInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInputTypeArrayInput)(nil)).Elem(), ComponentInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineConfigInput)(nil)).Elem(), ComponentRoutineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineConfigArrayInput)(nil)).Elem(), ComponentRoutineConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineInputTypeInput)(nil)).Elem(), ComponentRoutineInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineInputTypeArrayInput)(nil)).Elem(), ComponentRoutineInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineInputValueInput)(nil)).Elem(), ComponentRoutineInputValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineInputValueArrayInput)(nil)).Elem(), ComponentRoutineInputValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineOutputTypeInput)(nil)).Elem(), ComponentRoutineOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineOutputTypeArrayInput)(nil)).Elem(), ComponentRoutineOutputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineOutputValueInput)(nil)).Elem(), ComponentRoutineOutputValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineOutputValueArrayInput)(nil)).Elem(), ComponentRoutineOutputValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartChartItemInput)(nil)).Elem(), DashboardChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartChartItemArrayInput)(nil)).Elem(), DashboardChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartChartItemQueryFilterAssetPtrInput)(nil)).Elem(), DashboardChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartChartItemQueryFilterAttributePtrInput)(nil)).Elem(), DashboardChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartThresholdInput)(nil)).Elem(), DashboardChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartThresholdArrayInput)(nil)).Elem(), DashboardChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartValueMappingInput)(nil)).Elem(), DashboardChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartValueMappingArrayInput)(nil)).Elem(), DashboardChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionFunctionItemInput)(nil)).Elem(), FunctionFunctionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionFunctionItemArrayInput)(nil)).Elem(), FunctionFunctionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAssetKindsKindInput)(nil)).Elem(), GetAssetKindsKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAssetKindsKindArrayInput)(nil)).Elem(), GetAssetKindsKindArray{})
	pulumi.RegisterOutputType(AlertAlertItemOutput{})
	pulumi.RegisterOutputType(AlertAlertItemArrayOutput{})
	pulumi.RegisterOutputType(AlertThresholdOutput{})
	pulumi.RegisterOutputType(AlertThresholdArrayOutput{})
	pulumi.RegisterOutputType(AssetKindOutput{})
	pulumi.RegisterOutputType(AssetKindArrayOutput{})
	pulumi.RegisterOutputType(ComponentInputTypeOutput{})
	pulumi.RegisterOutputType(ComponentInputTypeArrayOutput{})
	pulumi.RegisterOutputType(ComponentRoutineConfigOutput{})
	pulumi.RegisterOutputType(ComponentRoutineConfigArrayOutput{})
	pulumi.RegisterOutputType(ComponentRoutineInputTypeOutput{})
	pulumi.RegisterOutputType(ComponentRoutineInputTypeArrayOutput{})
	pulumi.RegisterOutputType(ComponentRoutineInputValueOutput{})
	pulumi.RegisterOutputType(ComponentRoutineInputValueArrayOutput{})
	pulumi.RegisterOutputType(ComponentRoutineOutputTypeOutput{})
	pulumi.RegisterOutputType(ComponentRoutineOutputTypeArrayOutput{})
	pulumi.RegisterOutputType(ComponentRoutineOutputValueOutput{})
	pulumi.RegisterOutputType(ComponentRoutineOutputValueArrayOutput{})
	pulumi.RegisterOutputType(DashboardChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardChartChartItemQueryFilterAssetPtrOutput{})
	pulumi.RegisterOutputType(DashboardChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardChartChartItemQueryFilterAttributePtrOutput{})
	pulumi.RegisterOutputType(DashboardChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(FunctionFunctionItemOutput{})
	pulumi.RegisterOutputType(FunctionFunctionItemArrayOutput{})
	pulumi.RegisterOutputType(GetAssetKindsKindOutput{})
	pulumi.RegisterOutputType(GetAssetKindsKindArrayOutput{})
}
