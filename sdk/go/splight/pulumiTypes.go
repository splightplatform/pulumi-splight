// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

var _ = internal.GetEnvOrDefault

type ActionAsset struct {
	// asset id
	Id string `pulumi:"id"`
	// asset name
	Name string `pulumi:"name"`
}

// ActionAssetInput is an input type that accepts ActionAssetArgs and ActionAssetOutput values.
// You can construct a concrete instance of `ActionAssetInput` via:
//
//	ActionAssetArgs{...}
type ActionAssetInput interface {
	pulumi.Input

	ToActionAssetOutput() ActionAssetOutput
	ToActionAssetOutputWithContext(context.Context) ActionAssetOutput
}

type ActionAssetArgs struct {
	// asset id
	Id pulumi.StringInput `pulumi:"id"`
	// asset name
	Name pulumi.StringInput `pulumi:"name"`
}

func (ActionAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionAsset)(nil)).Elem()
}

func (i ActionAssetArgs) ToActionAssetOutput() ActionAssetOutput {
	return i.ToActionAssetOutputWithContext(context.Background())
}

func (i ActionAssetArgs) ToActionAssetOutputWithContext(ctx context.Context) ActionAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionAssetOutput)
}

func (i ActionAssetArgs) ToActionAssetPtrOutput() ActionAssetPtrOutput {
	return i.ToActionAssetPtrOutputWithContext(context.Background())
}

func (i ActionAssetArgs) ToActionAssetPtrOutputWithContext(ctx context.Context) ActionAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionAssetOutput).ToActionAssetPtrOutputWithContext(ctx)
}

// ActionAssetPtrInput is an input type that accepts ActionAssetArgs, ActionAssetPtr and ActionAssetPtrOutput values.
// You can construct a concrete instance of `ActionAssetPtrInput` via:
//
//	        ActionAssetArgs{...}
//
//	or:
//
//	        nil
type ActionAssetPtrInput interface {
	pulumi.Input

	ToActionAssetPtrOutput() ActionAssetPtrOutput
	ToActionAssetPtrOutputWithContext(context.Context) ActionAssetPtrOutput
}

type actionAssetPtrType ActionAssetArgs

func ActionAssetPtr(v *ActionAssetArgs) ActionAssetPtrInput {
	return (*actionAssetPtrType)(v)
}

func (*actionAssetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionAsset)(nil)).Elem()
}

func (i *actionAssetPtrType) ToActionAssetPtrOutput() ActionAssetPtrOutput {
	return i.ToActionAssetPtrOutputWithContext(context.Background())
}

func (i *actionAssetPtrType) ToActionAssetPtrOutputWithContext(ctx context.Context) ActionAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionAssetPtrOutput)
}

type ActionAssetOutput struct{ *pulumi.OutputState }

func (ActionAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionAsset)(nil)).Elem()
}

func (o ActionAssetOutput) ToActionAssetOutput() ActionAssetOutput {
	return o
}

func (o ActionAssetOutput) ToActionAssetOutputWithContext(ctx context.Context) ActionAssetOutput {
	return o
}

func (o ActionAssetOutput) ToActionAssetPtrOutput() ActionAssetPtrOutput {
	return o.ToActionAssetPtrOutputWithContext(context.Background())
}

func (o ActionAssetOutput) ToActionAssetPtrOutputWithContext(ctx context.Context) ActionAssetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionAsset) *ActionAsset {
		return &v
	}).(ActionAssetPtrOutput)
}

// asset id
func (o ActionAssetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ActionAsset) string { return v.Id }).(pulumi.StringOutput)
}

// asset name
func (o ActionAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionAsset) string { return v.Name }).(pulumi.StringOutput)
}

type ActionAssetPtrOutput struct{ *pulumi.OutputState }

func (ActionAssetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionAsset)(nil)).Elem()
}

func (o ActionAssetPtrOutput) ToActionAssetPtrOutput() ActionAssetPtrOutput {
	return o
}

func (o ActionAssetPtrOutput) ToActionAssetPtrOutputWithContext(ctx context.Context) ActionAssetPtrOutput {
	return o
}

func (o ActionAssetPtrOutput) Elem() ActionAssetOutput {
	return o.ApplyT(func(v *ActionAsset) ActionAsset {
		if v != nil {
			return *v
		}
		var ret ActionAsset
		return ret
	}).(ActionAssetOutput)
}

// asset id
func (o ActionAssetPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionAsset) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// asset name
func (o ActionAssetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionAsset) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type ActionSetpoint struct {
	// the target attribute of the setpoint which should also be an attribute of the specified asset
	Attribute ActionSetpointAttribute `pulumi:"attribute"`
	// setpoint Id
	Id *string `pulumi:"id"`
	// setpoint name
	Name *string `pulumi:"name"`
	// JSON encoded scalar value
	Value string `pulumi:"value"`
}

// ActionSetpointInput is an input type that accepts ActionSetpointArgs and ActionSetpointOutput values.
// You can construct a concrete instance of `ActionSetpointInput` via:
//
//	ActionSetpointArgs{...}
type ActionSetpointInput interface {
	pulumi.Input

	ToActionSetpointOutput() ActionSetpointOutput
	ToActionSetpointOutputWithContext(context.Context) ActionSetpointOutput
}

type ActionSetpointArgs struct {
	// the target attribute of the setpoint which should also be an attribute of the specified asset
	Attribute ActionSetpointAttributeInput `pulumi:"attribute"`
	// setpoint Id
	Id pulumi.StringPtrInput `pulumi:"id"`
	// setpoint name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// JSON encoded scalar value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ActionSetpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionSetpoint)(nil)).Elem()
}

func (i ActionSetpointArgs) ToActionSetpointOutput() ActionSetpointOutput {
	return i.ToActionSetpointOutputWithContext(context.Background())
}

func (i ActionSetpointArgs) ToActionSetpointOutputWithContext(ctx context.Context) ActionSetpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionSetpointOutput)
}

// ActionSetpointArrayInput is an input type that accepts ActionSetpointArray and ActionSetpointArrayOutput values.
// You can construct a concrete instance of `ActionSetpointArrayInput` via:
//
//	ActionSetpointArray{ ActionSetpointArgs{...} }
type ActionSetpointArrayInput interface {
	pulumi.Input

	ToActionSetpointArrayOutput() ActionSetpointArrayOutput
	ToActionSetpointArrayOutputWithContext(context.Context) ActionSetpointArrayOutput
}

type ActionSetpointArray []ActionSetpointInput

func (ActionSetpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionSetpoint)(nil)).Elem()
}

func (i ActionSetpointArray) ToActionSetpointArrayOutput() ActionSetpointArrayOutput {
	return i.ToActionSetpointArrayOutputWithContext(context.Background())
}

func (i ActionSetpointArray) ToActionSetpointArrayOutputWithContext(ctx context.Context) ActionSetpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionSetpointArrayOutput)
}

type ActionSetpointOutput struct{ *pulumi.OutputState }

func (ActionSetpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionSetpoint)(nil)).Elem()
}

func (o ActionSetpointOutput) ToActionSetpointOutput() ActionSetpointOutput {
	return o
}

func (o ActionSetpointOutput) ToActionSetpointOutputWithContext(ctx context.Context) ActionSetpointOutput {
	return o
}

// the target attribute of the setpoint which should also be an attribute of the specified asset
func (o ActionSetpointOutput) Attribute() ActionSetpointAttributeOutput {
	return o.ApplyT(func(v ActionSetpoint) ActionSetpointAttribute { return v.Attribute }).(ActionSetpointAttributeOutput)
}

// setpoint Id
func (o ActionSetpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionSetpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// setpoint name
func (o ActionSetpointOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionSetpoint) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// JSON encoded scalar value
func (o ActionSetpointOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ActionSetpoint) string { return v.Value }).(pulumi.StringOutput)
}

type ActionSetpointArrayOutput struct{ *pulumi.OutputState }

func (ActionSetpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionSetpoint)(nil)).Elem()
}

func (o ActionSetpointArrayOutput) ToActionSetpointArrayOutput() ActionSetpointArrayOutput {
	return o
}

func (o ActionSetpointArrayOutput) ToActionSetpointArrayOutputWithContext(ctx context.Context) ActionSetpointArrayOutput {
	return o
}

func (o ActionSetpointArrayOutput) Index(i pulumi.IntInput) ActionSetpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionSetpoint {
		return vs[0].([]ActionSetpoint)[vs[1].(int)]
	}).(ActionSetpointOutput)
}

type ActionSetpointAttribute struct {
	// attribute id
	Id string `pulumi:"id"`
	// attribute name
	Name string `pulumi:"name"`
}

// ActionSetpointAttributeInput is an input type that accepts ActionSetpointAttributeArgs and ActionSetpointAttributeOutput values.
// You can construct a concrete instance of `ActionSetpointAttributeInput` via:
//
//	ActionSetpointAttributeArgs{...}
type ActionSetpointAttributeInput interface {
	pulumi.Input

	ToActionSetpointAttributeOutput() ActionSetpointAttributeOutput
	ToActionSetpointAttributeOutputWithContext(context.Context) ActionSetpointAttributeOutput
}

type ActionSetpointAttributeArgs struct {
	// attribute id
	Id pulumi.StringInput `pulumi:"id"`
	// attribute name
	Name pulumi.StringInput `pulumi:"name"`
}

func (ActionSetpointAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionSetpointAttribute)(nil)).Elem()
}

func (i ActionSetpointAttributeArgs) ToActionSetpointAttributeOutput() ActionSetpointAttributeOutput {
	return i.ToActionSetpointAttributeOutputWithContext(context.Background())
}

func (i ActionSetpointAttributeArgs) ToActionSetpointAttributeOutputWithContext(ctx context.Context) ActionSetpointAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionSetpointAttributeOutput)
}

type ActionSetpointAttributeOutput struct{ *pulumi.OutputState }

func (ActionSetpointAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionSetpointAttribute)(nil)).Elem()
}

func (o ActionSetpointAttributeOutput) ToActionSetpointAttributeOutput() ActionSetpointAttributeOutput {
	return o
}

func (o ActionSetpointAttributeOutput) ToActionSetpointAttributeOutputWithContext(ctx context.Context) ActionSetpointAttributeOutput {
	return o
}

// attribute id
func (o ActionSetpointAttributeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ActionSetpointAttribute) string { return v.Id }).(pulumi.StringOutput)
}

// attribute name
func (o ActionSetpointAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionSetpointAttribute) string { return v.Name }).(pulumi.StringOutput)
}

type AlertAlertItem struct {
	// how the expression is shown (i.e 'A * 2')
	Expression string `pulumi:"expression"`
	// actual mongo query containing the expression
	ExpressionPlain string `pulumi:"expressionPlain"`
	// Id of the function item
	Id *string `pulumi:"id"`
	// Asset filter
	QueryFilterAsset AlertAlertItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute AlertAlertItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	// function used to aggregate data
	QueryGroupFunction string `pulumi:"queryGroupFunction"`
	// time window to apply the aggregation
	QueryGroupUnit string `pulumi:"queryGroupUnit"`
	// actual mongo query
	QueryPlain string `pulumi:"queryPlain"`
	// identifier of the variable (i.e 'A')
	RefId string `pulumi:"refId"`
	// either QUERY or EXPRESSION
	Type string `pulumi:"type"`
}

// AlertAlertItemInput is an input type that accepts AlertAlertItemArgs and AlertAlertItemOutput values.
// You can construct a concrete instance of `AlertAlertItemInput` via:
//
//	AlertAlertItemArgs{...}
type AlertAlertItemInput interface {
	pulumi.Input

	ToAlertAlertItemOutput() AlertAlertItemOutput
	ToAlertAlertItemOutputWithContext(context.Context) AlertAlertItemOutput
}

type AlertAlertItemArgs struct {
	// how the expression is shown (i.e 'A * 2')
	Expression pulumi.StringInput `pulumi:"expression"`
	// actual mongo query containing the expression
	ExpressionPlain pulumi.StringInput `pulumi:"expressionPlain"`
	// Id of the function item
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Asset filter
	QueryFilterAsset AlertAlertItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute AlertAlertItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	// function used to aggregate data
	QueryGroupFunction pulumi.StringInput `pulumi:"queryGroupFunction"`
	// time window to apply the aggregation
	QueryGroupUnit pulumi.StringInput `pulumi:"queryGroupUnit"`
	// actual mongo query
	QueryPlain pulumi.StringInput `pulumi:"queryPlain"`
	// identifier of the variable (i.e 'A')
	RefId pulumi.StringInput `pulumi:"refId"`
	// either QUERY or EXPRESSION
	Type pulumi.StringInput `pulumi:"type"`
}

func (AlertAlertItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertItem)(nil)).Elem()
}

func (i AlertAlertItemArgs) ToAlertAlertItemOutput() AlertAlertItemOutput {
	return i.ToAlertAlertItemOutputWithContext(context.Background())
}

func (i AlertAlertItemArgs) ToAlertAlertItemOutputWithContext(ctx context.Context) AlertAlertItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertItemOutput)
}

// AlertAlertItemArrayInput is an input type that accepts AlertAlertItemArray and AlertAlertItemArrayOutput values.
// You can construct a concrete instance of `AlertAlertItemArrayInput` via:
//
//	AlertAlertItemArray{ AlertAlertItemArgs{...} }
type AlertAlertItemArrayInput interface {
	pulumi.Input

	ToAlertAlertItemArrayOutput() AlertAlertItemArrayOutput
	ToAlertAlertItemArrayOutputWithContext(context.Context) AlertAlertItemArrayOutput
}

type AlertAlertItemArray []AlertAlertItemInput

func (AlertAlertItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertAlertItem)(nil)).Elem()
}

func (i AlertAlertItemArray) ToAlertAlertItemArrayOutput() AlertAlertItemArrayOutput {
	return i.ToAlertAlertItemArrayOutputWithContext(context.Background())
}

func (i AlertAlertItemArray) ToAlertAlertItemArrayOutputWithContext(ctx context.Context) AlertAlertItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertItemArrayOutput)
}

type AlertAlertItemOutput struct{ *pulumi.OutputState }

func (AlertAlertItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertItem)(nil)).Elem()
}

func (o AlertAlertItemOutput) ToAlertAlertItemOutput() AlertAlertItemOutput {
	return o
}

func (o AlertAlertItemOutput) ToAlertAlertItemOutputWithContext(ctx context.Context) AlertAlertItemOutput {
	return o
}

// how the expression is shown (i.e 'A * 2')
func (o AlertAlertItemOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertItem) string { return v.Expression }).(pulumi.StringOutput)
}

// actual mongo query containing the expression
func (o AlertAlertItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

// Id of the function item
func (o AlertAlertItemOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertAlertItem) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o AlertAlertItemOutput) QueryFilterAsset() AlertAlertItemQueryFilterAssetOutput {
	return o.ApplyT(func(v AlertAlertItem) AlertAlertItemQueryFilterAsset { return v.QueryFilterAsset }).(AlertAlertItemQueryFilterAssetOutput)
}

// Attribute filter
func (o AlertAlertItemOutput) QueryFilterAttribute() AlertAlertItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v AlertAlertItem) AlertAlertItemQueryFilterAttribute { return v.QueryFilterAttribute }).(AlertAlertItemQueryFilterAttributeOutput)
}

// function used to aggregate data
func (o AlertAlertItemOutput) QueryGroupFunction() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertItem) string { return v.QueryGroupFunction }).(pulumi.StringOutput)
}

// time window to apply the aggregation
func (o AlertAlertItemOutput) QueryGroupUnit() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertItem) string { return v.QueryGroupUnit }).(pulumi.StringOutput)
}

// actual mongo query
func (o AlertAlertItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

// identifier of the variable (i.e 'A')
func (o AlertAlertItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertItem) string { return v.RefId }).(pulumi.StringOutput)
}

// either QUERY or EXPRESSION
func (o AlertAlertItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertItem) string { return v.Type }).(pulumi.StringOutput)
}

type AlertAlertItemArrayOutput struct{ *pulumi.OutputState }

func (AlertAlertItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertAlertItem)(nil)).Elem()
}

func (o AlertAlertItemArrayOutput) ToAlertAlertItemArrayOutput() AlertAlertItemArrayOutput {
	return o
}

func (o AlertAlertItemArrayOutput) ToAlertAlertItemArrayOutputWithContext(ctx context.Context) AlertAlertItemArrayOutput {
	return o
}

func (o AlertAlertItemArrayOutput) Index(i pulumi.IntInput) AlertAlertItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertAlertItem {
		return vs[0].([]AlertAlertItem)[vs[1].(int)]
	}).(AlertAlertItemOutput)
}

type AlertAlertItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// AlertAlertItemQueryFilterAssetInput is an input type that accepts AlertAlertItemQueryFilterAssetArgs and AlertAlertItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `AlertAlertItemQueryFilterAssetInput` via:
//
//	AlertAlertItemQueryFilterAssetArgs{...}
type AlertAlertItemQueryFilterAssetInput interface {
	pulumi.Input

	ToAlertAlertItemQueryFilterAssetOutput() AlertAlertItemQueryFilterAssetOutput
	ToAlertAlertItemQueryFilterAssetOutputWithContext(context.Context) AlertAlertItemQueryFilterAssetOutput
}

type AlertAlertItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertAlertItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertItemQueryFilterAsset)(nil)).Elem()
}

func (i AlertAlertItemQueryFilterAssetArgs) ToAlertAlertItemQueryFilterAssetOutput() AlertAlertItemQueryFilterAssetOutput {
	return i.ToAlertAlertItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i AlertAlertItemQueryFilterAssetArgs) ToAlertAlertItemQueryFilterAssetOutputWithContext(ctx context.Context) AlertAlertItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertItemQueryFilterAssetOutput)
}

type AlertAlertItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (AlertAlertItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertItemQueryFilterAsset)(nil)).Elem()
}

func (o AlertAlertItemQueryFilterAssetOutput) ToAlertAlertItemQueryFilterAssetOutput() AlertAlertItemQueryFilterAssetOutput {
	return o
}

func (o AlertAlertItemQueryFilterAssetOutput) ToAlertAlertItemQueryFilterAssetOutputWithContext(ctx context.Context) AlertAlertItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o AlertAlertItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertAlertItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o AlertAlertItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertAlertItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertAlertItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// AlertAlertItemQueryFilterAttributeInput is an input type that accepts AlertAlertItemQueryFilterAttributeArgs and AlertAlertItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `AlertAlertItemQueryFilterAttributeInput` via:
//
//	AlertAlertItemQueryFilterAttributeArgs{...}
type AlertAlertItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToAlertAlertItemQueryFilterAttributeOutput() AlertAlertItemQueryFilterAttributeOutput
	ToAlertAlertItemQueryFilterAttributeOutputWithContext(context.Context) AlertAlertItemQueryFilterAttributeOutput
}

type AlertAlertItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertAlertItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertItemQueryFilterAttribute)(nil)).Elem()
}

func (i AlertAlertItemQueryFilterAttributeArgs) ToAlertAlertItemQueryFilterAttributeOutput() AlertAlertItemQueryFilterAttributeOutput {
	return i.ToAlertAlertItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i AlertAlertItemQueryFilterAttributeArgs) ToAlertAlertItemQueryFilterAttributeOutputWithContext(ctx context.Context) AlertAlertItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertItemQueryFilterAttributeOutput)
}

type AlertAlertItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (AlertAlertItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertItemQueryFilterAttribute)(nil)).Elem()
}

func (o AlertAlertItemQueryFilterAttributeOutput) ToAlertAlertItemQueryFilterAttributeOutput() AlertAlertItemQueryFilterAttributeOutput {
	return o
}

func (o AlertAlertItemQueryFilterAttributeOutput) ToAlertAlertItemQueryFilterAttributeOutputWithContext(ctx context.Context) AlertAlertItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o AlertAlertItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertAlertItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o AlertAlertItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertAlertItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertRelatedAsset struct {
	// asset id
	Id string `pulumi:"id"`
	// asset name
	Name string `pulumi:"name"`
}

// AlertRelatedAssetInput is an input type that accepts AlertRelatedAssetArgs and AlertRelatedAssetOutput values.
// You can construct a concrete instance of `AlertRelatedAssetInput` via:
//
//	AlertRelatedAssetArgs{...}
type AlertRelatedAssetInput interface {
	pulumi.Input

	ToAlertRelatedAssetOutput() AlertRelatedAssetOutput
	ToAlertRelatedAssetOutputWithContext(context.Context) AlertRelatedAssetOutput
}

type AlertRelatedAssetArgs struct {
	// asset id
	Id pulumi.StringInput `pulumi:"id"`
	// asset name
	Name pulumi.StringInput `pulumi:"name"`
}

func (AlertRelatedAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRelatedAsset)(nil)).Elem()
}

func (i AlertRelatedAssetArgs) ToAlertRelatedAssetOutput() AlertRelatedAssetOutput {
	return i.ToAlertRelatedAssetOutputWithContext(context.Background())
}

func (i AlertRelatedAssetArgs) ToAlertRelatedAssetOutputWithContext(ctx context.Context) AlertRelatedAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRelatedAssetOutput)
}

// AlertRelatedAssetArrayInput is an input type that accepts AlertRelatedAssetArray and AlertRelatedAssetArrayOutput values.
// You can construct a concrete instance of `AlertRelatedAssetArrayInput` via:
//
//	AlertRelatedAssetArray{ AlertRelatedAssetArgs{...} }
type AlertRelatedAssetArrayInput interface {
	pulumi.Input

	ToAlertRelatedAssetArrayOutput() AlertRelatedAssetArrayOutput
	ToAlertRelatedAssetArrayOutputWithContext(context.Context) AlertRelatedAssetArrayOutput
}

type AlertRelatedAssetArray []AlertRelatedAssetInput

func (AlertRelatedAssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertRelatedAsset)(nil)).Elem()
}

func (i AlertRelatedAssetArray) ToAlertRelatedAssetArrayOutput() AlertRelatedAssetArrayOutput {
	return i.ToAlertRelatedAssetArrayOutputWithContext(context.Background())
}

func (i AlertRelatedAssetArray) ToAlertRelatedAssetArrayOutputWithContext(ctx context.Context) AlertRelatedAssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRelatedAssetArrayOutput)
}

type AlertRelatedAssetOutput struct{ *pulumi.OutputState }

func (AlertRelatedAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRelatedAsset)(nil)).Elem()
}

func (o AlertRelatedAssetOutput) ToAlertRelatedAssetOutput() AlertRelatedAssetOutput {
	return o
}

func (o AlertRelatedAssetOutput) ToAlertRelatedAssetOutputWithContext(ctx context.Context) AlertRelatedAssetOutput {
	return o
}

// asset id
func (o AlertRelatedAssetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AlertRelatedAsset) string { return v.Id }).(pulumi.StringOutput)
}

// asset name
func (o AlertRelatedAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertRelatedAsset) string { return v.Name }).(pulumi.StringOutput)
}

type AlertRelatedAssetArrayOutput struct{ *pulumi.OutputState }

func (AlertRelatedAssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertRelatedAsset)(nil)).Elem()
}

func (o AlertRelatedAssetArrayOutput) ToAlertRelatedAssetArrayOutput() AlertRelatedAssetArrayOutput {
	return o
}

func (o AlertRelatedAssetArrayOutput) ToAlertRelatedAssetArrayOutputWithContext(ctx context.Context) AlertRelatedAssetArrayOutput {
	return o
}

func (o AlertRelatedAssetArrayOutput) Index(i pulumi.IntInput) AlertRelatedAssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertRelatedAsset {
		return vs[0].([]AlertRelatedAsset)[vs[1].(int)]
	}).(AlertRelatedAssetOutput)
}

type AlertTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// AlertTagInput is an input type that accepts AlertTagArgs and AlertTagOutput values.
// You can construct a concrete instance of `AlertTagInput` via:
//
//	AlertTagArgs{...}
type AlertTagInput interface {
	pulumi.Input

	ToAlertTagOutput() AlertTagOutput
	ToAlertTagOutputWithContext(context.Context) AlertTagOutput
}

type AlertTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (AlertTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertTag)(nil)).Elem()
}

func (i AlertTagArgs) ToAlertTagOutput() AlertTagOutput {
	return i.ToAlertTagOutputWithContext(context.Background())
}

func (i AlertTagArgs) ToAlertTagOutputWithContext(ctx context.Context) AlertTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertTagOutput)
}

// AlertTagArrayInput is an input type that accepts AlertTagArray and AlertTagArrayOutput values.
// You can construct a concrete instance of `AlertTagArrayInput` via:
//
//	AlertTagArray{ AlertTagArgs{...} }
type AlertTagArrayInput interface {
	pulumi.Input

	ToAlertTagArrayOutput() AlertTagArrayOutput
	ToAlertTagArrayOutputWithContext(context.Context) AlertTagArrayOutput
}

type AlertTagArray []AlertTagInput

func (AlertTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertTag)(nil)).Elem()
}

func (i AlertTagArray) ToAlertTagArrayOutput() AlertTagArrayOutput {
	return i.ToAlertTagArrayOutputWithContext(context.Background())
}

func (i AlertTagArray) ToAlertTagArrayOutputWithContext(ctx context.Context) AlertTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertTagArrayOutput)
}

type AlertTagOutput struct{ *pulumi.OutputState }

func (AlertTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertTag)(nil)).Elem()
}

func (o AlertTagOutput) ToAlertTagOutput() AlertTagOutput {
	return o
}

func (o AlertTagOutput) ToAlertTagOutputWithContext(ctx context.Context) AlertTagOutput {
	return o
}

// tag id
func (o AlertTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AlertTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o AlertTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertTag) string { return v.Name }).(pulumi.StringOutput)
}

type AlertTagArrayOutput struct{ *pulumi.OutputState }

func (AlertTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertTag)(nil)).Elem()
}

func (o AlertTagArrayOutput) ToAlertTagArrayOutput() AlertTagArrayOutput {
	return o
}

func (o AlertTagArrayOutput) ToAlertTagArrayOutputWithContext(ctx context.Context) AlertTagArrayOutput {
	return o
}

func (o AlertTagArrayOutput) Index(i pulumi.IntInput) AlertTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertTag {
		return vs[0].([]AlertTag)[vs[1].(int)]
	}).(AlertTagOutput)
}

type AlertThreshold struct {
	// [alert|warning|no_alert] status value for the threshold
	Status string `pulumi:"status"`
	// optional custom value to be displayed in the platform.
	StatusText *string `pulumi:"statusText"`
	// value to be considered to compare
	Value float64 `pulumi:"value"`
}

// AlertThresholdInput is an input type that accepts AlertThresholdArgs and AlertThresholdOutput values.
// You can construct a concrete instance of `AlertThresholdInput` via:
//
//	AlertThresholdArgs{...}
type AlertThresholdInput interface {
	pulumi.Input

	ToAlertThresholdOutput() AlertThresholdOutput
	ToAlertThresholdOutputWithContext(context.Context) AlertThresholdOutput
}

type AlertThresholdArgs struct {
	// [alert|warning|no_alert] status value for the threshold
	Status pulumi.StringInput `pulumi:"status"`
	// optional custom value to be displayed in the platform.
	StatusText pulumi.StringPtrInput `pulumi:"statusText"`
	// value to be considered to compare
	Value pulumi.Float64Input `pulumi:"value"`
}

func (AlertThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertThreshold)(nil)).Elem()
}

func (i AlertThresholdArgs) ToAlertThresholdOutput() AlertThresholdOutput {
	return i.ToAlertThresholdOutputWithContext(context.Background())
}

func (i AlertThresholdArgs) ToAlertThresholdOutputWithContext(ctx context.Context) AlertThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertThresholdOutput)
}

// AlertThresholdArrayInput is an input type that accepts AlertThresholdArray and AlertThresholdArrayOutput values.
// You can construct a concrete instance of `AlertThresholdArrayInput` via:
//
//	AlertThresholdArray{ AlertThresholdArgs{...} }
type AlertThresholdArrayInput interface {
	pulumi.Input

	ToAlertThresholdArrayOutput() AlertThresholdArrayOutput
	ToAlertThresholdArrayOutputWithContext(context.Context) AlertThresholdArrayOutput
}

type AlertThresholdArray []AlertThresholdInput

func (AlertThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertThreshold)(nil)).Elem()
}

func (i AlertThresholdArray) ToAlertThresholdArrayOutput() AlertThresholdArrayOutput {
	return i.ToAlertThresholdArrayOutputWithContext(context.Background())
}

func (i AlertThresholdArray) ToAlertThresholdArrayOutputWithContext(ctx context.Context) AlertThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertThresholdArrayOutput)
}

type AlertThresholdOutput struct{ *pulumi.OutputState }

func (AlertThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertThreshold)(nil)).Elem()
}

func (o AlertThresholdOutput) ToAlertThresholdOutput() AlertThresholdOutput {
	return o
}

func (o AlertThresholdOutput) ToAlertThresholdOutputWithContext(ctx context.Context) AlertThresholdOutput {
	return o
}

// [alert|warning|no_alert] status value for the threshold
func (o AlertThresholdOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AlertThreshold) string { return v.Status }).(pulumi.StringOutput)
}

// optional custom value to be displayed in the platform.
func (o AlertThresholdOutput) StatusText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertThreshold) *string { return v.StatusText }).(pulumi.StringPtrOutput)
}

// value to be considered to compare
func (o AlertThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v AlertThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type AlertThresholdArrayOutput struct{ *pulumi.OutputState }

func (AlertThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertThreshold)(nil)).Elem()
}

func (o AlertThresholdArrayOutput) ToAlertThresholdArrayOutput() AlertThresholdArrayOutput {
	return o
}

func (o AlertThresholdArrayOutput) ToAlertThresholdArrayOutputWithContext(ctx context.Context) AlertThresholdArrayOutput {
	return o
}

func (o AlertThresholdArrayOutput) Index(i pulumi.IntInput) AlertThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertThreshold {
		return vs[0].([]AlertThreshold)[vs[1].(int)]
	}).(AlertThresholdOutput)
}

type AlgorithmInputType struct {
	Description *string `pulumi:"description"`
	Multiple    *bool   `pulumi:"multiple"`
	Name        string  `pulumi:"name"`
	Required    *bool   `pulumi:"required"`
	Sensitive   *bool   `pulumi:"sensitive"`
	Type        string  `pulumi:"type"`
	Value       *string `pulumi:"value"`
}

// AlgorithmInputTypeInput is an input type that accepts AlgorithmInputTypeArgs and AlgorithmInputTypeOutput values.
// You can construct a concrete instance of `AlgorithmInputTypeInput` via:
//
//	AlgorithmInputTypeArgs{...}
type AlgorithmInputTypeInput interface {
	pulumi.Input

	ToAlgorithmInputTypeOutput() AlgorithmInputTypeOutput
	ToAlgorithmInputTypeOutputWithContext(context.Context) AlgorithmInputTypeOutput
}

type AlgorithmInputTypeArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Multiple    pulumi.BoolPtrInput   `pulumi:"multiple"`
	Name        pulumi.StringInput    `pulumi:"name"`
	Required    pulumi.BoolPtrInput   `pulumi:"required"`
	Sensitive   pulumi.BoolPtrInput   `pulumi:"sensitive"`
	Type        pulumi.StringInput    `pulumi:"type"`
	Value       pulumi.StringPtrInput `pulumi:"value"`
}

func (AlgorithmInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlgorithmInputType)(nil)).Elem()
}

func (i AlgorithmInputTypeArgs) ToAlgorithmInputTypeOutput() AlgorithmInputTypeOutput {
	return i.ToAlgorithmInputTypeOutputWithContext(context.Background())
}

func (i AlgorithmInputTypeArgs) ToAlgorithmInputTypeOutputWithContext(ctx context.Context) AlgorithmInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlgorithmInputTypeOutput)
}

// AlgorithmInputTypeArrayInput is an input type that accepts AlgorithmInputTypeArray and AlgorithmInputTypeArrayOutput values.
// You can construct a concrete instance of `AlgorithmInputTypeArrayInput` via:
//
//	AlgorithmInputTypeArray{ AlgorithmInputTypeArgs{...} }
type AlgorithmInputTypeArrayInput interface {
	pulumi.Input

	ToAlgorithmInputTypeArrayOutput() AlgorithmInputTypeArrayOutput
	ToAlgorithmInputTypeArrayOutputWithContext(context.Context) AlgorithmInputTypeArrayOutput
}

type AlgorithmInputTypeArray []AlgorithmInputTypeInput

func (AlgorithmInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlgorithmInputType)(nil)).Elem()
}

func (i AlgorithmInputTypeArray) ToAlgorithmInputTypeArrayOutput() AlgorithmInputTypeArrayOutput {
	return i.ToAlgorithmInputTypeArrayOutputWithContext(context.Background())
}

func (i AlgorithmInputTypeArray) ToAlgorithmInputTypeArrayOutputWithContext(ctx context.Context) AlgorithmInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlgorithmInputTypeArrayOutput)
}

type AlgorithmInputTypeOutput struct{ *pulumi.OutputState }

func (AlgorithmInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlgorithmInputType)(nil)).Elem()
}

func (o AlgorithmInputTypeOutput) ToAlgorithmInputTypeOutput() AlgorithmInputTypeOutput {
	return o
}

func (o AlgorithmInputTypeOutput) ToAlgorithmInputTypeOutputWithContext(ctx context.Context) AlgorithmInputTypeOutput {
	return o
}

func (o AlgorithmInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlgorithmInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AlgorithmInputTypeOutput) Multiple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlgorithmInputType) *bool { return v.Multiple }).(pulumi.BoolPtrOutput)
}

func (o AlgorithmInputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlgorithmInputType) string { return v.Name }).(pulumi.StringOutput)
}

func (o AlgorithmInputTypeOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlgorithmInputType) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o AlgorithmInputTypeOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlgorithmInputType) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

func (o AlgorithmInputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlgorithmInputType) string { return v.Type }).(pulumi.StringOutput)
}

func (o AlgorithmInputTypeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlgorithmInputType) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AlgorithmInputTypeArrayOutput struct{ *pulumi.OutputState }

func (AlgorithmInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlgorithmInputType)(nil)).Elem()
}

func (o AlgorithmInputTypeArrayOutput) ToAlgorithmInputTypeArrayOutput() AlgorithmInputTypeArrayOutput {
	return o
}

func (o AlgorithmInputTypeArrayOutput) ToAlgorithmInputTypeArrayOutputWithContext(ctx context.Context) AlgorithmInputTypeArrayOutput {
	return o
}

func (o AlgorithmInputTypeArrayOutput) Index(i pulumi.IntInput) AlgorithmInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlgorithmInputType {
		return vs[0].([]AlgorithmInputType)[vs[1].(int)]
	}).(AlgorithmInputTypeOutput)
}

type AlgorithmTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// AlgorithmTagInput is an input type that accepts AlgorithmTagArgs and AlgorithmTagOutput values.
// You can construct a concrete instance of `AlgorithmTagInput` via:
//
//	AlgorithmTagArgs{...}
type AlgorithmTagInput interface {
	pulumi.Input

	ToAlgorithmTagOutput() AlgorithmTagOutput
	ToAlgorithmTagOutputWithContext(context.Context) AlgorithmTagOutput
}

type AlgorithmTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (AlgorithmTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlgorithmTag)(nil)).Elem()
}

func (i AlgorithmTagArgs) ToAlgorithmTagOutput() AlgorithmTagOutput {
	return i.ToAlgorithmTagOutputWithContext(context.Background())
}

func (i AlgorithmTagArgs) ToAlgorithmTagOutputWithContext(ctx context.Context) AlgorithmTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlgorithmTagOutput)
}

// AlgorithmTagArrayInput is an input type that accepts AlgorithmTagArray and AlgorithmTagArrayOutput values.
// You can construct a concrete instance of `AlgorithmTagArrayInput` via:
//
//	AlgorithmTagArray{ AlgorithmTagArgs{...} }
type AlgorithmTagArrayInput interface {
	pulumi.Input

	ToAlgorithmTagArrayOutput() AlgorithmTagArrayOutput
	ToAlgorithmTagArrayOutputWithContext(context.Context) AlgorithmTagArrayOutput
}

type AlgorithmTagArray []AlgorithmTagInput

func (AlgorithmTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlgorithmTag)(nil)).Elem()
}

func (i AlgorithmTagArray) ToAlgorithmTagArrayOutput() AlgorithmTagArrayOutput {
	return i.ToAlgorithmTagArrayOutputWithContext(context.Background())
}

func (i AlgorithmTagArray) ToAlgorithmTagArrayOutputWithContext(ctx context.Context) AlgorithmTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlgorithmTagArrayOutput)
}

type AlgorithmTagOutput struct{ *pulumi.OutputState }

func (AlgorithmTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlgorithmTag)(nil)).Elem()
}

func (o AlgorithmTagOutput) ToAlgorithmTagOutput() AlgorithmTagOutput {
	return o
}

func (o AlgorithmTagOutput) ToAlgorithmTagOutputWithContext(ctx context.Context) AlgorithmTagOutput {
	return o
}

// tag id
func (o AlgorithmTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AlgorithmTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o AlgorithmTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlgorithmTag) string { return v.Name }).(pulumi.StringOutput)
}

type AlgorithmTagArrayOutput struct{ *pulumi.OutputState }

func (AlgorithmTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlgorithmTag)(nil)).Elem()
}

func (o AlgorithmTagArrayOutput) ToAlgorithmTagArrayOutput() AlgorithmTagArrayOutput {
	return o
}

func (o AlgorithmTagArrayOutput) ToAlgorithmTagArrayOutputWithContext(ctx context.Context) AlgorithmTagArrayOutput {
	return o
}

func (o AlgorithmTagArrayOutput) Index(i pulumi.IntInput) AlgorithmTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlgorithmTag {
		return vs[0].([]AlgorithmTag)[vs[1].(int)]
	}).(AlgorithmTagOutput)
}

type AssetKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// AssetKindInput is an input type that accepts AssetKindArgs and AssetKindOutput values.
// You can construct a concrete instance of `AssetKindInput` via:
//
//	AssetKindArgs{...}
type AssetKindInput interface {
	pulumi.Input

	ToAssetKindOutput() AssetKindOutput
	ToAssetKindOutputWithContext(context.Context) AssetKindOutput
}

type AssetKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (AssetKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetKind)(nil)).Elem()
}

func (i AssetKindArgs) ToAssetKindOutput() AssetKindOutput {
	return i.ToAssetKindOutputWithContext(context.Background())
}

func (i AssetKindArgs) ToAssetKindOutputWithContext(ctx context.Context) AssetKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetKindOutput)
}

func (i AssetKindArgs) ToAssetKindPtrOutput() AssetKindPtrOutput {
	return i.ToAssetKindPtrOutputWithContext(context.Background())
}

func (i AssetKindArgs) ToAssetKindPtrOutputWithContext(ctx context.Context) AssetKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetKindOutput).ToAssetKindPtrOutputWithContext(ctx)
}

// AssetKindPtrInput is an input type that accepts AssetKindArgs, AssetKindPtr and AssetKindPtrOutput values.
// You can construct a concrete instance of `AssetKindPtrInput` via:
//
//	        AssetKindArgs{...}
//
//	or:
//
//	        nil
type AssetKindPtrInput interface {
	pulumi.Input

	ToAssetKindPtrOutput() AssetKindPtrOutput
	ToAssetKindPtrOutputWithContext(context.Context) AssetKindPtrOutput
}

type assetKindPtrType AssetKindArgs

func AssetKindPtr(v *AssetKindArgs) AssetKindPtrInput {
	return (*assetKindPtrType)(v)
}

func (*assetKindPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetKind)(nil)).Elem()
}

func (i *assetKindPtrType) ToAssetKindPtrOutput() AssetKindPtrOutput {
	return i.ToAssetKindPtrOutputWithContext(context.Background())
}

func (i *assetKindPtrType) ToAssetKindPtrOutputWithContext(ctx context.Context) AssetKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetKindPtrOutput)
}

type AssetKindOutput struct{ *pulumi.OutputState }

func (AssetKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetKind)(nil)).Elem()
}

func (o AssetKindOutput) ToAssetKindOutput() AssetKindOutput {
	return o
}

func (o AssetKindOutput) ToAssetKindOutputWithContext(ctx context.Context) AssetKindOutput {
	return o
}

func (o AssetKindOutput) ToAssetKindPtrOutput() AssetKindPtrOutput {
	return o.ToAssetKindPtrOutputWithContext(context.Background())
}

func (o AssetKindOutput) ToAssetKindPtrOutputWithContext(ctx context.Context) AssetKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssetKind) *AssetKind {
		return &v
	}).(AssetKindPtrOutput)
}

// kind id
func (o AssetKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AssetKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o AssetKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetKind) string { return v.Name }).(pulumi.StringOutput)
}

type AssetKindPtrOutput struct{ *pulumi.OutputState }

func (AssetKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetKind)(nil)).Elem()
}

func (o AssetKindPtrOutput) ToAssetKindPtrOutput() AssetKindPtrOutput {
	return o
}

func (o AssetKindPtrOutput) ToAssetKindPtrOutputWithContext(ctx context.Context) AssetKindPtrOutput {
	return o
}

func (o AssetKindPtrOutput) Elem() AssetKindOutput {
	return o.ApplyT(func(v *AssetKind) AssetKind {
		if v != nil {
			return *v
		}
		var ret AssetKind
		return ret
	}).(AssetKindOutput)
}

// kind id
func (o AssetKindPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetKind) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// kind name
func (o AssetKindPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetKind) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type AssetRelationAsset struct {
	// asset id
	Id string `pulumi:"id"`
	// asset name
	Name string `pulumi:"name"`
}

// AssetRelationAssetInput is an input type that accepts AssetRelationAssetArgs and AssetRelationAssetOutput values.
// You can construct a concrete instance of `AssetRelationAssetInput` via:
//
//	AssetRelationAssetArgs{...}
type AssetRelationAssetInput interface {
	pulumi.Input

	ToAssetRelationAssetOutput() AssetRelationAssetOutput
	ToAssetRelationAssetOutputWithContext(context.Context) AssetRelationAssetOutput
}

type AssetRelationAssetArgs struct {
	// asset id
	Id pulumi.StringInput `pulumi:"id"`
	// asset name
	Name pulumi.StringInput `pulumi:"name"`
}

func (AssetRelationAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetRelationAsset)(nil)).Elem()
}

func (i AssetRelationAssetArgs) ToAssetRelationAssetOutput() AssetRelationAssetOutput {
	return i.ToAssetRelationAssetOutputWithContext(context.Background())
}

func (i AssetRelationAssetArgs) ToAssetRelationAssetOutputWithContext(ctx context.Context) AssetRelationAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetRelationAssetOutput)
}

func (i AssetRelationAssetArgs) ToAssetRelationAssetPtrOutput() AssetRelationAssetPtrOutput {
	return i.ToAssetRelationAssetPtrOutputWithContext(context.Background())
}

func (i AssetRelationAssetArgs) ToAssetRelationAssetPtrOutputWithContext(ctx context.Context) AssetRelationAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetRelationAssetOutput).ToAssetRelationAssetPtrOutputWithContext(ctx)
}

// AssetRelationAssetPtrInput is an input type that accepts AssetRelationAssetArgs, AssetRelationAssetPtr and AssetRelationAssetPtrOutput values.
// You can construct a concrete instance of `AssetRelationAssetPtrInput` via:
//
//	        AssetRelationAssetArgs{...}
//
//	or:
//
//	        nil
type AssetRelationAssetPtrInput interface {
	pulumi.Input

	ToAssetRelationAssetPtrOutput() AssetRelationAssetPtrOutput
	ToAssetRelationAssetPtrOutputWithContext(context.Context) AssetRelationAssetPtrOutput
}

type assetRelationAssetPtrType AssetRelationAssetArgs

func AssetRelationAssetPtr(v *AssetRelationAssetArgs) AssetRelationAssetPtrInput {
	return (*assetRelationAssetPtrType)(v)
}

func (*assetRelationAssetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetRelationAsset)(nil)).Elem()
}

func (i *assetRelationAssetPtrType) ToAssetRelationAssetPtrOutput() AssetRelationAssetPtrOutput {
	return i.ToAssetRelationAssetPtrOutputWithContext(context.Background())
}

func (i *assetRelationAssetPtrType) ToAssetRelationAssetPtrOutputWithContext(ctx context.Context) AssetRelationAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetRelationAssetPtrOutput)
}

type AssetRelationAssetOutput struct{ *pulumi.OutputState }

func (AssetRelationAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetRelationAsset)(nil)).Elem()
}

func (o AssetRelationAssetOutput) ToAssetRelationAssetOutput() AssetRelationAssetOutput {
	return o
}

func (o AssetRelationAssetOutput) ToAssetRelationAssetOutputWithContext(ctx context.Context) AssetRelationAssetOutput {
	return o
}

func (o AssetRelationAssetOutput) ToAssetRelationAssetPtrOutput() AssetRelationAssetPtrOutput {
	return o.ToAssetRelationAssetPtrOutputWithContext(context.Background())
}

func (o AssetRelationAssetOutput) ToAssetRelationAssetPtrOutputWithContext(ctx context.Context) AssetRelationAssetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssetRelationAsset) *AssetRelationAsset {
		return &v
	}).(AssetRelationAssetPtrOutput)
}

// asset id
func (o AssetRelationAssetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AssetRelationAsset) string { return v.Id }).(pulumi.StringOutput)
}

// asset name
func (o AssetRelationAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetRelationAsset) string { return v.Name }).(pulumi.StringOutput)
}

type AssetRelationAssetPtrOutput struct{ *pulumi.OutputState }

func (AssetRelationAssetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetRelationAsset)(nil)).Elem()
}

func (o AssetRelationAssetPtrOutput) ToAssetRelationAssetPtrOutput() AssetRelationAssetPtrOutput {
	return o
}

func (o AssetRelationAssetPtrOutput) ToAssetRelationAssetPtrOutputWithContext(ctx context.Context) AssetRelationAssetPtrOutput {
	return o
}

func (o AssetRelationAssetPtrOutput) Elem() AssetRelationAssetOutput {
	return o.ApplyT(func(v *AssetRelationAsset) AssetRelationAsset {
		if v != nil {
			return *v
		}
		var ret AssetRelationAsset
		return ret
	}).(AssetRelationAssetOutput)
}

// asset id
func (o AssetRelationAssetPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetRelationAsset) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// asset name
func (o AssetRelationAssetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetRelationAsset) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type AssetRelationRelatedAsset struct {
	// asset id
	Id string `pulumi:"id"`
	// asset name
	Name string `pulumi:"name"`
}

// AssetRelationRelatedAssetInput is an input type that accepts AssetRelationRelatedAssetArgs and AssetRelationRelatedAssetOutput values.
// You can construct a concrete instance of `AssetRelationRelatedAssetInput` via:
//
//	AssetRelationRelatedAssetArgs{...}
type AssetRelationRelatedAssetInput interface {
	pulumi.Input

	ToAssetRelationRelatedAssetOutput() AssetRelationRelatedAssetOutput
	ToAssetRelationRelatedAssetOutputWithContext(context.Context) AssetRelationRelatedAssetOutput
}

type AssetRelationRelatedAssetArgs struct {
	// asset id
	Id pulumi.StringInput `pulumi:"id"`
	// asset name
	Name pulumi.StringInput `pulumi:"name"`
}

func (AssetRelationRelatedAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetRelationRelatedAsset)(nil)).Elem()
}

func (i AssetRelationRelatedAssetArgs) ToAssetRelationRelatedAssetOutput() AssetRelationRelatedAssetOutput {
	return i.ToAssetRelationRelatedAssetOutputWithContext(context.Background())
}

func (i AssetRelationRelatedAssetArgs) ToAssetRelationRelatedAssetOutputWithContext(ctx context.Context) AssetRelationRelatedAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetRelationRelatedAssetOutput)
}

func (i AssetRelationRelatedAssetArgs) ToAssetRelationRelatedAssetPtrOutput() AssetRelationRelatedAssetPtrOutput {
	return i.ToAssetRelationRelatedAssetPtrOutputWithContext(context.Background())
}

func (i AssetRelationRelatedAssetArgs) ToAssetRelationRelatedAssetPtrOutputWithContext(ctx context.Context) AssetRelationRelatedAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetRelationRelatedAssetOutput).ToAssetRelationRelatedAssetPtrOutputWithContext(ctx)
}

// AssetRelationRelatedAssetPtrInput is an input type that accepts AssetRelationRelatedAssetArgs, AssetRelationRelatedAssetPtr and AssetRelationRelatedAssetPtrOutput values.
// You can construct a concrete instance of `AssetRelationRelatedAssetPtrInput` via:
//
//	        AssetRelationRelatedAssetArgs{...}
//
//	or:
//
//	        nil
type AssetRelationRelatedAssetPtrInput interface {
	pulumi.Input

	ToAssetRelationRelatedAssetPtrOutput() AssetRelationRelatedAssetPtrOutput
	ToAssetRelationRelatedAssetPtrOutputWithContext(context.Context) AssetRelationRelatedAssetPtrOutput
}

type assetRelationRelatedAssetPtrType AssetRelationRelatedAssetArgs

func AssetRelationRelatedAssetPtr(v *AssetRelationRelatedAssetArgs) AssetRelationRelatedAssetPtrInput {
	return (*assetRelationRelatedAssetPtrType)(v)
}

func (*assetRelationRelatedAssetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetRelationRelatedAsset)(nil)).Elem()
}

func (i *assetRelationRelatedAssetPtrType) ToAssetRelationRelatedAssetPtrOutput() AssetRelationRelatedAssetPtrOutput {
	return i.ToAssetRelationRelatedAssetPtrOutputWithContext(context.Background())
}

func (i *assetRelationRelatedAssetPtrType) ToAssetRelationRelatedAssetPtrOutputWithContext(ctx context.Context) AssetRelationRelatedAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetRelationRelatedAssetPtrOutput)
}

type AssetRelationRelatedAssetOutput struct{ *pulumi.OutputState }

func (AssetRelationRelatedAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetRelationRelatedAsset)(nil)).Elem()
}

func (o AssetRelationRelatedAssetOutput) ToAssetRelationRelatedAssetOutput() AssetRelationRelatedAssetOutput {
	return o
}

func (o AssetRelationRelatedAssetOutput) ToAssetRelationRelatedAssetOutputWithContext(ctx context.Context) AssetRelationRelatedAssetOutput {
	return o
}

func (o AssetRelationRelatedAssetOutput) ToAssetRelationRelatedAssetPtrOutput() AssetRelationRelatedAssetPtrOutput {
	return o.ToAssetRelationRelatedAssetPtrOutputWithContext(context.Background())
}

func (o AssetRelationRelatedAssetOutput) ToAssetRelationRelatedAssetPtrOutputWithContext(ctx context.Context) AssetRelationRelatedAssetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssetRelationRelatedAsset) *AssetRelationRelatedAsset {
		return &v
	}).(AssetRelationRelatedAssetPtrOutput)
}

// asset id
func (o AssetRelationRelatedAssetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AssetRelationRelatedAsset) string { return v.Id }).(pulumi.StringOutput)
}

// asset name
func (o AssetRelationRelatedAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetRelationRelatedAsset) string { return v.Name }).(pulumi.StringOutput)
}

type AssetRelationRelatedAssetPtrOutput struct{ *pulumi.OutputState }

func (AssetRelationRelatedAssetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetRelationRelatedAsset)(nil)).Elem()
}

func (o AssetRelationRelatedAssetPtrOutput) ToAssetRelationRelatedAssetPtrOutput() AssetRelationRelatedAssetPtrOutput {
	return o
}

func (o AssetRelationRelatedAssetPtrOutput) ToAssetRelationRelatedAssetPtrOutputWithContext(ctx context.Context) AssetRelationRelatedAssetPtrOutput {
	return o
}

func (o AssetRelationRelatedAssetPtrOutput) Elem() AssetRelationRelatedAssetOutput {
	return o.ApplyT(func(v *AssetRelationRelatedAsset) AssetRelationRelatedAsset {
		if v != nil {
			return *v
		}
		var ret AssetRelationRelatedAsset
		return ret
	}).(AssetRelationRelatedAssetOutput)
}

// asset id
func (o AssetRelationRelatedAssetPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetRelationRelatedAsset) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// asset name
func (o AssetRelationRelatedAssetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetRelationRelatedAsset) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type AssetRelationRelatedAssetKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// AssetRelationRelatedAssetKindInput is an input type that accepts AssetRelationRelatedAssetKindArgs and AssetRelationRelatedAssetKindOutput values.
// You can construct a concrete instance of `AssetRelationRelatedAssetKindInput` via:
//
//	AssetRelationRelatedAssetKindArgs{...}
type AssetRelationRelatedAssetKindInput interface {
	pulumi.Input

	ToAssetRelationRelatedAssetKindOutput() AssetRelationRelatedAssetKindOutput
	ToAssetRelationRelatedAssetKindOutputWithContext(context.Context) AssetRelationRelatedAssetKindOutput
}

type AssetRelationRelatedAssetKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (AssetRelationRelatedAssetKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetRelationRelatedAssetKind)(nil)).Elem()
}

func (i AssetRelationRelatedAssetKindArgs) ToAssetRelationRelatedAssetKindOutput() AssetRelationRelatedAssetKindOutput {
	return i.ToAssetRelationRelatedAssetKindOutputWithContext(context.Background())
}

func (i AssetRelationRelatedAssetKindArgs) ToAssetRelationRelatedAssetKindOutputWithContext(ctx context.Context) AssetRelationRelatedAssetKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetRelationRelatedAssetKindOutput)
}

func (i AssetRelationRelatedAssetKindArgs) ToAssetRelationRelatedAssetKindPtrOutput() AssetRelationRelatedAssetKindPtrOutput {
	return i.ToAssetRelationRelatedAssetKindPtrOutputWithContext(context.Background())
}

func (i AssetRelationRelatedAssetKindArgs) ToAssetRelationRelatedAssetKindPtrOutputWithContext(ctx context.Context) AssetRelationRelatedAssetKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetRelationRelatedAssetKindOutput).ToAssetRelationRelatedAssetKindPtrOutputWithContext(ctx)
}

// AssetRelationRelatedAssetKindPtrInput is an input type that accepts AssetRelationRelatedAssetKindArgs, AssetRelationRelatedAssetKindPtr and AssetRelationRelatedAssetKindPtrOutput values.
// You can construct a concrete instance of `AssetRelationRelatedAssetKindPtrInput` via:
//
//	        AssetRelationRelatedAssetKindArgs{...}
//
//	or:
//
//	        nil
type AssetRelationRelatedAssetKindPtrInput interface {
	pulumi.Input

	ToAssetRelationRelatedAssetKindPtrOutput() AssetRelationRelatedAssetKindPtrOutput
	ToAssetRelationRelatedAssetKindPtrOutputWithContext(context.Context) AssetRelationRelatedAssetKindPtrOutput
}

type assetRelationRelatedAssetKindPtrType AssetRelationRelatedAssetKindArgs

func AssetRelationRelatedAssetKindPtr(v *AssetRelationRelatedAssetKindArgs) AssetRelationRelatedAssetKindPtrInput {
	return (*assetRelationRelatedAssetKindPtrType)(v)
}

func (*assetRelationRelatedAssetKindPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetRelationRelatedAssetKind)(nil)).Elem()
}

func (i *assetRelationRelatedAssetKindPtrType) ToAssetRelationRelatedAssetKindPtrOutput() AssetRelationRelatedAssetKindPtrOutput {
	return i.ToAssetRelationRelatedAssetKindPtrOutputWithContext(context.Background())
}

func (i *assetRelationRelatedAssetKindPtrType) ToAssetRelationRelatedAssetKindPtrOutputWithContext(ctx context.Context) AssetRelationRelatedAssetKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetRelationRelatedAssetKindPtrOutput)
}

type AssetRelationRelatedAssetKindOutput struct{ *pulumi.OutputState }

func (AssetRelationRelatedAssetKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetRelationRelatedAssetKind)(nil)).Elem()
}

func (o AssetRelationRelatedAssetKindOutput) ToAssetRelationRelatedAssetKindOutput() AssetRelationRelatedAssetKindOutput {
	return o
}

func (o AssetRelationRelatedAssetKindOutput) ToAssetRelationRelatedAssetKindOutputWithContext(ctx context.Context) AssetRelationRelatedAssetKindOutput {
	return o
}

func (o AssetRelationRelatedAssetKindOutput) ToAssetRelationRelatedAssetKindPtrOutput() AssetRelationRelatedAssetKindPtrOutput {
	return o.ToAssetRelationRelatedAssetKindPtrOutputWithContext(context.Background())
}

func (o AssetRelationRelatedAssetKindOutput) ToAssetRelationRelatedAssetKindPtrOutputWithContext(ctx context.Context) AssetRelationRelatedAssetKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssetRelationRelatedAssetKind) *AssetRelationRelatedAssetKind {
		return &v
	}).(AssetRelationRelatedAssetKindPtrOutput)
}

// kind id
func (o AssetRelationRelatedAssetKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AssetRelationRelatedAssetKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o AssetRelationRelatedAssetKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetRelationRelatedAssetKind) string { return v.Name }).(pulumi.StringOutput)
}

type AssetRelationRelatedAssetKindPtrOutput struct{ *pulumi.OutputState }

func (AssetRelationRelatedAssetKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetRelationRelatedAssetKind)(nil)).Elem()
}

func (o AssetRelationRelatedAssetKindPtrOutput) ToAssetRelationRelatedAssetKindPtrOutput() AssetRelationRelatedAssetKindPtrOutput {
	return o
}

func (o AssetRelationRelatedAssetKindPtrOutput) ToAssetRelationRelatedAssetKindPtrOutputWithContext(ctx context.Context) AssetRelationRelatedAssetKindPtrOutput {
	return o
}

func (o AssetRelationRelatedAssetKindPtrOutput) Elem() AssetRelationRelatedAssetKindOutput {
	return o.ApplyT(func(v *AssetRelationRelatedAssetKind) AssetRelationRelatedAssetKind {
		if v != nil {
			return *v
		}
		var ret AssetRelationRelatedAssetKind
		return ret
	}).(AssetRelationRelatedAssetKindOutput)
}

// kind id
func (o AssetRelationRelatedAssetKindPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetRelationRelatedAssetKind) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// kind name
func (o AssetRelationRelatedAssetKindPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetRelationRelatedAssetKind) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type AssetTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// AssetTagInput is an input type that accepts AssetTagArgs and AssetTagOutput values.
// You can construct a concrete instance of `AssetTagInput` via:
//
//	AssetTagArgs{...}
type AssetTagInput interface {
	pulumi.Input

	ToAssetTagOutput() AssetTagOutput
	ToAssetTagOutputWithContext(context.Context) AssetTagOutput
}

type AssetTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (AssetTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetTag)(nil)).Elem()
}

func (i AssetTagArgs) ToAssetTagOutput() AssetTagOutput {
	return i.ToAssetTagOutputWithContext(context.Background())
}

func (i AssetTagArgs) ToAssetTagOutputWithContext(ctx context.Context) AssetTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetTagOutput)
}

// AssetTagArrayInput is an input type that accepts AssetTagArray and AssetTagArrayOutput values.
// You can construct a concrete instance of `AssetTagArrayInput` via:
//
//	AssetTagArray{ AssetTagArgs{...} }
type AssetTagArrayInput interface {
	pulumi.Input

	ToAssetTagArrayOutput() AssetTagArrayOutput
	ToAssetTagArrayOutputWithContext(context.Context) AssetTagArrayOutput
}

type AssetTagArray []AssetTagInput

func (AssetTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetTag)(nil)).Elem()
}

func (i AssetTagArray) ToAssetTagArrayOutput() AssetTagArrayOutput {
	return i.ToAssetTagArrayOutputWithContext(context.Background())
}

func (i AssetTagArray) ToAssetTagArrayOutputWithContext(ctx context.Context) AssetTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetTagArrayOutput)
}

type AssetTagOutput struct{ *pulumi.OutputState }

func (AssetTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetTag)(nil)).Elem()
}

func (o AssetTagOutput) ToAssetTagOutput() AssetTagOutput {
	return o
}

func (o AssetTagOutput) ToAssetTagOutputWithContext(ctx context.Context) AssetTagOutput {
	return o
}

// tag id
func (o AssetTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AssetTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o AssetTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetTag) string { return v.Name }).(pulumi.StringOutput)
}

type AssetTagArrayOutput struct{ *pulumi.OutputState }

func (AssetTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetTag)(nil)).Elem()
}

func (o AssetTagArrayOutput) ToAssetTagArrayOutput() AssetTagArrayOutput {
	return o
}

func (o AssetTagArrayOutput) ToAssetTagArrayOutputWithContext(ctx context.Context) AssetTagArrayOutput {
	return o
}

func (o AssetTagArrayOutput) Index(i pulumi.IntInput) AssetTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetTag {
		return vs[0].([]AssetTag)[vs[1].(int)]
	}).(AssetTagOutput)
}

type BusActivePower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// BusActivePowerInput is an input type that accepts BusActivePowerArgs and BusActivePowerOutput values.
// You can construct a concrete instance of `BusActivePowerInput` via:
//
//	BusActivePowerArgs{...}
type BusActivePowerInput interface {
	pulumi.Input

	ToBusActivePowerOutput() BusActivePowerOutput
	ToBusActivePowerOutputWithContext(context.Context) BusActivePowerOutput
}

type BusActivePowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (BusActivePowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusActivePower)(nil)).Elem()
}

func (i BusActivePowerArgs) ToBusActivePowerOutput() BusActivePowerOutput {
	return i.ToBusActivePowerOutputWithContext(context.Background())
}

func (i BusActivePowerArgs) ToBusActivePowerOutputWithContext(ctx context.Context) BusActivePowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusActivePowerOutput)
}

// BusActivePowerArrayInput is an input type that accepts BusActivePowerArray and BusActivePowerArrayOutput values.
// You can construct a concrete instance of `BusActivePowerArrayInput` via:
//
//	BusActivePowerArray{ BusActivePowerArgs{...} }
type BusActivePowerArrayInput interface {
	pulumi.Input

	ToBusActivePowerArrayOutput() BusActivePowerArrayOutput
	ToBusActivePowerArrayOutputWithContext(context.Context) BusActivePowerArrayOutput
}

type BusActivePowerArray []BusActivePowerInput

func (BusActivePowerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusActivePower)(nil)).Elem()
}

func (i BusActivePowerArray) ToBusActivePowerArrayOutput() BusActivePowerArrayOutput {
	return i.ToBusActivePowerArrayOutputWithContext(context.Background())
}

func (i BusActivePowerArray) ToBusActivePowerArrayOutputWithContext(ctx context.Context) BusActivePowerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusActivePowerArrayOutput)
}

type BusActivePowerOutput struct{ *pulumi.OutputState }

func (BusActivePowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusActivePower)(nil)).Elem()
}

func (o BusActivePowerOutput) ToBusActivePowerOutput() BusActivePowerOutput {
	return o
}

func (o BusActivePowerOutput) ToBusActivePowerOutputWithContext(ctx context.Context) BusActivePowerOutput {
	return o
}

// reference to the asset to be linked to
func (o BusActivePowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusActivePower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o BusActivePowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusActivePower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o BusActivePowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusActivePower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o BusActivePowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusActivePower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o BusActivePowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusActivePower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type BusActivePowerArrayOutput struct{ *pulumi.OutputState }

func (BusActivePowerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusActivePower)(nil)).Elem()
}

func (o BusActivePowerArrayOutput) ToBusActivePowerArrayOutput() BusActivePowerArrayOutput {
	return o
}

func (o BusActivePowerArrayOutput) ToBusActivePowerArrayOutputWithContext(ctx context.Context) BusActivePowerArrayOutput {
	return o
}

func (o BusActivePowerArrayOutput) Index(i pulumi.IntInput) BusActivePowerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BusActivePower {
		return vs[0].([]BusActivePower)[vs[1].(int)]
	}).(BusActivePowerOutput)
}

type BusKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// BusKindInput is an input type that accepts BusKindArgs and BusKindOutput values.
// You can construct a concrete instance of `BusKindInput` via:
//
//	BusKindArgs{...}
type BusKindInput interface {
	pulumi.Input

	ToBusKindOutput() BusKindOutput
	ToBusKindOutputWithContext(context.Context) BusKindOutput
}

type BusKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (BusKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusKind)(nil)).Elem()
}

func (i BusKindArgs) ToBusKindOutput() BusKindOutput {
	return i.ToBusKindOutputWithContext(context.Background())
}

func (i BusKindArgs) ToBusKindOutputWithContext(ctx context.Context) BusKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusKindOutput)
}

// BusKindArrayInput is an input type that accepts BusKindArray and BusKindArrayOutput values.
// You can construct a concrete instance of `BusKindArrayInput` via:
//
//	BusKindArray{ BusKindArgs{...} }
type BusKindArrayInput interface {
	pulumi.Input

	ToBusKindArrayOutput() BusKindArrayOutput
	ToBusKindArrayOutputWithContext(context.Context) BusKindArrayOutput
}

type BusKindArray []BusKindInput

func (BusKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusKind)(nil)).Elem()
}

func (i BusKindArray) ToBusKindArrayOutput() BusKindArrayOutput {
	return i.ToBusKindArrayOutputWithContext(context.Background())
}

func (i BusKindArray) ToBusKindArrayOutputWithContext(ctx context.Context) BusKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusKindArrayOutput)
}

type BusKindOutput struct{ *pulumi.OutputState }

func (BusKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusKind)(nil)).Elem()
}

func (o BusKindOutput) ToBusKindOutput() BusKindOutput {
	return o
}

func (o BusKindOutput) ToBusKindOutputWithContext(ctx context.Context) BusKindOutput {
	return o
}

// kind id
func (o BusKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BusKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o BusKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BusKind) string { return v.Name }).(pulumi.StringOutput)
}

type BusKindArrayOutput struct{ *pulumi.OutputState }

func (BusKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusKind)(nil)).Elem()
}

func (o BusKindArrayOutput) ToBusKindArrayOutput() BusKindArrayOutput {
	return o
}

func (o BusKindArrayOutput) ToBusKindArrayOutputWithContext(ctx context.Context) BusKindArrayOutput {
	return o
}

func (o BusKindArrayOutput) Index(i pulumi.IntInput) BusKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BusKind {
		return vs[0].([]BusKind)[vs[1].(int)]
	}).(BusKindOutput)
}

type BusNominalVoltageKv struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// BusNominalVoltageKvInput is an input type that accepts BusNominalVoltageKvArgs and BusNominalVoltageKvOutput values.
// You can construct a concrete instance of `BusNominalVoltageKvInput` via:
//
//	BusNominalVoltageKvArgs{...}
type BusNominalVoltageKvInput interface {
	pulumi.Input

	ToBusNominalVoltageKvOutput() BusNominalVoltageKvOutput
	ToBusNominalVoltageKvOutputWithContext(context.Context) BusNominalVoltageKvOutput
}

type BusNominalVoltageKvArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (BusNominalVoltageKvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusNominalVoltageKv)(nil)).Elem()
}

func (i BusNominalVoltageKvArgs) ToBusNominalVoltageKvOutput() BusNominalVoltageKvOutput {
	return i.ToBusNominalVoltageKvOutputWithContext(context.Background())
}

func (i BusNominalVoltageKvArgs) ToBusNominalVoltageKvOutputWithContext(ctx context.Context) BusNominalVoltageKvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusNominalVoltageKvOutput)
}

func (i BusNominalVoltageKvArgs) ToBusNominalVoltageKvPtrOutput() BusNominalVoltageKvPtrOutput {
	return i.ToBusNominalVoltageKvPtrOutputWithContext(context.Background())
}

func (i BusNominalVoltageKvArgs) ToBusNominalVoltageKvPtrOutputWithContext(ctx context.Context) BusNominalVoltageKvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusNominalVoltageKvOutput).ToBusNominalVoltageKvPtrOutputWithContext(ctx)
}

// BusNominalVoltageKvPtrInput is an input type that accepts BusNominalVoltageKvArgs, BusNominalVoltageKvPtr and BusNominalVoltageKvPtrOutput values.
// You can construct a concrete instance of `BusNominalVoltageKvPtrInput` via:
//
//	        BusNominalVoltageKvArgs{...}
//
//	or:
//
//	        nil
type BusNominalVoltageKvPtrInput interface {
	pulumi.Input

	ToBusNominalVoltageKvPtrOutput() BusNominalVoltageKvPtrOutput
	ToBusNominalVoltageKvPtrOutputWithContext(context.Context) BusNominalVoltageKvPtrOutput
}

type busNominalVoltageKvPtrType BusNominalVoltageKvArgs

func BusNominalVoltageKvPtr(v *BusNominalVoltageKvArgs) BusNominalVoltageKvPtrInput {
	return (*busNominalVoltageKvPtrType)(v)
}

func (*busNominalVoltageKvPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BusNominalVoltageKv)(nil)).Elem()
}

func (i *busNominalVoltageKvPtrType) ToBusNominalVoltageKvPtrOutput() BusNominalVoltageKvPtrOutput {
	return i.ToBusNominalVoltageKvPtrOutputWithContext(context.Background())
}

func (i *busNominalVoltageKvPtrType) ToBusNominalVoltageKvPtrOutputWithContext(ctx context.Context) BusNominalVoltageKvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusNominalVoltageKvPtrOutput)
}

type BusNominalVoltageKvOutput struct{ *pulumi.OutputState }

func (BusNominalVoltageKvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusNominalVoltageKv)(nil)).Elem()
}

func (o BusNominalVoltageKvOutput) ToBusNominalVoltageKvOutput() BusNominalVoltageKvOutput {
	return o
}

func (o BusNominalVoltageKvOutput) ToBusNominalVoltageKvOutputWithContext(ctx context.Context) BusNominalVoltageKvOutput {
	return o
}

func (o BusNominalVoltageKvOutput) ToBusNominalVoltageKvPtrOutput() BusNominalVoltageKvPtrOutput {
	return o.ToBusNominalVoltageKvPtrOutputWithContext(context.Background())
}

func (o BusNominalVoltageKvOutput) ToBusNominalVoltageKvPtrOutputWithContext(ctx context.Context) BusNominalVoltageKvPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BusNominalVoltageKv) *BusNominalVoltageKv {
		return &v
	}).(BusNominalVoltageKvPtrOutput)
}

// reference to the asset to be linked to
func (o BusNominalVoltageKvOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusNominalVoltageKv) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o BusNominalVoltageKvOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusNominalVoltageKv) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o BusNominalVoltageKvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusNominalVoltageKv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o BusNominalVoltageKvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusNominalVoltageKv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o BusNominalVoltageKvOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusNominalVoltageKv) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o BusNominalVoltageKvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusNominalVoltageKv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type BusNominalVoltageKvPtrOutput struct{ *pulumi.OutputState }

func (BusNominalVoltageKvPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusNominalVoltageKv)(nil)).Elem()
}

func (o BusNominalVoltageKvPtrOutput) ToBusNominalVoltageKvPtrOutput() BusNominalVoltageKvPtrOutput {
	return o
}

func (o BusNominalVoltageKvPtrOutput) ToBusNominalVoltageKvPtrOutputWithContext(ctx context.Context) BusNominalVoltageKvPtrOutput {
	return o
}

func (o BusNominalVoltageKvPtrOutput) Elem() BusNominalVoltageKvOutput {
	return o.ApplyT(func(v *BusNominalVoltageKv) BusNominalVoltageKv {
		if v != nil {
			return *v
		}
		var ret BusNominalVoltageKv
		return ret
	}).(BusNominalVoltageKvOutput)
}

// reference to the asset to be linked to
func (o BusNominalVoltageKvPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusNominalVoltageKv) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o BusNominalVoltageKvPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusNominalVoltageKv) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o BusNominalVoltageKvPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusNominalVoltageKv) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o BusNominalVoltageKvPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusNominalVoltageKv) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o BusNominalVoltageKvPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusNominalVoltageKv) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o BusNominalVoltageKvPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusNominalVoltageKv) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type BusReactivePower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// BusReactivePowerInput is an input type that accepts BusReactivePowerArgs and BusReactivePowerOutput values.
// You can construct a concrete instance of `BusReactivePowerInput` via:
//
//	BusReactivePowerArgs{...}
type BusReactivePowerInput interface {
	pulumi.Input

	ToBusReactivePowerOutput() BusReactivePowerOutput
	ToBusReactivePowerOutputWithContext(context.Context) BusReactivePowerOutput
}

type BusReactivePowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (BusReactivePowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusReactivePower)(nil)).Elem()
}

func (i BusReactivePowerArgs) ToBusReactivePowerOutput() BusReactivePowerOutput {
	return i.ToBusReactivePowerOutputWithContext(context.Background())
}

func (i BusReactivePowerArgs) ToBusReactivePowerOutputWithContext(ctx context.Context) BusReactivePowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusReactivePowerOutput)
}

// BusReactivePowerArrayInput is an input type that accepts BusReactivePowerArray and BusReactivePowerArrayOutput values.
// You can construct a concrete instance of `BusReactivePowerArrayInput` via:
//
//	BusReactivePowerArray{ BusReactivePowerArgs{...} }
type BusReactivePowerArrayInput interface {
	pulumi.Input

	ToBusReactivePowerArrayOutput() BusReactivePowerArrayOutput
	ToBusReactivePowerArrayOutputWithContext(context.Context) BusReactivePowerArrayOutput
}

type BusReactivePowerArray []BusReactivePowerInput

func (BusReactivePowerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusReactivePower)(nil)).Elem()
}

func (i BusReactivePowerArray) ToBusReactivePowerArrayOutput() BusReactivePowerArrayOutput {
	return i.ToBusReactivePowerArrayOutputWithContext(context.Background())
}

func (i BusReactivePowerArray) ToBusReactivePowerArrayOutputWithContext(ctx context.Context) BusReactivePowerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusReactivePowerArrayOutput)
}

type BusReactivePowerOutput struct{ *pulumi.OutputState }

func (BusReactivePowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusReactivePower)(nil)).Elem()
}

func (o BusReactivePowerOutput) ToBusReactivePowerOutput() BusReactivePowerOutput {
	return o
}

func (o BusReactivePowerOutput) ToBusReactivePowerOutputWithContext(ctx context.Context) BusReactivePowerOutput {
	return o
}

// reference to the asset to be linked to
func (o BusReactivePowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusReactivePower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o BusReactivePowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusReactivePower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o BusReactivePowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusReactivePower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o BusReactivePowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusReactivePower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o BusReactivePowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusReactivePower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type BusReactivePowerArrayOutput struct{ *pulumi.OutputState }

func (BusReactivePowerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusReactivePower)(nil)).Elem()
}

func (o BusReactivePowerArrayOutput) ToBusReactivePowerArrayOutput() BusReactivePowerArrayOutput {
	return o
}

func (o BusReactivePowerArrayOutput) ToBusReactivePowerArrayOutputWithContext(ctx context.Context) BusReactivePowerArrayOutput {
	return o
}

func (o BusReactivePowerArrayOutput) Index(i pulumi.IntInput) BusReactivePowerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BusReactivePower {
		return vs[0].([]BusReactivePower)[vs[1].(int)]
	}).(BusReactivePowerOutput)
}

type BusTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// BusTagInput is an input type that accepts BusTagArgs and BusTagOutput values.
// You can construct a concrete instance of `BusTagInput` via:
//
//	BusTagArgs{...}
type BusTagInput interface {
	pulumi.Input

	ToBusTagOutput() BusTagOutput
	ToBusTagOutputWithContext(context.Context) BusTagOutput
}

type BusTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (BusTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusTag)(nil)).Elem()
}

func (i BusTagArgs) ToBusTagOutput() BusTagOutput {
	return i.ToBusTagOutputWithContext(context.Background())
}

func (i BusTagArgs) ToBusTagOutputWithContext(ctx context.Context) BusTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusTagOutput)
}

// BusTagArrayInput is an input type that accepts BusTagArray and BusTagArrayOutput values.
// You can construct a concrete instance of `BusTagArrayInput` via:
//
//	BusTagArray{ BusTagArgs{...} }
type BusTagArrayInput interface {
	pulumi.Input

	ToBusTagArrayOutput() BusTagArrayOutput
	ToBusTagArrayOutputWithContext(context.Context) BusTagArrayOutput
}

type BusTagArray []BusTagInput

func (BusTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusTag)(nil)).Elem()
}

func (i BusTagArray) ToBusTagArrayOutput() BusTagArrayOutput {
	return i.ToBusTagArrayOutputWithContext(context.Background())
}

func (i BusTagArray) ToBusTagArrayOutputWithContext(ctx context.Context) BusTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusTagArrayOutput)
}

type BusTagOutput struct{ *pulumi.OutputState }

func (BusTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusTag)(nil)).Elem()
}

func (o BusTagOutput) ToBusTagOutput() BusTagOutput {
	return o
}

func (o BusTagOutput) ToBusTagOutputWithContext(ctx context.Context) BusTagOutput {
	return o
}

// tag id
func (o BusTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BusTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o BusTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BusTag) string { return v.Name }).(pulumi.StringOutput)
}

type BusTagArrayOutput struct{ *pulumi.OutputState }

func (BusTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusTag)(nil)).Elem()
}

func (o BusTagArrayOutput) ToBusTagArrayOutput() BusTagArrayOutput {
	return o
}

func (o BusTagArrayOutput) ToBusTagArrayOutputWithContext(ctx context.Context) BusTagArrayOutput {
	return o
}

func (o BusTagArrayOutput) Index(i pulumi.IntInput) BusTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BusTag {
		return vs[0].([]BusTag)[vs[1].(int)]
	}).(BusTagOutput)
}

type CommandAction struct {
	// asset associated with the action (to be deprecated)
	Asset CommandActionAsset `pulumi:"asset"`
	// action Id
	Id string `pulumi:"id"`
	// setpoint name
	Name string `pulumi:"name"`
}

// CommandActionInput is an input type that accepts CommandActionArgs and CommandActionOutput values.
// You can construct a concrete instance of `CommandActionInput` via:
//
//	CommandActionArgs{...}
type CommandActionInput interface {
	pulumi.Input

	ToCommandActionOutput() CommandActionOutput
	ToCommandActionOutputWithContext(context.Context) CommandActionOutput
}

type CommandActionArgs struct {
	// asset associated with the action (to be deprecated)
	Asset CommandActionAssetInput `pulumi:"asset"`
	// action Id
	Id pulumi.StringInput `pulumi:"id"`
	// setpoint name
	Name pulumi.StringInput `pulumi:"name"`
}

func (CommandActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandAction)(nil)).Elem()
}

func (i CommandActionArgs) ToCommandActionOutput() CommandActionOutput {
	return i.ToCommandActionOutputWithContext(context.Background())
}

func (i CommandActionArgs) ToCommandActionOutputWithContext(ctx context.Context) CommandActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandActionOutput)
}

// CommandActionArrayInput is an input type that accepts CommandActionArray and CommandActionArrayOutput values.
// You can construct a concrete instance of `CommandActionArrayInput` via:
//
//	CommandActionArray{ CommandActionArgs{...} }
type CommandActionArrayInput interface {
	pulumi.Input

	ToCommandActionArrayOutput() CommandActionArrayOutput
	ToCommandActionArrayOutputWithContext(context.Context) CommandActionArrayOutput
}

type CommandActionArray []CommandActionInput

func (CommandActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandAction)(nil)).Elem()
}

func (i CommandActionArray) ToCommandActionArrayOutput() CommandActionArrayOutput {
	return i.ToCommandActionArrayOutputWithContext(context.Background())
}

func (i CommandActionArray) ToCommandActionArrayOutputWithContext(ctx context.Context) CommandActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandActionArrayOutput)
}

type CommandActionOutput struct{ *pulumi.OutputState }

func (CommandActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandAction)(nil)).Elem()
}

func (o CommandActionOutput) ToCommandActionOutput() CommandActionOutput {
	return o
}

func (o CommandActionOutput) ToCommandActionOutputWithContext(ctx context.Context) CommandActionOutput {
	return o
}

// asset associated with the action (to be deprecated)
func (o CommandActionOutput) Asset() CommandActionAssetOutput {
	return o.ApplyT(func(v CommandAction) CommandActionAsset { return v.Asset }).(CommandActionAssetOutput)
}

// action Id
func (o CommandActionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CommandAction) string { return v.Id }).(pulumi.StringOutput)
}

// setpoint name
func (o CommandActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommandAction) string { return v.Name }).(pulumi.StringOutput)
}

type CommandActionArrayOutput struct{ *pulumi.OutputState }

func (CommandActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandAction)(nil)).Elem()
}

func (o CommandActionArrayOutput) ToCommandActionArrayOutput() CommandActionArrayOutput {
	return o
}

func (o CommandActionArrayOutput) ToCommandActionArrayOutputWithContext(ctx context.Context) CommandActionArrayOutput {
	return o
}

func (o CommandActionArrayOutput) Index(i pulumi.IntInput) CommandActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandAction {
		return vs[0].([]CommandAction)[vs[1].(int)]
	}).(CommandActionOutput)
}

type CommandActionAsset struct {
	// asset id
	Id string `pulumi:"id"`
	// asset name
	Name string `pulumi:"name"`
}

// CommandActionAssetInput is an input type that accepts CommandActionAssetArgs and CommandActionAssetOutput values.
// You can construct a concrete instance of `CommandActionAssetInput` via:
//
//	CommandActionAssetArgs{...}
type CommandActionAssetInput interface {
	pulumi.Input

	ToCommandActionAssetOutput() CommandActionAssetOutput
	ToCommandActionAssetOutputWithContext(context.Context) CommandActionAssetOutput
}

type CommandActionAssetArgs struct {
	// asset id
	Id pulumi.StringInput `pulumi:"id"`
	// asset name
	Name pulumi.StringInput `pulumi:"name"`
}

func (CommandActionAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandActionAsset)(nil)).Elem()
}

func (i CommandActionAssetArgs) ToCommandActionAssetOutput() CommandActionAssetOutput {
	return i.ToCommandActionAssetOutputWithContext(context.Background())
}

func (i CommandActionAssetArgs) ToCommandActionAssetOutputWithContext(ctx context.Context) CommandActionAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandActionAssetOutput)
}

type CommandActionAssetOutput struct{ *pulumi.OutputState }

func (CommandActionAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandActionAsset)(nil)).Elem()
}

func (o CommandActionAssetOutput) ToCommandActionAssetOutput() CommandActionAssetOutput {
	return o
}

func (o CommandActionAssetOutput) ToCommandActionAssetOutputWithContext(ctx context.Context) CommandActionAssetOutput {
	return o
}

// asset id
func (o CommandActionAssetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CommandActionAsset) string { return v.Id }).(pulumi.StringOutput)
}

// asset name
func (o CommandActionAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommandActionAsset) string { return v.Name }).(pulumi.StringOutput)
}

type ComponentInputType struct {
	Description *string `pulumi:"description"`
	Multiple    *bool   `pulumi:"multiple"`
	Name        string  `pulumi:"name"`
	Required    *bool   `pulumi:"required"`
	Sensitive   *bool   `pulumi:"sensitive"`
	Type        string  `pulumi:"type"`
	Value       *string `pulumi:"value"`
}

// ComponentInputTypeInput is an input type that accepts ComponentInputTypeArgs and ComponentInputTypeOutput values.
// You can construct a concrete instance of `ComponentInputTypeInput` via:
//
//	ComponentInputTypeArgs{...}
type ComponentInputTypeInput interface {
	pulumi.Input

	ToComponentInputTypeOutput() ComponentInputTypeOutput
	ToComponentInputTypeOutputWithContext(context.Context) ComponentInputTypeOutput
}

type ComponentInputTypeArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Multiple    pulumi.BoolPtrInput   `pulumi:"multiple"`
	Name        pulumi.StringInput    `pulumi:"name"`
	Required    pulumi.BoolPtrInput   `pulumi:"required"`
	Sensitive   pulumi.BoolPtrInput   `pulumi:"sensitive"`
	Type        pulumi.StringInput    `pulumi:"type"`
	Value       pulumi.StringPtrInput `pulumi:"value"`
}

func (ComponentInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentInputType)(nil)).Elem()
}

func (i ComponentInputTypeArgs) ToComponentInputTypeOutput() ComponentInputTypeOutput {
	return i.ToComponentInputTypeOutputWithContext(context.Background())
}

func (i ComponentInputTypeArgs) ToComponentInputTypeOutputWithContext(ctx context.Context) ComponentInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentInputTypeOutput)
}

// ComponentInputTypeArrayInput is an input type that accepts ComponentInputTypeArray and ComponentInputTypeArrayOutput values.
// You can construct a concrete instance of `ComponentInputTypeArrayInput` via:
//
//	ComponentInputTypeArray{ ComponentInputTypeArgs{...} }
type ComponentInputTypeArrayInput interface {
	pulumi.Input

	ToComponentInputTypeArrayOutput() ComponentInputTypeArrayOutput
	ToComponentInputTypeArrayOutputWithContext(context.Context) ComponentInputTypeArrayOutput
}

type ComponentInputTypeArray []ComponentInputTypeInput

func (ComponentInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentInputType)(nil)).Elem()
}

func (i ComponentInputTypeArray) ToComponentInputTypeArrayOutput() ComponentInputTypeArrayOutput {
	return i.ToComponentInputTypeArrayOutputWithContext(context.Background())
}

func (i ComponentInputTypeArray) ToComponentInputTypeArrayOutputWithContext(ctx context.Context) ComponentInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentInputTypeArrayOutput)
}

type ComponentInputTypeOutput struct{ *pulumi.OutputState }

func (ComponentInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentInputType)(nil)).Elem()
}

func (o ComponentInputTypeOutput) ToComponentInputTypeOutput() ComponentInputTypeOutput {
	return o
}

func (o ComponentInputTypeOutput) ToComponentInputTypeOutputWithContext(ctx context.Context) ComponentInputTypeOutput {
	return o
}

func (o ComponentInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ComponentInputTypeOutput) Multiple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentInputType) *bool { return v.Multiple }).(pulumi.BoolPtrOutput)
}

func (o ComponentInputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentInputType) string { return v.Name }).(pulumi.StringOutput)
}

func (o ComponentInputTypeOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentInputType) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o ComponentInputTypeOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentInputType) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

func (o ComponentInputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentInputType) string { return v.Type }).(pulumi.StringOutput)
}

func (o ComponentInputTypeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentInputType) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ComponentInputTypeArrayOutput struct{ *pulumi.OutputState }

func (ComponentInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentInputType)(nil)).Elem()
}

func (o ComponentInputTypeArrayOutput) ToComponentInputTypeArrayOutput() ComponentInputTypeArrayOutput {
	return o
}

func (o ComponentInputTypeArrayOutput) ToComponentInputTypeArrayOutputWithContext(ctx context.Context) ComponentInputTypeArrayOutput {
	return o
}

func (o ComponentInputTypeArrayOutput) Index(i pulumi.IntInput) ComponentInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentInputType {
		return vs[0].([]ComponentInputType)[vs[1].(int)]
	}).(ComponentInputTypeOutput)
}

type ComponentRoutineConfig struct {
	Description *string `pulumi:"description"`
	Multiple    *bool   `pulumi:"multiple"`
	Name        string  `pulumi:"name"`
	Required    *bool   `pulumi:"required"`
	Sensitive   *bool   `pulumi:"sensitive"`
	Type        string  `pulumi:"type"`
	Value       *string `pulumi:"value"`
}

// ComponentRoutineConfigInput is an input type that accepts ComponentRoutineConfigArgs and ComponentRoutineConfigOutput values.
// You can construct a concrete instance of `ComponentRoutineConfigInput` via:
//
//	ComponentRoutineConfigArgs{...}
type ComponentRoutineConfigInput interface {
	pulumi.Input

	ToComponentRoutineConfigOutput() ComponentRoutineConfigOutput
	ToComponentRoutineConfigOutputWithContext(context.Context) ComponentRoutineConfigOutput
}

type ComponentRoutineConfigArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Multiple    pulumi.BoolPtrInput   `pulumi:"multiple"`
	Name        pulumi.StringInput    `pulumi:"name"`
	Required    pulumi.BoolPtrInput   `pulumi:"required"`
	Sensitive   pulumi.BoolPtrInput   `pulumi:"sensitive"`
	Type        pulumi.StringInput    `pulumi:"type"`
	Value       pulumi.StringPtrInput `pulumi:"value"`
}

func (ComponentRoutineConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineConfig)(nil)).Elem()
}

func (i ComponentRoutineConfigArgs) ToComponentRoutineConfigOutput() ComponentRoutineConfigOutput {
	return i.ToComponentRoutineConfigOutputWithContext(context.Background())
}

func (i ComponentRoutineConfigArgs) ToComponentRoutineConfigOutputWithContext(ctx context.Context) ComponentRoutineConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineConfigOutput)
}

// ComponentRoutineConfigArrayInput is an input type that accepts ComponentRoutineConfigArray and ComponentRoutineConfigArrayOutput values.
// You can construct a concrete instance of `ComponentRoutineConfigArrayInput` via:
//
//	ComponentRoutineConfigArray{ ComponentRoutineConfigArgs{...} }
type ComponentRoutineConfigArrayInput interface {
	pulumi.Input

	ToComponentRoutineConfigArrayOutput() ComponentRoutineConfigArrayOutput
	ToComponentRoutineConfigArrayOutputWithContext(context.Context) ComponentRoutineConfigArrayOutput
}

type ComponentRoutineConfigArray []ComponentRoutineConfigInput

func (ComponentRoutineConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineConfig)(nil)).Elem()
}

func (i ComponentRoutineConfigArray) ToComponentRoutineConfigArrayOutput() ComponentRoutineConfigArrayOutput {
	return i.ToComponentRoutineConfigArrayOutputWithContext(context.Background())
}

func (i ComponentRoutineConfigArray) ToComponentRoutineConfigArrayOutputWithContext(ctx context.Context) ComponentRoutineConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineConfigArrayOutput)
}

type ComponentRoutineConfigOutput struct{ *pulumi.OutputState }

func (ComponentRoutineConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineConfig)(nil)).Elem()
}

func (o ComponentRoutineConfigOutput) ToComponentRoutineConfigOutput() ComponentRoutineConfigOutput {
	return o
}

func (o ComponentRoutineConfigOutput) ToComponentRoutineConfigOutputWithContext(ctx context.Context) ComponentRoutineConfigOutput {
	return o
}

func (o ComponentRoutineConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ComponentRoutineConfigOutput) Multiple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) *bool { return v.Multiple }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) string { return v.Name }).(pulumi.StringOutput)
}

func (o ComponentRoutineConfigOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineConfigOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) string { return v.Type }).(pulumi.StringOutput)
}

func (o ComponentRoutineConfigOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineConfig) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ComponentRoutineConfigArrayOutput struct{ *pulumi.OutputState }

func (ComponentRoutineConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineConfig)(nil)).Elem()
}

func (o ComponentRoutineConfigArrayOutput) ToComponentRoutineConfigArrayOutput() ComponentRoutineConfigArrayOutput {
	return o
}

func (o ComponentRoutineConfigArrayOutput) ToComponentRoutineConfigArrayOutputWithContext(ctx context.Context) ComponentRoutineConfigArrayOutput {
	return o
}

func (o ComponentRoutineConfigArrayOutput) Index(i pulumi.IntInput) ComponentRoutineConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentRoutineConfig {
		return vs[0].([]ComponentRoutineConfig)[vs[1].(int)]
	}).(ComponentRoutineConfigOutput)
}

type ComponentRoutineInputType struct {
	Description *string                      `pulumi:"description"`
	Multiple    *bool                        `pulumi:"multiple"`
	Name        string                       `pulumi:"name"`
	Required    *bool                        `pulumi:"required"`
	Type        *string                      `pulumi:"type"`
	ValueType   string                       `pulumi:"valueType"`
	Values      []ComponentRoutineInputValue `pulumi:"values"`
}

// ComponentRoutineInputTypeInput is an input type that accepts ComponentRoutineInputTypeArgs and ComponentRoutineInputTypeOutput values.
// You can construct a concrete instance of `ComponentRoutineInputTypeInput` via:
//
//	ComponentRoutineInputTypeArgs{...}
type ComponentRoutineInputTypeInput interface {
	pulumi.Input

	ToComponentRoutineInputTypeOutput() ComponentRoutineInputTypeOutput
	ToComponentRoutineInputTypeOutputWithContext(context.Context) ComponentRoutineInputTypeOutput
}

type ComponentRoutineInputTypeArgs struct {
	Description pulumi.StringPtrInput                `pulumi:"description"`
	Multiple    pulumi.BoolPtrInput                  `pulumi:"multiple"`
	Name        pulumi.StringInput                   `pulumi:"name"`
	Required    pulumi.BoolPtrInput                  `pulumi:"required"`
	Type        pulumi.StringPtrInput                `pulumi:"type"`
	ValueType   pulumi.StringInput                   `pulumi:"valueType"`
	Values      ComponentRoutineInputValueArrayInput `pulumi:"values"`
}

func (ComponentRoutineInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineInputType)(nil)).Elem()
}

func (i ComponentRoutineInputTypeArgs) ToComponentRoutineInputTypeOutput() ComponentRoutineInputTypeOutput {
	return i.ToComponentRoutineInputTypeOutputWithContext(context.Background())
}

func (i ComponentRoutineInputTypeArgs) ToComponentRoutineInputTypeOutputWithContext(ctx context.Context) ComponentRoutineInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineInputTypeOutput)
}

// ComponentRoutineInputTypeArrayInput is an input type that accepts ComponentRoutineInputTypeArray and ComponentRoutineInputTypeArrayOutput values.
// You can construct a concrete instance of `ComponentRoutineInputTypeArrayInput` via:
//
//	ComponentRoutineInputTypeArray{ ComponentRoutineInputTypeArgs{...} }
type ComponentRoutineInputTypeArrayInput interface {
	pulumi.Input

	ToComponentRoutineInputTypeArrayOutput() ComponentRoutineInputTypeArrayOutput
	ToComponentRoutineInputTypeArrayOutputWithContext(context.Context) ComponentRoutineInputTypeArrayOutput
}

type ComponentRoutineInputTypeArray []ComponentRoutineInputTypeInput

func (ComponentRoutineInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineInputType)(nil)).Elem()
}

func (i ComponentRoutineInputTypeArray) ToComponentRoutineInputTypeArrayOutput() ComponentRoutineInputTypeArrayOutput {
	return i.ToComponentRoutineInputTypeArrayOutputWithContext(context.Background())
}

func (i ComponentRoutineInputTypeArray) ToComponentRoutineInputTypeArrayOutputWithContext(ctx context.Context) ComponentRoutineInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineInputTypeArrayOutput)
}

type ComponentRoutineInputTypeOutput struct{ *pulumi.OutputState }

func (ComponentRoutineInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineInputType)(nil)).Elem()
}

func (o ComponentRoutineInputTypeOutput) ToComponentRoutineInputTypeOutput() ComponentRoutineInputTypeOutput {
	return o
}

func (o ComponentRoutineInputTypeOutput) ToComponentRoutineInputTypeOutputWithContext(ctx context.Context) ComponentRoutineInputTypeOutput {
	return o
}

func (o ComponentRoutineInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ComponentRoutineInputTypeOutput) Multiple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) *bool { return v.Multiple }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineInputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) string { return v.Name }).(pulumi.StringOutput)
}

func (o ComponentRoutineInputTypeOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineInputTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ComponentRoutineInputTypeOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) string { return v.ValueType }).(pulumi.StringOutput)
}

func (o ComponentRoutineInputTypeOutput) Values() ComponentRoutineInputValueArrayOutput {
	return o.ApplyT(func(v ComponentRoutineInputType) []ComponentRoutineInputValue { return v.Values }).(ComponentRoutineInputValueArrayOutput)
}

type ComponentRoutineInputTypeArrayOutput struct{ *pulumi.OutputState }

func (ComponentRoutineInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineInputType)(nil)).Elem()
}

func (o ComponentRoutineInputTypeArrayOutput) ToComponentRoutineInputTypeArrayOutput() ComponentRoutineInputTypeArrayOutput {
	return o
}

func (o ComponentRoutineInputTypeArrayOutput) ToComponentRoutineInputTypeArrayOutputWithContext(ctx context.Context) ComponentRoutineInputTypeArrayOutput {
	return o
}

func (o ComponentRoutineInputTypeArrayOutput) Index(i pulumi.IntInput) ComponentRoutineInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentRoutineInputType {
		return vs[0].([]ComponentRoutineInputType)[vs[1].(int)]
	}).(ComponentRoutineInputTypeOutput)
}

type ComponentRoutineInputValue struct {
	Asset     string `pulumi:"asset"`
	Attribute string `pulumi:"attribute"`
}

// ComponentRoutineInputValueInput is an input type that accepts ComponentRoutineInputValueArgs and ComponentRoutineInputValueOutput values.
// You can construct a concrete instance of `ComponentRoutineInputValueInput` via:
//
//	ComponentRoutineInputValueArgs{...}
type ComponentRoutineInputValueInput interface {
	pulumi.Input

	ToComponentRoutineInputValueOutput() ComponentRoutineInputValueOutput
	ToComponentRoutineInputValueOutputWithContext(context.Context) ComponentRoutineInputValueOutput
}

type ComponentRoutineInputValueArgs struct {
	Asset     pulumi.StringInput `pulumi:"asset"`
	Attribute pulumi.StringInput `pulumi:"attribute"`
}

func (ComponentRoutineInputValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineInputValue)(nil)).Elem()
}

func (i ComponentRoutineInputValueArgs) ToComponentRoutineInputValueOutput() ComponentRoutineInputValueOutput {
	return i.ToComponentRoutineInputValueOutputWithContext(context.Background())
}

func (i ComponentRoutineInputValueArgs) ToComponentRoutineInputValueOutputWithContext(ctx context.Context) ComponentRoutineInputValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineInputValueOutput)
}

// ComponentRoutineInputValueArrayInput is an input type that accepts ComponentRoutineInputValueArray and ComponentRoutineInputValueArrayOutput values.
// You can construct a concrete instance of `ComponentRoutineInputValueArrayInput` via:
//
//	ComponentRoutineInputValueArray{ ComponentRoutineInputValueArgs{...} }
type ComponentRoutineInputValueArrayInput interface {
	pulumi.Input

	ToComponentRoutineInputValueArrayOutput() ComponentRoutineInputValueArrayOutput
	ToComponentRoutineInputValueArrayOutputWithContext(context.Context) ComponentRoutineInputValueArrayOutput
}

type ComponentRoutineInputValueArray []ComponentRoutineInputValueInput

func (ComponentRoutineInputValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineInputValue)(nil)).Elem()
}

func (i ComponentRoutineInputValueArray) ToComponentRoutineInputValueArrayOutput() ComponentRoutineInputValueArrayOutput {
	return i.ToComponentRoutineInputValueArrayOutputWithContext(context.Background())
}

func (i ComponentRoutineInputValueArray) ToComponentRoutineInputValueArrayOutputWithContext(ctx context.Context) ComponentRoutineInputValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineInputValueArrayOutput)
}

type ComponentRoutineInputValueOutput struct{ *pulumi.OutputState }

func (ComponentRoutineInputValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineInputValue)(nil)).Elem()
}

func (o ComponentRoutineInputValueOutput) ToComponentRoutineInputValueOutput() ComponentRoutineInputValueOutput {
	return o
}

func (o ComponentRoutineInputValueOutput) ToComponentRoutineInputValueOutputWithContext(ctx context.Context) ComponentRoutineInputValueOutput {
	return o
}

func (o ComponentRoutineInputValueOutput) Asset() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineInputValue) string { return v.Asset }).(pulumi.StringOutput)
}

func (o ComponentRoutineInputValueOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineInputValue) string { return v.Attribute }).(pulumi.StringOutput)
}

type ComponentRoutineInputValueArrayOutput struct{ *pulumi.OutputState }

func (ComponentRoutineInputValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineInputValue)(nil)).Elem()
}

func (o ComponentRoutineInputValueArrayOutput) ToComponentRoutineInputValueArrayOutput() ComponentRoutineInputValueArrayOutput {
	return o
}

func (o ComponentRoutineInputValueArrayOutput) ToComponentRoutineInputValueArrayOutputWithContext(ctx context.Context) ComponentRoutineInputValueArrayOutput {
	return o
}

func (o ComponentRoutineInputValueArrayOutput) Index(i pulumi.IntInput) ComponentRoutineInputValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentRoutineInputValue {
		return vs[0].([]ComponentRoutineInputValue)[vs[1].(int)]
	}).(ComponentRoutineInputValueOutput)
}

type ComponentRoutineOutputType struct {
	Description *string                       `pulumi:"description"`
	Multiple    *bool                         `pulumi:"multiple"`
	Name        string                        `pulumi:"name"`
	Required    *bool                         `pulumi:"required"`
	Type        *string                       `pulumi:"type"`
	ValueType   string                        `pulumi:"valueType"`
	Values      []ComponentRoutineOutputValue `pulumi:"values"`
}

// ComponentRoutineOutputTypeInput is an input type that accepts ComponentRoutineOutputTypeArgs and ComponentRoutineOutputTypeOutput values.
// You can construct a concrete instance of `ComponentRoutineOutputTypeInput` via:
//
//	ComponentRoutineOutputTypeArgs{...}
type ComponentRoutineOutputTypeInput interface {
	pulumi.Input

	ToComponentRoutineOutputTypeOutput() ComponentRoutineOutputTypeOutput
	ToComponentRoutineOutputTypeOutputWithContext(context.Context) ComponentRoutineOutputTypeOutput
}

type ComponentRoutineOutputTypeArgs struct {
	Description pulumi.StringPtrInput                 `pulumi:"description"`
	Multiple    pulumi.BoolPtrInput                   `pulumi:"multiple"`
	Name        pulumi.StringInput                    `pulumi:"name"`
	Required    pulumi.BoolPtrInput                   `pulumi:"required"`
	Type        pulumi.StringPtrInput                 `pulumi:"type"`
	ValueType   pulumi.StringInput                    `pulumi:"valueType"`
	Values      ComponentRoutineOutputValueArrayInput `pulumi:"values"`
}

func (ComponentRoutineOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineOutputType)(nil)).Elem()
}

func (i ComponentRoutineOutputTypeArgs) ToComponentRoutineOutputTypeOutput() ComponentRoutineOutputTypeOutput {
	return i.ToComponentRoutineOutputTypeOutputWithContext(context.Background())
}

func (i ComponentRoutineOutputTypeArgs) ToComponentRoutineOutputTypeOutputWithContext(ctx context.Context) ComponentRoutineOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineOutputTypeOutput)
}

// ComponentRoutineOutputTypeArrayInput is an input type that accepts ComponentRoutineOutputTypeArray and ComponentRoutineOutputTypeArrayOutput values.
// You can construct a concrete instance of `ComponentRoutineOutputTypeArrayInput` via:
//
//	ComponentRoutineOutputTypeArray{ ComponentRoutineOutputTypeArgs{...} }
type ComponentRoutineOutputTypeArrayInput interface {
	pulumi.Input

	ToComponentRoutineOutputTypeArrayOutput() ComponentRoutineOutputTypeArrayOutput
	ToComponentRoutineOutputTypeArrayOutputWithContext(context.Context) ComponentRoutineOutputTypeArrayOutput
}

type ComponentRoutineOutputTypeArray []ComponentRoutineOutputTypeInput

func (ComponentRoutineOutputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineOutputType)(nil)).Elem()
}

func (i ComponentRoutineOutputTypeArray) ToComponentRoutineOutputTypeArrayOutput() ComponentRoutineOutputTypeArrayOutput {
	return i.ToComponentRoutineOutputTypeArrayOutputWithContext(context.Background())
}

func (i ComponentRoutineOutputTypeArray) ToComponentRoutineOutputTypeArrayOutputWithContext(ctx context.Context) ComponentRoutineOutputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineOutputTypeArrayOutput)
}

type ComponentRoutineOutputTypeOutput struct{ *pulumi.OutputState }

func (ComponentRoutineOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineOutputType)(nil)).Elem()
}

func (o ComponentRoutineOutputTypeOutput) ToComponentRoutineOutputTypeOutput() ComponentRoutineOutputTypeOutput {
	return o
}

func (o ComponentRoutineOutputTypeOutput) ToComponentRoutineOutputTypeOutputWithContext(ctx context.Context) ComponentRoutineOutputTypeOutput {
	return o
}

func (o ComponentRoutineOutputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ComponentRoutineOutputTypeOutput) Multiple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) *bool { return v.Multiple }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineOutputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) string { return v.Name }).(pulumi.StringOutput)
}

func (o ComponentRoutineOutputTypeOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o ComponentRoutineOutputTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ComponentRoutineOutputTypeOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) string { return v.ValueType }).(pulumi.StringOutput)
}

func (o ComponentRoutineOutputTypeOutput) Values() ComponentRoutineOutputValueArrayOutput {
	return o.ApplyT(func(v ComponentRoutineOutputType) []ComponentRoutineOutputValue { return v.Values }).(ComponentRoutineOutputValueArrayOutput)
}

type ComponentRoutineOutputTypeArrayOutput struct{ *pulumi.OutputState }

func (ComponentRoutineOutputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineOutputType)(nil)).Elem()
}

func (o ComponentRoutineOutputTypeArrayOutput) ToComponentRoutineOutputTypeArrayOutput() ComponentRoutineOutputTypeArrayOutput {
	return o
}

func (o ComponentRoutineOutputTypeArrayOutput) ToComponentRoutineOutputTypeArrayOutputWithContext(ctx context.Context) ComponentRoutineOutputTypeArrayOutput {
	return o
}

func (o ComponentRoutineOutputTypeArrayOutput) Index(i pulumi.IntInput) ComponentRoutineOutputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentRoutineOutputType {
		return vs[0].([]ComponentRoutineOutputType)[vs[1].(int)]
	}).(ComponentRoutineOutputTypeOutput)
}

type ComponentRoutineOutputValue struct {
	Asset     string `pulumi:"asset"`
	Attribute string `pulumi:"attribute"`
}

// ComponentRoutineOutputValueInput is an input type that accepts ComponentRoutineOutputValueArgs and ComponentRoutineOutputValueOutput values.
// You can construct a concrete instance of `ComponentRoutineOutputValueInput` via:
//
//	ComponentRoutineOutputValueArgs{...}
type ComponentRoutineOutputValueInput interface {
	pulumi.Input

	ToComponentRoutineOutputValueOutput() ComponentRoutineOutputValueOutput
	ToComponentRoutineOutputValueOutputWithContext(context.Context) ComponentRoutineOutputValueOutput
}

type ComponentRoutineOutputValueArgs struct {
	Asset     pulumi.StringInput `pulumi:"asset"`
	Attribute pulumi.StringInput `pulumi:"attribute"`
}

func (ComponentRoutineOutputValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineOutputValue)(nil)).Elem()
}

func (i ComponentRoutineOutputValueArgs) ToComponentRoutineOutputValueOutput() ComponentRoutineOutputValueOutput {
	return i.ToComponentRoutineOutputValueOutputWithContext(context.Background())
}

func (i ComponentRoutineOutputValueArgs) ToComponentRoutineOutputValueOutputWithContext(ctx context.Context) ComponentRoutineOutputValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineOutputValueOutput)
}

// ComponentRoutineOutputValueArrayInput is an input type that accepts ComponentRoutineOutputValueArray and ComponentRoutineOutputValueArrayOutput values.
// You can construct a concrete instance of `ComponentRoutineOutputValueArrayInput` via:
//
//	ComponentRoutineOutputValueArray{ ComponentRoutineOutputValueArgs{...} }
type ComponentRoutineOutputValueArrayInput interface {
	pulumi.Input

	ToComponentRoutineOutputValueArrayOutput() ComponentRoutineOutputValueArrayOutput
	ToComponentRoutineOutputValueArrayOutputWithContext(context.Context) ComponentRoutineOutputValueArrayOutput
}

type ComponentRoutineOutputValueArray []ComponentRoutineOutputValueInput

func (ComponentRoutineOutputValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineOutputValue)(nil)).Elem()
}

func (i ComponentRoutineOutputValueArray) ToComponentRoutineOutputValueArrayOutput() ComponentRoutineOutputValueArrayOutput {
	return i.ToComponentRoutineOutputValueArrayOutputWithContext(context.Background())
}

func (i ComponentRoutineOutputValueArray) ToComponentRoutineOutputValueArrayOutputWithContext(ctx context.Context) ComponentRoutineOutputValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineOutputValueArrayOutput)
}

type ComponentRoutineOutputValueOutput struct{ *pulumi.OutputState }

func (ComponentRoutineOutputValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRoutineOutputValue)(nil)).Elem()
}

func (o ComponentRoutineOutputValueOutput) ToComponentRoutineOutputValueOutput() ComponentRoutineOutputValueOutput {
	return o
}

func (o ComponentRoutineOutputValueOutput) ToComponentRoutineOutputValueOutputWithContext(ctx context.Context) ComponentRoutineOutputValueOutput {
	return o
}

func (o ComponentRoutineOutputValueOutput) Asset() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineOutputValue) string { return v.Asset }).(pulumi.StringOutput)
}

func (o ComponentRoutineOutputValueOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentRoutineOutputValue) string { return v.Attribute }).(pulumi.StringOutput)
}

type ComponentRoutineOutputValueArrayOutput struct{ *pulumi.OutputState }

func (ComponentRoutineOutputValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentRoutineOutputValue)(nil)).Elem()
}

func (o ComponentRoutineOutputValueArrayOutput) ToComponentRoutineOutputValueArrayOutput() ComponentRoutineOutputValueArrayOutput {
	return o
}

func (o ComponentRoutineOutputValueArrayOutput) ToComponentRoutineOutputValueArrayOutputWithContext(ctx context.Context) ComponentRoutineOutputValueArrayOutput {
	return o
}

func (o ComponentRoutineOutputValueArrayOutput) Index(i pulumi.IntInput) ComponentRoutineOutputValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentRoutineOutputValue {
		return vs[0].([]ComponentRoutineOutputValue)[vs[1].(int)]
	}).(ComponentRoutineOutputValueOutput)
}

type ComponentTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// ComponentTagInput is an input type that accepts ComponentTagArgs and ComponentTagOutput values.
// You can construct a concrete instance of `ComponentTagInput` via:
//
//	ComponentTagArgs{...}
type ComponentTagInput interface {
	pulumi.Input

	ToComponentTagOutput() ComponentTagOutput
	ToComponentTagOutputWithContext(context.Context) ComponentTagOutput
}

type ComponentTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (ComponentTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTag)(nil)).Elem()
}

func (i ComponentTagArgs) ToComponentTagOutput() ComponentTagOutput {
	return i.ToComponentTagOutputWithContext(context.Background())
}

func (i ComponentTagArgs) ToComponentTagOutputWithContext(ctx context.Context) ComponentTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTagOutput)
}

// ComponentTagArrayInput is an input type that accepts ComponentTagArray and ComponentTagArrayOutput values.
// You can construct a concrete instance of `ComponentTagArrayInput` via:
//
//	ComponentTagArray{ ComponentTagArgs{...} }
type ComponentTagArrayInput interface {
	pulumi.Input

	ToComponentTagArrayOutput() ComponentTagArrayOutput
	ToComponentTagArrayOutputWithContext(context.Context) ComponentTagArrayOutput
}

type ComponentTagArray []ComponentTagInput

func (ComponentTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentTag)(nil)).Elem()
}

func (i ComponentTagArray) ToComponentTagArrayOutput() ComponentTagArrayOutput {
	return i.ToComponentTagArrayOutputWithContext(context.Background())
}

func (i ComponentTagArray) ToComponentTagArrayOutputWithContext(ctx context.Context) ComponentTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTagArrayOutput)
}

type ComponentTagOutput struct{ *pulumi.OutputState }

func (ComponentTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTag)(nil)).Elem()
}

func (o ComponentTagOutput) ToComponentTagOutput() ComponentTagOutput {
	return o
}

func (o ComponentTagOutput) ToComponentTagOutputWithContext(ctx context.Context) ComponentTagOutput {
	return o
}

// tag id
func (o ComponentTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o ComponentTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentTag) string { return v.Name }).(pulumi.StringOutput)
}

type ComponentTagArrayOutput struct{ *pulumi.OutputState }

func (ComponentTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentTag)(nil)).Elem()
}

func (o ComponentTagArrayOutput) ToComponentTagArrayOutput() ComponentTagArrayOutput {
	return o
}

func (o ComponentTagArrayOutput) ToComponentTagArrayOutputWithContext(ctx context.Context) ComponentTagArrayOutput {
	return o
}

func (o ComponentTagArrayOutput) Index(i pulumi.IntInput) ComponentTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentTag {
		return vs[0].([]ComponentTag)[vs[1].(int)]
	}).(ComponentTagOutput)
}

type ConnectorInputType struct {
	Description *string `pulumi:"description"`
	Multiple    *bool   `pulumi:"multiple"`
	Name        string  `pulumi:"name"`
	Required    *bool   `pulumi:"required"`
	Sensitive   *bool   `pulumi:"sensitive"`
	Type        string  `pulumi:"type"`
	Value       *string `pulumi:"value"`
}

// ConnectorInputTypeInput is an input type that accepts ConnectorInputTypeArgs and ConnectorInputTypeOutput values.
// You can construct a concrete instance of `ConnectorInputTypeInput` via:
//
//	ConnectorInputTypeArgs{...}
type ConnectorInputTypeInput interface {
	pulumi.Input

	ToConnectorInputTypeOutput() ConnectorInputTypeOutput
	ToConnectorInputTypeOutputWithContext(context.Context) ConnectorInputTypeOutput
}

type ConnectorInputTypeArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Multiple    pulumi.BoolPtrInput   `pulumi:"multiple"`
	Name        pulumi.StringInput    `pulumi:"name"`
	Required    pulumi.BoolPtrInput   `pulumi:"required"`
	Sensitive   pulumi.BoolPtrInput   `pulumi:"sensitive"`
	Type        pulumi.StringInput    `pulumi:"type"`
	Value       pulumi.StringPtrInput `pulumi:"value"`
}

func (ConnectorInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorInputType)(nil)).Elem()
}

func (i ConnectorInputTypeArgs) ToConnectorInputTypeOutput() ConnectorInputTypeOutput {
	return i.ToConnectorInputTypeOutputWithContext(context.Background())
}

func (i ConnectorInputTypeArgs) ToConnectorInputTypeOutputWithContext(ctx context.Context) ConnectorInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorInputTypeOutput)
}

// ConnectorInputTypeArrayInput is an input type that accepts ConnectorInputTypeArray and ConnectorInputTypeArrayOutput values.
// You can construct a concrete instance of `ConnectorInputTypeArrayInput` via:
//
//	ConnectorInputTypeArray{ ConnectorInputTypeArgs{...} }
type ConnectorInputTypeArrayInput interface {
	pulumi.Input

	ToConnectorInputTypeArrayOutput() ConnectorInputTypeArrayOutput
	ToConnectorInputTypeArrayOutputWithContext(context.Context) ConnectorInputTypeArrayOutput
}

type ConnectorInputTypeArray []ConnectorInputTypeInput

func (ConnectorInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorInputType)(nil)).Elem()
}

func (i ConnectorInputTypeArray) ToConnectorInputTypeArrayOutput() ConnectorInputTypeArrayOutput {
	return i.ToConnectorInputTypeArrayOutputWithContext(context.Background())
}

func (i ConnectorInputTypeArray) ToConnectorInputTypeArrayOutputWithContext(ctx context.Context) ConnectorInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorInputTypeArrayOutput)
}

type ConnectorInputTypeOutput struct{ *pulumi.OutputState }

func (ConnectorInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorInputType)(nil)).Elem()
}

func (o ConnectorInputTypeOutput) ToConnectorInputTypeOutput() ConnectorInputTypeOutput {
	return o
}

func (o ConnectorInputTypeOutput) ToConnectorInputTypeOutputWithContext(ctx context.Context) ConnectorInputTypeOutput {
	return o
}

func (o ConnectorInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConnectorInputTypeOutput) Multiple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectorInputType) *bool { return v.Multiple }).(pulumi.BoolPtrOutput)
}

func (o ConnectorInputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorInputType) string { return v.Name }).(pulumi.StringOutput)
}

func (o ConnectorInputTypeOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectorInputType) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o ConnectorInputTypeOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectorInputType) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

func (o ConnectorInputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorInputType) string { return v.Type }).(pulumi.StringOutput)
}

func (o ConnectorInputTypeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorInputType) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConnectorInputTypeArrayOutput struct{ *pulumi.OutputState }

func (ConnectorInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorInputType)(nil)).Elem()
}

func (o ConnectorInputTypeArrayOutput) ToConnectorInputTypeArrayOutput() ConnectorInputTypeArrayOutput {
	return o
}

func (o ConnectorInputTypeArrayOutput) ToConnectorInputTypeArrayOutputWithContext(ctx context.Context) ConnectorInputTypeArrayOutput {
	return o
}

func (o ConnectorInputTypeArrayOutput) Index(i pulumi.IntInput) ConnectorInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectorInputType {
		return vs[0].([]ConnectorInputType)[vs[1].(int)]
	}).(ConnectorInputTypeOutput)
}

type ConnectorTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// ConnectorTagInput is an input type that accepts ConnectorTagArgs and ConnectorTagOutput values.
// You can construct a concrete instance of `ConnectorTagInput` via:
//
//	ConnectorTagArgs{...}
type ConnectorTagInput interface {
	pulumi.Input

	ToConnectorTagOutput() ConnectorTagOutput
	ToConnectorTagOutputWithContext(context.Context) ConnectorTagOutput
}

type ConnectorTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (ConnectorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorTag)(nil)).Elem()
}

func (i ConnectorTagArgs) ToConnectorTagOutput() ConnectorTagOutput {
	return i.ToConnectorTagOutputWithContext(context.Background())
}

func (i ConnectorTagArgs) ToConnectorTagOutputWithContext(ctx context.Context) ConnectorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorTagOutput)
}

// ConnectorTagArrayInput is an input type that accepts ConnectorTagArray and ConnectorTagArrayOutput values.
// You can construct a concrete instance of `ConnectorTagArrayInput` via:
//
//	ConnectorTagArray{ ConnectorTagArgs{...} }
type ConnectorTagArrayInput interface {
	pulumi.Input

	ToConnectorTagArrayOutput() ConnectorTagArrayOutput
	ToConnectorTagArrayOutputWithContext(context.Context) ConnectorTagArrayOutput
}

type ConnectorTagArray []ConnectorTagInput

func (ConnectorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorTag)(nil)).Elem()
}

func (i ConnectorTagArray) ToConnectorTagArrayOutput() ConnectorTagArrayOutput {
	return i.ToConnectorTagArrayOutputWithContext(context.Background())
}

func (i ConnectorTagArray) ToConnectorTagArrayOutputWithContext(ctx context.Context) ConnectorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorTagArrayOutput)
}

type ConnectorTagOutput struct{ *pulumi.OutputState }

func (ConnectorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorTag)(nil)).Elem()
}

func (o ConnectorTagOutput) ToConnectorTagOutput() ConnectorTagOutput {
	return o
}

func (o ConnectorTagOutput) ToConnectorTagOutputWithContext(ctx context.Context) ConnectorTagOutput {
	return o
}

// tag id
func (o ConnectorTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o ConnectorTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorTag) string { return v.Name }).(pulumi.StringOutput)
}

type ConnectorTagArrayOutput struct{ *pulumi.OutputState }

func (ConnectorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorTag)(nil)).Elem()
}

func (o ConnectorTagArrayOutput) ToConnectorTagArrayOutput() ConnectorTagArrayOutput {
	return o
}

func (o ConnectorTagArrayOutput) ToConnectorTagArrayOutputWithContext(ctx context.Context) ConnectorTagArrayOutput {
	return o
}

func (o ConnectorTagArrayOutput) Index(i pulumi.IntInput) ConnectorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectorTag {
		return vs[0].([]ConnectorTag)[vs[1].(int)]
	}).(ConnectorTagOutput)
}

type DashboardActionlistChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardActionlistChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardActionlistChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                               `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                               `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                                  `pulumi:"queryLimit"`
	QueryPlain           string                                                `pulumi:"queryPlain"`
	QuerySortDirection   *int                                                  `pulumi:"querySortDirection"`
	RefId                string                                                `pulumi:"refId"`
	Type                 string                                                `pulumi:"type"`
}

// DashboardActionlistChartChartItemInput is an input type that accepts DashboardActionlistChartChartItemArgs and DashboardActionlistChartChartItemOutput values.
// You can construct a concrete instance of `DashboardActionlistChartChartItemInput` via:
//
//	DashboardActionlistChartChartItemArgs{...}
type DashboardActionlistChartChartItemInput interface {
	pulumi.Input

	ToDashboardActionlistChartChartItemOutput() DashboardActionlistChartChartItemOutput
	ToDashboardActionlistChartChartItemOutputWithContext(context.Context) DashboardActionlistChartChartItemOutput
}

type DashboardActionlistChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardActionlistChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardActionlistChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                      `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                      `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                         `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                         `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                         `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                         `pulumi:"refId"`
	Type                 pulumi.StringInput                                         `pulumi:"type"`
}

func (DashboardActionlistChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardActionlistChartChartItem)(nil)).Elem()
}

func (i DashboardActionlistChartChartItemArgs) ToDashboardActionlistChartChartItemOutput() DashboardActionlistChartChartItemOutput {
	return i.ToDashboardActionlistChartChartItemOutputWithContext(context.Background())
}

func (i DashboardActionlistChartChartItemArgs) ToDashboardActionlistChartChartItemOutputWithContext(ctx context.Context) DashboardActionlistChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardActionlistChartChartItemOutput)
}

// DashboardActionlistChartChartItemArrayInput is an input type that accepts DashboardActionlistChartChartItemArray and DashboardActionlistChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardActionlistChartChartItemArrayInput` via:
//
//	DashboardActionlistChartChartItemArray{ DashboardActionlistChartChartItemArgs{...} }
type DashboardActionlistChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardActionlistChartChartItemArrayOutput() DashboardActionlistChartChartItemArrayOutput
	ToDashboardActionlistChartChartItemArrayOutputWithContext(context.Context) DashboardActionlistChartChartItemArrayOutput
}

type DashboardActionlistChartChartItemArray []DashboardActionlistChartChartItemInput

func (DashboardActionlistChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardActionlistChartChartItem)(nil)).Elem()
}

func (i DashboardActionlistChartChartItemArray) ToDashboardActionlistChartChartItemArrayOutput() DashboardActionlistChartChartItemArrayOutput {
	return i.ToDashboardActionlistChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardActionlistChartChartItemArray) ToDashboardActionlistChartChartItemArrayOutputWithContext(ctx context.Context) DashboardActionlistChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardActionlistChartChartItemArrayOutput)
}

type DashboardActionlistChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardActionlistChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardActionlistChartChartItem)(nil)).Elem()
}

func (o DashboardActionlistChartChartItemOutput) ToDashboardActionlistChartChartItemOutput() DashboardActionlistChartChartItemOutput {
	return o
}

func (o DashboardActionlistChartChartItemOutput) ToDashboardActionlistChartChartItemOutputWithContext(ctx context.Context) DashboardActionlistChartChartItemOutput {
	return o
}

func (o DashboardActionlistChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardActionlistChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardActionlistChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardActionlistChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardActionlistChartChartItemOutput) QueryFilterAsset() DashboardActionlistChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) DashboardActionlistChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardActionlistChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardActionlistChartChartItemOutput) QueryFilterAttribute() DashboardActionlistChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) DashboardActionlistChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardActionlistChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardActionlistChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardActionlistChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardActionlistChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardActionlistChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardActionlistChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardActionlistChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardActionlistChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardActionlistChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardActionlistChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardActionlistChartChartItem)(nil)).Elem()
}

func (o DashboardActionlistChartChartItemArrayOutput) ToDashboardActionlistChartChartItemArrayOutput() DashboardActionlistChartChartItemArrayOutput {
	return o
}

func (o DashboardActionlistChartChartItemArrayOutput) ToDashboardActionlistChartChartItemArrayOutputWithContext(ctx context.Context) DashboardActionlistChartChartItemArrayOutput {
	return o
}

func (o DashboardActionlistChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardActionlistChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardActionlistChartChartItem {
		return vs[0].([]DashboardActionlistChartChartItem)[vs[1].(int)]
	}).(DashboardActionlistChartChartItemOutput)
}

type DashboardActionlistChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardActionlistChartChartItemQueryFilterAssetInput is an input type that accepts DashboardActionlistChartChartItemQueryFilterAssetArgs and DashboardActionlistChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardActionlistChartChartItemQueryFilterAssetInput` via:
//
//	DashboardActionlistChartChartItemQueryFilterAssetArgs{...}
type DashboardActionlistChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardActionlistChartChartItemQueryFilterAssetOutput() DashboardActionlistChartChartItemQueryFilterAssetOutput
	ToDashboardActionlistChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardActionlistChartChartItemQueryFilterAssetOutput
}

type DashboardActionlistChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardActionlistChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardActionlistChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardActionlistChartChartItemQueryFilterAssetArgs) ToDashboardActionlistChartChartItemQueryFilterAssetOutput() DashboardActionlistChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardActionlistChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardActionlistChartChartItemQueryFilterAssetArgs) ToDashboardActionlistChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardActionlistChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardActionlistChartChartItemQueryFilterAssetOutput)
}

type DashboardActionlistChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardActionlistChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardActionlistChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardActionlistChartChartItemQueryFilterAssetOutput) ToDashboardActionlistChartChartItemQueryFilterAssetOutput() DashboardActionlistChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardActionlistChartChartItemQueryFilterAssetOutput) ToDashboardActionlistChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardActionlistChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardActionlistChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardActionlistChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardActionlistChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardActionlistChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardActionlistChartChartItemQueryFilterAttributeArgs and DashboardActionlistChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardActionlistChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardActionlistChartChartItemQueryFilterAttributeArgs{...}
type DashboardActionlistChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardActionlistChartChartItemQueryFilterAttributeOutput() DashboardActionlistChartChartItemQueryFilterAttributeOutput
	ToDashboardActionlistChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardActionlistChartChartItemQueryFilterAttributeOutput
}

type DashboardActionlistChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardActionlistChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardActionlistChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardActionlistChartChartItemQueryFilterAttributeArgs) ToDashboardActionlistChartChartItemQueryFilterAttributeOutput() DashboardActionlistChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardActionlistChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardActionlistChartChartItemQueryFilterAttributeArgs) ToDashboardActionlistChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardActionlistChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardActionlistChartChartItemQueryFilterAttributeOutput)
}

type DashboardActionlistChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardActionlistChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardActionlistChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardActionlistChartChartItemQueryFilterAttributeOutput) ToDashboardActionlistChartChartItemQueryFilterAttributeOutput() DashboardActionlistChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardActionlistChartChartItemQueryFilterAttributeOutput) ToDashboardActionlistChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardActionlistChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardActionlistChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardActionlistChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardActionlistChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardActionlistChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardActionlistChartThresholdInput is an input type that accepts DashboardActionlistChartThresholdArgs and DashboardActionlistChartThresholdOutput values.
// You can construct a concrete instance of `DashboardActionlistChartThresholdInput` via:
//
//	DashboardActionlistChartThresholdArgs{...}
type DashboardActionlistChartThresholdInput interface {
	pulumi.Input

	ToDashboardActionlistChartThresholdOutput() DashboardActionlistChartThresholdOutput
	ToDashboardActionlistChartThresholdOutputWithContext(context.Context) DashboardActionlistChartThresholdOutput
}

type DashboardActionlistChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardActionlistChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardActionlistChartThreshold)(nil)).Elem()
}

func (i DashboardActionlistChartThresholdArgs) ToDashboardActionlistChartThresholdOutput() DashboardActionlistChartThresholdOutput {
	return i.ToDashboardActionlistChartThresholdOutputWithContext(context.Background())
}

func (i DashboardActionlistChartThresholdArgs) ToDashboardActionlistChartThresholdOutputWithContext(ctx context.Context) DashboardActionlistChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardActionlistChartThresholdOutput)
}

// DashboardActionlistChartThresholdArrayInput is an input type that accepts DashboardActionlistChartThresholdArray and DashboardActionlistChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardActionlistChartThresholdArrayInput` via:
//
//	DashboardActionlistChartThresholdArray{ DashboardActionlistChartThresholdArgs{...} }
type DashboardActionlistChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardActionlistChartThresholdArrayOutput() DashboardActionlistChartThresholdArrayOutput
	ToDashboardActionlistChartThresholdArrayOutputWithContext(context.Context) DashboardActionlistChartThresholdArrayOutput
}

type DashboardActionlistChartThresholdArray []DashboardActionlistChartThresholdInput

func (DashboardActionlistChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardActionlistChartThreshold)(nil)).Elem()
}

func (i DashboardActionlistChartThresholdArray) ToDashboardActionlistChartThresholdArrayOutput() DashboardActionlistChartThresholdArrayOutput {
	return i.ToDashboardActionlistChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardActionlistChartThresholdArray) ToDashboardActionlistChartThresholdArrayOutputWithContext(ctx context.Context) DashboardActionlistChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardActionlistChartThresholdArrayOutput)
}

type DashboardActionlistChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardActionlistChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardActionlistChartThreshold)(nil)).Elem()
}

func (o DashboardActionlistChartThresholdOutput) ToDashboardActionlistChartThresholdOutput() DashboardActionlistChartThresholdOutput {
	return o
}

func (o DashboardActionlistChartThresholdOutput) ToDashboardActionlistChartThresholdOutputWithContext(ctx context.Context) DashboardActionlistChartThresholdOutput {
	return o
}

func (o DashboardActionlistChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardActionlistChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardActionlistChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardActionlistChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardActionlistChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardActionlistChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardActionlistChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardActionlistChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardActionlistChartThreshold)(nil)).Elem()
}

func (o DashboardActionlistChartThresholdArrayOutput) ToDashboardActionlistChartThresholdArrayOutput() DashboardActionlistChartThresholdArrayOutput {
	return o
}

func (o DashboardActionlistChartThresholdArrayOutput) ToDashboardActionlistChartThresholdArrayOutputWithContext(ctx context.Context) DashboardActionlistChartThresholdArrayOutput {
	return o
}

func (o DashboardActionlistChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardActionlistChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardActionlistChartThreshold {
		return vs[0].([]DashboardActionlistChartThreshold)[vs[1].(int)]
	}).(DashboardActionlistChartThresholdOutput)
}

type DashboardActionlistChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardActionlistChartValueMappingInput is an input type that accepts DashboardActionlistChartValueMappingArgs and DashboardActionlistChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardActionlistChartValueMappingInput` via:
//
//	DashboardActionlistChartValueMappingArgs{...}
type DashboardActionlistChartValueMappingInput interface {
	pulumi.Input

	ToDashboardActionlistChartValueMappingOutput() DashboardActionlistChartValueMappingOutput
	ToDashboardActionlistChartValueMappingOutputWithContext(context.Context) DashboardActionlistChartValueMappingOutput
}

type DashboardActionlistChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardActionlistChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardActionlistChartValueMapping)(nil)).Elem()
}

func (i DashboardActionlistChartValueMappingArgs) ToDashboardActionlistChartValueMappingOutput() DashboardActionlistChartValueMappingOutput {
	return i.ToDashboardActionlistChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardActionlistChartValueMappingArgs) ToDashboardActionlistChartValueMappingOutputWithContext(ctx context.Context) DashboardActionlistChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardActionlistChartValueMappingOutput)
}

// DashboardActionlistChartValueMappingArrayInput is an input type that accepts DashboardActionlistChartValueMappingArray and DashboardActionlistChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardActionlistChartValueMappingArrayInput` via:
//
//	DashboardActionlistChartValueMappingArray{ DashboardActionlistChartValueMappingArgs{...} }
type DashboardActionlistChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardActionlistChartValueMappingArrayOutput() DashboardActionlistChartValueMappingArrayOutput
	ToDashboardActionlistChartValueMappingArrayOutputWithContext(context.Context) DashboardActionlistChartValueMappingArrayOutput
}

type DashboardActionlistChartValueMappingArray []DashboardActionlistChartValueMappingInput

func (DashboardActionlistChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardActionlistChartValueMapping)(nil)).Elem()
}

func (i DashboardActionlistChartValueMappingArray) ToDashboardActionlistChartValueMappingArrayOutput() DashboardActionlistChartValueMappingArrayOutput {
	return i.ToDashboardActionlistChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardActionlistChartValueMappingArray) ToDashboardActionlistChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardActionlistChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardActionlistChartValueMappingArrayOutput)
}

type DashboardActionlistChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardActionlistChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardActionlistChartValueMapping)(nil)).Elem()
}

func (o DashboardActionlistChartValueMappingOutput) ToDashboardActionlistChartValueMappingOutput() DashboardActionlistChartValueMappingOutput {
	return o
}

func (o DashboardActionlistChartValueMappingOutput) ToDashboardActionlistChartValueMappingOutputWithContext(ctx context.Context) DashboardActionlistChartValueMappingOutput {
	return o
}

func (o DashboardActionlistChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardActionlistChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardActionlistChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardActionlistChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardActionlistChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardActionlistChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardActionlistChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardActionlistChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardActionlistChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardActionlistChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardActionlistChartValueMapping)(nil)).Elem()
}

func (o DashboardActionlistChartValueMappingArrayOutput) ToDashboardActionlistChartValueMappingArrayOutput() DashboardActionlistChartValueMappingArrayOutput {
	return o
}

func (o DashboardActionlistChartValueMappingArrayOutput) ToDashboardActionlistChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardActionlistChartValueMappingArrayOutput {
	return o
}

func (o DashboardActionlistChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardActionlistChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardActionlistChartValueMapping {
		return vs[0].([]DashboardActionlistChartValueMapping)[vs[1].(int)]
	}).(DashboardActionlistChartValueMappingOutput)
}

type DashboardAlerteventsChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardAlerteventsChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardAlerteventsChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                                `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                                `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                                   `pulumi:"queryLimit"`
	QueryPlain           string                                                 `pulumi:"queryPlain"`
	QuerySortDirection   *int                                                   `pulumi:"querySortDirection"`
	RefId                string                                                 `pulumi:"refId"`
	Type                 string                                                 `pulumi:"type"`
}

// DashboardAlerteventsChartChartItemInput is an input type that accepts DashboardAlerteventsChartChartItemArgs and DashboardAlerteventsChartChartItemOutput values.
// You can construct a concrete instance of `DashboardAlerteventsChartChartItemInput` via:
//
//	DashboardAlerteventsChartChartItemArgs{...}
type DashboardAlerteventsChartChartItemInput interface {
	pulumi.Input

	ToDashboardAlerteventsChartChartItemOutput() DashboardAlerteventsChartChartItemOutput
	ToDashboardAlerteventsChartChartItemOutputWithContext(context.Context) DashboardAlerteventsChartChartItemOutput
}

type DashboardAlerteventsChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardAlerteventsChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardAlerteventsChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                       `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                       `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                          `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                          `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                          `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                          `pulumi:"refId"`
	Type                 pulumi.StringInput                                          `pulumi:"type"`
}

func (DashboardAlerteventsChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlerteventsChartChartItem)(nil)).Elem()
}

func (i DashboardAlerteventsChartChartItemArgs) ToDashboardAlerteventsChartChartItemOutput() DashboardAlerteventsChartChartItemOutput {
	return i.ToDashboardAlerteventsChartChartItemOutputWithContext(context.Background())
}

func (i DashboardAlerteventsChartChartItemArgs) ToDashboardAlerteventsChartChartItemOutputWithContext(ctx context.Context) DashboardAlerteventsChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlerteventsChartChartItemOutput)
}

// DashboardAlerteventsChartChartItemArrayInput is an input type that accepts DashboardAlerteventsChartChartItemArray and DashboardAlerteventsChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardAlerteventsChartChartItemArrayInput` via:
//
//	DashboardAlerteventsChartChartItemArray{ DashboardAlerteventsChartChartItemArgs{...} }
type DashboardAlerteventsChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardAlerteventsChartChartItemArrayOutput() DashboardAlerteventsChartChartItemArrayOutput
	ToDashboardAlerteventsChartChartItemArrayOutputWithContext(context.Context) DashboardAlerteventsChartChartItemArrayOutput
}

type DashboardAlerteventsChartChartItemArray []DashboardAlerteventsChartChartItemInput

func (DashboardAlerteventsChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlerteventsChartChartItem)(nil)).Elem()
}

func (i DashboardAlerteventsChartChartItemArray) ToDashboardAlerteventsChartChartItemArrayOutput() DashboardAlerteventsChartChartItemArrayOutput {
	return i.ToDashboardAlerteventsChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardAlerteventsChartChartItemArray) ToDashboardAlerteventsChartChartItemArrayOutputWithContext(ctx context.Context) DashboardAlerteventsChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlerteventsChartChartItemArrayOutput)
}

type DashboardAlerteventsChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardAlerteventsChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlerteventsChartChartItem)(nil)).Elem()
}

func (o DashboardAlerteventsChartChartItemOutput) ToDashboardAlerteventsChartChartItemOutput() DashboardAlerteventsChartChartItemOutput {
	return o
}

func (o DashboardAlerteventsChartChartItemOutput) ToDashboardAlerteventsChartChartItemOutputWithContext(ctx context.Context) DashboardAlerteventsChartChartItemOutput {
	return o
}

func (o DashboardAlerteventsChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardAlerteventsChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardAlerteventsChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardAlerteventsChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardAlerteventsChartChartItemOutput) QueryFilterAsset() DashboardAlerteventsChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) DashboardAlerteventsChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardAlerteventsChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardAlerteventsChartChartItemOutput) QueryFilterAttribute() DashboardAlerteventsChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) DashboardAlerteventsChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardAlerteventsChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardAlerteventsChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardAlerteventsChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardAlerteventsChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardAlerteventsChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardAlerteventsChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardAlerteventsChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardAlerteventsChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardAlerteventsChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardAlerteventsChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlerteventsChartChartItem)(nil)).Elem()
}

func (o DashboardAlerteventsChartChartItemArrayOutput) ToDashboardAlerteventsChartChartItemArrayOutput() DashboardAlerteventsChartChartItemArrayOutput {
	return o
}

func (o DashboardAlerteventsChartChartItemArrayOutput) ToDashboardAlerteventsChartChartItemArrayOutputWithContext(ctx context.Context) DashboardAlerteventsChartChartItemArrayOutput {
	return o
}

func (o DashboardAlerteventsChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardAlerteventsChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardAlerteventsChartChartItem {
		return vs[0].([]DashboardAlerteventsChartChartItem)[vs[1].(int)]
	}).(DashboardAlerteventsChartChartItemOutput)
}

type DashboardAlerteventsChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardAlerteventsChartChartItemQueryFilterAssetInput is an input type that accepts DashboardAlerteventsChartChartItemQueryFilterAssetArgs and DashboardAlerteventsChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardAlerteventsChartChartItemQueryFilterAssetInput` via:
//
//	DashboardAlerteventsChartChartItemQueryFilterAssetArgs{...}
type DashboardAlerteventsChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardAlerteventsChartChartItemQueryFilterAssetOutput() DashboardAlerteventsChartChartItemQueryFilterAssetOutput
	ToDashboardAlerteventsChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardAlerteventsChartChartItemQueryFilterAssetOutput
}

type DashboardAlerteventsChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardAlerteventsChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlerteventsChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardAlerteventsChartChartItemQueryFilterAssetArgs) ToDashboardAlerteventsChartChartItemQueryFilterAssetOutput() DashboardAlerteventsChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardAlerteventsChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardAlerteventsChartChartItemQueryFilterAssetArgs) ToDashboardAlerteventsChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardAlerteventsChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlerteventsChartChartItemQueryFilterAssetOutput)
}

type DashboardAlerteventsChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardAlerteventsChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlerteventsChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardAlerteventsChartChartItemQueryFilterAssetOutput) ToDashboardAlerteventsChartChartItemQueryFilterAssetOutput() DashboardAlerteventsChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardAlerteventsChartChartItemQueryFilterAssetOutput) ToDashboardAlerteventsChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardAlerteventsChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardAlerteventsChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardAlerteventsChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardAlerteventsChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardAlerteventsChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardAlerteventsChartChartItemQueryFilterAttributeArgs and DashboardAlerteventsChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardAlerteventsChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardAlerteventsChartChartItemQueryFilterAttributeArgs{...}
type DashboardAlerteventsChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardAlerteventsChartChartItemQueryFilterAttributeOutput() DashboardAlerteventsChartChartItemQueryFilterAttributeOutput
	ToDashboardAlerteventsChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardAlerteventsChartChartItemQueryFilterAttributeOutput
}

type DashboardAlerteventsChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardAlerteventsChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlerteventsChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardAlerteventsChartChartItemQueryFilterAttributeArgs) ToDashboardAlerteventsChartChartItemQueryFilterAttributeOutput() DashboardAlerteventsChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardAlerteventsChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardAlerteventsChartChartItemQueryFilterAttributeArgs) ToDashboardAlerteventsChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardAlerteventsChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlerteventsChartChartItemQueryFilterAttributeOutput)
}

type DashboardAlerteventsChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardAlerteventsChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlerteventsChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardAlerteventsChartChartItemQueryFilterAttributeOutput) ToDashboardAlerteventsChartChartItemQueryFilterAttributeOutput() DashboardAlerteventsChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardAlerteventsChartChartItemQueryFilterAttributeOutput) ToDashboardAlerteventsChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardAlerteventsChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardAlerteventsChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardAlerteventsChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardAlerteventsChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardAlerteventsChartThresholdInput is an input type that accepts DashboardAlerteventsChartThresholdArgs and DashboardAlerteventsChartThresholdOutput values.
// You can construct a concrete instance of `DashboardAlerteventsChartThresholdInput` via:
//
//	DashboardAlerteventsChartThresholdArgs{...}
type DashboardAlerteventsChartThresholdInput interface {
	pulumi.Input

	ToDashboardAlerteventsChartThresholdOutput() DashboardAlerteventsChartThresholdOutput
	ToDashboardAlerteventsChartThresholdOutputWithContext(context.Context) DashboardAlerteventsChartThresholdOutput
}

type DashboardAlerteventsChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardAlerteventsChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlerteventsChartThreshold)(nil)).Elem()
}

func (i DashboardAlerteventsChartThresholdArgs) ToDashboardAlerteventsChartThresholdOutput() DashboardAlerteventsChartThresholdOutput {
	return i.ToDashboardAlerteventsChartThresholdOutputWithContext(context.Background())
}

func (i DashboardAlerteventsChartThresholdArgs) ToDashboardAlerteventsChartThresholdOutputWithContext(ctx context.Context) DashboardAlerteventsChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlerteventsChartThresholdOutput)
}

// DashboardAlerteventsChartThresholdArrayInput is an input type that accepts DashboardAlerteventsChartThresholdArray and DashboardAlerteventsChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardAlerteventsChartThresholdArrayInput` via:
//
//	DashboardAlerteventsChartThresholdArray{ DashboardAlerteventsChartThresholdArgs{...} }
type DashboardAlerteventsChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardAlerteventsChartThresholdArrayOutput() DashboardAlerteventsChartThresholdArrayOutput
	ToDashboardAlerteventsChartThresholdArrayOutputWithContext(context.Context) DashboardAlerteventsChartThresholdArrayOutput
}

type DashboardAlerteventsChartThresholdArray []DashboardAlerteventsChartThresholdInput

func (DashboardAlerteventsChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlerteventsChartThreshold)(nil)).Elem()
}

func (i DashboardAlerteventsChartThresholdArray) ToDashboardAlerteventsChartThresholdArrayOutput() DashboardAlerteventsChartThresholdArrayOutput {
	return i.ToDashboardAlerteventsChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardAlerteventsChartThresholdArray) ToDashboardAlerteventsChartThresholdArrayOutputWithContext(ctx context.Context) DashboardAlerteventsChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlerteventsChartThresholdArrayOutput)
}

type DashboardAlerteventsChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardAlerteventsChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlerteventsChartThreshold)(nil)).Elem()
}

func (o DashboardAlerteventsChartThresholdOutput) ToDashboardAlerteventsChartThresholdOutput() DashboardAlerteventsChartThresholdOutput {
	return o
}

func (o DashboardAlerteventsChartThresholdOutput) ToDashboardAlerteventsChartThresholdOutputWithContext(ctx context.Context) DashboardAlerteventsChartThresholdOutput {
	return o
}

func (o DashboardAlerteventsChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardAlerteventsChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardAlerteventsChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardAlerteventsChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardAlerteventsChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardAlerteventsChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlerteventsChartThreshold)(nil)).Elem()
}

func (o DashboardAlerteventsChartThresholdArrayOutput) ToDashboardAlerteventsChartThresholdArrayOutput() DashboardAlerteventsChartThresholdArrayOutput {
	return o
}

func (o DashboardAlerteventsChartThresholdArrayOutput) ToDashboardAlerteventsChartThresholdArrayOutputWithContext(ctx context.Context) DashboardAlerteventsChartThresholdArrayOutput {
	return o
}

func (o DashboardAlerteventsChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardAlerteventsChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardAlerteventsChartThreshold {
		return vs[0].([]DashboardAlerteventsChartThreshold)[vs[1].(int)]
	}).(DashboardAlerteventsChartThresholdOutput)
}

type DashboardAlerteventsChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardAlerteventsChartValueMappingInput is an input type that accepts DashboardAlerteventsChartValueMappingArgs and DashboardAlerteventsChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardAlerteventsChartValueMappingInput` via:
//
//	DashboardAlerteventsChartValueMappingArgs{...}
type DashboardAlerteventsChartValueMappingInput interface {
	pulumi.Input

	ToDashboardAlerteventsChartValueMappingOutput() DashboardAlerteventsChartValueMappingOutput
	ToDashboardAlerteventsChartValueMappingOutputWithContext(context.Context) DashboardAlerteventsChartValueMappingOutput
}

type DashboardAlerteventsChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardAlerteventsChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlerteventsChartValueMapping)(nil)).Elem()
}

func (i DashboardAlerteventsChartValueMappingArgs) ToDashboardAlerteventsChartValueMappingOutput() DashboardAlerteventsChartValueMappingOutput {
	return i.ToDashboardAlerteventsChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardAlerteventsChartValueMappingArgs) ToDashboardAlerteventsChartValueMappingOutputWithContext(ctx context.Context) DashboardAlerteventsChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlerteventsChartValueMappingOutput)
}

// DashboardAlerteventsChartValueMappingArrayInput is an input type that accepts DashboardAlerteventsChartValueMappingArray and DashboardAlerteventsChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardAlerteventsChartValueMappingArrayInput` via:
//
//	DashboardAlerteventsChartValueMappingArray{ DashboardAlerteventsChartValueMappingArgs{...} }
type DashboardAlerteventsChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardAlerteventsChartValueMappingArrayOutput() DashboardAlerteventsChartValueMappingArrayOutput
	ToDashboardAlerteventsChartValueMappingArrayOutputWithContext(context.Context) DashboardAlerteventsChartValueMappingArrayOutput
}

type DashboardAlerteventsChartValueMappingArray []DashboardAlerteventsChartValueMappingInput

func (DashboardAlerteventsChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlerteventsChartValueMapping)(nil)).Elem()
}

func (i DashboardAlerteventsChartValueMappingArray) ToDashboardAlerteventsChartValueMappingArrayOutput() DashboardAlerteventsChartValueMappingArrayOutput {
	return i.ToDashboardAlerteventsChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardAlerteventsChartValueMappingArray) ToDashboardAlerteventsChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardAlerteventsChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlerteventsChartValueMappingArrayOutput)
}

type DashboardAlerteventsChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardAlerteventsChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlerteventsChartValueMapping)(nil)).Elem()
}

func (o DashboardAlerteventsChartValueMappingOutput) ToDashboardAlerteventsChartValueMappingOutput() DashboardAlerteventsChartValueMappingOutput {
	return o
}

func (o DashboardAlerteventsChartValueMappingOutput) ToDashboardAlerteventsChartValueMappingOutputWithContext(ctx context.Context) DashboardAlerteventsChartValueMappingOutput {
	return o
}

func (o DashboardAlerteventsChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardAlerteventsChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardAlerteventsChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardAlerteventsChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlerteventsChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardAlerteventsChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardAlerteventsChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlerteventsChartValueMapping)(nil)).Elem()
}

func (o DashboardAlerteventsChartValueMappingArrayOutput) ToDashboardAlerteventsChartValueMappingArrayOutput() DashboardAlerteventsChartValueMappingArrayOutput {
	return o
}

func (o DashboardAlerteventsChartValueMappingArrayOutput) ToDashboardAlerteventsChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardAlerteventsChartValueMappingArrayOutput {
	return o
}

func (o DashboardAlerteventsChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardAlerteventsChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardAlerteventsChartValueMapping {
		return vs[0].([]DashboardAlerteventsChartValueMapping)[vs[1].(int)]
	}).(DashboardAlerteventsChartValueMappingOutput)
}

type DashboardAlertlistChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardAlertlistChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardAlertlistChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                              `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                              `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                                 `pulumi:"queryLimit"`
	QueryPlain           string                                               `pulumi:"queryPlain"`
	QuerySortDirection   *int                                                 `pulumi:"querySortDirection"`
	RefId                string                                               `pulumi:"refId"`
	Type                 string                                               `pulumi:"type"`
}

// DashboardAlertlistChartChartItemInput is an input type that accepts DashboardAlertlistChartChartItemArgs and DashboardAlertlistChartChartItemOutput values.
// You can construct a concrete instance of `DashboardAlertlistChartChartItemInput` via:
//
//	DashboardAlertlistChartChartItemArgs{...}
type DashboardAlertlistChartChartItemInput interface {
	pulumi.Input

	ToDashboardAlertlistChartChartItemOutput() DashboardAlertlistChartChartItemOutput
	ToDashboardAlertlistChartChartItemOutputWithContext(context.Context) DashboardAlertlistChartChartItemOutput
}

type DashboardAlertlistChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardAlertlistChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardAlertlistChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                     `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                     `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                        `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                        `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                        `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                        `pulumi:"refId"`
	Type                 pulumi.StringInput                                        `pulumi:"type"`
}

func (DashboardAlertlistChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlertlistChartChartItem)(nil)).Elem()
}

func (i DashboardAlertlistChartChartItemArgs) ToDashboardAlertlistChartChartItemOutput() DashboardAlertlistChartChartItemOutput {
	return i.ToDashboardAlertlistChartChartItemOutputWithContext(context.Background())
}

func (i DashboardAlertlistChartChartItemArgs) ToDashboardAlertlistChartChartItemOutputWithContext(ctx context.Context) DashboardAlertlistChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlertlistChartChartItemOutput)
}

// DashboardAlertlistChartChartItemArrayInput is an input type that accepts DashboardAlertlistChartChartItemArray and DashboardAlertlistChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardAlertlistChartChartItemArrayInput` via:
//
//	DashboardAlertlistChartChartItemArray{ DashboardAlertlistChartChartItemArgs{...} }
type DashboardAlertlistChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardAlertlistChartChartItemArrayOutput() DashboardAlertlistChartChartItemArrayOutput
	ToDashboardAlertlistChartChartItemArrayOutputWithContext(context.Context) DashboardAlertlistChartChartItemArrayOutput
}

type DashboardAlertlistChartChartItemArray []DashboardAlertlistChartChartItemInput

func (DashboardAlertlistChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlertlistChartChartItem)(nil)).Elem()
}

func (i DashboardAlertlistChartChartItemArray) ToDashboardAlertlistChartChartItemArrayOutput() DashboardAlertlistChartChartItemArrayOutput {
	return i.ToDashboardAlertlistChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardAlertlistChartChartItemArray) ToDashboardAlertlistChartChartItemArrayOutputWithContext(ctx context.Context) DashboardAlertlistChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlertlistChartChartItemArrayOutput)
}

type DashboardAlertlistChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardAlertlistChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlertlistChartChartItem)(nil)).Elem()
}

func (o DashboardAlertlistChartChartItemOutput) ToDashboardAlertlistChartChartItemOutput() DashboardAlertlistChartChartItemOutput {
	return o
}

func (o DashboardAlertlistChartChartItemOutput) ToDashboardAlertlistChartChartItemOutputWithContext(ctx context.Context) DashboardAlertlistChartChartItemOutput {
	return o
}

func (o DashboardAlertlistChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardAlertlistChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardAlertlistChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardAlertlistChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardAlertlistChartChartItemOutput) QueryFilterAsset() DashboardAlertlistChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) DashboardAlertlistChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardAlertlistChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardAlertlistChartChartItemOutput) QueryFilterAttribute() DashboardAlertlistChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) DashboardAlertlistChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardAlertlistChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardAlertlistChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardAlertlistChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardAlertlistChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardAlertlistChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardAlertlistChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardAlertlistChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardAlertlistChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardAlertlistChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardAlertlistChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlertlistChartChartItem)(nil)).Elem()
}

func (o DashboardAlertlistChartChartItemArrayOutput) ToDashboardAlertlistChartChartItemArrayOutput() DashboardAlertlistChartChartItemArrayOutput {
	return o
}

func (o DashboardAlertlistChartChartItemArrayOutput) ToDashboardAlertlistChartChartItemArrayOutputWithContext(ctx context.Context) DashboardAlertlistChartChartItemArrayOutput {
	return o
}

func (o DashboardAlertlistChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardAlertlistChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardAlertlistChartChartItem {
		return vs[0].([]DashboardAlertlistChartChartItem)[vs[1].(int)]
	}).(DashboardAlertlistChartChartItemOutput)
}

type DashboardAlertlistChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardAlertlistChartChartItemQueryFilterAssetInput is an input type that accepts DashboardAlertlistChartChartItemQueryFilterAssetArgs and DashboardAlertlistChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardAlertlistChartChartItemQueryFilterAssetInput` via:
//
//	DashboardAlertlistChartChartItemQueryFilterAssetArgs{...}
type DashboardAlertlistChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardAlertlistChartChartItemQueryFilterAssetOutput() DashboardAlertlistChartChartItemQueryFilterAssetOutput
	ToDashboardAlertlistChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardAlertlistChartChartItemQueryFilterAssetOutput
}

type DashboardAlertlistChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardAlertlistChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlertlistChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardAlertlistChartChartItemQueryFilterAssetArgs) ToDashboardAlertlistChartChartItemQueryFilterAssetOutput() DashboardAlertlistChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardAlertlistChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardAlertlistChartChartItemQueryFilterAssetArgs) ToDashboardAlertlistChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardAlertlistChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlertlistChartChartItemQueryFilterAssetOutput)
}

type DashboardAlertlistChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardAlertlistChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlertlistChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardAlertlistChartChartItemQueryFilterAssetOutput) ToDashboardAlertlistChartChartItemQueryFilterAssetOutput() DashboardAlertlistChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardAlertlistChartChartItemQueryFilterAssetOutput) ToDashboardAlertlistChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardAlertlistChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardAlertlistChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardAlertlistChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardAlertlistChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardAlertlistChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardAlertlistChartChartItemQueryFilterAttributeArgs and DashboardAlertlistChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardAlertlistChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardAlertlistChartChartItemQueryFilterAttributeArgs{...}
type DashboardAlertlistChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardAlertlistChartChartItemQueryFilterAttributeOutput() DashboardAlertlistChartChartItemQueryFilterAttributeOutput
	ToDashboardAlertlistChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardAlertlistChartChartItemQueryFilterAttributeOutput
}

type DashboardAlertlistChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardAlertlistChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlertlistChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardAlertlistChartChartItemQueryFilterAttributeArgs) ToDashboardAlertlistChartChartItemQueryFilterAttributeOutput() DashboardAlertlistChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardAlertlistChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardAlertlistChartChartItemQueryFilterAttributeArgs) ToDashboardAlertlistChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardAlertlistChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlertlistChartChartItemQueryFilterAttributeOutput)
}

type DashboardAlertlistChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardAlertlistChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlertlistChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardAlertlistChartChartItemQueryFilterAttributeOutput) ToDashboardAlertlistChartChartItemQueryFilterAttributeOutput() DashboardAlertlistChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardAlertlistChartChartItemQueryFilterAttributeOutput) ToDashboardAlertlistChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardAlertlistChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardAlertlistChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardAlertlistChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAlertlistChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardAlertlistChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardAlertlistChartThresholdInput is an input type that accepts DashboardAlertlistChartThresholdArgs and DashboardAlertlistChartThresholdOutput values.
// You can construct a concrete instance of `DashboardAlertlistChartThresholdInput` via:
//
//	DashboardAlertlistChartThresholdArgs{...}
type DashboardAlertlistChartThresholdInput interface {
	pulumi.Input

	ToDashboardAlertlistChartThresholdOutput() DashboardAlertlistChartThresholdOutput
	ToDashboardAlertlistChartThresholdOutputWithContext(context.Context) DashboardAlertlistChartThresholdOutput
}

type DashboardAlertlistChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardAlertlistChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlertlistChartThreshold)(nil)).Elem()
}

func (i DashboardAlertlistChartThresholdArgs) ToDashboardAlertlistChartThresholdOutput() DashboardAlertlistChartThresholdOutput {
	return i.ToDashboardAlertlistChartThresholdOutputWithContext(context.Background())
}

func (i DashboardAlertlistChartThresholdArgs) ToDashboardAlertlistChartThresholdOutputWithContext(ctx context.Context) DashboardAlertlistChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlertlistChartThresholdOutput)
}

// DashboardAlertlistChartThresholdArrayInput is an input type that accepts DashboardAlertlistChartThresholdArray and DashboardAlertlistChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardAlertlistChartThresholdArrayInput` via:
//
//	DashboardAlertlistChartThresholdArray{ DashboardAlertlistChartThresholdArgs{...} }
type DashboardAlertlistChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardAlertlistChartThresholdArrayOutput() DashboardAlertlistChartThresholdArrayOutput
	ToDashboardAlertlistChartThresholdArrayOutputWithContext(context.Context) DashboardAlertlistChartThresholdArrayOutput
}

type DashboardAlertlistChartThresholdArray []DashboardAlertlistChartThresholdInput

func (DashboardAlertlistChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlertlistChartThreshold)(nil)).Elem()
}

func (i DashboardAlertlistChartThresholdArray) ToDashboardAlertlistChartThresholdArrayOutput() DashboardAlertlistChartThresholdArrayOutput {
	return i.ToDashboardAlertlistChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardAlertlistChartThresholdArray) ToDashboardAlertlistChartThresholdArrayOutputWithContext(ctx context.Context) DashboardAlertlistChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlertlistChartThresholdArrayOutput)
}

type DashboardAlertlistChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardAlertlistChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlertlistChartThreshold)(nil)).Elem()
}

func (o DashboardAlertlistChartThresholdOutput) ToDashboardAlertlistChartThresholdOutput() DashboardAlertlistChartThresholdOutput {
	return o
}

func (o DashboardAlertlistChartThresholdOutput) ToDashboardAlertlistChartThresholdOutputWithContext(ctx context.Context) DashboardAlertlistChartThresholdOutput {
	return o
}

func (o DashboardAlertlistChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlertlistChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardAlertlistChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlertlistChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardAlertlistChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardAlertlistChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardAlertlistChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardAlertlistChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlertlistChartThreshold)(nil)).Elem()
}

func (o DashboardAlertlistChartThresholdArrayOutput) ToDashboardAlertlistChartThresholdArrayOutput() DashboardAlertlistChartThresholdArrayOutput {
	return o
}

func (o DashboardAlertlistChartThresholdArrayOutput) ToDashboardAlertlistChartThresholdArrayOutputWithContext(ctx context.Context) DashboardAlertlistChartThresholdArrayOutput {
	return o
}

func (o DashboardAlertlistChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardAlertlistChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardAlertlistChartThreshold {
		return vs[0].([]DashboardAlertlistChartThreshold)[vs[1].(int)]
	}).(DashboardAlertlistChartThresholdOutput)
}

type DashboardAlertlistChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardAlertlistChartValueMappingInput is an input type that accepts DashboardAlertlistChartValueMappingArgs and DashboardAlertlistChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardAlertlistChartValueMappingInput` via:
//
//	DashboardAlertlistChartValueMappingArgs{...}
type DashboardAlertlistChartValueMappingInput interface {
	pulumi.Input

	ToDashboardAlertlistChartValueMappingOutput() DashboardAlertlistChartValueMappingOutput
	ToDashboardAlertlistChartValueMappingOutputWithContext(context.Context) DashboardAlertlistChartValueMappingOutput
}

type DashboardAlertlistChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardAlertlistChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlertlistChartValueMapping)(nil)).Elem()
}

func (i DashboardAlertlistChartValueMappingArgs) ToDashboardAlertlistChartValueMappingOutput() DashboardAlertlistChartValueMappingOutput {
	return i.ToDashboardAlertlistChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardAlertlistChartValueMappingArgs) ToDashboardAlertlistChartValueMappingOutputWithContext(ctx context.Context) DashboardAlertlistChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlertlistChartValueMappingOutput)
}

// DashboardAlertlistChartValueMappingArrayInput is an input type that accepts DashboardAlertlistChartValueMappingArray and DashboardAlertlistChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardAlertlistChartValueMappingArrayInput` via:
//
//	DashboardAlertlistChartValueMappingArray{ DashboardAlertlistChartValueMappingArgs{...} }
type DashboardAlertlistChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardAlertlistChartValueMappingArrayOutput() DashboardAlertlistChartValueMappingArrayOutput
	ToDashboardAlertlistChartValueMappingArrayOutputWithContext(context.Context) DashboardAlertlistChartValueMappingArrayOutput
}

type DashboardAlertlistChartValueMappingArray []DashboardAlertlistChartValueMappingInput

func (DashboardAlertlistChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlertlistChartValueMapping)(nil)).Elem()
}

func (i DashboardAlertlistChartValueMappingArray) ToDashboardAlertlistChartValueMappingArrayOutput() DashboardAlertlistChartValueMappingArrayOutput {
	return i.ToDashboardAlertlistChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardAlertlistChartValueMappingArray) ToDashboardAlertlistChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardAlertlistChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAlertlistChartValueMappingArrayOutput)
}

type DashboardAlertlistChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardAlertlistChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAlertlistChartValueMapping)(nil)).Elem()
}

func (o DashboardAlertlistChartValueMappingOutput) ToDashboardAlertlistChartValueMappingOutput() DashboardAlertlistChartValueMappingOutput {
	return o
}

func (o DashboardAlertlistChartValueMappingOutput) ToDashboardAlertlistChartValueMappingOutputWithContext(ctx context.Context) DashboardAlertlistChartValueMappingOutput {
	return o
}

func (o DashboardAlertlistChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlertlistChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardAlertlistChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlertlistChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardAlertlistChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardAlertlistChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardAlertlistChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAlertlistChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardAlertlistChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardAlertlistChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAlertlistChartValueMapping)(nil)).Elem()
}

func (o DashboardAlertlistChartValueMappingArrayOutput) ToDashboardAlertlistChartValueMappingArrayOutput() DashboardAlertlistChartValueMappingArrayOutput {
	return o
}

func (o DashboardAlertlistChartValueMappingArrayOutput) ToDashboardAlertlistChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardAlertlistChartValueMappingArrayOutput {
	return o
}

func (o DashboardAlertlistChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardAlertlistChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardAlertlistChartValueMapping {
		return vs[0].([]DashboardAlertlistChartValueMapping)[vs[1].(int)]
	}).(DashboardAlertlistChartValueMappingOutput)
}

type DashboardAssetlistChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardAssetlistChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardAssetlistChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                              `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                              `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                                 `pulumi:"queryLimit"`
	QueryPlain           string                                               `pulumi:"queryPlain"`
	QuerySortDirection   *int                                                 `pulumi:"querySortDirection"`
	RefId                string                                               `pulumi:"refId"`
	Type                 string                                               `pulumi:"type"`
}

// DashboardAssetlistChartChartItemInput is an input type that accepts DashboardAssetlistChartChartItemArgs and DashboardAssetlistChartChartItemOutput values.
// You can construct a concrete instance of `DashboardAssetlistChartChartItemInput` via:
//
//	DashboardAssetlistChartChartItemArgs{...}
type DashboardAssetlistChartChartItemInput interface {
	pulumi.Input

	ToDashboardAssetlistChartChartItemOutput() DashboardAssetlistChartChartItemOutput
	ToDashboardAssetlistChartChartItemOutputWithContext(context.Context) DashboardAssetlistChartChartItemOutput
}

type DashboardAssetlistChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardAssetlistChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardAssetlistChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                     `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                     `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                        `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                        `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                        `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                        `pulumi:"refId"`
	Type                 pulumi.StringInput                                        `pulumi:"type"`
}

func (DashboardAssetlistChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAssetlistChartChartItem)(nil)).Elem()
}

func (i DashboardAssetlistChartChartItemArgs) ToDashboardAssetlistChartChartItemOutput() DashboardAssetlistChartChartItemOutput {
	return i.ToDashboardAssetlistChartChartItemOutputWithContext(context.Background())
}

func (i DashboardAssetlistChartChartItemArgs) ToDashboardAssetlistChartChartItemOutputWithContext(ctx context.Context) DashboardAssetlistChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAssetlistChartChartItemOutput)
}

// DashboardAssetlistChartChartItemArrayInput is an input type that accepts DashboardAssetlistChartChartItemArray and DashboardAssetlistChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardAssetlistChartChartItemArrayInput` via:
//
//	DashboardAssetlistChartChartItemArray{ DashboardAssetlistChartChartItemArgs{...} }
type DashboardAssetlistChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardAssetlistChartChartItemArrayOutput() DashboardAssetlistChartChartItemArrayOutput
	ToDashboardAssetlistChartChartItemArrayOutputWithContext(context.Context) DashboardAssetlistChartChartItemArrayOutput
}

type DashboardAssetlistChartChartItemArray []DashboardAssetlistChartChartItemInput

func (DashboardAssetlistChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAssetlistChartChartItem)(nil)).Elem()
}

func (i DashboardAssetlistChartChartItemArray) ToDashboardAssetlistChartChartItemArrayOutput() DashboardAssetlistChartChartItemArrayOutput {
	return i.ToDashboardAssetlistChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardAssetlistChartChartItemArray) ToDashboardAssetlistChartChartItemArrayOutputWithContext(ctx context.Context) DashboardAssetlistChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAssetlistChartChartItemArrayOutput)
}

type DashboardAssetlistChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardAssetlistChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAssetlistChartChartItem)(nil)).Elem()
}

func (o DashboardAssetlistChartChartItemOutput) ToDashboardAssetlistChartChartItemOutput() DashboardAssetlistChartChartItemOutput {
	return o
}

func (o DashboardAssetlistChartChartItemOutput) ToDashboardAssetlistChartChartItemOutputWithContext(ctx context.Context) DashboardAssetlistChartChartItemOutput {
	return o
}

func (o DashboardAssetlistChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardAssetlistChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardAssetlistChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardAssetlistChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardAssetlistChartChartItemOutput) QueryFilterAsset() DashboardAssetlistChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) DashboardAssetlistChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardAssetlistChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardAssetlistChartChartItemOutput) QueryFilterAttribute() DashboardAssetlistChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) DashboardAssetlistChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardAssetlistChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardAssetlistChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardAssetlistChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardAssetlistChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardAssetlistChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardAssetlistChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardAssetlistChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardAssetlistChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardAssetlistChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardAssetlistChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAssetlistChartChartItem)(nil)).Elem()
}

func (o DashboardAssetlistChartChartItemArrayOutput) ToDashboardAssetlistChartChartItemArrayOutput() DashboardAssetlistChartChartItemArrayOutput {
	return o
}

func (o DashboardAssetlistChartChartItemArrayOutput) ToDashboardAssetlistChartChartItemArrayOutputWithContext(ctx context.Context) DashboardAssetlistChartChartItemArrayOutput {
	return o
}

func (o DashboardAssetlistChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardAssetlistChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardAssetlistChartChartItem {
		return vs[0].([]DashboardAssetlistChartChartItem)[vs[1].(int)]
	}).(DashboardAssetlistChartChartItemOutput)
}

type DashboardAssetlistChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardAssetlistChartChartItemQueryFilterAssetInput is an input type that accepts DashboardAssetlistChartChartItemQueryFilterAssetArgs and DashboardAssetlistChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardAssetlistChartChartItemQueryFilterAssetInput` via:
//
//	DashboardAssetlistChartChartItemQueryFilterAssetArgs{...}
type DashboardAssetlistChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardAssetlistChartChartItemQueryFilterAssetOutput() DashboardAssetlistChartChartItemQueryFilterAssetOutput
	ToDashboardAssetlistChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardAssetlistChartChartItemQueryFilterAssetOutput
}

type DashboardAssetlistChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardAssetlistChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAssetlistChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardAssetlistChartChartItemQueryFilterAssetArgs) ToDashboardAssetlistChartChartItemQueryFilterAssetOutput() DashboardAssetlistChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardAssetlistChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardAssetlistChartChartItemQueryFilterAssetArgs) ToDashboardAssetlistChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardAssetlistChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAssetlistChartChartItemQueryFilterAssetOutput)
}

type DashboardAssetlistChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardAssetlistChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAssetlistChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardAssetlistChartChartItemQueryFilterAssetOutput) ToDashboardAssetlistChartChartItemQueryFilterAssetOutput() DashboardAssetlistChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardAssetlistChartChartItemQueryFilterAssetOutput) ToDashboardAssetlistChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardAssetlistChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardAssetlistChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardAssetlistChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardAssetlistChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardAssetlistChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardAssetlistChartChartItemQueryFilterAttributeArgs and DashboardAssetlistChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardAssetlistChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardAssetlistChartChartItemQueryFilterAttributeArgs{...}
type DashboardAssetlistChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardAssetlistChartChartItemQueryFilterAttributeOutput() DashboardAssetlistChartChartItemQueryFilterAttributeOutput
	ToDashboardAssetlistChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardAssetlistChartChartItemQueryFilterAttributeOutput
}

type DashboardAssetlistChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardAssetlistChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAssetlistChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardAssetlistChartChartItemQueryFilterAttributeArgs) ToDashboardAssetlistChartChartItemQueryFilterAttributeOutput() DashboardAssetlistChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardAssetlistChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardAssetlistChartChartItemQueryFilterAttributeArgs) ToDashboardAssetlistChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardAssetlistChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAssetlistChartChartItemQueryFilterAttributeOutput)
}

type DashboardAssetlistChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardAssetlistChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAssetlistChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardAssetlistChartChartItemQueryFilterAttributeOutput) ToDashboardAssetlistChartChartItemQueryFilterAttributeOutput() DashboardAssetlistChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardAssetlistChartChartItemQueryFilterAttributeOutput) ToDashboardAssetlistChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardAssetlistChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardAssetlistChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardAssetlistChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardAssetlistChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardAssetlistChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardAssetlistChartThresholdInput is an input type that accepts DashboardAssetlistChartThresholdArgs and DashboardAssetlistChartThresholdOutput values.
// You can construct a concrete instance of `DashboardAssetlistChartThresholdInput` via:
//
//	DashboardAssetlistChartThresholdArgs{...}
type DashboardAssetlistChartThresholdInput interface {
	pulumi.Input

	ToDashboardAssetlistChartThresholdOutput() DashboardAssetlistChartThresholdOutput
	ToDashboardAssetlistChartThresholdOutputWithContext(context.Context) DashboardAssetlistChartThresholdOutput
}

type DashboardAssetlistChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardAssetlistChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAssetlistChartThreshold)(nil)).Elem()
}

func (i DashboardAssetlistChartThresholdArgs) ToDashboardAssetlistChartThresholdOutput() DashboardAssetlistChartThresholdOutput {
	return i.ToDashboardAssetlistChartThresholdOutputWithContext(context.Background())
}

func (i DashboardAssetlistChartThresholdArgs) ToDashboardAssetlistChartThresholdOutputWithContext(ctx context.Context) DashboardAssetlistChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAssetlistChartThresholdOutput)
}

// DashboardAssetlistChartThresholdArrayInput is an input type that accepts DashboardAssetlistChartThresholdArray and DashboardAssetlistChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardAssetlistChartThresholdArrayInput` via:
//
//	DashboardAssetlistChartThresholdArray{ DashboardAssetlistChartThresholdArgs{...} }
type DashboardAssetlistChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardAssetlistChartThresholdArrayOutput() DashboardAssetlistChartThresholdArrayOutput
	ToDashboardAssetlistChartThresholdArrayOutputWithContext(context.Context) DashboardAssetlistChartThresholdArrayOutput
}

type DashboardAssetlistChartThresholdArray []DashboardAssetlistChartThresholdInput

func (DashboardAssetlistChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAssetlistChartThreshold)(nil)).Elem()
}

func (i DashboardAssetlistChartThresholdArray) ToDashboardAssetlistChartThresholdArrayOutput() DashboardAssetlistChartThresholdArrayOutput {
	return i.ToDashboardAssetlistChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardAssetlistChartThresholdArray) ToDashboardAssetlistChartThresholdArrayOutputWithContext(ctx context.Context) DashboardAssetlistChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAssetlistChartThresholdArrayOutput)
}

type DashboardAssetlistChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardAssetlistChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAssetlistChartThreshold)(nil)).Elem()
}

func (o DashboardAssetlistChartThresholdOutput) ToDashboardAssetlistChartThresholdOutput() DashboardAssetlistChartThresholdOutput {
	return o
}

func (o DashboardAssetlistChartThresholdOutput) ToDashboardAssetlistChartThresholdOutputWithContext(ctx context.Context) DashboardAssetlistChartThresholdOutput {
	return o
}

func (o DashboardAssetlistChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAssetlistChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardAssetlistChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAssetlistChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardAssetlistChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardAssetlistChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardAssetlistChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardAssetlistChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAssetlistChartThreshold)(nil)).Elem()
}

func (o DashboardAssetlistChartThresholdArrayOutput) ToDashboardAssetlistChartThresholdArrayOutput() DashboardAssetlistChartThresholdArrayOutput {
	return o
}

func (o DashboardAssetlistChartThresholdArrayOutput) ToDashboardAssetlistChartThresholdArrayOutputWithContext(ctx context.Context) DashboardAssetlistChartThresholdArrayOutput {
	return o
}

func (o DashboardAssetlistChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardAssetlistChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardAssetlistChartThreshold {
		return vs[0].([]DashboardAssetlistChartThreshold)[vs[1].(int)]
	}).(DashboardAssetlistChartThresholdOutput)
}

type DashboardAssetlistChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardAssetlistChartValueMappingInput is an input type that accepts DashboardAssetlistChartValueMappingArgs and DashboardAssetlistChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardAssetlistChartValueMappingInput` via:
//
//	DashboardAssetlistChartValueMappingArgs{...}
type DashboardAssetlistChartValueMappingInput interface {
	pulumi.Input

	ToDashboardAssetlistChartValueMappingOutput() DashboardAssetlistChartValueMappingOutput
	ToDashboardAssetlistChartValueMappingOutputWithContext(context.Context) DashboardAssetlistChartValueMappingOutput
}

type DashboardAssetlistChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardAssetlistChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAssetlistChartValueMapping)(nil)).Elem()
}

func (i DashboardAssetlistChartValueMappingArgs) ToDashboardAssetlistChartValueMappingOutput() DashboardAssetlistChartValueMappingOutput {
	return i.ToDashboardAssetlistChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardAssetlistChartValueMappingArgs) ToDashboardAssetlistChartValueMappingOutputWithContext(ctx context.Context) DashboardAssetlistChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAssetlistChartValueMappingOutput)
}

// DashboardAssetlistChartValueMappingArrayInput is an input type that accepts DashboardAssetlistChartValueMappingArray and DashboardAssetlistChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardAssetlistChartValueMappingArrayInput` via:
//
//	DashboardAssetlistChartValueMappingArray{ DashboardAssetlistChartValueMappingArgs{...} }
type DashboardAssetlistChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardAssetlistChartValueMappingArrayOutput() DashboardAssetlistChartValueMappingArrayOutput
	ToDashboardAssetlistChartValueMappingArrayOutputWithContext(context.Context) DashboardAssetlistChartValueMappingArrayOutput
}

type DashboardAssetlistChartValueMappingArray []DashboardAssetlistChartValueMappingInput

func (DashboardAssetlistChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAssetlistChartValueMapping)(nil)).Elem()
}

func (i DashboardAssetlistChartValueMappingArray) ToDashboardAssetlistChartValueMappingArrayOutput() DashboardAssetlistChartValueMappingArrayOutput {
	return i.ToDashboardAssetlistChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardAssetlistChartValueMappingArray) ToDashboardAssetlistChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardAssetlistChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAssetlistChartValueMappingArrayOutput)
}

type DashboardAssetlistChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardAssetlistChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAssetlistChartValueMapping)(nil)).Elem()
}

func (o DashboardAssetlistChartValueMappingOutput) ToDashboardAssetlistChartValueMappingOutput() DashboardAssetlistChartValueMappingOutput {
	return o
}

func (o DashboardAssetlistChartValueMappingOutput) ToDashboardAssetlistChartValueMappingOutputWithContext(ctx context.Context) DashboardAssetlistChartValueMappingOutput {
	return o
}

func (o DashboardAssetlistChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAssetlistChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardAssetlistChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAssetlistChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardAssetlistChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardAssetlistChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardAssetlistChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardAssetlistChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardAssetlistChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardAssetlistChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardAssetlistChartValueMapping)(nil)).Elem()
}

func (o DashboardAssetlistChartValueMappingArrayOutput) ToDashboardAssetlistChartValueMappingArrayOutput() DashboardAssetlistChartValueMappingArrayOutput {
	return o
}

func (o DashboardAssetlistChartValueMappingArrayOutput) ToDashboardAssetlistChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardAssetlistChartValueMappingArrayOutput {
	return o
}

func (o DashboardAssetlistChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardAssetlistChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardAssetlistChartValueMapping {
		return vs[0].([]DashboardAssetlistChartValueMapping)[vs[1].(int)]
	}).(DashboardAssetlistChartValueMappingOutput)
}

type DashboardBarChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardBarChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardBarChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                        `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                        `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                           `pulumi:"queryLimit"`
	QueryPlain           string                                         `pulumi:"queryPlain"`
	QuerySortDirection   *int                                           `pulumi:"querySortDirection"`
	RefId                string                                         `pulumi:"refId"`
	Type                 string                                         `pulumi:"type"`
}

// DashboardBarChartChartItemInput is an input type that accepts DashboardBarChartChartItemArgs and DashboardBarChartChartItemOutput values.
// You can construct a concrete instance of `DashboardBarChartChartItemInput` via:
//
//	DashboardBarChartChartItemArgs{...}
type DashboardBarChartChartItemInput interface {
	pulumi.Input

	ToDashboardBarChartChartItemOutput() DashboardBarChartChartItemOutput
	ToDashboardBarChartChartItemOutputWithContext(context.Context) DashboardBarChartChartItemOutput
}

type DashboardBarChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardBarChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardBarChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                               `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                               `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                  `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                  `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                  `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                  `pulumi:"refId"`
	Type                 pulumi.StringInput                                  `pulumi:"type"`
}

func (DashboardBarChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBarChartChartItem)(nil)).Elem()
}

func (i DashboardBarChartChartItemArgs) ToDashboardBarChartChartItemOutput() DashboardBarChartChartItemOutput {
	return i.ToDashboardBarChartChartItemOutputWithContext(context.Background())
}

func (i DashboardBarChartChartItemArgs) ToDashboardBarChartChartItemOutputWithContext(ctx context.Context) DashboardBarChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBarChartChartItemOutput)
}

// DashboardBarChartChartItemArrayInput is an input type that accepts DashboardBarChartChartItemArray and DashboardBarChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardBarChartChartItemArrayInput` via:
//
//	DashboardBarChartChartItemArray{ DashboardBarChartChartItemArgs{...} }
type DashboardBarChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardBarChartChartItemArrayOutput() DashboardBarChartChartItemArrayOutput
	ToDashboardBarChartChartItemArrayOutputWithContext(context.Context) DashboardBarChartChartItemArrayOutput
}

type DashboardBarChartChartItemArray []DashboardBarChartChartItemInput

func (DashboardBarChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBarChartChartItem)(nil)).Elem()
}

func (i DashboardBarChartChartItemArray) ToDashboardBarChartChartItemArrayOutput() DashboardBarChartChartItemArrayOutput {
	return i.ToDashboardBarChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardBarChartChartItemArray) ToDashboardBarChartChartItemArrayOutputWithContext(ctx context.Context) DashboardBarChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBarChartChartItemArrayOutput)
}

type DashboardBarChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardBarChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBarChartChartItem)(nil)).Elem()
}

func (o DashboardBarChartChartItemOutput) ToDashboardBarChartChartItemOutput() DashboardBarChartChartItemOutput {
	return o
}

func (o DashboardBarChartChartItemOutput) ToDashboardBarChartChartItemOutputWithContext(ctx context.Context) DashboardBarChartChartItemOutput {
	return o
}

func (o DashboardBarChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardBarChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardBarChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardBarChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardBarChartChartItemOutput) QueryFilterAsset() DashboardBarChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) DashboardBarChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardBarChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardBarChartChartItemOutput) QueryFilterAttribute() DashboardBarChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) DashboardBarChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardBarChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardBarChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardBarChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardBarChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardBarChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardBarChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardBarChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardBarChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBarChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardBarChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardBarChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBarChartChartItem)(nil)).Elem()
}

func (o DashboardBarChartChartItemArrayOutput) ToDashboardBarChartChartItemArrayOutput() DashboardBarChartChartItemArrayOutput {
	return o
}

func (o DashboardBarChartChartItemArrayOutput) ToDashboardBarChartChartItemArrayOutputWithContext(ctx context.Context) DashboardBarChartChartItemArrayOutput {
	return o
}

func (o DashboardBarChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardBarChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardBarChartChartItem {
		return vs[0].([]DashboardBarChartChartItem)[vs[1].(int)]
	}).(DashboardBarChartChartItemOutput)
}

type DashboardBarChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardBarChartChartItemQueryFilterAssetInput is an input type that accepts DashboardBarChartChartItemQueryFilterAssetArgs and DashboardBarChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardBarChartChartItemQueryFilterAssetInput` via:
//
//	DashboardBarChartChartItemQueryFilterAssetArgs{...}
type DashboardBarChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardBarChartChartItemQueryFilterAssetOutput() DashboardBarChartChartItemQueryFilterAssetOutput
	ToDashboardBarChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardBarChartChartItemQueryFilterAssetOutput
}

type DashboardBarChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardBarChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBarChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardBarChartChartItemQueryFilterAssetArgs) ToDashboardBarChartChartItemQueryFilterAssetOutput() DashboardBarChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardBarChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardBarChartChartItemQueryFilterAssetArgs) ToDashboardBarChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardBarChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBarChartChartItemQueryFilterAssetOutput)
}

type DashboardBarChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardBarChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBarChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardBarChartChartItemQueryFilterAssetOutput) ToDashboardBarChartChartItemQueryFilterAssetOutput() DashboardBarChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardBarChartChartItemQueryFilterAssetOutput) ToDashboardBarChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardBarChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardBarChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBarChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardBarChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBarChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardBarChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardBarChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardBarChartChartItemQueryFilterAttributeArgs and DashboardBarChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardBarChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardBarChartChartItemQueryFilterAttributeArgs{...}
type DashboardBarChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardBarChartChartItemQueryFilterAttributeOutput() DashboardBarChartChartItemQueryFilterAttributeOutput
	ToDashboardBarChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardBarChartChartItemQueryFilterAttributeOutput
}

type DashboardBarChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardBarChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBarChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardBarChartChartItemQueryFilterAttributeArgs) ToDashboardBarChartChartItemQueryFilterAttributeOutput() DashboardBarChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardBarChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardBarChartChartItemQueryFilterAttributeArgs) ToDashboardBarChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardBarChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBarChartChartItemQueryFilterAttributeOutput)
}

type DashboardBarChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardBarChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBarChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardBarChartChartItemQueryFilterAttributeOutput) ToDashboardBarChartChartItemQueryFilterAttributeOutput() DashboardBarChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardBarChartChartItemQueryFilterAttributeOutput) ToDashboardBarChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardBarChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardBarChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBarChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardBarChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBarChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardBarChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardBarChartThresholdInput is an input type that accepts DashboardBarChartThresholdArgs and DashboardBarChartThresholdOutput values.
// You can construct a concrete instance of `DashboardBarChartThresholdInput` via:
//
//	DashboardBarChartThresholdArgs{...}
type DashboardBarChartThresholdInput interface {
	pulumi.Input

	ToDashboardBarChartThresholdOutput() DashboardBarChartThresholdOutput
	ToDashboardBarChartThresholdOutputWithContext(context.Context) DashboardBarChartThresholdOutput
}

type DashboardBarChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardBarChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBarChartThreshold)(nil)).Elem()
}

func (i DashboardBarChartThresholdArgs) ToDashboardBarChartThresholdOutput() DashboardBarChartThresholdOutput {
	return i.ToDashboardBarChartThresholdOutputWithContext(context.Background())
}

func (i DashboardBarChartThresholdArgs) ToDashboardBarChartThresholdOutputWithContext(ctx context.Context) DashboardBarChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBarChartThresholdOutput)
}

// DashboardBarChartThresholdArrayInput is an input type that accepts DashboardBarChartThresholdArray and DashboardBarChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardBarChartThresholdArrayInput` via:
//
//	DashboardBarChartThresholdArray{ DashboardBarChartThresholdArgs{...} }
type DashboardBarChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardBarChartThresholdArrayOutput() DashboardBarChartThresholdArrayOutput
	ToDashboardBarChartThresholdArrayOutputWithContext(context.Context) DashboardBarChartThresholdArrayOutput
}

type DashboardBarChartThresholdArray []DashboardBarChartThresholdInput

func (DashboardBarChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBarChartThreshold)(nil)).Elem()
}

func (i DashboardBarChartThresholdArray) ToDashboardBarChartThresholdArrayOutput() DashboardBarChartThresholdArrayOutput {
	return i.ToDashboardBarChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardBarChartThresholdArray) ToDashboardBarChartThresholdArrayOutputWithContext(ctx context.Context) DashboardBarChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBarChartThresholdArrayOutput)
}

type DashboardBarChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardBarChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBarChartThreshold)(nil)).Elem()
}

func (o DashboardBarChartThresholdOutput) ToDashboardBarChartThresholdOutput() DashboardBarChartThresholdOutput {
	return o
}

func (o DashboardBarChartThresholdOutput) ToDashboardBarChartThresholdOutputWithContext(ctx context.Context) DashboardBarChartThresholdOutput {
	return o
}

func (o DashboardBarChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBarChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardBarChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBarChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardBarChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardBarChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardBarChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardBarChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBarChartThreshold)(nil)).Elem()
}

func (o DashboardBarChartThresholdArrayOutput) ToDashboardBarChartThresholdArrayOutput() DashboardBarChartThresholdArrayOutput {
	return o
}

func (o DashboardBarChartThresholdArrayOutput) ToDashboardBarChartThresholdArrayOutputWithContext(ctx context.Context) DashboardBarChartThresholdArrayOutput {
	return o
}

func (o DashboardBarChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardBarChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardBarChartThreshold {
		return vs[0].([]DashboardBarChartThreshold)[vs[1].(int)]
	}).(DashboardBarChartThresholdOutput)
}

type DashboardBarChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardBarChartValueMappingInput is an input type that accepts DashboardBarChartValueMappingArgs and DashboardBarChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardBarChartValueMappingInput` via:
//
//	DashboardBarChartValueMappingArgs{...}
type DashboardBarChartValueMappingInput interface {
	pulumi.Input

	ToDashboardBarChartValueMappingOutput() DashboardBarChartValueMappingOutput
	ToDashboardBarChartValueMappingOutputWithContext(context.Context) DashboardBarChartValueMappingOutput
}

type DashboardBarChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardBarChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBarChartValueMapping)(nil)).Elem()
}

func (i DashboardBarChartValueMappingArgs) ToDashboardBarChartValueMappingOutput() DashboardBarChartValueMappingOutput {
	return i.ToDashboardBarChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardBarChartValueMappingArgs) ToDashboardBarChartValueMappingOutputWithContext(ctx context.Context) DashboardBarChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBarChartValueMappingOutput)
}

// DashboardBarChartValueMappingArrayInput is an input type that accepts DashboardBarChartValueMappingArray and DashboardBarChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardBarChartValueMappingArrayInput` via:
//
//	DashboardBarChartValueMappingArray{ DashboardBarChartValueMappingArgs{...} }
type DashboardBarChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardBarChartValueMappingArrayOutput() DashboardBarChartValueMappingArrayOutput
	ToDashboardBarChartValueMappingArrayOutputWithContext(context.Context) DashboardBarChartValueMappingArrayOutput
}

type DashboardBarChartValueMappingArray []DashboardBarChartValueMappingInput

func (DashboardBarChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBarChartValueMapping)(nil)).Elem()
}

func (i DashboardBarChartValueMappingArray) ToDashboardBarChartValueMappingArrayOutput() DashboardBarChartValueMappingArrayOutput {
	return i.ToDashboardBarChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardBarChartValueMappingArray) ToDashboardBarChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardBarChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBarChartValueMappingArrayOutput)
}

type DashboardBarChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardBarChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBarChartValueMapping)(nil)).Elem()
}

func (o DashboardBarChartValueMappingOutput) ToDashboardBarChartValueMappingOutput() DashboardBarChartValueMappingOutput {
	return o
}

func (o DashboardBarChartValueMappingOutput) ToDashboardBarChartValueMappingOutputWithContext(ctx context.Context) DashboardBarChartValueMappingOutput {
	return o
}

func (o DashboardBarChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBarChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardBarChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBarChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardBarChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardBarChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardBarChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBarChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardBarChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardBarChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBarChartValueMapping)(nil)).Elem()
}

func (o DashboardBarChartValueMappingArrayOutput) ToDashboardBarChartValueMappingArrayOutput() DashboardBarChartValueMappingArrayOutput {
	return o
}

func (o DashboardBarChartValueMappingArrayOutput) ToDashboardBarChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardBarChartValueMappingArrayOutput {
	return o
}

func (o DashboardBarChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardBarChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardBarChartValueMapping {
		return vs[0].([]DashboardBarChartValueMapping)[vs[1].(int)]
	}).(DashboardBarChartValueMappingOutput)
}

type DashboardBargaugeChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardBargaugeChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardBargaugeChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                             `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                             `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                                `pulumi:"queryLimit"`
	QueryPlain           string                                              `pulumi:"queryPlain"`
	QuerySortDirection   *int                                                `pulumi:"querySortDirection"`
	RefId                string                                              `pulumi:"refId"`
	Type                 string                                              `pulumi:"type"`
}

// DashboardBargaugeChartChartItemInput is an input type that accepts DashboardBargaugeChartChartItemArgs and DashboardBargaugeChartChartItemOutput values.
// You can construct a concrete instance of `DashboardBargaugeChartChartItemInput` via:
//
//	DashboardBargaugeChartChartItemArgs{...}
type DashboardBargaugeChartChartItemInput interface {
	pulumi.Input

	ToDashboardBargaugeChartChartItemOutput() DashboardBargaugeChartChartItemOutput
	ToDashboardBargaugeChartChartItemOutputWithContext(context.Context) DashboardBargaugeChartChartItemOutput
}

type DashboardBargaugeChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardBargaugeChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardBargaugeChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                    `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                    `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                       `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                       `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                       `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                       `pulumi:"refId"`
	Type                 pulumi.StringInput                                       `pulumi:"type"`
}

func (DashboardBargaugeChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBargaugeChartChartItem)(nil)).Elem()
}

func (i DashboardBargaugeChartChartItemArgs) ToDashboardBargaugeChartChartItemOutput() DashboardBargaugeChartChartItemOutput {
	return i.ToDashboardBargaugeChartChartItemOutputWithContext(context.Background())
}

func (i DashboardBargaugeChartChartItemArgs) ToDashboardBargaugeChartChartItemOutputWithContext(ctx context.Context) DashboardBargaugeChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBargaugeChartChartItemOutput)
}

// DashboardBargaugeChartChartItemArrayInput is an input type that accepts DashboardBargaugeChartChartItemArray and DashboardBargaugeChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardBargaugeChartChartItemArrayInput` via:
//
//	DashboardBargaugeChartChartItemArray{ DashboardBargaugeChartChartItemArgs{...} }
type DashboardBargaugeChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardBargaugeChartChartItemArrayOutput() DashboardBargaugeChartChartItemArrayOutput
	ToDashboardBargaugeChartChartItemArrayOutputWithContext(context.Context) DashboardBargaugeChartChartItemArrayOutput
}

type DashboardBargaugeChartChartItemArray []DashboardBargaugeChartChartItemInput

func (DashboardBargaugeChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBargaugeChartChartItem)(nil)).Elem()
}

func (i DashboardBargaugeChartChartItemArray) ToDashboardBargaugeChartChartItemArrayOutput() DashboardBargaugeChartChartItemArrayOutput {
	return i.ToDashboardBargaugeChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardBargaugeChartChartItemArray) ToDashboardBargaugeChartChartItemArrayOutputWithContext(ctx context.Context) DashboardBargaugeChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBargaugeChartChartItemArrayOutput)
}

type DashboardBargaugeChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardBargaugeChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBargaugeChartChartItem)(nil)).Elem()
}

func (o DashboardBargaugeChartChartItemOutput) ToDashboardBargaugeChartChartItemOutput() DashboardBargaugeChartChartItemOutput {
	return o
}

func (o DashboardBargaugeChartChartItemOutput) ToDashboardBargaugeChartChartItemOutputWithContext(ctx context.Context) DashboardBargaugeChartChartItemOutput {
	return o
}

func (o DashboardBargaugeChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardBargaugeChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardBargaugeChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardBargaugeChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardBargaugeChartChartItemOutput) QueryFilterAsset() DashboardBargaugeChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) DashboardBargaugeChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardBargaugeChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardBargaugeChartChartItemOutput) QueryFilterAttribute() DashboardBargaugeChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) DashboardBargaugeChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardBargaugeChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardBargaugeChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardBargaugeChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardBargaugeChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardBargaugeChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardBargaugeChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardBargaugeChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardBargaugeChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardBargaugeChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardBargaugeChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBargaugeChartChartItem)(nil)).Elem()
}

func (o DashboardBargaugeChartChartItemArrayOutput) ToDashboardBargaugeChartChartItemArrayOutput() DashboardBargaugeChartChartItemArrayOutput {
	return o
}

func (o DashboardBargaugeChartChartItemArrayOutput) ToDashboardBargaugeChartChartItemArrayOutputWithContext(ctx context.Context) DashboardBargaugeChartChartItemArrayOutput {
	return o
}

func (o DashboardBargaugeChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardBargaugeChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardBargaugeChartChartItem {
		return vs[0].([]DashboardBargaugeChartChartItem)[vs[1].(int)]
	}).(DashboardBargaugeChartChartItemOutput)
}

type DashboardBargaugeChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardBargaugeChartChartItemQueryFilterAssetInput is an input type that accepts DashboardBargaugeChartChartItemQueryFilterAssetArgs and DashboardBargaugeChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardBargaugeChartChartItemQueryFilterAssetInput` via:
//
//	DashboardBargaugeChartChartItemQueryFilterAssetArgs{...}
type DashboardBargaugeChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardBargaugeChartChartItemQueryFilterAssetOutput() DashboardBargaugeChartChartItemQueryFilterAssetOutput
	ToDashboardBargaugeChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardBargaugeChartChartItemQueryFilterAssetOutput
}

type DashboardBargaugeChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardBargaugeChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBargaugeChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardBargaugeChartChartItemQueryFilterAssetArgs) ToDashboardBargaugeChartChartItemQueryFilterAssetOutput() DashboardBargaugeChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardBargaugeChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardBargaugeChartChartItemQueryFilterAssetArgs) ToDashboardBargaugeChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardBargaugeChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBargaugeChartChartItemQueryFilterAssetOutput)
}

type DashboardBargaugeChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardBargaugeChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBargaugeChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardBargaugeChartChartItemQueryFilterAssetOutput) ToDashboardBargaugeChartChartItemQueryFilterAssetOutput() DashboardBargaugeChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardBargaugeChartChartItemQueryFilterAssetOutput) ToDashboardBargaugeChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardBargaugeChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardBargaugeChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardBargaugeChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardBargaugeChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardBargaugeChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardBargaugeChartChartItemQueryFilterAttributeArgs and DashboardBargaugeChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardBargaugeChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardBargaugeChartChartItemQueryFilterAttributeArgs{...}
type DashboardBargaugeChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardBargaugeChartChartItemQueryFilterAttributeOutput() DashboardBargaugeChartChartItemQueryFilterAttributeOutput
	ToDashboardBargaugeChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardBargaugeChartChartItemQueryFilterAttributeOutput
}

type DashboardBargaugeChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardBargaugeChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBargaugeChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardBargaugeChartChartItemQueryFilterAttributeArgs) ToDashboardBargaugeChartChartItemQueryFilterAttributeOutput() DashboardBargaugeChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardBargaugeChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardBargaugeChartChartItemQueryFilterAttributeArgs) ToDashboardBargaugeChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardBargaugeChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBargaugeChartChartItemQueryFilterAttributeOutput)
}

type DashboardBargaugeChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardBargaugeChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBargaugeChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardBargaugeChartChartItemQueryFilterAttributeOutput) ToDashboardBargaugeChartChartItemQueryFilterAttributeOutput() DashboardBargaugeChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardBargaugeChartChartItemQueryFilterAttributeOutput) ToDashboardBargaugeChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardBargaugeChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardBargaugeChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardBargaugeChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardBargaugeChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardBargaugeChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardBargaugeChartThresholdInput is an input type that accepts DashboardBargaugeChartThresholdArgs and DashboardBargaugeChartThresholdOutput values.
// You can construct a concrete instance of `DashboardBargaugeChartThresholdInput` via:
//
//	DashboardBargaugeChartThresholdArgs{...}
type DashboardBargaugeChartThresholdInput interface {
	pulumi.Input

	ToDashboardBargaugeChartThresholdOutput() DashboardBargaugeChartThresholdOutput
	ToDashboardBargaugeChartThresholdOutputWithContext(context.Context) DashboardBargaugeChartThresholdOutput
}

type DashboardBargaugeChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardBargaugeChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBargaugeChartThreshold)(nil)).Elem()
}

func (i DashboardBargaugeChartThresholdArgs) ToDashboardBargaugeChartThresholdOutput() DashboardBargaugeChartThresholdOutput {
	return i.ToDashboardBargaugeChartThresholdOutputWithContext(context.Background())
}

func (i DashboardBargaugeChartThresholdArgs) ToDashboardBargaugeChartThresholdOutputWithContext(ctx context.Context) DashboardBargaugeChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBargaugeChartThresholdOutput)
}

// DashboardBargaugeChartThresholdArrayInput is an input type that accepts DashboardBargaugeChartThresholdArray and DashboardBargaugeChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardBargaugeChartThresholdArrayInput` via:
//
//	DashboardBargaugeChartThresholdArray{ DashboardBargaugeChartThresholdArgs{...} }
type DashboardBargaugeChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardBargaugeChartThresholdArrayOutput() DashboardBargaugeChartThresholdArrayOutput
	ToDashboardBargaugeChartThresholdArrayOutputWithContext(context.Context) DashboardBargaugeChartThresholdArrayOutput
}

type DashboardBargaugeChartThresholdArray []DashboardBargaugeChartThresholdInput

func (DashboardBargaugeChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBargaugeChartThreshold)(nil)).Elem()
}

func (i DashboardBargaugeChartThresholdArray) ToDashboardBargaugeChartThresholdArrayOutput() DashboardBargaugeChartThresholdArrayOutput {
	return i.ToDashboardBargaugeChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardBargaugeChartThresholdArray) ToDashboardBargaugeChartThresholdArrayOutputWithContext(ctx context.Context) DashboardBargaugeChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBargaugeChartThresholdArrayOutput)
}

type DashboardBargaugeChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardBargaugeChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBargaugeChartThreshold)(nil)).Elem()
}

func (o DashboardBargaugeChartThresholdOutput) ToDashboardBargaugeChartThresholdOutput() DashboardBargaugeChartThresholdOutput {
	return o
}

func (o DashboardBargaugeChartThresholdOutput) ToDashboardBargaugeChartThresholdOutputWithContext(ctx context.Context) DashboardBargaugeChartThresholdOutput {
	return o
}

func (o DashboardBargaugeChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBargaugeChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardBargaugeChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBargaugeChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardBargaugeChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardBargaugeChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardBargaugeChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardBargaugeChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBargaugeChartThreshold)(nil)).Elem()
}

func (o DashboardBargaugeChartThresholdArrayOutput) ToDashboardBargaugeChartThresholdArrayOutput() DashboardBargaugeChartThresholdArrayOutput {
	return o
}

func (o DashboardBargaugeChartThresholdArrayOutput) ToDashboardBargaugeChartThresholdArrayOutputWithContext(ctx context.Context) DashboardBargaugeChartThresholdArrayOutput {
	return o
}

func (o DashboardBargaugeChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardBargaugeChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardBargaugeChartThreshold {
		return vs[0].([]DashboardBargaugeChartThreshold)[vs[1].(int)]
	}).(DashboardBargaugeChartThresholdOutput)
}

type DashboardBargaugeChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardBargaugeChartValueMappingInput is an input type that accepts DashboardBargaugeChartValueMappingArgs and DashboardBargaugeChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardBargaugeChartValueMappingInput` via:
//
//	DashboardBargaugeChartValueMappingArgs{...}
type DashboardBargaugeChartValueMappingInput interface {
	pulumi.Input

	ToDashboardBargaugeChartValueMappingOutput() DashboardBargaugeChartValueMappingOutput
	ToDashboardBargaugeChartValueMappingOutputWithContext(context.Context) DashboardBargaugeChartValueMappingOutput
}

type DashboardBargaugeChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardBargaugeChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBargaugeChartValueMapping)(nil)).Elem()
}

func (i DashboardBargaugeChartValueMappingArgs) ToDashboardBargaugeChartValueMappingOutput() DashboardBargaugeChartValueMappingOutput {
	return i.ToDashboardBargaugeChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardBargaugeChartValueMappingArgs) ToDashboardBargaugeChartValueMappingOutputWithContext(ctx context.Context) DashboardBargaugeChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBargaugeChartValueMappingOutput)
}

// DashboardBargaugeChartValueMappingArrayInput is an input type that accepts DashboardBargaugeChartValueMappingArray and DashboardBargaugeChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardBargaugeChartValueMappingArrayInput` via:
//
//	DashboardBargaugeChartValueMappingArray{ DashboardBargaugeChartValueMappingArgs{...} }
type DashboardBargaugeChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardBargaugeChartValueMappingArrayOutput() DashboardBargaugeChartValueMappingArrayOutput
	ToDashboardBargaugeChartValueMappingArrayOutputWithContext(context.Context) DashboardBargaugeChartValueMappingArrayOutput
}

type DashboardBargaugeChartValueMappingArray []DashboardBargaugeChartValueMappingInput

func (DashboardBargaugeChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBargaugeChartValueMapping)(nil)).Elem()
}

func (i DashboardBargaugeChartValueMappingArray) ToDashboardBargaugeChartValueMappingArrayOutput() DashboardBargaugeChartValueMappingArrayOutput {
	return i.ToDashboardBargaugeChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardBargaugeChartValueMappingArray) ToDashboardBargaugeChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardBargaugeChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardBargaugeChartValueMappingArrayOutput)
}

type DashboardBargaugeChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardBargaugeChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardBargaugeChartValueMapping)(nil)).Elem()
}

func (o DashboardBargaugeChartValueMappingOutput) ToDashboardBargaugeChartValueMappingOutput() DashboardBargaugeChartValueMappingOutput {
	return o
}

func (o DashboardBargaugeChartValueMappingOutput) ToDashboardBargaugeChartValueMappingOutputWithContext(ctx context.Context) DashboardBargaugeChartValueMappingOutput {
	return o
}

func (o DashboardBargaugeChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBargaugeChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardBargaugeChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBargaugeChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardBargaugeChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardBargaugeChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardBargaugeChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardBargaugeChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardBargaugeChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardBargaugeChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardBargaugeChartValueMapping)(nil)).Elem()
}

func (o DashboardBargaugeChartValueMappingArrayOutput) ToDashboardBargaugeChartValueMappingArrayOutput() DashboardBargaugeChartValueMappingArrayOutput {
	return o
}

func (o DashboardBargaugeChartValueMappingArrayOutput) ToDashboardBargaugeChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardBargaugeChartValueMappingArrayOutput {
	return o
}

func (o DashboardBargaugeChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardBargaugeChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardBargaugeChartValueMapping {
		return vs[0].([]DashboardBargaugeChartValueMapping)[vs[1].(int)]
	}).(DashboardBargaugeChartValueMappingOutput)
}

type DashboardCommandlistChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardCommandlistChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardCommandlistChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                                `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                                `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                                   `pulumi:"queryLimit"`
	QueryPlain           string                                                 `pulumi:"queryPlain"`
	QuerySortDirection   *int                                                   `pulumi:"querySortDirection"`
	RefId                string                                                 `pulumi:"refId"`
	Type                 string                                                 `pulumi:"type"`
}

// DashboardCommandlistChartChartItemInput is an input type that accepts DashboardCommandlistChartChartItemArgs and DashboardCommandlistChartChartItemOutput values.
// You can construct a concrete instance of `DashboardCommandlistChartChartItemInput` via:
//
//	DashboardCommandlistChartChartItemArgs{...}
type DashboardCommandlistChartChartItemInput interface {
	pulumi.Input

	ToDashboardCommandlistChartChartItemOutput() DashboardCommandlistChartChartItemOutput
	ToDashboardCommandlistChartChartItemOutputWithContext(context.Context) DashboardCommandlistChartChartItemOutput
}

type DashboardCommandlistChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardCommandlistChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardCommandlistChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                       `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                       `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                          `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                          `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                          `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                          `pulumi:"refId"`
	Type                 pulumi.StringInput                                          `pulumi:"type"`
}

func (DashboardCommandlistChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardCommandlistChartChartItem)(nil)).Elem()
}

func (i DashboardCommandlistChartChartItemArgs) ToDashboardCommandlistChartChartItemOutput() DashboardCommandlistChartChartItemOutput {
	return i.ToDashboardCommandlistChartChartItemOutputWithContext(context.Background())
}

func (i DashboardCommandlistChartChartItemArgs) ToDashboardCommandlistChartChartItemOutputWithContext(ctx context.Context) DashboardCommandlistChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardCommandlistChartChartItemOutput)
}

// DashboardCommandlistChartChartItemArrayInput is an input type that accepts DashboardCommandlistChartChartItemArray and DashboardCommandlistChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardCommandlistChartChartItemArrayInput` via:
//
//	DashboardCommandlistChartChartItemArray{ DashboardCommandlistChartChartItemArgs{...} }
type DashboardCommandlistChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardCommandlistChartChartItemArrayOutput() DashboardCommandlistChartChartItemArrayOutput
	ToDashboardCommandlistChartChartItemArrayOutputWithContext(context.Context) DashboardCommandlistChartChartItemArrayOutput
}

type DashboardCommandlistChartChartItemArray []DashboardCommandlistChartChartItemInput

func (DashboardCommandlistChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardCommandlistChartChartItem)(nil)).Elem()
}

func (i DashboardCommandlistChartChartItemArray) ToDashboardCommandlistChartChartItemArrayOutput() DashboardCommandlistChartChartItemArrayOutput {
	return i.ToDashboardCommandlistChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardCommandlistChartChartItemArray) ToDashboardCommandlistChartChartItemArrayOutputWithContext(ctx context.Context) DashboardCommandlistChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardCommandlistChartChartItemArrayOutput)
}

type DashboardCommandlistChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardCommandlistChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardCommandlistChartChartItem)(nil)).Elem()
}

func (o DashboardCommandlistChartChartItemOutput) ToDashboardCommandlistChartChartItemOutput() DashboardCommandlistChartChartItemOutput {
	return o
}

func (o DashboardCommandlistChartChartItemOutput) ToDashboardCommandlistChartChartItemOutputWithContext(ctx context.Context) DashboardCommandlistChartChartItemOutput {
	return o
}

func (o DashboardCommandlistChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardCommandlistChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardCommandlistChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardCommandlistChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardCommandlistChartChartItemOutput) QueryFilterAsset() DashboardCommandlistChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) DashboardCommandlistChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardCommandlistChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardCommandlistChartChartItemOutput) QueryFilterAttribute() DashboardCommandlistChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) DashboardCommandlistChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardCommandlistChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardCommandlistChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardCommandlistChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardCommandlistChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardCommandlistChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardCommandlistChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardCommandlistChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardCommandlistChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardCommandlistChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardCommandlistChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardCommandlistChartChartItem)(nil)).Elem()
}

func (o DashboardCommandlistChartChartItemArrayOutput) ToDashboardCommandlistChartChartItemArrayOutput() DashboardCommandlistChartChartItemArrayOutput {
	return o
}

func (o DashboardCommandlistChartChartItemArrayOutput) ToDashboardCommandlistChartChartItemArrayOutputWithContext(ctx context.Context) DashboardCommandlistChartChartItemArrayOutput {
	return o
}

func (o DashboardCommandlistChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardCommandlistChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardCommandlistChartChartItem {
		return vs[0].([]DashboardCommandlistChartChartItem)[vs[1].(int)]
	}).(DashboardCommandlistChartChartItemOutput)
}

type DashboardCommandlistChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardCommandlistChartChartItemQueryFilterAssetInput is an input type that accepts DashboardCommandlistChartChartItemQueryFilterAssetArgs and DashboardCommandlistChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardCommandlistChartChartItemQueryFilterAssetInput` via:
//
//	DashboardCommandlistChartChartItemQueryFilterAssetArgs{...}
type DashboardCommandlistChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardCommandlistChartChartItemQueryFilterAssetOutput() DashboardCommandlistChartChartItemQueryFilterAssetOutput
	ToDashboardCommandlistChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardCommandlistChartChartItemQueryFilterAssetOutput
}

type DashboardCommandlistChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardCommandlistChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardCommandlistChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardCommandlistChartChartItemQueryFilterAssetArgs) ToDashboardCommandlistChartChartItemQueryFilterAssetOutput() DashboardCommandlistChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardCommandlistChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardCommandlistChartChartItemQueryFilterAssetArgs) ToDashboardCommandlistChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardCommandlistChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardCommandlistChartChartItemQueryFilterAssetOutput)
}

type DashboardCommandlistChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardCommandlistChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardCommandlistChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardCommandlistChartChartItemQueryFilterAssetOutput) ToDashboardCommandlistChartChartItemQueryFilterAssetOutput() DashboardCommandlistChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardCommandlistChartChartItemQueryFilterAssetOutput) ToDashboardCommandlistChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardCommandlistChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardCommandlistChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardCommandlistChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardCommandlistChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardCommandlistChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardCommandlistChartChartItemQueryFilterAttributeArgs and DashboardCommandlistChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardCommandlistChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardCommandlistChartChartItemQueryFilterAttributeArgs{...}
type DashboardCommandlistChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardCommandlistChartChartItemQueryFilterAttributeOutput() DashboardCommandlistChartChartItemQueryFilterAttributeOutput
	ToDashboardCommandlistChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardCommandlistChartChartItemQueryFilterAttributeOutput
}

type DashboardCommandlistChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardCommandlistChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardCommandlistChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardCommandlistChartChartItemQueryFilterAttributeArgs) ToDashboardCommandlistChartChartItemQueryFilterAttributeOutput() DashboardCommandlistChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardCommandlistChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardCommandlistChartChartItemQueryFilterAttributeArgs) ToDashboardCommandlistChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardCommandlistChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardCommandlistChartChartItemQueryFilterAttributeOutput)
}

type DashboardCommandlistChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardCommandlistChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardCommandlistChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardCommandlistChartChartItemQueryFilterAttributeOutput) ToDashboardCommandlistChartChartItemQueryFilterAttributeOutput() DashboardCommandlistChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardCommandlistChartChartItemQueryFilterAttributeOutput) ToDashboardCommandlistChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardCommandlistChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardCommandlistChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardCommandlistChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardCommandlistChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardCommandlistChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardCommandlistChartThresholdInput is an input type that accepts DashboardCommandlistChartThresholdArgs and DashboardCommandlistChartThresholdOutput values.
// You can construct a concrete instance of `DashboardCommandlistChartThresholdInput` via:
//
//	DashboardCommandlistChartThresholdArgs{...}
type DashboardCommandlistChartThresholdInput interface {
	pulumi.Input

	ToDashboardCommandlistChartThresholdOutput() DashboardCommandlistChartThresholdOutput
	ToDashboardCommandlistChartThresholdOutputWithContext(context.Context) DashboardCommandlistChartThresholdOutput
}

type DashboardCommandlistChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardCommandlistChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardCommandlistChartThreshold)(nil)).Elem()
}

func (i DashboardCommandlistChartThresholdArgs) ToDashboardCommandlistChartThresholdOutput() DashboardCommandlistChartThresholdOutput {
	return i.ToDashboardCommandlistChartThresholdOutputWithContext(context.Background())
}

func (i DashboardCommandlistChartThresholdArgs) ToDashboardCommandlistChartThresholdOutputWithContext(ctx context.Context) DashboardCommandlistChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardCommandlistChartThresholdOutput)
}

// DashboardCommandlistChartThresholdArrayInput is an input type that accepts DashboardCommandlistChartThresholdArray and DashboardCommandlistChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardCommandlistChartThresholdArrayInput` via:
//
//	DashboardCommandlistChartThresholdArray{ DashboardCommandlistChartThresholdArgs{...} }
type DashboardCommandlistChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardCommandlistChartThresholdArrayOutput() DashboardCommandlistChartThresholdArrayOutput
	ToDashboardCommandlistChartThresholdArrayOutputWithContext(context.Context) DashboardCommandlistChartThresholdArrayOutput
}

type DashboardCommandlistChartThresholdArray []DashboardCommandlistChartThresholdInput

func (DashboardCommandlistChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardCommandlistChartThreshold)(nil)).Elem()
}

func (i DashboardCommandlistChartThresholdArray) ToDashboardCommandlistChartThresholdArrayOutput() DashboardCommandlistChartThresholdArrayOutput {
	return i.ToDashboardCommandlistChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardCommandlistChartThresholdArray) ToDashboardCommandlistChartThresholdArrayOutputWithContext(ctx context.Context) DashboardCommandlistChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardCommandlistChartThresholdArrayOutput)
}

type DashboardCommandlistChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardCommandlistChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardCommandlistChartThreshold)(nil)).Elem()
}

func (o DashboardCommandlistChartThresholdOutput) ToDashboardCommandlistChartThresholdOutput() DashboardCommandlistChartThresholdOutput {
	return o
}

func (o DashboardCommandlistChartThresholdOutput) ToDashboardCommandlistChartThresholdOutputWithContext(ctx context.Context) DashboardCommandlistChartThresholdOutput {
	return o
}

func (o DashboardCommandlistChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardCommandlistChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardCommandlistChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardCommandlistChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardCommandlistChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardCommandlistChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardCommandlistChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardCommandlistChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardCommandlistChartThreshold)(nil)).Elem()
}

func (o DashboardCommandlistChartThresholdArrayOutput) ToDashboardCommandlistChartThresholdArrayOutput() DashboardCommandlistChartThresholdArrayOutput {
	return o
}

func (o DashboardCommandlistChartThresholdArrayOutput) ToDashboardCommandlistChartThresholdArrayOutputWithContext(ctx context.Context) DashboardCommandlistChartThresholdArrayOutput {
	return o
}

func (o DashboardCommandlistChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardCommandlistChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardCommandlistChartThreshold {
		return vs[0].([]DashboardCommandlistChartThreshold)[vs[1].(int)]
	}).(DashboardCommandlistChartThresholdOutput)
}

type DashboardCommandlistChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardCommandlistChartValueMappingInput is an input type that accepts DashboardCommandlistChartValueMappingArgs and DashboardCommandlistChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardCommandlistChartValueMappingInput` via:
//
//	DashboardCommandlistChartValueMappingArgs{...}
type DashboardCommandlistChartValueMappingInput interface {
	pulumi.Input

	ToDashboardCommandlistChartValueMappingOutput() DashboardCommandlistChartValueMappingOutput
	ToDashboardCommandlistChartValueMappingOutputWithContext(context.Context) DashboardCommandlistChartValueMappingOutput
}

type DashboardCommandlistChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardCommandlistChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardCommandlistChartValueMapping)(nil)).Elem()
}

func (i DashboardCommandlistChartValueMappingArgs) ToDashboardCommandlistChartValueMappingOutput() DashboardCommandlistChartValueMappingOutput {
	return i.ToDashboardCommandlistChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardCommandlistChartValueMappingArgs) ToDashboardCommandlistChartValueMappingOutputWithContext(ctx context.Context) DashboardCommandlistChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardCommandlistChartValueMappingOutput)
}

// DashboardCommandlistChartValueMappingArrayInput is an input type that accepts DashboardCommandlistChartValueMappingArray and DashboardCommandlistChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardCommandlistChartValueMappingArrayInput` via:
//
//	DashboardCommandlistChartValueMappingArray{ DashboardCommandlistChartValueMappingArgs{...} }
type DashboardCommandlistChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardCommandlistChartValueMappingArrayOutput() DashboardCommandlistChartValueMappingArrayOutput
	ToDashboardCommandlistChartValueMappingArrayOutputWithContext(context.Context) DashboardCommandlistChartValueMappingArrayOutput
}

type DashboardCommandlistChartValueMappingArray []DashboardCommandlistChartValueMappingInput

func (DashboardCommandlistChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardCommandlistChartValueMapping)(nil)).Elem()
}

func (i DashboardCommandlistChartValueMappingArray) ToDashboardCommandlistChartValueMappingArrayOutput() DashboardCommandlistChartValueMappingArrayOutput {
	return i.ToDashboardCommandlistChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardCommandlistChartValueMappingArray) ToDashboardCommandlistChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardCommandlistChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardCommandlistChartValueMappingArrayOutput)
}

type DashboardCommandlistChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardCommandlistChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardCommandlistChartValueMapping)(nil)).Elem()
}

func (o DashboardCommandlistChartValueMappingOutput) ToDashboardCommandlistChartValueMappingOutput() DashboardCommandlistChartValueMappingOutput {
	return o
}

func (o DashboardCommandlistChartValueMappingOutput) ToDashboardCommandlistChartValueMappingOutputWithContext(ctx context.Context) DashboardCommandlistChartValueMappingOutput {
	return o
}

func (o DashboardCommandlistChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardCommandlistChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardCommandlistChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardCommandlistChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardCommandlistChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardCommandlistChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardCommandlistChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardCommandlistChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardCommandlistChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardCommandlistChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardCommandlistChartValueMapping)(nil)).Elem()
}

func (o DashboardCommandlistChartValueMappingArrayOutput) ToDashboardCommandlistChartValueMappingArrayOutput() DashboardCommandlistChartValueMappingArrayOutput {
	return o
}

func (o DashboardCommandlistChartValueMappingArrayOutput) ToDashboardCommandlistChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardCommandlistChartValueMappingArrayOutput {
	return o
}

func (o DashboardCommandlistChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardCommandlistChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardCommandlistChartValueMapping {
		return vs[0].([]DashboardCommandlistChartValueMapping)[vs[1].(int)]
	}).(DashboardCommandlistChartValueMappingOutput)
}

type DashboardGaugeChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardGaugeChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardGaugeChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                          `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                          `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                             `pulumi:"queryLimit"`
	QueryPlain           string                                           `pulumi:"queryPlain"`
	QuerySortDirection   *int                                             `pulumi:"querySortDirection"`
	RefId                string                                           `pulumi:"refId"`
	Type                 string                                           `pulumi:"type"`
}

// DashboardGaugeChartChartItemInput is an input type that accepts DashboardGaugeChartChartItemArgs and DashboardGaugeChartChartItemOutput values.
// You can construct a concrete instance of `DashboardGaugeChartChartItemInput` via:
//
//	DashboardGaugeChartChartItemArgs{...}
type DashboardGaugeChartChartItemInput interface {
	pulumi.Input

	ToDashboardGaugeChartChartItemOutput() DashboardGaugeChartChartItemOutput
	ToDashboardGaugeChartChartItemOutputWithContext(context.Context) DashboardGaugeChartChartItemOutput
}

type DashboardGaugeChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardGaugeChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardGaugeChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                 `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                 `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                    `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                    `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                    `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                    `pulumi:"refId"`
	Type                 pulumi.StringInput                                    `pulumi:"type"`
}

func (DashboardGaugeChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGaugeChartChartItem)(nil)).Elem()
}

func (i DashboardGaugeChartChartItemArgs) ToDashboardGaugeChartChartItemOutput() DashboardGaugeChartChartItemOutput {
	return i.ToDashboardGaugeChartChartItemOutputWithContext(context.Background())
}

func (i DashboardGaugeChartChartItemArgs) ToDashboardGaugeChartChartItemOutputWithContext(ctx context.Context) DashboardGaugeChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGaugeChartChartItemOutput)
}

// DashboardGaugeChartChartItemArrayInput is an input type that accepts DashboardGaugeChartChartItemArray and DashboardGaugeChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardGaugeChartChartItemArrayInput` via:
//
//	DashboardGaugeChartChartItemArray{ DashboardGaugeChartChartItemArgs{...} }
type DashboardGaugeChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardGaugeChartChartItemArrayOutput() DashboardGaugeChartChartItemArrayOutput
	ToDashboardGaugeChartChartItemArrayOutputWithContext(context.Context) DashboardGaugeChartChartItemArrayOutput
}

type DashboardGaugeChartChartItemArray []DashboardGaugeChartChartItemInput

func (DashboardGaugeChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGaugeChartChartItem)(nil)).Elem()
}

func (i DashboardGaugeChartChartItemArray) ToDashboardGaugeChartChartItemArrayOutput() DashboardGaugeChartChartItemArrayOutput {
	return i.ToDashboardGaugeChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardGaugeChartChartItemArray) ToDashboardGaugeChartChartItemArrayOutputWithContext(ctx context.Context) DashboardGaugeChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGaugeChartChartItemArrayOutput)
}

type DashboardGaugeChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardGaugeChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGaugeChartChartItem)(nil)).Elem()
}

func (o DashboardGaugeChartChartItemOutput) ToDashboardGaugeChartChartItemOutput() DashboardGaugeChartChartItemOutput {
	return o
}

func (o DashboardGaugeChartChartItemOutput) ToDashboardGaugeChartChartItemOutputWithContext(ctx context.Context) DashboardGaugeChartChartItemOutput {
	return o
}

func (o DashboardGaugeChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardGaugeChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardGaugeChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardGaugeChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardGaugeChartChartItemOutput) QueryFilterAsset() DashboardGaugeChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) DashboardGaugeChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardGaugeChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardGaugeChartChartItemOutput) QueryFilterAttribute() DashboardGaugeChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) DashboardGaugeChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardGaugeChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardGaugeChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardGaugeChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardGaugeChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardGaugeChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardGaugeChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardGaugeChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardGaugeChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardGaugeChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardGaugeChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGaugeChartChartItem)(nil)).Elem()
}

func (o DashboardGaugeChartChartItemArrayOutput) ToDashboardGaugeChartChartItemArrayOutput() DashboardGaugeChartChartItemArrayOutput {
	return o
}

func (o DashboardGaugeChartChartItemArrayOutput) ToDashboardGaugeChartChartItemArrayOutputWithContext(ctx context.Context) DashboardGaugeChartChartItemArrayOutput {
	return o
}

func (o DashboardGaugeChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardGaugeChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGaugeChartChartItem {
		return vs[0].([]DashboardGaugeChartChartItem)[vs[1].(int)]
	}).(DashboardGaugeChartChartItemOutput)
}

type DashboardGaugeChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardGaugeChartChartItemQueryFilterAssetInput is an input type that accepts DashboardGaugeChartChartItemQueryFilterAssetArgs and DashboardGaugeChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardGaugeChartChartItemQueryFilterAssetInput` via:
//
//	DashboardGaugeChartChartItemQueryFilterAssetArgs{...}
type DashboardGaugeChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardGaugeChartChartItemQueryFilterAssetOutput() DashboardGaugeChartChartItemQueryFilterAssetOutput
	ToDashboardGaugeChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardGaugeChartChartItemQueryFilterAssetOutput
}

type DashboardGaugeChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardGaugeChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGaugeChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardGaugeChartChartItemQueryFilterAssetArgs) ToDashboardGaugeChartChartItemQueryFilterAssetOutput() DashboardGaugeChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardGaugeChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardGaugeChartChartItemQueryFilterAssetArgs) ToDashboardGaugeChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardGaugeChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGaugeChartChartItemQueryFilterAssetOutput)
}

type DashboardGaugeChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardGaugeChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGaugeChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardGaugeChartChartItemQueryFilterAssetOutput) ToDashboardGaugeChartChartItemQueryFilterAssetOutput() DashboardGaugeChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardGaugeChartChartItemQueryFilterAssetOutput) ToDashboardGaugeChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardGaugeChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardGaugeChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardGaugeChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardGaugeChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardGaugeChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardGaugeChartChartItemQueryFilterAttributeArgs and DashboardGaugeChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardGaugeChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardGaugeChartChartItemQueryFilterAttributeArgs{...}
type DashboardGaugeChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardGaugeChartChartItemQueryFilterAttributeOutput() DashboardGaugeChartChartItemQueryFilterAttributeOutput
	ToDashboardGaugeChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardGaugeChartChartItemQueryFilterAttributeOutput
}

type DashboardGaugeChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardGaugeChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGaugeChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardGaugeChartChartItemQueryFilterAttributeArgs) ToDashboardGaugeChartChartItemQueryFilterAttributeOutput() DashboardGaugeChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardGaugeChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardGaugeChartChartItemQueryFilterAttributeArgs) ToDashboardGaugeChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardGaugeChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGaugeChartChartItemQueryFilterAttributeOutput)
}

type DashboardGaugeChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardGaugeChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGaugeChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardGaugeChartChartItemQueryFilterAttributeOutput) ToDashboardGaugeChartChartItemQueryFilterAttributeOutput() DashboardGaugeChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardGaugeChartChartItemQueryFilterAttributeOutput) ToDashboardGaugeChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardGaugeChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardGaugeChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardGaugeChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardGaugeChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardGaugeChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardGaugeChartThresholdInput is an input type that accepts DashboardGaugeChartThresholdArgs and DashboardGaugeChartThresholdOutput values.
// You can construct a concrete instance of `DashboardGaugeChartThresholdInput` via:
//
//	DashboardGaugeChartThresholdArgs{...}
type DashboardGaugeChartThresholdInput interface {
	pulumi.Input

	ToDashboardGaugeChartThresholdOutput() DashboardGaugeChartThresholdOutput
	ToDashboardGaugeChartThresholdOutputWithContext(context.Context) DashboardGaugeChartThresholdOutput
}

type DashboardGaugeChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardGaugeChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGaugeChartThreshold)(nil)).Elem()
}

func (i DashboardGaugeChartThresholdArgs) ToDashboardGaugeChartThresholdOutput() DashboardGaugeChartThresholdOutput {
	return i.ToDashboardGaugeChartThresholdOutputWithContext(context.Background())
}

func (i DashboardGaugeChartThresholdArgs) ToDashboardGaugeChartThresholdOutputWithContext(ctx context.Context) DashboardGaugeChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGaugeChartThresholdOutput)
}

// DashboardGaugeChartThresholdArrayInput is an input type that accepts DashboardGaugeChartThresholdArray and DashboardGaugeChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardGaugeChartThresholdArrayInput` via:
//
//	DashboardGaugeChartThresholdArray{ DashboardGaugeChartThresholdArgs{...} }
type DashboardGaugeChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardGaugeChartThresholdArrayOutput() DashboardGaugeChartThresholdArrayOutput
	ToDashboardGaugeChartThresholdArrayOutputWithContext(context.Context) DashboardGaugeChartThresholdArrayOutput
}

type DashboardGaugeChartThresholdArray []DashboardGaugeChartThresholdInput

func (DashboardGaugeChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGaugeChartThreshold)(nil)).Elem()
}

func (i DashboardGaugeChartThresholdArray) ToDashboardGaugeChartThresholdArrayOutput() DashboardGaugeChartThresholdArrayOutput {
	return i.ToDashboardGaugeChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardGaugeChartThresholdArray) ToDashboardGaugeChartThresholdArrayOutputWithContext(ctx context.Context) DashboardGaugeChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGaugeChartThresholdArrayOutput)
}

type DashboardGaugeChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardGaugeChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGaugeChartThreshold)(nil)).Elem()
}

func (o DashboardGaugeChartThresholdOutput) ToDashboardGaugeChartThresholdOutput() DashboardGaugeChartThresholdOutput {
	return o
}

func (o DashboardGaugeChartThresholdOutput) ToDashboardGaugeChartThresholdOutputWithContext(ctx context.Context) DashboardGaugeChartThresholdOutput {
	return o
}

func (o DashboardGaugeChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGaugeChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardGaugeChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGaugeChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardGaugeChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardGaugeChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardGaugeChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardGaugeChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGaugeChartThreshold)(nil)).Elem()
}

func (o DashboardGaugeChartThresholdArrayOutput) ToDashboardGaugeChartThresholdArrayOutput() DashboardGaugeChartThresholdArrayOutput {
	return o
}

func (o DashboardGaugeChartThresholdArrayOutput) ToDashboardGaugeChartThresholdArrayOutputWithContext(ctx context.Context) DashboardGaugeChartThresholdArrayOutput {
	return o
}

func (o DashboardGaugeChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardGaugeChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGaugeChartThreshold {
		return vs[0].([]DashboardGaugeChartThreshold)[vs[1].(int)]
	}).(DashboardGaugeChartThresholdOutput)
}

type DashboardGaugeChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardGaugeChartValueMappingInput is an input type that accepts DashboardGaugeChartValueMappingArgs and DashboardGaugeChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardGaugeChartValueMappingInput` via:
//
//	DashboardGaugeChartValueMappingArgs{...}
type DashboardGaugeChartValueMappingInput interface {
	pulumi.Input

	ToDashboardGaugeChartValueMappingOutput() DashboardGaugeChartValueMappingOutput
	ToDashboardGaugeChartValueMappingOutputWithContext(context.Context) DashboardGaugeChartValueMappingOutput
}

type DashboardGaugeChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardGaugeChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGaugeChartValueMapping)(nil)).Elem()
}

func (i DashboardGaugeChartValueMappingArgs) ToDashboardGaugeChartValueMappingOutput() DashboardGaugeChartValueMappingOutput {
	return i.ToDashboardGaugeChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardGaugeChartValueMappingArgs) ToDashboardGaugeChartValueMappingOutputWithContext(ctx context.Context) DashboardGaugeChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGaugeChartValueMappingOutput)
}

// DashboardGaugeChartValueMappingArrayInput is an input type that accepts DashboardGaugeChartValueMappingArray and DashboardGaugeChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardGaugeChartValueMappingArrayInput` via:
//
//	DashboardGaugeChartValueMappingArray{ DashboardGaugeChartValueMappingArgs{...} }
type DashboardGaugeChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardGaugeChartValueMappingArrayOutput() DashboardGaugeChartValueMappingArrayOutput
	ToDashboardGaugeChartValueMappingArrayOutputWithContext(context.Context) DashboardGaugeChartValueMappingArrayOutput
}

type DashboardGaugeChartValueMappingArray []DashboardGaugeChartValueMappingInput

func (DashboardGaugeChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGaugeChartValueMapping)(nil)).Elem()
}

func (i DashboardGaugeChartValueMappingArray) ToDashboardGaugeChartValueMappingArrayOutput() DashboardGaugeChartValueMappingArrayOutput {
	return i.ToDashboardGaugeChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardGaugeChartValueMappingArray) ToDashboardGaugeChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardGaugeChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardGaugeChartValueMappingArrayOutput)
}

type DashboardGaugeChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardGaugeChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardGaugeChartValueMapping)(nil)).Elem()
}

func (o DashboardGaugeChartValueMappingOutput) ToDashboardGaugeChartValueMappingOutput() DashboardGaugeChartValueMappingOutput {
	return o
}

func (o DashboardGaugeChartValueMappingOutput) ToDashboardGaugeChartValueMappingOutputWithContext(ctx context.Context) DashboardGaugeChartValueMappingOutput {
	return o
}

func (o DashboardGaugeChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGaugeChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardGaugeChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGaugeChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardGaugeChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardGaugeChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardGaugeChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardGaugeChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardGaugeChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardGaugeChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardGaugeChartValueMapping)(nil)).Elem()
}

func (o DashboardGaugeChartValueMappingArrayOutput) ToDashboardGaugeChartValueMappingArrayOutput() DashboardGaugeChartValueMappingArrayOutput {
	return o
}

func (o DashboardGaugeChartValueMappingArrayOutput) ToDashboardGaugeChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardGaugeChartValueMappingArrayOutput {
	return o
}

func (o DashboardGaugeChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardGaugeChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardGaugeChartValueMapping {
		return vs[0].([]DashboardGaugeChartValueMapping)[vs[1].(int)]
	}).(DashboardGaugeChartValueMappingOutput)
}

type DashboardHistogramChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardHistogramChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardHistogramChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                              `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                              `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                                 `pulumi:"queryLimit"`
	QueryPlain           string                                               `pulumi:"queryPlain"`
	QuerySortDirection   *int                                                 `pulumi:"querySortDirection"`
	RefId                string                                               `pulumi:"refId"`
	Type                 string                                               `pulumi:"type"`
}

// DashboardHistogramChartChartItemInput is an input type that accepts DashboardHistogramChartChartItemArgs and DashboardHistogramChartChartItemOutput values.
// You can construct a concrete instance of `DashboardHistogramChartChartItemInput` via:
//
//	DashboardHistogramChartChartItemArgs{...}
type DashboardHistogramChartChartItemInput interface {
	pulumi.Input

	ToDashboardHistogramChartChartItemOutput() DashboardHistogramChartChartItemOutput
	ToDashboardHistogramChartChartItemOutputWithContext(context.Context) DashboardHistogramChartChartItemOutput
}

type DashboardHistogramChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardHistogramChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardHistogramChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                     `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                     `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                        `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                        `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                        `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                        `pulumi:"refId"`
	Type                 pulumi.StringInput                                        `pulumi:"type"`
}

func (DashboardHistogramChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardHistogramChartChartItem)(nil)).Elem()
}

func (i DashboardHistogramChartChartItemArgs) ToDashboardHistogramChartChartItemOutput() DashboardHistogramChartChartItemOutput {
	return i.ToDashboardHistogramChartChartItemOutputWithContext(context.Background())
}

func (i DashboardHistogramChartChartItemArgs) ToDashboardHistogramChartChartItemOutputWithContext(ctx context.Context) DashboardHistogramChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardHistogramChartChartItemOutput)
}

// DashboardHistogramChartChartItemArrayInput is an input type that accepts DashboardHistogramChartChartItemArray and DashboardHistogramChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardHistogramChartChartItemArrayInput` via:
//
//	DashboardHistogramChartChartItemArray{ DashboardHistogramChartChartItemArgs{...} }
type DashboardHistogramChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardHistogramChartChartItemArrayOutput() DashboardHistogramChartChartItemArrayOutput
	ToDashboardHistogramChartChartItemArrayOutputWithContext(context.Context) DashboardHistogramChartChartItemArrayOutput
}

type DashboardHistogramChartChartItemArray []DashboardHistogramChartChartItemInput

func (DashboardHistogramChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardHistogramChartChartItem)(nil)).Elem()
}

func (i DashboardHistogramChartChartItemArray) ToDashboardHistogramChartChartItemArrayOutput() DashboardHistogramChartChartItemArrayOutput {
	return i.ToDashboardHistogramChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardHistogramChartChartItemArray) ToDashboardHistogramChartChartItemArrayOutputWithContext(ctx context.Context) DashboardHistogramChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardHistogramChartChartItemArrayOutput)
}

type DashboardHistogramChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardHistogramChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardHistogramChartChartItem)(nil)).Elem()
}

func (o DashboardHistogramChartChartItemOutput) ToDashboardHistogramChartChartItemOutput() DashboardHistogramChartChartItemOutput {
	return o
}

func (o DashboardHistogramChartChartItemOutput) ToDashboardHistogramChartChartItemOutputWithContext(ctx context.Context) DashboardHistogramChartChartItemOutput {
	return o
}

func (o DashboardHistogramChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardHistogramChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardHistogramChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardHistogramChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardHistogramChartChartItemOutput) QueryFilterAsset() DashboardHistogramChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) DashboardHistogramChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardHistogramChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardHistogramChartChartItemOutput) QueryFilterAttribute() DashboardHistogramChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) DashboardHistogramChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardHistogramChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardHistogramChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardHistogramChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardHistogramChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardHistogramChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardHistogramChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardHistogramChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardHistogramChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardHistogramChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardHistogramChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardHistogramChartChartItem)(nil)).Elem()
}

func (o DashboardHistogramChartChartItemArrayOutput) ToDashboardHistogramChartChartItemArrayOutput() DashboardHistogramChartChartItemArrayOutput {
	return o
}

func (o DashboardHistogramChartChartItemArrayOutput) ToDashboardHistogramChartChartItemArrayOutputWithContext(ctx context.Context) DashboardHistogramChartChartItemArrayOutput {
	return o
}

func (o DashboardHistogramChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardHistogramChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardHistogramChartChartItem {
		return vs[0].([]DashboardHistogramChartChartItem)[vs[1].(int)]
	}).(DashboardHistogramChartChartItemOutput)
}

type DashboardHistogramChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardHistogramChartChartItemQueryFilterAssetInput is an input type that accepts DashboardHistogramChartChartItemQueryFilterAssetArgs and DashboardHistogramChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardHistogramChartChartItemQueryFilterAssetInput` via:
//
//	DashboardHistogramChartChartItemQueryFilterAssetArgs{...}
type DashboardHistogramChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardHistogramChartChartItemQueryFilterAssetOutput() DashboardHistogramChartChartItemQueryFilterAssetOutput
	ToDashboardHistogramChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardHistogramChartChartItemQueryFilterAssetOutput
}

type DashboardHistogramChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardHistogramChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardHistogramChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardHistogramChartChartItemQueryFilterAssetArgs) ToDashboardHistogramChartChartItemQueryFilterAssetOutput() DashboardHistogramChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardHistogramChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardHistogramChartChartItemQueryFilterAssetArgs) ToDashboardHistogramChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardHistogramChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardHistogramChartChartItemQueryFilterAssetOutput)
}

type DashboardHistogramChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardHistogramChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardHistogramChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardHistogramChartChartItemQueryFilterAssetOutput) ToDashboardHistogramChartChartItemQueryFilterAssetOutput() DashboardHistogramChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardHistogramChartChartItemQueryFilterAssetOutput) ToDashboardHistogramChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardHistogramChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardHistogramChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardHistogramChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardHistogramChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardHistogramChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardHistogramChartChartItemQueryFilterAttributeArgs and DashboardHistogramChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardHistogramChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardHistogramChartChartItemQueryFilterAttributeArgs{...}
type DashboardHistogramChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardHistogramChartChartItemQueryFilterAttributeOutput() DashboardHistogramChartChartItemQueryFilterAttributeOutput
	ToDashboardHistogramChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardHistogramChartChartItemQueryFilterAttributeOutput
}

type DashboardHistogramChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardHistogramChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardHistogramChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardHistogramChartChartItemQueryFilterAttributeArgs) ToDashboardHistogramChartChartItemQueryFilterAttributeOutput() DashboardHistogramChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardHistogramChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardHistogramChartChartItemQueryFilterAttributeArgs) ToDashboardHistogramChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardHistogramChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardHistogramChartChartItemQueryFilterAttributeOutput)
}

type DashboardHistogramChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardHistogramChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardHistogramChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardHistogramChartChartItemQueryFilterAttributeOutput) ToDashboardHistogramChartChartItemQueryFilterAttributeOutput() DashboardHistogramChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardHistogramChartChartItemQueryFilterAttributeOutput) ToDashboardHistogramChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardHistogramChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardHistogramChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardHistogramChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardHistogramChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardHistogramChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardHistogramChartThresholdInput is an input type that accepts DashboardHistogramChartThresholdArgs and DashboardHistogramChartThresholdOutput values.
// You can construct a concrete instance of `DashboardHistogramChartThresholdInput` via:
//
//	DashboardHistogramChartThresholdArgs{...}
type DashboardHistogramChartThresholdInput interface {
	pulumi.Input

	ToDashboardHistogramChartThresholdOutput() DashboardHistogramChartThresholdOutput
	ToDashboardHistogramChartThresholdOutputWithContext(context.Context) DashboardHistogramChartThresholdOutput
}

type DashboardHistogramChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardHistogramChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardHistogramChartThreshold)(nil)).Elem()
}

func (i DashboardHistogramChartThresholdArgs) ToDashboardHistogramChartThresholdOutput() DashboardHistogramChartThresholdOutput {
	return i.ToDashboardHistogramChartThresholdOutputWithContext(context.Background())
}

func (i DashboardHistogramChartThresholdArgs) ToDashboardHistogramChartThresholdOutputWithContext(ctx context.Context) DashboardHistogramChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardHistogramChartThresholdOutput)
}

// DashboardHistogramChartThresholdArrayInput is an input type that accepts DashboardHistogramChartThresholdArray and DashboardHistogramChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardHistogramChartThresholdArrayInput` via:
//
//	DashboardHistogramChartThresholdArray{ DashboardHistogramChartThresholdArgs{...} }
type DashboardHistogramChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardHistogramChartThresholdArrayOutput() DashboardHistogramChartThresholdArrayOutput
	ToDashboardHistogramChartThresholdArrayOutputWithContext(context.Context) DashboardHistogramChartThresholdArrayOutput
}

type DashboardHistogramChartThresholdArray []DashboardHistogramChartThresholdInput

func (DashboardHistogramChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardHistogramChartThreshold)(nil)).Elem()
}

func (i DashboardHistogramChartThresholdArray) ToDashboardHistogramChartThresholdArrayOutput() DashboardHistogramChartThresholdArrayOutput {
	return i.ToDashboardHistogramChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardHistogramChartThresholdArray) ToDashboardHistogramChartThresholdArrayOutputWithContext(ctx context.Context) DashboardHistogramChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardHistogramChartThresholdArrayOutput)
}

type DashboardHistogramChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardHistogramChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardHistogramChartThreshold)(nil)).Elem()
}

func (o DashboardHistogramChartThresholdOutput) ToDashboardHistogramChartThresholdOutput() DashboardHistogramChartThresholdOutput {
	return o
}

func (o DashboardHistogramChartThresholdOutput) ToDashboardHistogramChartThresholdOutputWithContext(ctx context.Context) DashboardHistogramChartThresholdOutput {
	return o
}

func (o DashboardHistogramChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardHistogramChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardHistogramChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardHistogramChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardHistogramChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardHistogramChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardHistogramChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardHistogramChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardHistogramChartThreshold)(nil)).Elem()
}

func (o DashboardHistogramChartThresholdArrayOutput) ToDashboardHistogramChartThresholdArrayOutput() DashboardHistogramChartThresholdArrayOutput {
	return o
}

func (o DashboardHistogramChartThresholdArrayOutput) ToDashboardHistogramChartThresholdArrayOutputWithContext(ctx context.Context) DashboardHistogramChartThresholdArrayOutput {
	return o
}

func (o DashboardHistogramChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardHistogramChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardHistogramChartThreshold {
		return vs[0].([]DashboardHistogramChartThreshold)[vs[1].(int)]
	}).(DashboardHistogramChartThresholdOutput)
}

type DashboardHistogramChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardHistogramChartValueMappingInput is an input type that accepts DashboardHistogramChartValueMappingArgs and DashboardHistogramChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardHistogramChartValueMappingInput` via:
//
//	DashboardHistogramChartValueMappingArgs{...}
type DashboardHistogramChartValueMappingInput interface {
	pulumi.Input

	ToDashboardHistogramChartValueMappingOutput() DashboardHistogramChartValueMappingOutput
	ToDashboardHistogramChartValueMappingOutputWithContext(context.Context) DashboardHistogramChartValueMappingOutput
}

type DashboardHistogramChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardHistogramChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardHistogramChartValueMapping)(nil)).Elem()
}

func (i DashboardHistogramChartValueMappingArgs) ToDashboardHistogramChartValueMappingOutput() DashboardHistogramChartValueMappingOutput {
	return i.ToDashboardHistogramChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardHistogramChartValueMappingArgs) ToDashboardHistogramChartValueMappingOutputWithContext(ctx context.Context) DashboardHistogramChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardHistogramChartValueMappingOutput)
}

// DashboardHistogramChartValueMappingArrayInput is an input type that accepts DashboardHistogramChartValueMappingArray and DashboardHistogramChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardHistogramChartValueMappingArrayInput` via:
//
//	DashboardHistogramChartValueMappingArray{ DashboardHistogramChartValueMappingArgs{...} }
type DashboardHistogramChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardHistogramChartValueMappingArrayOutput() DashboardHistogramChartValueMappingArrayOutput
	ToDashboardHistogramChartValueMappingArrayOutputWithContext(context.Context) DashboardHistogramChartValueMappingArrayOutput
}

type DashboardHistogramChartValueMappingArray []DashboardHistogramChartValueMappingInput

func (DashboardHistogramChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardHistogramChartValueMapping)(nil)).Elem()
}

func (i DashboardHistogramChartValueMappingArray) ToDashboardHistogramChartValueMappingArrayOutput() DashboardHistogramChartValueMappingArrayOutput {
	return i.ToDashboardHistogramChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardHistogramChartValueMappingArray) ToDashboardHistogramChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardHistogramChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardHistogramChartValueMappingArrayOutput)
}

type DashboardHistogramChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardHistogramChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardHistogramChartValueMapping)(nil)).Elem()
}

func (o DashboardHistogramChartValueMappingOutput) ToDashboardHistogramChartValueMappingOutput() DashboardHistogramChartValueMappingOutput {
	return o
}

func (o DashboardHistogramChartValueMappingOutput) ToDashboardHistogramChartValueMappingOutputWithContext(ctx context.Context) DashboardHistogramChartValueMappingOutput {
	return o
}

func (o DashboardHistogramChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardHistogramChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardHistogramChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardHistogramChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardHistogramChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardHistogramChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardHistogramChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardHistogramChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardHistogramChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardHistogramChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardHistogramChartValueMapping)(nil)).Elem()
}

func (o DashboardHistogramChartValueMappingArrayOutput) ToDashboardHistogramChartValueMappingArrayOutput() DashboardHistogramChartValueMappingArrayOutput {
	return o
}

func (o DashboardHistogramChartValueMappingArrayOutput) ToDashboardHistogramChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardHistogramChartValueMappingArrayOutput {
	return o
}

func (o DashboardHistogramChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardHistogramChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardHistogramChartValueMapping {
		return vs[0].([]DashboardHistogramChartValueMapping)[vs[1].(int)]
	}).(DashboardHistogramChartValueMappingOutput)
}

type DashboardImageChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardImageChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardImageChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                          `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                          `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                             `pulumi:"queryLimit"`
	QueryPlain           string                                           `pulumi:"queryPlain"`
	QuerySortDirection   *int                                             `pulumi:"querySortDirection"`
	RefId                string                                           `pulumi:"refId"`
	Type                 string                                           `pulumi:"type"`
}

// DashboardImageChartChartItemInput is an input type that accepts DashboardImageChartChartItemArgs and DashboardImageChartChartItemOutput values.
// You can construct a concrete instance of `DashboardImageChartChartItemInput` via:
//
//	DashboardImageChartChartItemArgs{...}
type DashboardImageChartChartItemInput interface {
	pulumi.Input

	ToDashboardImageChartChartItemOutput() DashboardImageChartChartItemOutput
	ToDashboardImageChartChartItemOutputWithContext(context.Context) DashboardImageChartChartItemOutput
}

type DashboardImageChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardImageChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardImageChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                 `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                 `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                    `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                    `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                    `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                    `pulumi:"refId"`
	Type                 pulumi.StringInput                                    `pulumi:"type"`
}

func (DashboardImageChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardImageChartChartItem)(nil)).Elem()
}

func (i DashboardImageChartChartItemArgs) ToDashboardImageChartChartItemOutput() DashboardImageChartChartItemOutput {
	return i.ToDashboardImageChartChartItemOutputWithContext(context.Background())
}

func (i DashboardImageChartChartItemArgs) ToDashboardImageChartChartItemOutputWithContext(ctx context.Context) DashboardImageChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardImageChartChartItemOutput)
}

// DashboardImageChartChartItemArrayInput is an input type that accepts DashboardImageChartChartItemArray and DashboardImageChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardImageChartChartItemArrayInput` via:
//
//	DashboardImageChartChartItemArray{ DashboardImageChartChartItemArgs{...} }
type DashboardImageChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardImageChartChartItemArrayOutput() DashboardImageChartChartItemArrayOutput
	ToDashboardImageChartChartItemArrayOutputWithContext(context.Context) DashboardImageChartChartItemArrayOutput
}

type DashboardImageChartChartItemArray []DashboardImageChartChartItemInput

func (DashboardImageChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardImageChartChartItem)(nil)).Elem()
}

func (i DashboardImageChartChartItemArray) ToDashboardImageChartChartItemArrayOutput() DashboardImageChartChartItemArrayOutput {
	return i.ToDashboardImageChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardImageChartChartItemArray) ToDashboardImageChartChartItemArrayOutputWithContext(ctx context.Context) DashboardImageChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardImageChartChartItemArrayOutput)
}

type DashboardImageChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardImageChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardImageChartChartItem)(nil)).Elem()
}

func (o DashboardImageChartChartItemOutput) ToDashboardImageChartChartItemOutput() DashboardImageChartChartItemOutput {
	return o
}

func (o DashboardImageChartChartItemOutput) ToDashboardImageChartChartItemOutputWithContext(ctx context.Context) DashboardImageChartChartItemOutput {
	return o
}

func (o DashboardImageChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardImageChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardImageChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardImageChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardImageChartChartItemOutput) QueryFilterAsset() DashboardImageChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) DashboardImageChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardImageChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardImageChartChartItemOutput) QueryFilterAttribute() DashboardImageChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) DashboardImageChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardImageChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardImageChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardImageChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardImageChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardImageChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardImageChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardImageChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardImageChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardImageChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardImageChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardImageChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardImageChartChartItem)(nil)).Elem()
}

func (o DashboardImageChartChartItemArrayOutput) ToDashboardImageChartChartItemArrayOutput() DashboardImageChartChartItemArrayOutput {
	return o
}

func (o DashboardImageChartChartItemArrayOutput) ToDashboardImageChartChartItemArrayOutputWithContext(ctx context.Context) DashboardImageChartChartItemArrayOutput {
	return o
}

func (o DashboardImageChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardImageChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardImageChartChartItem {
		return vs[0].([]DashboardImageChartChartItem)[vs[1].(int)]
	}).(DashboardImageChartChartItemOutput)
}

type DashboardImageChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardImageChartChartItemQueryFilterAssetInput is an input type that accepts DashboardImageChartChartItemQueryFilterAssetArgs and DashboardImageChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardImageChartChartItemQueryFilterAssetInput` via:
//
//	DashboardImageChartChartItemQueryFilterAssetArgs{...}
type DashboardImageChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardImageChartChartItemQueryFilterAssetOutput() DashboardImageChartChartItemQueryFilterAssetOutput
	ToDashboardImageChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardImageChartChartItemQueryFilterAssetOutput
}

type DashboardImageChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardImageChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardImageChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardImageChartChartItemQueryFilterAssetArgs) ToDashboardImageChartChartItemQueryFilterAssetOutput() DashboardImageChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardImageChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardImageChartChartItemQueryFilterAssetArgs) ToDashboardImageChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardImageChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardImageChartChartItemQueryFilterAssetOutput)
}

type DashboardImageChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardImageChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardImageChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardImageChartChartItemQueryFilterAssetOutput) ToDashboardImageChartChartItemQueryFilterAssetOutput() DashboardImageChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardImageChartChartItemQueryFilterAssetOutput) ToDashboardImageChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardImageChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardImageChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardImageChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardImageChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardImageChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardImageChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardImageChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardImageChartChartItemQueryFilterAttributeArgs and DashboardImageChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardImageChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardImageChartChartItemQueryFilterAttributeArgs{...}
type DashboardImageChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardImageChartChartItemQueryFilterAttributeOutput() DashboardImageChartChartItemQueryFilterAttributeOutput
	ToDashboardImageChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardImageChartChartItemQueryFilterAttributeOutput
}

type DashboardImageChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardImageChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardImageChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardImageChartChartItemQueryFilterAttributeArgs) ToDashboardImageChartChartItemQueryFilterAttributeOutput() DashboardImageChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardImageChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardImageChartChartItemQueryFilterAttributeArgs) ToDashboardImageChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardImageChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardImageChartChartItemQueryFilterAttributeOutput)
}

type DashboardImageChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardImageChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardImageChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardImageChartChartItemQueryFilterAttributeOutput) ToDashboardImageChartChartItemQueryFilterAttributeOutput() DashboardImageChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardImageChartChartItemQueryFilterAttributeOutput) ToDashboardImageChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardImageChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardImageChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardImageChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardImageChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardImageChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardImageChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardImageChartThresholdInput is an input type that accepts DashboardImageChartThresholdArgs and DashboardImageChartThresholdOutput values.
// You can construct a concrete instance of `DashboardImageChartThresholdInput` via:
//
//	DashboardImageChartThresholdArgs{...}
type DashboardImageChartThresholdInput interface {
	pulumi.Input

	ToDashboardImageChartThresholdOutput() DashboardImageChartThresholdOutput
	ToDashboardImageChartThresholdOutputWithContext(context.Context) DashboardImageChartThresholdOutput
}

type DashboardImageChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardImageChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardImageChartThreshold)(nil)).Elem()
}

func (i DashboardImageChartThresholdArgs) ToDashboardImageChartThresholdOutput() DashboardImageChartThresholdOutput {
	return i.ToDashboardImageChartThresholdOutputWithContext(context.Background())
}

func (i DashboardImageChartThresholdArgs) ToDashboardImageChartThresholdOutputWithContext(ctx context.Context) DashboardImageChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardImageChartThresholdOutput)
}

// DashboardImageChartThresholdArrayInput is an input type that accepts DashboardImageChartThresholdArray and DashboardImageChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardImageChartThresholdArrayInput` via:
//
//	DashboardImageChartThresholdArray{ DashboardImageChartThresholdArgs{...} }
type DashboardImageChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardImageChartThresholdArrayOutput() DashboardImageChartThresholdArrayOutput
	ToDashboardImageChartThresholdArrayOutputWithContext(context.Context) DashboardImageChartThresholdArrayOutput
}

type DashboardImageChartThresholdArray []DashboardImageChartThresholdInput

func (DashboardImageChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardImageChartThreshold)(nil)).Elem()
}

func (i DashboardImageChartThresholdArray) ToDashboardImageChartThresholdArrayOutput() DashboardImageChartThresholdArrayOutput {
	return i.ToDashboardImageChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardImageChartThresholdArray) ToDashboardImageChartThresholdArrayOutputWithContext(ctx context.Context) DashboardImageChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardImageChartThresholdArrayOutput)
}

type DashboardImageChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardImageChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardImageChartThreshold)(nil)).Elem()
}

func (o DashboardImageChartThresholdOutput) ToDashboardImageChartThresholdOutput() DashboardImageChartThresholdOutput {
	return o
}

func (o DashboardImageChartThresholdOutput) ToDashboardImageChartThresholdOutputWithContext(ctx context.Context) DashboardImageChartThresholdOutput {
	return o
}

func (o DashboardImageChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardImageChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardImageChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardImageChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardImageChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardImageChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardImageChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardImageChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardImageChartThreshold)(nil)).Elem()
}

func (o DashboardImageChartThresholdArrayOutput) ToDashboardImageChartThresholdArrayOutput() DashboardImageChartThresholdArrayOutput {
	return o
}

func (o DashboardImageChartThresholdArrayOutput) ToDashboardImageChartThresholdArrayOutputWithContext(ctx context.Context) DashboardImageChartThresholdArrayOutput {
	return o
}

func (o DashboardImageChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardImageChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardImageChartThreshold {
		return vs[0].([]DashboardImageChartThreshold)[vs[1].(int)]
	}).(DashboardImageChartThresholdOutput)
}

type DashboardImageChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardImageChartValueMappingInput is an input type that accepts DashboardImageChartValueMappingArgs and DashboardImageChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardImageChartValueMappingInput` via:
//
//	DashboardImageChartValueMappingArgs{...}
type DashboardImageChartValueMappingInput interface {
	pulumi.Input

	ToDashboardImageChartValueMappingOutput() DashboardImageChartValueMappingOutput
	ToDashboardImageChartValueMappingOutputWithContext(context.Context) DashboardImageChartValueMappingOutput
}

type DashboardImageChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardImageChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardImageChartValueMapping)(nil)).Elem()
}

func (i DashboardImageChartValueMappingArgs) ToDashboardImageChartValueMappingOutput() DashboardImageChartValueMappingOutput {
	return i.ToDashboardImageChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardImageChartValueMappingArgs) ToDashboardImageChartValueMappingOutputWithContext(ctx context.Context) DashboardImageChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardImageChartValueMappingOutput)
}

// DashboardImageChartValueMappingArrayInput is an input type that accepts DashboardImageChartValueMappingArray and DashboardImageChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardImageChartValueMappingArrayInput` via:
//
//	DashboardImageChartValueMappingArray{ DashboardImageChartValueMappingArgs{...} }
type DashboardImageChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardImageChartValueMappingArrayOutput() DashboardImageChartValueMappingArrayOutput
	ToDashboardImageChartValueMappingArrayOutputWithContext(context.Context) DashboardImageChartValueMappingArrayOutput
}

type DashboardImageChartValueMappingArray []DashboardImageChartValueMappingInput

func (DashboardImageChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardImageChartValueMapping)(nil)).Elem()
}

func (i DashboardImageChartValueMappingArray) ToDashboardImageChartValueMappingArrayOutput() DashboardImageChartValueMappingArrayOutput {
	return i.ToDashboardImageChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardImageChartValueMappingArray) ToDashboardImageChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardImageChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardImageChartValueMappingArrayOutput)
}

type DashboardImageChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardImageChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardImageChartValueMapping)(nil)).Elem()
}

func (o DashboardImageChartValueMappingOutput) ToDashboardImageChartValueMappingOutput() DashboardImageChartValueMappingOutput {
	return o
}

func (o DashboardImageChartValueMappingOutput) ToDashboardImageChartValueMappingOutputWithContext(ctx context.Context) DashboardImageChartValueMappingOutput {
	return o
}

func (o DashboardImageChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardImageChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardImageChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardImageChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardImageChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardImageChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardImageChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardImageChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardImageChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardImageChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardImageChartValueMapping)(nil)).Elem()
}

func (o DashboardImageChartValueMappingArrayOutput) ToDashboardImageChartValueMappingArrayOutput() DashboardImageChartValueMappingArrayOutput {
	return o
}

func (o DashboardImageChartValueMappingArrayOutput) ToDashboardImageChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardImageChartValueMappingArrayOutput {
	return o
}

func (o DashboardImageChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardImageChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardImageChartValueMapping {
		return vs[0].([]DashboardImageChartValueMapping)[vs[1].(int)]
	}).(DashboardImageChartValueMappingOutput)
}

type DashboardRelatedAsset struct {
	// asset id
	Id string `pulumi:"id"`
	// asset name
	Name string `pulumi:"name"`
}

// DashboardRelatedAssetInput is an input type that accepts DashboardRelatedAssetArgs and DashboardRelatedAssetOutput values.
// You can construct a concrete instance of `DashboardRelatedAssetInput` via:
//
//	DashboardRelatedAssetArgs{...}
type DashboardRelatedAssetInput interface {
	pulumi.Input

	ToDashboardRelatedAssetOutput() DashboardRelatedAssetOutput
	ToDashboardRelatedAssetOutputWithContext(context.Context) DashboardRelatedAssetOutput
}

type DashboardRelatedAssetArgs struct {
	// asset id
	Id pulumi.StringInput `pulumi:"id"`
	// asset name
	Name pulumi.StringInput `pulumi:"name"`
}

func (DashboardRelatedAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardRelatedAsset)(nil)).Elem()
}

func (i DashboardRelatedAssetArgs) ToDashboardRelatedAssetOutput() DashboardRelatedAssetOutput {
	return i.ToDashboardRelatedAssetOutputWithContext(context.Background())
}

func (i DashboardRelatedAssetArgs) ToDashboardRelatedAssetOutputWithContext(ctx context.Context) DashboardRelatedAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardRelatedAssetOutput)
}

// DashboardRelatedAssetArrayInput is an input type that accepts DashboardRelatedAssetArray and DashboardRelatedAssetArrayOutput values.
// You can construct a concrete instance of `DashboardRelatedAssetArrayInput` via:
//
//	DashboardRelatedAssetArray{ DashboardRelatedAssetArgs{...} }
type DashboardRelatedAssetArrayInput interface {
	pulumi.Input

	ToDashboardRelatedAssetArrayOutput() DashboardRelatedAssetArrayOutput
	ToDashboardRelatedAssetArrayOutputWithContext(context.Context) DashboardRelatedAssetArrayOutput
}

type DashboardRelatedAssetArray []DashboardRelatedAssetInput

func (DashboardRelatedAssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardRelatedAsset)(nil)).Elem()
}

func (i DashboardRelatedAssetArray) ToDashboardRelatedAssetArrayOutput() DashboardRelatedAssetArrayOutput {
	return i.ToDashboardRelatedAssetArrayOutputWithContext(context.Background())
}

func (i DashboardRelatedAssetArray) ToDashboardRelatedAssetArrayOutputWithContext(ctx context.Context) DashboardRelatedAssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardRelatedAssetArrayOutput)
}

type DashboardRelatedAssetOutput struct{ *pulumi.OutputState }

func (DashboardRelatedAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardRelatedAsset)(nil)).Elem()
}

func (o DashboardRelatedAssetOutput) ToDashboardRelatedAssetOutput() DashboardRelatedAssetOutput {
	return o
}

func (o DashboardRelatedAssetOutput) ToDashboardRelatedAssetOutputWithContext(ctx context.Context) DashboardRelatedAssetOutput {
	return o
}

// asset id
func (o DashboardRelatedAssetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardRelatedAsset) string { return v.Id }).(pulumi.StringOutput)
}

// asset name
func (o DashboardRelatedAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardRelatedAsset) string { return v.Name }).(pulumi.StringOutput)
}

type DashboardRelatedAssetArrayOutput struct{ *pulumi.OutputState }

func (DashboardRelatedAssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardRelatedAsset)(nil)).Elem()
}

func (o DashboardRelatedAssetArrayOutput) ToDashboardRelatedAssetArrayOutput() DashboardRelatedAssetArrayOutput {
	return o
}

func (o DashboardRelatedAssetArrayOutput) ToDashboardRelatedAssetArrayOutputWithContext(ctx context.Context) DashboardRelatedAssetArrayOutput {
	return o
}

func (o DashboardRelatedAssetArrayOutput) Index(i pulumi.IntInput) DashboardRelatedAssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardRelatedAsset {
		return vs[0].([]DashboardRelatedAsset)[vs[1].(int)]
	}).(DashboardRelatedAssetOutput)
}

type DashboardStatChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardStatChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardStatChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                         `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                         `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                            `pulumi:"queryLimit"`
	QueryPlain           string                                          `pulumi:"queryPlain"`
	QuerySortDirection   *int                                            `pulumi:"querySortDirection"`
	RefId                string                                          `pulumi:"refId"`
	Type                 string                                          `pulumi:"type"`
}

// DashboardStatChartChartItemInput is an input type that accepts DashboardStatChartChartItemArgs and DashboardStatChartChartItemOutput values.
// You can construct a concrete instance of `DashboardStatChartChartItemInput` via:
//
//	DashboardStatChartChartItemArgs{...}
type DashboardStatChartChartItemInput interface {
	pulumi.Input

	ToDashboardStatChartChartItemOutput() DashboardStatChartChartItemOutput
	ToDashboardStatChartChartItemOutputWithContext(context.Context) DashboardStatChartChartItemOutput
}

type DashboardStatChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardStatChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardStatChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                   `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                   `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                   `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                   `pulumi:"refId"`
	Type                 pulumi.StringInput                                   `pulumi:"type"`
}

func (DashboardStatChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStatChartChartItem)(nil)).Elem()
}

func (i DashboardStatChartChartItemArgs) ToDashboardStatChartChartItemOutput() DashboardStatChartChartItemOutput {
	return i.ToDashboardStatChartChartItemOutputWithContext(context.Background())
}

func (i DashboardStatChartChartItemArgs) ToDashboardStatChartChartItemOutputWithContext(ctx context.Context) DashboardStatChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStatChartChartItemOutput)
}

// DashboardStatChartChartItemArrayInput is an input type that accepts DashboardStatChartChartItemArray and DashboardStatChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardStatChartChartItemArrayInput` via:
//
//	DashboardStatChartChartItemArray{ DashboardStatChartChartItemArgs{...} }
type DashboardStatChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardStatChartChartItemArrayOutput() DashboardStatChartChartItemArrayOutput
	ToDashboardStatChartChartItemArrayOutputWithContext(context.Context) DashboardStatChartChartItemArrayOutput
}

type DashboardStatChartChartItemArray []DashboardStatChartChartItemInput

func (DashboardStatChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStatChartChartItem)(nil)).Elem()
}

func (i DashboardStatChartChartItemArray) ToDashboardStatChartChartItemArrayOutput() DashboardStatChartChartItemArrayOutput {
	return i.ToDashboardStatChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardStatChartChartItemArray) ToDashboardStatChartChartItemArrayOutputWithContext(ctx context.Context) DashboardStatChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStatChartChartItemArrayOutput)
}

type DashboardStatChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardStatChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStatChartChartItem)(nil)).Elem()
}

func (o DashboardStatChartChartItemOutput) ToDashboardStatChartChartItemOutput() DashboardStatChartChartItemOutput {
	return o
}

func (o DashboardStatChartChartItemOutput) ToDashboardStatChartChartItemOutputWithContext(ctx context.Context) DashboardStatChartChartItemOutput {
	return o
}

func (o DashboardStatChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardStatChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardStatChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardStatChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardStatChartChartItemOutput) QueryFilterAsset() DashboardStatChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) DashboardStatChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardStatChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardStatChartChartItemOutput) QueryFilterAttribute() DashboardStatChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) DashboardStatChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardStatChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardStatChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardStatChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardStatChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardStatChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardStatChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardStatChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardStatChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStatChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardStatChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardStatChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStatChartChartItem)(nil)).Elem()
}

func (o DashboardStatChartChartItemArrayOutput) ToDashboardStatChartChartItemArrayOutput() DashboardStatChartChartItemArrayOutput {
	return o
}

func (o DashboardStatChartChartItemArrayOutput) ToDashboardStatChartChartItemArrayOutputWithContext(ctx context.Context) DashboardStatChartChartItemArrayOutput {
	return o
}

func (o DashboardStatChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardStatChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardStatChartChartItem {
		return vs[0].([]DashboardStatChartChartItem)[vs[1].(int)]
	}).(DashboardStatChartChartItemOutput)
}

type DashboardStatChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardStatChartChartItemQueryFilterAssetInput is an input type that accepts DashboardStatChartChartItemQueryFilterAssetArgs and DashboardStatChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardStatChartChartItemQueryFilterAssetInput` via:
//
//	DashboardStatChartChartItemQueryFilterAssetArgs{...}
type DashboardStatChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardStatChartChartItemQueryFilterAssetOutput() DashboardStatChartChartItemQueryFilterAssetOutput
	ToDashboardStatChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardStatChartChartItemQueryFilterAssetOutput
}

type DashboardStatChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardStatChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStatChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardStatChartChartItemQueryFilterAssetArgs) ToDashboardStatChartChartItemQueryFilterAssetOutput() DashboardStatChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardStatChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardStatChartChartItemQueryFilterAssetArgs) ToDashboardStatChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardStatChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStatChartChartItemQueryFilterAssetOutput)
}

type DashboardStatChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardStatChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStatChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardStatChartChartItemQueryFilterAssetOutput) ToDashboardStatChartChartItemQueryFilterAssetOutput() DashboardStatChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardStatChartChartItemQueryFilterAssetOutput) ToDashboardStatChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardStatChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardStatChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardStatChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardStatChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardStatChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardStatChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardStatChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardStatChartChartItemQueryFilterAttributeArgs and DashboardStatChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardStatChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardStatChartChartItemQueryFilterAttributeArgs{...}
type DashboardStatChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardStatChartChartItemQueryFilterAttributeOutput() DashboardStatChartChartItemQueryFilterAttributeOutput
	ToDashboardStatChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardStatChartChartItemQueryFilterAttributeOutput
}

type DashboardStatChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardStatChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStatChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardStatChartChartItemQueryFilterAttributeArgs) ToDashboardStatChartChartItemQueryFilterAttributeOutput() DashboardStatChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardStatChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardStatChartChartItemQueryFilterAttributeArgs) ToDashboardStatChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardStatChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStatChartChartItemQueryFilterAttributeOutput)
}

type DashboardStatChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardStatChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStatChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardStatChartChartItemQueryFilterAttributeOutput) ToDashboardStatChartChartItemQueryFilterAttributeOutput() DashboardStatChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardStatChartChartItemQueryFilterAttributeOutput) ToDashboardStatChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardStatChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardStatChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardStatChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardStatChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardStatChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardStatChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardStatChartThresholdInput is an input type that accepts DashboardStatChartThresholdArgs and DashboardStatChartThresholdOutput values.
// You can construct a concrete instance of `DashboardStatChartThresholdInput` via:
//
//	DashboardStatChartThresholdArgs{...}
type DashboardStatChartThresholdInput interface {
	pulumi.Input

	ToDashboardStatChartThresholdOutput() DashboardStatChartThresholdOutput
	ToDashboardStatChartThresholdOutputWithContext(context.Context) DashboardStatChartThresholdOutput
}

type DashboardStatChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardStatChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStatChartThreshold)(nil)).Elem()
}

func (i DashboardStatChartThresholdArgs) ToDashboardStatChartThresholdOutput() DashboardStatChartThresholdOutput {
	return i.ToDashboardStatChartThresholdOutputWithContext(context.Background())
}

func (i DashboardStatChartThresholdArgs) ToDashboardStatChartThresholdOutputWithContext(ctx context.Context) DashboardStatChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStatChartThresholdOutput)
}

// DashboardStatChartThresholdArrayInput is an input type that accepts DashboardStatChartThresholdArray and DashboardStatChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardStatChartThresholdArrayInput` via:
//
//	DashboardStatChartThresholdArray{ DashboardStatChartThresholdArgs{...} }
type DashboardStatChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardStatChartThresholdArrayOutput() DashboardStatChartThresholdArrayOutput
	ToDashboardStatChartThresholdArrayOutputWithContext(context.Context) DashboardStatChartThresholdArrayOutput
}

type DashboardStatChartThresholdArray []DashboardStatChartThresholdInput

func (DashboardStatChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStatChartThreshold)(nil)).Elem()
}

func (i DashboardStatChartThresholdArray) ToDashboardStatChartThresholdArrayOutput() DashboardStatChartThresholdArrayOutput {
	return i.ToDashboardStatChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardStatChartThresholdArray) ToDashboardStatChartThresholdArrayOutputWithContext(ctx context.Context) DashboardStatChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStatChartThresholdArrayOutput)
}

type DashboardStatChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardStatChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStatChartThreshold)(nil)).Elem()
}

func (o DashboardStatChartThresholdOutput) ToDashboardStatChartThresholdOutput() DashboardStatChartThresholdOutput {
	return o
}

func (o DashboardStatChartThresholdOutput) ToDashboardStatChartThresholdOutputWithContext(ctx context.Context) DashboardStatChartThresholdOutput {
	return o
}

func (o DashboardStatChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStatChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardStatChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStatChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardStatChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardStatChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardStatChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardStatChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStatChartThreshold)(nil)).Elem()
}

func (o DashboardStatChartThresholdArrayOutput) ToDashboardStatChartThresholdArrayOutput() DashboardStatChartThresholdArrayOutput {
	return o
}

func (o DashboardStatChartThresholdArrayOutput) ToDashboardStatChartThresholdArrayOutputWithContext(ctx context.Context) DashboardStatChartThresholdArrayOutput {
	return o
}

func (o DashboardStatChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardStatChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardStatChartThreshold {
		return vs[0].([]DashboardStatChartThreshold)[vs[1].(int)]
	}).(DashboardStatChartThresholdOutput)
}

type DashboardStatChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardStatChartValueMappingInput is an input type that accepts DashboardStatChartValueMappingArgs and DashboardStatChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardStatChartValueMappingInput` via:
//
//	DashboardStatChartValueMappingArgs{...}
type DashboardStatChartValueMappingInput interface {
	pulumi.Input

	ToDashboardStatChartValueMappingOutput() DashboardStatChartValueMappingOutput
	ToDashboardStatChartValueMappingOutputWithContext(context.Context) DashboardStatChartValueMappingOutput
}

type DashboardStatChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardStatChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStatChartValueMapping)(nil)).Elem()
}

func (i DashboardStatChartValueMappingArgs) ToDashboardStatChartValueMappingOutput() DashboardStatChartValueMappingOutput {
	return i.ToDashboardStatChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardStatChartValueMappingArgs) ToDashboardStatChartValueMappingOutputWithContext(ctx context.Context) DashboardStatChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStatChartValueMappingOutput)
}

// DashboardStatChartValueMappingArrayInput is an input type that accepts DashboardStatChartValueMappingArray and DashboardStatChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardStatChartValueMappingArrayInput` via:
//
//	DashboardStatChartValueMappingArray{ DashboardStatChartValueMappingArgs{...} }
type DashboardStatChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardStatChartValueMappingArrayOutput() DashboardStatChartValueMappingArrayOutput
	ToDashboardStatChartValueMappingArrayOutputWithContext(context.Context) DashboardStatChartValueMappingArrayOutput
}

type DashboardStatChartValueMappingArray []DashboardStatChartValueMappingInput

func (DashboardStatChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStatChartValueMapping)(nil)).Elem()
}

func (i DashboardStatChartValueMappingArray) ToDashboardStatChartValueMappingArrayOutput() DashboardStatChartValueMappingArrayOutput {
	return i.ToDashboardStatChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardStatChartValueMappingArray) ToDashboardStatChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardStatChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStatChartValueMappingArrayOutput)
}

type DashboardStatChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardStatChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStatChartValueMapping)(nil)).Elem()
}

func (o DashboardStatChartValueMappingOutput) ToDashboardStatChartValueMappingOutput() DashboardStatChartValueMappingOutput {
	return o
}

func (o DashboardStatChartValueMappingOutput) ToDashboardStatChartValueMappingOutputWithContext(ctx context.Context) DashboardStatChartValueMappingOutput {
	return o
}

func (o DashboardStatChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStatChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardStatChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStatChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardStatChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardStatChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardStatChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStatChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardStatChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardStatChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStatChartValueMapping)(nil)).Elem()
}

func (o DashboardStatChartValueMappingArrayOutput) ToDashboardStatChartValueMappingArrayOutput() DashboardStatChartValueMappingArrayOutput {
	return o
}

func (o DashboardStatChartValueMappingArrayOutput) ToDashboardStatChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardStatChartValueMappingArrayOutput {
	return o
}

func (o DashboardStatChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardStatChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardStatChartValueMapping {
		return vs[0].([]DashboardStatChartValueMapping)[vs[1].(int)]
	}).(DashboardStatChartValueMappingOutput)
}

type DashboardTableChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardTableChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardTableChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                          `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                          `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                             `pulumi:"queryLimit"`
	QueryPlain           string                                           `pulumi:"queryPlain"`
	QuerySortDirection   *int                                             `pulumi:"querySortDirection"`
	RefId                string                                           `pulumi:"refId"`
	Type                 string                                           `pulumi:"type"`
}

// DashboardTableChartChartItemInput is an input type that accepts DashboardTableChartChartItemArgs and DashboardTableChartChartItemOutput values.
// You can construct a concrete instance of `DashboardTableChartChartItemInput` via:
//
//	DashboardTableChartChartItemArgs{...}
type DashboardTableChartChartItemInput interface {
	pulumi.Input

	ToDashboardTableChartChartItemOutput() DashboardTableChartChartItemOutput
	ToDashboardTableChartChartItemOutputWithContext(context.Context) DashboardTableChartChartItemOutput
}

type DashboardTableChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardTableChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardTableChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                 `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                 `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                    `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                    `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                    `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                    `pulumi:"refId"`
	Type                 pulumi.StringInput                                    `pulumi:"type"`
}

func (DashboardTableChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableChartChartItem)(nil)).Elem()
}

func (i DashboardTableChartChartItemArgs) ToDashboardTableChartChartItemOutput() DashboardTableChartChartItemOutput {
	return i.ToDashboardTableChartChartItemOutputWithContext(context.Background())
}

func (i DashboardTableChartChartItemArgs) ToDashboardTableChartChartItemOutputWithContext(ctx context.Context) DashboardTableChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableChartChartItemOutput)
}

// DashboardTableChartChartItemArrayInput is an input type that accepts DashboardTableChartChartItemArray and DashboardTableChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardTableChartChartItemArrayInput` via:
//
//	DashboardTableChartChartItemArray{ DashboardTableChartChartItemArgs{...} }
type DashboardTableChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardTableChartChartItemArrayOutput() DashboardTableChartChartItemArrayOutput
	ToDashboardTableChartChartItemArrayOutputWithContext(context.Context) DashboardTableChartChartItemArrayOutput
}

type DashboardTableChartChartItemArray []DashboardTableChartChartItemInput

func (DashboardTableChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableChartChartItem)(nil)).Elem()
}

func (i DashboardTableChartChartItemArray) ToDashboardTableChartChartItemArrayOutput() DashboardTableChartChartItemArrayOutput {
	return i.ToDashboardTableChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardTableChartChartItemArray) ToDashboardTableChartChartItemArrayOutputWithContext(ctx context.Context) DashboardTableChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableChartChartItemArrayOutput)
}

type DashboardTableChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardTableChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableChartChartItem)(nil)).Elem()
}

func (o DashboardTableChartChartItemOutput) ToDashboardTableChartChartItemOutput() DashboardTableChartChartItemOutput {
	return o
}

func (o DashboardTableChartChartItemOutput) ToDashboardTableChartChartItemOutputWithContext(ctx context.Context) DashboardTableChartChartItemOutput {
	return o
}

func (o DashboardTableChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardTableChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardTableChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardTableChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardTableChartChartItemOutput) QueryFilterAsset() DashboardTableChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) DashboardTableChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardTableChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardTableChartChartItemOutput) QueryFilterAttribute() DashboardTableChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) DashboardTableChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardTableChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardTableChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardTableChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardTableChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardTableChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardTableChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardTableChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardTableChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardTableChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardTableChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableChartChartItem)(nil)).Elem()
}

func (o DashboardTableChartChartItemArrayOutput) ToDashboardTableChartChartItemArrayOutput() DashboardTableChartChartItemArrayOutput {
	return o
}

func (o DashboardTableChartChartItemArrayOutput) ToDashboardTableChartChartItemArrayOutputWithContext(ctx context.Context) DashboardTableChartChartItemArrayOutput {
	return o
}

func (o DashboardTableChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardTableChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTableChartChartItem {
		return vs[0].([]DashboardTableChartChartItem)[vs[1].(int)]
	}).(DashboardTableChartChartItemOutput)
}

type DashboardTableChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardTableChartChartItemQueryFilterAssetInput is an input type that accepts DashboardTableChartChartItemQueryFilterAssetArgs and DashboardTableChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardTableChartChartItemQueryFilterAssetInput` via:
//
//	DashboardTableChartChartItemQueryFilterAssetArgs{...}
type DashboardTableChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardTableChartChartItemQueryFilterAssetOutput() DashboardTableChartChartItemQueryFilterAssetOutput
	ToDashboardTableChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardTableChartChartItemQueryFilterAssetOutput
}

type DashboardTableChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardTableChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardTableChartChartItemQueryFilterAssetArgs) ToDashboardTableChartChartItemQueryFilterAssetOutput() DashboardTableChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardTableChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardTableChartChartItemQueryFilterAssetArgs) ToDashboardTableChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardTableChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableChartChartItemQueryFilterAssetOutput)
}

type DashboardTableChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardTableChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardTableChartChartItemQueryFilterAssetOutput) ToDashboardTableChartChartItemQueryFilterAssetOutput() DashboardTableChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardTableChartChartItemQueryFilterAssetOutput) ToDashboardTableChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardTableChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardTableChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardTableChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardTableChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardTableChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardTableChartChartItemQueryFilterAttributeArgs and DashboardTableChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardTableChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardTableChartChartItemQueryFilterAttributeArgs{...}
type DashboardTableChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardTableChartChartItemQueryFilterAttributeOutput() DashboardTableChartChartItemQueryFilterAttributeOutput
	ToDashboardTableChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardTableChartChartItemQueryFilterAttributeOutput
}

type DashboardTableChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardTableChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardTableChartChartItemQueryFilterAttributeArgs) ToDashboardTableChartChartItemQueryFilterAttributeOutput() DashboardTableChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardTableChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardTableChartChartItemQueryFilterAttributeArgs) ToDashboardTableChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardTableChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableChartChartItemQueryFilterAttributeOutput)
}

type DashboardTableChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardTableChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardTableChartChartItemQueryFilterAttributeOutput) ToDashboardTableChartChartItemQueryFilterAttributeOutput() DashboardTableChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardTableChartChartItemQueryFilterAttributeOutput) ToDashboardTableChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardTableChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardTableChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardTableChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardTableChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardTableChartThresholdInput is an input type that accepts DashboardTableChartThresholdArgs and DashboardTableChartThresholdOutput values.
// You can construct a concrete instance of `DashboardTableChartThresholdInput` via:
//
//	DashboardTableChartThresholdArgs{...}
type DashboardTableChartThresholdInput interface {
	pulumi.Input

	ToDashboardTableChartThresholdOutput() DashboardTableChartThresholdOutput
	ToDashboardTableChartThresholdOutputWithContext(context.Context) DashboardTableChartThresholdOutput
}

type DashboardTableChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardTableChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableChartThreshold)(nil)).Elem()
}

func (i DashboardTableChartThresholdArgs) ToDashboardTableChartThresholdOutput() DashboardTableChartThresholdOutput {
	return i.ToDashboardTableChartThresholdOutputWithContext(context.Background())
}

func (i DashboardTableChartThresholdArgs) ToDashboardTableChartThresholdOutputWithContext(ctx context.Context) DashboardTableChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableChartThresholdOutput)
}

// DashboardTableChartThresholdArrayInput is an input type that accepts DashboardTableChartThresholdArray and DashboardTableChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardTableChartThresholdArrayInput` via:
//
//	DashboardTableChartThresholdArray{ DashboardTableChartThresholdArgs{...} }
type DashboardTableChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardTableChartThresholdArrayOutput() DashboardTableChartThresholdArrayOutput
	ToDashboardTableChartThresholdArrayOutputWithContext(context.Context) DashboardTableChartThresholdArrayOutput
}

type DashboardTableChartThresholdArray []DashboardTableChartThresholdInput

func (DashboardTableChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableChartThreshold)(nil)).Elem()
}

func (i DashboardTableChartThresholdArray) ToDashboardTableChartThresholdArrayOutput() DashboardTableChartThresholdArrayOutput {
	return i.ToDashboardTableChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardTableChartThresholdArray) ToDashboardTableChartThresholdArrayOutputWithContext(ctx context.Context) DashboardTableChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableChartThresholdArrayOutput)
}

type DashboardTableChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardTableChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableChartThreshold)(nil)).Elem()
}

func (o DashboardTableChartThresholdOutput) ToDashboardTableChartThresholdOutput() DashboardTableChartThresholdOutput {
	return o
}

func (o DashboardTableChartThresholdOutput) ToDashboardTableChartThresholdOutputWithContext(ctx context.Context) DashboardTableChartThresholdOutput {
	return o
}

func (o DashboardTableChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardTableChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardTableChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardTableChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardTableChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardTableChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableChartThreshold)(nil)).Elem()
}

func (o DashboardTableChartThresholdArrayOutput) ToDashboardTableChartThresholdArrayOutput() DashboardTableChartThresholdArrayOutput {
	return o
}

func (o DashboardTableChartThresholdArrayOutput) ToDashboardTableChartThresholdArrayOutputWithContext(ctx context.Context) DashboardTableChartThresholdArrayOutput {
	return o
}

func (o DashboardTableChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardTableChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTableChartThreshold {
		return vs[0].([]DashboardTableChartThreshold)[vs[1].(int)]
	}).(DashboardTableChartThresholdOutput)
}

type DashboardTableChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardTableChartValueMappingInput is an input type that accepts DashboardTableChartValueMappingArgs and DashboardTableChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardTableChartValueMappingInput` via:
//
//	DashboardTableChartValueMappingArgs{...}
type DashboardTableChartValueMappingInput interface {
	pulumi.Input

	ToDashboardTableChartValueMappingOutput() DashboardTableChartValueMappingOutput
	ToDashboardTableChartValueMappingOutputWithContext(context.Context) DashboardTableChartValueMappingOutput
}

type DashboardTableChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardTableChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableChartValueMapping)(nil)).Elem()
}

func (i DashboardTableChartValueMappingArgs) ToDashboardTableChartValueMappingOutput() DashboardTableChartValueMappingOutput {
	return i.ToDashboardTableChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardTableChartValueMappingArgs) ToDashboardTableChartValueMappingOutputWithContext(ctx context.Context) DashboardTableChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableChartValueMappingOutput)
}

// DashboardTableChartValueMappingArrayInput is an input type that accepts DashboardTableChartValueMappingArray and DashboardTableChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardTableChartValueMappingArrayInput` via:
//
//	DashboardTableChartValueMappingArray{ DashboardTableChartValueMappingArgs{...} }
type DashboardTableChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardTableChartValueMappingArrayOutput() DashboardTableChartValueMappingArrayOutput
	ToDashboardTableChartValueMappingArrayOutputWithContext(context.Context) DashboardTableChartValueMappingArrayOutput
}

type DashboardTableChartValueMappingArray []DashboardTableChartValueMappingInput

func (DashboardTableChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableChartValueMapping)(nil)).Elem()
}

func (i DashboardTableChartValueMappingArray) ToDashboardTableChartValueMappingArrayOutput() DashboardTableChartValueMappingArrayOutput {
	return i.ToDashboardTableChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardTableChartValueMappingArray) ToDashboardTableChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardTableChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableChartValueMappingArrayOutput)
}

type DashboardTableChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardTableChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableChartValueMapping)(nil)).Elem()
}

func (o DashboardTableChartValueMappingOutput) ToDashboardTableChartValueMappingOutput() DashboardTableChartValueMappingOutput {
	return o
}

func (o DashboardTableChartValueMappingOutput) ToDashboardTableChartValueMappingOutputWithContext(ctx context.Context) DashboardTableChartValueMappingOutput {
	return o
}

func (o DashboardTableChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardTableChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardTableChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardTableChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardTableChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardTableChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardTableChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableChartValueMapping)(nil)).Elem()
}

func (o DashboardTableChartValueMappingArrayOutput) ToDashboardTableChartValueMappingArrayOutput() DashboardTableChartValueMappingArrayOutput {
	return o
}

func (o DashboardTableChartValueMappingArrayOutput) ToDashboardTableChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardTableChartValueMappingArrayOutput {
	return o
}

func (o DashboardTableChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardTableChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTableChartValueMapping {
		return vs[0].([]DashboardTableChartValueMapping)[vs[1].(int)]
	}).(DashboardTableChartValueMappingOutput)
}

type DashboardTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// DashboardTagInput is an input type that accepts DashboardTagArgs and DashboardTagOutput values.
// You can construct a concrete instance of `DashboardTagInput` via:
//
//	DashboardTagArgs{...}
type DashboardTagInput interface {
	pulumi.Input

	ToDashboardTagOutput() DashboardTagOutput
	ToDashboardTagOutputWithContext(context.Context) DashboardTagOutput
}

type DashboardTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (DashboardTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTag)(nil)).Elem()
}

func (i DashboardTagArgs) ToDashboardTagOutput() DashboardTagOutput {
	return i.ToDashboardTagOutputWithContext(context.Background())
}

func (i DashboardTagArgs) ToDashboardTagOutputWithContext(ctx context.Context) DashboardTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTagOutput)
}

// DashboardTagArrayInput is an input type that accepts DashboardTagArray and DashboardTagArrayOutput values.
// You can construct a concrete instance of `DashboardTagArrayInput` via:
//
//	DashboardTagArray{ DashboardTagArgs{...} }
type DashboardTagArrayInput interface {
	pulumi.Input

	ToDashboardTagArrayOutput() DashboardTagArrayOutput
	ToDashboardTagArrayOutputWithContext(context.Context) DashboardTagArrayOutput
}

type DashboardTagArray []DashboardTagInput

func (DashboardTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTag)(nil)).Elem()
}

func (i DashboardTagArray) ToDashboardTagArrayOutput() DashboardTagArrayOutput {
	return i.ToDashboardTagArrayOutputWithContext(context.Background())
}

func (i DashboardTagArray) ToDashboardTagArrayOutputWithContext(ctx context.Context) DashboardTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTagArrayOutput)
}

type DashboardTagOutput struct{ *pulumi.OutputState }

func (DashboardTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTag)(nil)).Elem()
}

func (o DashboardTagOutput) ToDashboardTagOutput() DashboardTagOutput {
	return o
}

func (o DashboardTagOutput) ToDashboardTagOutputWithContext(ctx context.Context) DashboardTagOutput {
	return o
}

// tag id
func (o DashboardTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o DashboardTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTag) string { return v.Name }).(pulumi.StringOutput)
}

type DashboardTagArrayOutput struct{ *pulumi.OutputState }

func (DashboardTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTag)(nil)).Elem()
}

func (o DashboardTagArrayOutput) ToDashboardTagArrayOutput() DashboardTagArrayOutput {
	return o
}

func (o DashboardTagArrayOutput) ToDashboardTagArrayOutputWithContext(ctx context.Context) DashboardTagArrayOutput {
	return o
}

func (o DashboardTagArrayOutput) Index(i pulumi.IntInput) DashboardTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTag {
		return vs[0].([]DashboardTag)[vs[1].(int)]
	}).(DashboardTagOutput)
}

type DashboardTextChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardTextChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardTextChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                         `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                         `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                            `pulumi:"queryLimit"`
	QueryPlain           string                                          `pulumi:"queryPlain"`
	QuerySortDirection   *int                                            `pulumi:"querySortDirection"`
	RefId                string                                          `pulumi:"refId"`
	Type                 string                                          `pulumi:"type"`
}

// DashboardTextChartChartItemInput is an input type that accepts DashboardTextChartChartItemArgs and DashboardTextChartChartItemOutput values.
// You can construct a concrete instance of `DashboardTextChartChartItemInput` via:
//
//	DashboardTextChartChartItemArgs{...}
type DashboardTextChartChartItemInput interface {
	pulumi.Input

	ToDashboardTextChartChartItemOutput() DashboardTextChartChartItemOutput
	ToDashboardTextChartChartItemOutputWithContext(context.Context) DashboardTextChartChartItemOutput
}

type DashboardTextChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardTextChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardTextChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                   `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                   `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                   `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                   `pulumi:"refId"`
	Type                 pulumi.StringInput                                   `pulumi:"type"`
}

func (DashboardTextChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextChartChartItem)(nil)).Elem()
}

func (i DashboardTextChartChartItemArgs) ToDashboardTextChartChartItemOutput() DashboardTextChartChartItemOutput {
	return i.ToDashboardTextChartChartItemOutputWithContext(context.Background())
}

func (i DashboardTextChartChartItemArgs) ToDashboardTextChartChartItemOutputWithContext(ctx context.Context) DashboardTextChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextChartChartItemOutput)
}

// DashboardTextChartChartItemArrayInput is an input type that accepts DashboardTextChartChartItemArray and DashboardTextChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardTextChartChartItemArrayInput` via:
//
//	DashboardTextChartChartItemArray{ DashboardTextChartChartItemArgs{...} }
type DashboardTextChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardTextChartChartItemArrayOutput() DashboardTextChartChartItemArrayOutput
	ToDashboardTextChartChartItemArrayOutputWithContext(context.Context) DashboardTextChartChartItemArrayOutput
}

type DashboardTextChartChartItemArray []DashboardTextChartChartItemInput

func (DashboardTextChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTextChartChartItem)(nil)).Elem()
}

func (i DashboardTextChartChartItemArray) ToDashboardTextChartChartItemArrayOutput() DashboardTextChartChartItemArrayOutput {
	return i.ToDashboardTextChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardTextChartChartItemArray) ToDashboardTextChartChartItemArrayOutputWithContext(ctx context.Context) DashboardTextChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextChartChartItemArrayOutput)
}

type DashboardTextChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardTextChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextChartChartItem)(nil)).Elem()
}

func (o DashboardTextChartChartItemOutput) ToDashboardTextChartChartItemOutput() DashboardTextChartChartItemOutput {
	return o
}

func (o DashboardTextChartChartItemOutput) ToDashboardTextChartChartItemOutputWithContext(ctx context.Context) DashboardTextChartChartItemOutput {
	return o
}

func (o DashboardTextChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardTextChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardTextChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardTextChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardTextChartChartItemOutput) QueryFilterAsset() DashboardTextChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) DashboardTextChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardTextChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardTextChartChartItemOutput) QueryFilterAttribute() DashboardTextChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) DashboardTextChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardTextChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardTextChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardTextChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardTextChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardTextChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardTextChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardTextChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardTextChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTextChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardTextChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardTextChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTextChartChartItem)(nil)).Elem()
}

func (o DashboardTextChartChartItemArrayOutput) ToDashboardTextChartChartItemArrayOutput() DashboardTextChartChartItemArrayOutput {
	return o
}

func (o DashboardTextChartChartItemArrayOutput) ToDashboardTextChartChartItemArrayOutputWithContext(ctx context.Context) DashboardTextChartChartItemArrayOutput {
	return o
}

func (o DashboardTextChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardTextChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTextChartChartItem {
		return vs[0].([]DashboardTextChartChartItem)[vs[1].(int)]
	}).(DashboardTextChartChartItemOutput)
}

type DashboardTextChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardTextChartChartItemQueryFilterAssetInput is an input type that accepts DashboardTextChartChartItemQueryFilterAssetArgs and DashboardTextChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardTextChartChartItemQueryFilterAssetInput` via:
//
//	DashboardTextChartChartItemQueryFilterAssetArgs{...}
type DashboardTextChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardTextChartChartItemQueryFilterAssetOutput() DashboardTextChartChartItemQueryFilterAssetOutput
	ToDashboardTextChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardTextChartChartItemQueryFilterAssetOutput
}

type DashboardTextChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardTextChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardTextChartChartItemQueryFilterAssetArgs) ToDashboardTextChartChartItemQueryFilterAssetOutput() DashboardTextChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardTextChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardTextChartChartItemQueryFilterAssetArgs) ToDashboardTextChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardTextChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextChartChartItemQueryFilterAssetOutput)
}

type DashboardTextChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardTextChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardTextChartChartItemQueryFilterAssetOutput) ToDashboardTextChartChartItemQueryFilterAssetOutput() DashboardTextChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardTextChartChartItemQueryFilterAssetOutput) ToDashboardTextChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardTextChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardTextChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTextChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardTextChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTextChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardTextChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardTextChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardTextChartChartItemQueryFilterAttributeArgs and DashboardTextChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardTextChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardTextChartChartItemQueryFilterAttributeArgs{...}
type DashboardTextChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardTextChartChartItemQueryFilterAttributeOutput() DashboardTextChartChartItemQueryFilterAttributeOutput
	ToDashboardTextChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardTextChartChartItemQueryFilterAttributeOutput
}

type DashboardTextChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardTextChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardTextChartChartItemQueryFilterAttributeArgs) ToDashboardTextChartChartItemQueryFilterAttributeOutput() DashboardTextChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardTextChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardTextChartChartItemQueryFilterAttributeArgs) ToDashboardTextChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardTextChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextChartChartItemQueryFilterAttributeOutput)
}

type DashboardTextChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardTextChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardTextChartChartItemQueryFilterAttributeOutput) ToDashboardTextChartChartItemQueryFilterAttributeOutput() DashboardTextChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardTextChartChartItemQueryFilterAttributeOutput) ToDashboardTextChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardTextChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardTextChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTextChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardTextChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTextChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardTextChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardTextChartThresholdInput is an input type that accepts DashboardTextChartThresholdArgs and DashboardTextChartThresholdOutput values.
// You can construct a concrete instance of `DashboardTextChartThresholdInput` via:
//
//	DashboardTextChartThresholdArgs{...}
type DashboardTextChartThresholdInput interface {
	pulumi.Input

	ToDashboardTextChartThresholdOutput() DashboardTextChartThresholdOutput
	ToDashboardTextChartThresholdOutputWithContext(context.Context) DashboardTextChartThresholdOutput
}

type DashboardTextChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardTextChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextChartThreshold)(nil)).Elem()
}

func (i DashboardTextChartThresholdArgs) ToDashboardTextChartThresholdOutput() DashboardTextChartThresholdOutput {
	return i.ToDashboardTextChartThresholdOutputWithContext(context.Background())
}

func (i DashboardTextChartThresholdArgs) ToDashboardTextChartThresholdOutputWithContext(ctx context.Context) DashboardTextChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextChartThresholdOutput)
}

// DashboardTextChartThresholdArrayInput is an input type that accepts DashboardTextChartThresholdArray and DashboardTextChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardTextChartThresholdArrayInput` via:
//
//	DashboardTextChartThresholdArray{ DashboardTextChartThresholdArgs{...} }
type DashboardTextChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardTextChartThresholdArrayOutput() DashboardTextChartThresholdArrayOutput
	ToDashboardTextChartThresholdArrayOutputWithContext(context.Context) DashboardTextChartThresholdArrayOutput
}

type DashboardTextChartThresholdArray []DashboardTextChartThresholdInput

func (DashboardTextChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTextChartThreshold)(nil)).Elem()
}

func (i DashboardTextChartThresholdArray) ToDashboardTextChartThresholdArrayOutput() DashboardTextChartThresholdArrayOutput {
	return i.ToDashboardTextChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardTextChartThresholdArray) ToDashboardTextChartThresholdArrayOutputWithContext(ctx context.Context) DashboardTextChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextChartThresholdArrayOutput)
}

type DashboardTextChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardTextChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextChartThreshold)(nil)).Elem()
}

func (o DashboardTextChartThresholdOutput) ToDashboardTextChartThresholdOutput() DashboardTextChartThresholdOutput {
	return o
}

func (o DashboardTextChartThresholdOutput) ToDashboardTextChartThresholdOutputWithContext(ctx context.Context) DashboardTextChartThresholdOutput {
	return o
}

func (o DashboardTextChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTextChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardTextChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTextChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardTextChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardTextChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardTextChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardTextChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTextChartThreshold)(nil)).Elem()
}

func (o DashboardTextChartThresholdArrayOutput) ToDashboardTextChartThresholdArrayOutput() DashboardTextChartThresholdArrayOutput {
	return o
}

func (o DashboardTextChartThresholdArrayOutput) ToDashboardTextChartThresholdArrayOutputWithContext(ctx context.Context) DashboardTextChartThresholdArrayOutput {
	return o
}

func (o DashboardTextChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardTextChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTextChartThreshold {
		return vs[0].([]DashboardTextChartThreshold)[vs[1].(int)]
	}).(DashboardTextChartThresholdOutput)
}

type DashboardTextChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardTextChartValueMappingInput is an input type that accepts DashboardTextChartValueMappingArgs and DashboardTextChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardTextChartValueMappingInput` via:
//
//	DashboardTextChartValueMappingArgs{...}
type DashboardTextChartValueMappingInput interface {
	pulumi.Input

	ToDashboardTextChartValueMappingOutput() DashboardTextChartValueMappingOutput
	ToDashboardTextChartValueMappingOutputWithContext(context.Context) DashboardTextChartValueMappingOutput
}

type DashboardTextChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardTextChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextChartValueMapping)(nil)).Elem()
}

func (i DashboardTextChartValueMappingArgs) ToDashboardTextChartValueMappingOutput() DashboardTextChartValueMappingOutput {
	return i.ToDashboardTextChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardTextChartValueMappingArgs) ToDashboardTextChartValueMappingOutputWithContext(ctx context.Context) DashboardTextChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextChartValueMappingOutput)
}

// DashboardTextChartValueMappingArrayInput is an input type that accepts DashboardTextChartValueMappingArray and DashboardTextChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardTextChartValueMappingArrayInput` via:
//
//	DashboardTextChartValueMappingArray{ DashboardTextChartValueMappingArgs{...} }
type DashboardTextChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardTextChartValueMappingArrayOutput() DashboardTextChartValueMappingArrayOutput
	ToDashboardTextChartValueMappingArrayOutputWithContext(context.Context) DashboardTextChartValueMappingArrayOutput
}

type DashboardTextChartValueMappingArray []DashboardTextChartValueMappingInput

func (DashboardTextChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTextChartValueMapping)(nil)).Elem()
}

func (i DashboardTextChartValueMappingArray) ToDashboardTextChartValueMappingArrayOutput() DashboardTextChartValueMappingArrayOutput {
	return i.ToDashboardTextChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardTextChartValueMappingArray) ToDashboardTextChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardTextChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextChartValueMappingArrayOutput)
}

type DashboardTextChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardTextChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextChartValueMapping)(nil)).Elem()
}

func (o DashboardTextChartValueMappingOutput) ToDashboardTextChartValueMappingOutput() DashboardTextChartValueMappingOutput {
	return o
}

func (o DashboardTextChartValueMappingOutput) ToDashboardTextChartValueMappingOutputWithContext(ctx context.Context) DashboardTextChartValueMappingOutput {
	return o
}

func (o DashboardTextChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTextChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardTextChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTextChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardTextChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardTextChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardTextChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTextChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardTextChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardTextChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTextChartValueMapping)(nil)).Elem()
}

func (o DashboardTextChartValueMappingArrayOutput) ToDashboardTextChartValueMappingArrayOutput() DashboardTextChartValueMappingArrayOutput {
	return o
}

func (o DashboardTextChartValueMappingArrayOutput) ToDashboardTextChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardTextChartValueMappingArrayOutput {
	return o
}

func (o DashboardTextChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardTextChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTextChartValueMapping {
		return vs[0].([]DashboardTextChartValueMapping)[vs[1].(int)]
	}).(DashboardTextChartValueMappingOutput)
}

type DashboardTimeseriesChartChartItem struct {
	Color           string  `pulumi:"color"`
	ExpressionPlain string  `pulumi:"expressionPlain"`
	Hidden          *bool   `pulumi:"hidden"`
	Label           *string `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardTimeseriesChartChartItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardTimeseriesChartChartItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   *string                                               `pulumi:"queryGroupFunction"`
	QueryGroupUnit       *string                                               `pulumi:"queryGroupUnit"`
	QueryLimit           *int                                                  `pulumi:"queryLimit"`
	QueryPlain           string                                                `pulumi:"queryPlain"`
	QuerySortDirection   *int                                                  `pulumi:"querySortDirection"`
	RefId                string                                                `pulumi:"refId"`
	Type                 string                                                `pulumi:"type"`
}

// DashboardTimeseriesChartChartItemInput is an input type that accepts DashboardTimeseriesChartChartItemArgs and DashboardTimeseriesChartChartItemOutput values.
// You can construct a concrete instance of `DashboardTimeseriesChartChartItemInput` via:
//
//	DashboardTimeseriesChartChartItemArgs{...}
type DashboardTimeseriesChartChartItemInput interface {
	pulumi.Input

	ToDashboardTimeseriesChartChartItemOutput() DashboardTimeseriesChartChartItemOutput
	ToDashboardTimeseriesChartChartItemOutputWithContext(context.Context) DashboardTimeseriesChartChartItemOutput
}

type DashboardTimeseriesChartChartItemArgs struct {
	Color           pulumi.StringInput    `pulumi:"color"`
	ExpressionPlain pulumi.StringInput    `pulumi:"expressionPlain"`
	Hidden          pulumi.BoolPtrInput   `pulumi:"hidden"`
	Label           pulumi.StringPtrInput `pulumi:"label"`
	// Asset filter
	QueryFilterAsset DashboardTimeseriesChartChartItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute DashboardTimeseriesChartChartItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	QueryGroupFunction   pulumi.StringPtrInput                                      `pulumi:"queryGroupFunction"`
	QueryGroupUnit       pulumi.StringPtrInput                                      `pulumi:"queryGroupUnit"`
	QueryLimit           pulumi.IntPtrInput                                         `pulumi:"queryLimit"`
	QueryPlain           pulumi.StringInput                                         `pulumi:"queryPlain"`
	QuerySortDirection   pulumi.IntPtrInput                                         `pulumi:"querySortDirection"`
	RefId                pulumi.StringInput                                         `pulumi:"refId"`
	Type                 pulumi.StringInput                                         `pulumi:"type"`
}

func (DashboardTimeseriesChartChartItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeseriesChartChartItem)(nil)).Elem()
}

func (i DashboardTimeseriesChartChartItemArgs) ToDashboardTimeseriesChartChartItemOutput() DashboardTimeseriesChartChartItemOutput {
	return i.ToDashboardTimeseriesChartChartItemOutputWithContext(context.Background())
}

func (i DashboardTimeseriesChartChartItemArgs) ToDashboardTimeseriesChartChartItemOutputWithContext(ctx context.Context) DashboardTimeseriesChartChartItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeseriesChartChartItemOutput)
}

// DashboardTimeseriesChartChartItemArrayInput is an input type that accepts DashboardTimeseriesChartChartItemArray and DashboardTimeseriesChartChartItemArrayOutput values.
// You can construct a concrete instance of `DashboardTimeseriesChartChartItemArrayInput` via:
//
//	DashboardTimeseriesChartChartItemArray{ DashboardTimeseriesChartChartItemArgs{...} }
type DashboardTimeseriesChartChartItemArrayInput interface {
	pulumi.Input

	ToDashboardTimeseriesChartChartItemArrayOutput() DashboardTimeseriesChartChartItemArrayOutput
	ToDashboardTimeseriesChartChartItemArrayOutputWithContext(context.Context) DashboardTimeseriesChartChartItemArrayOutput
}

type DashboardTimeseriesChartChartItemArray []DashboardTimeseriesChartChartItemInput

func (DashboardTimeseriesChartChartItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTimeseriesChartChartItem)(nil)).Elem()
}

func (i DashboardTimeseriesChartChartItemArray) ToDashboardTimeseriesChartChartItemArrayOutput() DashboardTimeseriesChartChartItemArrayOutput {
	return i.ToDashboardTimeseriesChartChartItemArrayOutputWithContext(context.Background())
}

func (i DashboardTimeseriesChartChartItemArray) ToDashboardTimeseriesChartChartItemArrayOutputWithContext(ctx context.Context) DashboardTimeseriesChartChartItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeseriesChartChartItemArrayOutput)
}

type DashboardTimeseriesChartChartItemOutput struct{ *pulumi.OutputState }

func (DashboardTimeseriesChartChartItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeseriesChartChartItem)(nil)).Elem()
}

func (o DashboardTimeseriesChartChartItemOutput) ToDashboardTimeseriesChartChartItemOutput() DashboardTimeseriesChartChartItemOutput {
	return o
}

func (o DashboardTimeseriesChartChartItemOutput) ToDashboardTimeseriesChartChartItemOutputWithContext(ctx context.Context) DashboardTimeseriesChartChartItemOutput {
	return o
}

func (o DashboardTimeseriesChartChartItemOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardTimeseriesChartChartItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

func (o DashboardTimeseriesChartChartItemOutput) Hidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) *bool { return v.Hidden }).(pulumi.BoolPtrOutput)
}

func (o DashboardTimeseriesChartChartItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o DashboardTimeseriesChartChartItemOutput) QueryFilterAsset() DashboardTimeseriesChartChartItemQueryFilterAssetOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) DashboardTimeseriesChartChartItemQueryFilterAsset {
		return v.QueryFilterAsset
	}).(DashboardTimeseriesChartChartItemQueryFilterAssetOutput)
}

// Attribute filter
func (o DashboardTimeseriesChartChartItemOutput) QueryFilterAttribute() DashboardTimeseriesChartChartItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) DashboardTimeseriesChartChartItemQueryFilterAttribute {
		return v.QueryFilterAttribute
	}).(DashboardTimeseriesChartChartItemQueryFilterAttributeOutput)
}

func (o DashboardTimeseriesChartChartItemOutput) QueryGroupFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) *string { return v.QueryGroupFunction }).(pulumi.StringPtrOutput)
}

func (o DashboardTimeseriesChartChartItemOutput) QueryGroupUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) *string { return v.QueryGroupUnit }).(pulumi.StringPtrOutput)
}

func (o DashboardTimeseriesChartChartItemOutput) QueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) *int { return v.QueryLimit }).(pulumi.IntPtrOutput)
}

func (o DashboardTimeseriesChartChartItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

func (o DashboardTimeseriesChartChartItemOutput) QuerySortDirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) *int { return v.QuerySortDirection }).(pulumi.IntPtrOutput)
}

func (o DashboardTimeseriesChartChartItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) string { return v.RefId }).(pulumi.StringOutput)
}

func (o DashboardTimeseriesChartChartItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItem) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardTimeseriesChartChartItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardTimeseriesChartChartItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTimeseriesChartChartItem)(nil)).Elem()
}

func (o DashboardTimeseriesChartChartItemArrayOutput) ToDashboardTimeseriesChartChartItemArrayOutput() DashboardTimeseriesChartChartItemArrayOutput {
	return o
}

func (o DashboardTimeseriesChartChartItemArrayOutput) ToDashboardTimeseriesChartChartItemArrayOutputWithContext(ctx context.Context) DashboardTimeseriesChartChartItemArrayOutput {
	return o
}

func (o DashboardTimeseriesChartChartItemArrayOutput) Index(i pulumi.IntInput) DashboardTimeseriesChartChartItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTimeseriesChartChartItem {
		return vs[0].([]DashboardTimeseriesChartChartItem)[vs[1].(int)]
	}).(DashboardTimeseriesChartChartItemOutput)
}

type DashboardTimeseriesChartChartItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardTimeseriesChartChartItemQueryFilterAssetInput is an input type that accepts DashboardTimeseriesChartChartItemQueryFilterAssetArgs and DashboardTimeseriesChartChartItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `DashboardTimeseriesChartChartItemQueryFilterAssetInput` via:
//
//	DashboardTimeseriesChartChartItemQueryFilterAssetArgs{...}
type DashboardTimeseriesChartChartItemQueryFilterAssetInput interface {
	pulumi.Input

	ToDashboardTimeseriesChartChartItemQueryFilterAssetOutput() DashboardTimeseriesChartChartItemQueryFilterAssetOutput
	ToDashboardTimeseriesChartChartItemQueryFilterAssetOutputWithContext(context.Context) DashboardTimeseriesChartChartItemQueryFilterAssetOutput
}

type DashboardTimeseriesChartChartItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardTimeseriesChartChartItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeseriesChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (i DashboardTimeseriesChartChartItemQueryFilterAssetArgs) ToDashboardTimeseriesChartChartItemQueryFilterAssetOutput() DashboardTimeseriesChartChartItemQueryFilterAssetOutput {
	return i.ToDashboardTimeseriesChartChartItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i DashboardTimeseriesChartChartItemQueryFilterAssetArgs) ToDashboardTimeseriesChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardTimeseriesChartChartItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeseriesChartChartItemQueryFilterAssetOutput)
}

type DashboardTimeseriesChartChartItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (DashboardTimeseriesChartChartItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeseriesChartChartItemQueryFilterAsset)(nil)).Elem()
}

func (o DashboardTimeseriesChartChartItemQueryFilterAssetOutput) ToDashboardTimeseriesChartChartItemQueryFilterAssetOutput() DashboardTimeseriesChartChartItemQueryFilterAssetOutput {
	return o
}

func (o DashboardTimeseriesChartChartItemQueryFilterAssetOutput) ToDashboardTimeseriesChartChartItemQueryFilterAssetOutputWithContext(ctx context.Context) DashboardTimeseriesChartChartItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o DashboardTimeseriesChartChartItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardTimeseriesChartChartItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardTimeseriesChartChartItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// DashboardTimeseriesChartChartItemQueryFilterAttributeInput is an input type that accepts DashboardTimeseriesChartChartItemQueryFilterAttributeArgs and DashboardTimeseriesChartChartItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `DashboardTimeseriesChartChartItemQueryFilterAttributeInput` via:
//
//	DashboardTimeseriesChartChartItemQueryFilterAttributeArgs{...}
type DashboardTimeseriesChartChartItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToDashboardTimeseriesChartChartItemQueryFilterAttributeOutput() DashboardTimeseriesChartChartItemQueryFilterAttributeOutput
	ToDashboardTimeseriesChartChartItemQueryFilterAttributeOutputWithContext(context.Context) DashboardTimeseriesChartChartItemQueryFilterAttributeOutput
}

type DashboardTimeseriesChartChartItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardTimeseriesChartChartItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeseriesChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (i DashboardTimeseriesChartChartItemQueryFilterAttributeArgs) ToDashboardTimeseriesChartChartItemQueryFilterAttributeOutput() DashboardTimeseriesChartChartItemQueryFilterAttributeOutput {
	return i.ToDashboardTimeseriesChartChartItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i DashboardTimeseriesChartChartItemQueryFilterAttributeArgs) ToDashboardTimeseriesChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardTimeseriesChartChartItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeseriesChartChartItemQueryFilterAttributeOutput)
}

type DashboardTimeseriesChartChartItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (DashboardTimeseriesChartChartItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeseriesChartChartItemQueryFilterAttribute)(nil)).Elem()
}

func (o DashboardTimeseriesChartChartItemQueryFilterAttributeOutput) ToDashboardTimeseriesChartChartItemQueryFilterAttributeOutput() DashboardTimeseriesChartChartItemQueryFilterAttributeOutput {
	return o
}

func (o DashboardTimeseriesChartChartItemQueryFilterAttributeOutput) ToDashboardTimeseriesChartChartItemQueryFilterAttributeOutputWithContext(ctx context.Context) DashboardTimeseriesChartChartItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o DashboardTimeseriesChartChartItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o DashboardTimeseriesChartChartItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartChartItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardTimeseriesChartThreshold struct {
	Color       string  `pulumi:"color"`
	DisplayText string  `pulumi:"displayText"`
	Value       float64 `pulumi:"value"`
}

// DashboardTimeseriesChartThresholdInput is an input type that accepts DashboardTimeseriesChartThresholdArgs and DashboardTimeseriesChartThresholdOutput values.
// You can construct a concrete instance of `DashboardTimeseriesChartThresholdInput` via:
//
//	DashboardTimeseriesChartThresholdArgs{...}
type DashboardTimeseriesChartThresholdInput interface {
	pulumi.Input

	ToDashboardTimeseriesChartThresholdOutput() DashboardTimeseriesChartThresholdOutput
	ToDashboardTimeseriesChartThresholdOutputWithContext(context.Context) DashboardTimeseriesChartThresholdOutput
}

type DashboardTimeseriesChartThresholdArgs struct {
	Color       pulumi.StringInput  `pulumi:"color"`
	DisplayText pulumi.StringInput  `pulumi:"displayText"`
	Value       pulumi.Float64Input `pulumi:"value"`
}

func (DashboardTimeseriesChartThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeseriesChartThreshold)(nil)).Elem()
}

func (i DashboardTimeseriesChartThresholdArgs) ToDashboardTimeseriesChartThresholdOutput() DashboardTimeseriesChartThresholdOutput {
	return i.ToDashboardTimeseriesChartThresholdOutputWithContext(context.Background())
}

func (i DashboardTimeseriesChartThresholdArgs) ToDashboardTimeseriesChartThresholdOutputWithContext(ctx context.Context) DashboardTimeseriesChartThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeseriesChartThresholdOutput)
}

// DashboardTimeseriesChartThresholdArrayInput is an input type that accepts DashboardTimeseriesChartThresholdArray and DashboardTimeseriesChartThresholdArrayOutput values.
// You can construct a concrete instance of `DashboardTimeseriesChartThresholdArrayInput` via:
//
//	DashboardTimeseriesChartThresholdArray{ DashboardTimeseriesChartThresholdArgs{...} }
type DashboardTimeseriesChartThresholdArrayInput interface {
	pulumi.Input

	ToDashboardTimeseriesChartThresholdArrayOutput() DashboardTimeseriesChartThresholdArrayOutput
	ToDashboardTimeseriesChartThresholdArrayOutputWithContext(context.Context) DashboardTimeseriesChartThresholdArrayOutput
}

type DashboardTimeseriesChartThresholdArray []DashboardTimeseriesChartThresholdInput

func (DashboardTimeseriesChartThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTimeseriesChartThreshold)(nil)).Elem()
}

func (i DashboardTimeseriesChartThresholdArray) ToDashboardTimeseriesChartThresholdArrayOutput() DashboardTimeseriesChartThresholdArrayOutput {
	return i.ToDashboardTimeseriesChartThresholdArrayOutputWithContext(context.Background())
}

func (i DashboardTimeseriesChartThresholdArray) ToDashboardTimeseriesChartThresholdArrayOutputWithContext(ctx context.Context) DashboardTimeseriesChartThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeseriesChartThresholdArrayOutput)
}

type DashboardTimeseriesChartThresholdOutput struct{ *pulumi.OutputState }

func (DashboardTimeseriesChartThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeseriesChartThreshold)(nil)).Elem()
}

func (o DashboardTimeseriesChartThresholdOutput) ToDashboardTimeseriesChartThresholdOutput() DashboardTimeseriesChartThresholdOutput {
	return o
}

func (o DashboardTimeseriesChartThresholdOutput) ToDashboardTimeseriesChartThresholdOutputWithContext(ctx context.Context) DashboardTimeseriesChartThresholdOutput {
	return o
}

func (o DashboardTimeseriesChartThresholdOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartThreshold) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardTimeseriesChartThresholdOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartThreshold) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardTimeseriesChartThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardTimeseriesChartThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardTimeseriesChartThresholdArrayOutput struct{ *pulumi.OutputState }

func (DashboardTimeseriesChartThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTimeseriesChartThreshold)(nil)).Elem()
}

func (o DashboardTimeseriesChartThresholdArrayOutput) ToDashboardTimeseriesChartThresholdArrayOutput() DashboardTimeseriesChartThresholdArrayOutput {
	return o
}

func (o DashboardTimeseriesChartThresholdArrayOutput) ToDashboardTimeseriesChartThresholdArrayOutputWithContext(ctx context.Context) DashboardTimeseriesChartThresholdArrayOutput {
	return o
}

func (o DashboardTimeseriesChartThresholdArrayOutput) Index(i pulumi.IntInput) DashboardTimeseriesChartThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTimeseriesChartThreshold {
		return vs[0].([]DashboardTimeseriesChartThreshold)[vs[1].(int)]
	}).(DashboardTimeseriesChartThresholdOutput)
}

type DashboardTimeseriesChartValueMapping struct {
	DisplayText string `pulumi:"displayText"`
	MatchValue  string `pulumi:"matchValue"`
	Order       int    `pulumi:"order"`
	Type        string `pulumi:"type"`
}

// DashboardTimeseriesChartValueMappingInput is an input type that accepts DashboardTimeseriesChartValueMappingArgs and DashboardTimeseriesChartValueMappingOutput values.
// You can construct a concrete instance of `DashboardTimeseriesChartValueMappingInput` via:
//
//	DashboardTimeseriesChartValueMappingArgs{...}
type DashboardTimeseriesChartValueMappingInput interface {
	pulumi.Input

	ToDashboardTimeseriesChartValueMappingOutput() DashboardTimeseriesChartValueMappingOutput
	ToDashboardTimeseriesChartValueMappingOutputWithContext(context.Context) DashboardTimeseriesChartValueMappingOutput
}

type DashboardTimeseriesChartValueMappingArgs struct {
	DisplayText pulumi.StringInput `pulumi:"displayText"`
	MatchValue  pulumi.StringInput `pulumi:"matchValue"`
	Order       pulumi.IntInput    `pulumi:"order"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (DashboardTimeseriesChartValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeseriesChartValueMapping)(nil)).Elem()
}

func (i DashboardTimeseriesChartValueMappingArgs) ToDashboardTimeseriesChartValueMappingOutput() DashboardTimeseriesChartValueMappingOutput {
	return i.ToDashboardTimeseriesChartValueMappingOutputWithContext(context.Background())
}

func (i DashboardTimeseriesChartValueMappingArgs) ToDashboardTimeseriesChartValueMappingOutputWithContext(ctx context.Context) DashboardTimeseriesChartValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeseriesChartValueMappingOutput)
}

// DashboardTimeseriesChartValueMappingArrayInput is an input type that accepts DashboardTimeseriesChartValueMappingArray and DashboardTimeseriesChartValueMappingArrayOutput values.
// You can construct a concrete instance of `DashboardTimeseriesChartValueMappingArrayInput` via:
//
//	DashboardTimeseriesChartValueMappingArray{ DashboardTimeseriesChartValueMappingArgs{...} }
type DashboardTimeseriesChartValueMappingArrayInput interface {
	pulumi.Input

	ToDashboardTimeseriesChartValueMappingArrayOutput() DashboardTimeseriesChartValueMappingArrayOutput
	ToDashboardTimeseriesChartValueMappingArrayOutputWithContext(context.Context) DashboardTimeseriesChartValueMappingArrayOutput
}

type DashboardTimeseriesChartValueMappingArray []DashboardTimeseriesChartValueMappingInput

func (DashboardTimeseriesChartValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTimeseriesChartValueMapping)(nil)).Elem()
}

func (i DashboardTimeseriesChartValueMappingArray) ToDashboardTimeseriesChartValueMappingArrayOutput() DashboardTimeseriesChartValueMappingArrayOutput {
	return i.ToDashboardTimeseriesChartValueMappingArrayOutputWithContext(context.Background())
}

func (i DashboardTimeseriesChartValueMappingArray) ToDashboardTimeseriesChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardTimeseriesChartValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeseriesChartValueMappingArrayOutput)
}

type DashboardTimeseriesChartValueMappingOutput struct{ *pulumi.OutputState }

func (DashboardTimeseriesChartValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeseriesChartValueMapping)(nil)).Elem()
}

func (o DashboardTimeseriesChartValueMappingOutput) ToDashboardTimeseriesChartValueMappingOutput() DashboardTimeseriesChartValueMappingOutput {
	return o
}

func (o DashboardTimeseriesChartValueMappingOutput) ToDashboardTimeseriesChartValueMappingOutputWithContext(ctx context.Context) DashboardTimeseriesChartValueMappingOutput {
	return o
}

func (o DashboardTimeseriesChartValueMappingOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartValueMapping) string { return v.DisplayText }).(pulumi.StringOutput)
}

func (o DashboardTimeseriesChartValueMappingOutput) MatchValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartValueMapping) string { return v.MatchValue }).(pulumi.StringOutput)
}

func (o DashboardTimeseriesChartValueMappingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartValueMapping) int { return v.Order }).(pulumi.IntOutput)
}

func (o DashboardTimeseriesChartValueMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeseriesChartValueMapping) string { return v.Type }).(pulumi.StringOutput)
}

type DashboardTimeseriesChartValueMappingArrayOutput struct{ *pulumi.OutputState }

func (DashboardTimeseriesChartValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTimeseriesChartValueMapping)(nil)).Elem()
}

func (o DashboardTimeseriesChartValueMappingArrayOutput) ToDashboardTimeseriesChartValueMappingArrayOutput() DashboardTimeseriesChartValueMappingArrayOutput {
	return o
}

func (o DashboardTimeseriesChartValueMappingArrayOutput) ToDashboardTimeseriesChartValueMappingArrayOutputWithContext(ctx context.Context) DashboardTimeseriesChartValueMappingArrayOutput {
	return o
}

func (o DashboardTimeseriesChartValueMappingArrayOutput) Index(i pulumi.IntInput) DashboardTimeseriesChartValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTimeseriesChartValueMapping {
		return vs[0].([]DashboardTimeseriesChartValueMapping)[vs[1].(int)]
	}).(DashboardTimeseriesChartValueMappingOutput)
}

type ExternalGridKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// ExternalGridKindInput is an input type that accepts ExternalGridKindArgs and ExternalGridKindOutput values.
// You can construct a concrete instance of `ExternalGridKindInput` via:
//
//	ExternalGridKindArgs{...}
type ExternalGridKindInput interface {
	pulumi.Input

	ToExternalGridKindOutput() ExternalGridKindOutput
	ToExternalGridKindOutputWithContext(context.Context) ExternalGridKindOutput
}

type ExternalGridKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (ExternalGridKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalGridKind)(nil)).Elem()
}

func (i ExternalGridKindArgs) ToExternalGridKindOutput() ExternalGridKindOutput {
	return i.ToExternalGridKindOutputWithContext(context.Background())
}

func (i ExternalGridKindArgs) ToExternalGridKindOutputWithContext(ctx context.Context) ExternalGridKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalGridKindOutput)
}

// ExternalGridKindArrayInput is an input type that accepts ExternalGridKindArray and ExternalGridKindArrayOutput values.
// You can construct a concrete instance of `ExternalGridKindArrayInput` via:
//
//	ExternalGridKindArray{ ExternalGridKindArgs{...} }
type ExternalGridKindArrayInput interface {
	pulumi.Input

	ToExternalGridKindArrayOutput() ExternalGridKindArrayOutput
	ToExternalGridKindArrayOutputWithContext(context.Context) ExternalGridKindArrayOutput
}

type ExternalGridKindArray []ExternalGridKindInput

func (ExternalGridKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalGridKind)(nil)).Elem()
}

func (i ExternalGridKindArray) ToExternalGridKindArrayOutput() ExternalGridKindArrayOutput {
	return i.ToExternalGridKindArrayOutputWithContext(context.Background())
}

func (i ExternalGridKindArray) ToExternalGridKindArrayOutputWithContext(ctx context.Context) ExternalGridKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalGridKindArrayOutput)
}

type ExternalGridKindOutput struct{ *pulumi.OutputState }

func (ExternalGridKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalGridKind)(nil)).Elem()
}

func (o ExternalGridKindOutput) ToExternalGridKindOutput() ExternalGridKindOutput {
	return o
}

func (o ExternalGridKindOutput) ToExternalGridKindOutputWithContext(ctx context.Context) ExternalGridKindOutput {
	return o
}

// kind id
func (o ExternalGridKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalGridKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o ExternalGridKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalGridKind) string { return v.Name }).(pulumi.StringOutput)
}

type ExternalGridKindArrayOutput struct{ *pulumi.OutputState }

func (ExternalGridKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalGridKind)(nil)).Elem()
}

func (o ExternalGridKindArrayOutput) ToExternalGridKindArrayOutput() ExternalGridKindArrayOutput {
	return o
}

func (o ExternalGridKindArrayOutput) ToExternalGridKindArrayOutputWithContext(ctx context.Context) ExternalGridKindArrayOutput {
	return o
}

func (o ExternalGridKindArrayOutput) Index(i pulumi.IntInput) ExternalGridKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalGridKind {
		return vs[0].([]ExternalGridKind)[vs[1].(int)]
	}).(ExternalGridKindOutput)
}

type ExternalGridTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// ExternalGridTagInput is an input type that accepts ExternalGridTagArgs and ExternalGridTagOutput values.
// You can construct a concrete instance of `ExternalGridTagInput` via:
//
//	ExternalGridTagArgs{...}
type ExternalGridTagInput interface {
	pulumi.Input

	ToExternalGridTagOutput() ExternalGridTagOutput
	ToExternalGridTagOutputWithContext(context.Context) ExternalGridTagOutput
}

type ExternalGridTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (ExternalGridTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalGridTag)(nil)).Elem()
}

func (i ExternalGridTagArgs) ToExternalGridTagOutput() ExternalGridTagOutput {
	return i.ToExternalGridTagOutputWithContext(context.Background())
}

func (i ExternalGridTagArgs) ToExternalGridTagOutputWithContext(ctx context.Context) ExternalGridTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalGridTagOutput)
}

// ExternalGridTagArrayInput is an input type that accepts ExternalGridTagArray and ExternalGridTagArrayOutput values.
// You can construct a concrete instance of `ExternalGridTagArrayInput` via:
//
//	ExternalGridTagArray{ ExternalGridTagArgs{...} }
type ExternalGridTagArrayInput interface {
	pulumi.Input

	ToExternalGridTagArrayOutput() ExternalGridTagArrayOutput
	ToExternalGridTagArrayOutputWithContext(context.Context) ExternalGridTagArrayOutput
}

type ExternalGridTagArray []ExternalGridTagInput

func (ExternalGridTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalGridTag)(nil)).Elem()
}

func (i ExternalGridTagArray) ToExternalGridTagArrayOutput() ExternalGridTagArrayOutput {
	return i.ToExternalGridTagArrayOutputWithContext(context.Background())
}

func (i ExternalGridTagArray) ToExternalGridTagArrayOutputWithContext(ctx context.Context) ExternalGridTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalGridTagArrayOutput)
}

type ExternalGridTagOutput struct{ *pulumi.OutputState }

func (ExternalGridTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalGridTag)(nil)).Elem()
}

func (o ExternalGridTagOutput) ToExternalGridTagOutput() ExternalGridTagOutput {
	return o
}

func (o ExternalGridTagOutput) ToExternalGridTagOutputWithContext(ctx context.Context) ExternalGridTagOutput {
	return o
}

// tag id
func (o ExternalGridTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalGridTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o ExternalGridTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalGridTag) string { return v.Name }).(pulumi.StringOutput)
}

type ExternalGridTagArrayOutput struct{ *pulumi.OutputState }

func (ExternalGridTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalGridTag)(nil)).Elem()
}

func (o ExternalGridTagArrayOutput) ToExternalGridTagArrayOutput() ExternalGridTagArrayOutput {
	return o
}

func (o ExternalGridTagArrayOutput) ToExternalGridTagArrayOutputWithContext(ctx context.Context) ExternalGridTagArrayOutput {
	return o
}

func (o ExternalGridTagArrayOutput) Index(i pulumi.IntInput) ExternalGridTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalGridTag {
		return vs[0].([]ExternalGridTag)[vs[1].(int)]
	}).(ExternalGridTagOutput)
}

type FileRelatedAsset struct {
	// asset id
	Id string `pulumi:"id"`
	// asset name
	Name string `pulumi:"name"`
}

// FileRelatedAssetInput is an input type that accepts FileRelatedAssetArgs and FileRelatedAssetOutput values.
// You can construct a concrete instance of `FileRelatedAssetInput` via:
//
//	FileRelatedAssetArgs{...}
type FileRelatedAssetInput interface {
	pulumi.Input

	ToFileRelatedAssetOutput() FileRelatedAssetOutput
	ToFileRelatedAssetOutputWithContext(context.Context) FileRelatedAssetOutput
}

type FileRelatedAssetArgs struct {
	// asset id
	Id pulumi.StringInput `pulumi:"id"`
	// asset name
	Name pulumi.StringInput `pulumi:"name"`
}

func (FileRelatedAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileRelatedAsset)(nil)).Elem()
}

func (i FileRelatedAssetArgs) ToFileRelatedAssetOutput() FileRelatedAssetOutput {
	return i.ToFileRelatedAssetOutputWithContext(context.Background())
}

func (i FileRelatedAssetArgs) ToFileRelatedAssetOutputWithContext(ctx context.Context) FileRelatedAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileRelatedAssetOutput)
}

// FileRelatedAssetArrayInput is an input type that accepts FileRelatedAssetArray and FileRelatedAssetArrayOutput values.
// You can construct a concrete instance of `FileRelatedAssetArrayInput` via:
//
//	FileRelatedAssetArray{ FileRelatedAssetArgs{...} }
type FileRelatedAssetArrayInput interface {
	pulumi.Input

	ToFileRelatedAssetArrayOutput() FileRelatedAssetArrayOutput
	ToFileRelatedAssetArrayOutputWithContext(context.Context) FileRelatedAssetArrayOutput
}

type FileRelatedAssetArray []FileRelatedAssetInput

func (FileRelatedAssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileRelatedAsset)(nil)).Elem()
}

func (i FileRelatedAssetArray) ToFileRelatedAssetArrayOutput() FileRelatedAssetArrayOutput {
	return i.ToFileRelatedAssetArrayOutputWithContext(context.Background())
}

func (i FileRelatedAssetArray) ToFileRelatedAssetArrayOutputWithContext(ctx context.Context) FileRelatedAssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileRelatedAssetArrayOutput)
}

type FileRelatedAssetOutput struct{ *pulumi.OutputState }

func (FileRelatedAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileRelatedAsset)(nil)).Elem()
}

func (o FileRelatedAssetOutput) ToFileRelatedAssetOutput() FileRelatedAssetOutput {
	return o
}

func (o FileRelatedAssetOutput) ToFileRelatedAssetOutputWithContext(ctx context.Context) FileRelatedAssetOutput {
	return o
}

// asset id
func (o FileRelatedAssetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FileRelatedAsset) string { return v.Id }).(pulumi.StringOutput)
}

// asset name
func (o FileRelatedAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FileRelatedAsset) string { return v.Name }).(pulumi.StringOutput)
}

type FileRelatedAssetArrayOutput struct{ *pulumi.OutputState }

func (FileRelatedAssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileRelatedAsset)(nil)).Elem()
}

func (o FileRelatedAssetArrayOutput) ToFileRelatedAssetArrayOutput() FileRelatedAssetArrayOutput {
	return o
}

func (o FileRelatedAssetArrayOutput) ToFileRelatedAssetArrayOutputWithContext(ctx context.Context) FileRelatedAssetArrayOutput {
	return o
}

func (o FileRelatedAssetArrayOutput) Index(i pulumi.IntInput) FileRelatedAssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileRelatedAsset {
		return vs[0].([]FileRelatedAsset)[vs[1].(int)]
	}).(FileRelatedAssetOutput)
}

type FileTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// FileTagInput is an input type that accepts FileTagArgs and FileTagOutput values.
// You can construct a concrete instance of `FileTagInput` via:
//
//	FileTagArgs{...}
type FileTagInput interface {
	pulumi.Input

	ToFileTagOutput() FileTagOutput
	ToFileTagOutputWithContext(context.Context) FileTagOutput
}

type FileTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (FileTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileTag)(nil)).Elem()
}

func (i FileTagArgs) ToFileTagOutput() FileTagOutput {
	return i.ToFileTagOutputWithContext(context.Background())
}

func (i FileTagArgs) ToFileTagOutputWithContext(ctx context.Context) FileTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileTagOutput)
}

// FileTagArrayInput is an input type that accepts FileTagArray and FileTagArrayOutput values.
// You can construct a concrete instance of `FileTagArrayInput` via:
//
//	FileTagArray{ FileTagArgs{...} }
type FileTagArrayInput interface {
	pulumi.Input

	ToFileTagArrayOutput() FileTagArrayOutput
	ToFileTagArrayOutputWithContext(context.Context) FileTagArrayOutput
}

type FileTagArray []FileTagInput

func (FileTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileTag)(nil)).Elem()
}

func (i FileTagArray) ToFileTagArrayOutput() FileTagArrayOutput {
	return i.ToFileTagArrayOutputWithContext(context.Background())
}

func (i FileTagArray) ToFileTagArrayOutputWithContext(ctx context.Context) FileTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileTagArrayOutput)
}

type FileTagOutput struct{ *pulumi.OutputState }

func (FileTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileTag)(nil)).Elem()
}

func (o FileTagOutput) ToFileTagOutput() FileTagOutput {
	return o
}

func (o FileTagOutput) ToFileTagOutputWithContext(ctx context.Context) FileTagOutput {
	return o
}

// tag id
func (o FileTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FileTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o FileTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FileTag) string { return v.Name }).(pulumi.StringOutput)
}

type FileTagArrayOutput struct{ *pulumi.OutputState }

func (FileTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileTag)(nil)).Elem()
}

func (o FileTagArrayOutput) ToFileTagArrayOutput() FileTagArrayOutput {
	return o
}

func (o FileTagArrayOutput) ToFileTagArrayOutputWithContext(ctx context.Context) FileTagArrayOutput {
	return o
}

func (o FileTagArrayOutput) Index(i pulumi.IntInput) FileTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileTag {
		return vs[0].([]FileTag)[vs[1].(int)]
	}).(FileTagOutput)
}

type FunctionFunctionItem struct {
	// how the expression is shown (i.e 'A * 2')
	Expression string `pulumi:"expression"`
	// actual mongo query containing the expression
	ExpressionPlain string `pulumi:"expressionPlain"`
	// Id of the function item
	Id *string `pulumi:"id"`
	// Asset filter
	QueryFilterAsset FunctionFunctionItemQueryFilterAsset `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute FunctionFunctionItemQueryFilterAttribute `pulumi:"queryFilterAttribute"`
	// function used to aggregate data
	QueryGroupFunction string `pulumi:"queryGroupFunction"`
	// time window to apply the aggregation
	QueryGroupUnit string `pulumi:"queryGroupUnit"`
	// actual mongo query
	QueryPlain string `pulumi:"queryPlain"`
	// identifier of the variable (i.e 'A')
	RefId string `pulumi:"refId"`
	// either QUERY or EXPRESSION
	Type string `pulumi:"type"`
}

// FunctionFunctionItemInput is an input type that accepts FunctionFunctionItemArgs and FunctionFunctionItemOutput values.
// You can construct a concrete instance of `FunctionFunctionItemInput` via:
//
//	FunctionFunctionItemArgs{...}
type FunctionFunctionItemInput interface {
	pulumi.Input

	ToFunctionFunctionItemOutput() FunctionFunctionItemOutput
	ToFunctionFunctionItemOutputWithContext(context.Context) FunctionFunctionItemOutput
}

type FunctionFunctionItemArgs struct {
	// how the expression is shown (i.e 'A * 2')
	Expression pulumi.StringInput `pulumi:"expression"`
	// actual mongo query containing the expression
	ExpressionPlain pulumi.StringInput `pulumi:"expressionPlain"`
	// Id of the function item
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Asset filter
	QueryFilterAsset FunctionFunctionItemQueryFilterAssetInput `pulumi:"queryFilterAsset"`
	// Attribute filter
	QueryFilterAttribute FunctionFunctionItemQueryFilterAttributeInput `pulumi:"queryFilterAttribute"`
	// function used to aggregate data
	QueryGroupFunction pulumi.StringInput `pulumi:"queryGroupFunction"`
	// time window to apply the aggregation
	QueryGroupUnit pulumi.StringInput `pulumi:"queryGroupUnit"`
	// actual mongo query
	QueryPlain pulumi.StringInput `pulumi:"queryPlain"`
	// identifier of the variable (i.e 'A')
	RefId pulumi.StringInput `pulumi:"refId"`
	// either QUERY or EXPRESSION
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionFunctionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFunctionItem)(nil)).Elem()
}

func (i FunctionFunctionItemArgs) ToFunctionFunctionItemOutput() FunctionFunctionItemOutput {
	return i.ToFunctionFunctionItemOutputWithContext(context.Background())
}

func (i FunctionFunctionItemArgs) ToFunctionFunctionItemOutputWithContext(ctx context.Context) FunctionFunctionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionFunctionItemOutput)
}

// FunctionFunctionItemArrayInput is an input type that accepts FunctionFunctionItemArray and FunctionFunctionItemArrayOutput values.
// You can construct a concrete instance of `FunctionFunctionItemArrayInput` via:
//
//	FunctionFunctionItemArray{ FunctionFunctionItemArgs{...} }
type FunctionFunctionItemArrayInput interface {
	pulumi.Input

	ToFunctionFunctionItemArrayOutput() FunctionFunctionItemArrayOutput
	ToFunctionFunctionItemArrayOutputWithContext(context.Context) FunctionFunctionItemArrayOutput
}

type FunctionFunctionItemArray []FunctionFunctionItemInput

func (FunctionFunctionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionFunctionItem)(nil)).Elem()
}

func (i FunctionFunctionItemArray) ToFunctionFunctionItemArrayOutput() FunctionFunctionItemArrayOutput {
	return i.ToFunctionFunctionItemArrayOutputWithContext(context.Background())
}

func (i FunctionFunctionItemArray) ToFunctionFunctionItemArrayOutputWithContext(ctx context.Context) FunctionFunctionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionFunctionItemArrayOutput)
}

type FunctionFunctionItemOutput struct{ *pulumi.OutputState }

func (FunctionFunctionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFunctionItem)(nil)).Elem()
}

func (o FunctionFunctionItemOutput) ToFunctionFunctionItemOutput() FunctionFunctionItemOutput {
	return o
}

func (o FunctionFunctionItemOutput) ToFunctionFunctionItemOutputWithContext(ctx context.Context) FunctionFunctionItemOutput {
	return o
}

// how the expression is shown (i.e 'A * 2')
func (o FunctionFunctionItemOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFunctionItem) string { return v.Expression }).(pulumi.StringOutput)
}

// actual mongo query containing the expression
func (o FunctionFunctionItemOutput) ExpressionPlain() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFunctionItem) string { return v.ExpressionPlain }).(pulumi.StringOutput)
}

// Id of the function item
func (o FunctionFunctionItemOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionFunctionItem) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Asset filter
func (o FunctionFunctionItemOutput) QueryFilterAsset() FunctionFunctionItemQueryFilterAssetOutput {
	return o.ApplyT(func(v FunctionFunctionItem) FunctionFunctionItemQueryFilterAsset { return v.QueryFilterAsset }).(FunctionFunctionItemQueryFilterAssetOutput)
}

// Attribute filter
func (o FunctionFunctionItemOutput) QueryFilterAttribute() FunctionFunctionItemQueryFilterAttributeOutput {
	return o.ApplyT(func(v FunctionFunctionItem) FunctionFunctionItemQueryFilterAttribute { return v.QueryFilterAttribute }).(FunctionFunctionItemQueryFilterAttributeOutput)
}

// function used to aggregate data
func (o FunctionFunctionItemOutput) QueryGroupFunction() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFunctionItem) string { return v.QueryGroupFunction }).(pulumi.StringOutput)
}

// time window to apply the aggregation
func (o FunctionFunctionItemOutput) QueryGroupUnit() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFunctionItem) string { return v.QueryGroupUnit }).(pulumi.StringOutput)
}

// actual mongo query
func (o FunctionFunctionItemOutput) QueryPlain() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFunctionItem) string { return v.QueryPlain }).(pulumi.StringOutput)
}

// identifier of the variable (i.e 'A')
func (o FunctionFunctionItemOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFunctionItem) string { return v.RefId }).(pulumi.StringOutput)
}

// either QUERY or EXPRESSION
func (o FunctionFunctionItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFunctionItem) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionFunctionItemArrayOutput struct{ *pulumi.OutputState }

func (FunctionFunctionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionFunctionItem)(nil)).Elem()
}

func (o FunctionFunctionItemArrayOutput) ToFunctionFunctionItemArrayOutput() FunctionFunctionItemArrayOutput {
	return o
}

func (o FunctionFunctionItemArrayOutput) ToFunctionFunctionItemArrayOutputWithContext(ctx context.Context) FunctionFunctionItemArrayOutput {
	return o
}

func (o FunctionFunctionItemArrayOutput) Index(i pulumi.IntInput) FunctionFunctionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionFunctionItem {
		return vs[0].([]FunctionFunctionItem)[vs[1].(int)]
	}).(FunctionFunctionItemOutput)
}

type FunctionFunctionItemQueryFilterAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// FunctionFunctionItemQueryFilterAssetInput is an input type that accepts FunctionFunctionItemQueryFilterAssetArgs and FunctionFunctionItemQueryFilterAssetOutput values.
// You can construct a concrete instance of `FunctionFunctionItemQueryFilterAssetInput` via:
//
//	FunctionFunctionItemQueryFilterAssetArgs{...}
type FunctionFunctionItemQueryFilterAssetInput interface {
	pulumi.Input

	ToFunctionFunctionItemQueryFilterAssetOutput() FunctionFunctionItemQueryFilterAssetOutput
	ToFunctionFunctionItemQueryFilterAssetOutputWithContext(context.Context) FunctionFunctionItemQueryFilterAssetOutput
}

type FunctionFunctionItemQueryFilterAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (FunctionFunctionItemQueryFilterAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFunctionItemQueryFilterAsset)(nil)).Elem()
}

func (i FunctionFunctionItemQueryFilterAssetArgs) ToFunctionFunctionItemQueryFilterAssetOutput() FunctionFunctionItemQueryFilterAssetOutput {
	return i.ToFunctionFunctionItemQueryFilterAssetOutputWithContext(context.Background())
}

func (i FunctionFunctionItemQueryFilterAssetArgs) ToFunctionFunctionItemQueryFilterAssetOutputWithContext(ctx context.Context) FunctionFunctionItemQueryFilterAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionFunctionItemQueryFilterAssetOutput)
}

type FunctionFunctionItemQueryFilterAssetOutput struct{ *pulumi.OutputState }

func (FunctionFunctionItemQueryFilterAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFunctionItemQueryFilterAsset)(nil)).Elem()
}

func (o FunctionFunctionItemQueryFilterAssetOutput) ToFunctionFunctionItemQueryFilterAssetOutput() FunctionFunctionItemQueryFilterAssetOutput {
	return o
}

func (o FunctionFunctionItemQueryFilterAssetOutput) ToFunctionFunctionItemQueryFilterAssetOutputWithContext(ctx context.Context) FunctionFunctionItemQueryFilterAssetOutput {
	return o
}

// Id of the resource
func (o FunctionFunctionItemQueryFilterAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionFunctionItemQueryFilterAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o FunctionFunctionItemQueryFilterAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionFunctionItemQueryFilterAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type FunctionFunctionItemQueryFilterAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// type of the resource
	Type *string `pulumi:"type"`
}

// FunctionFunctionItemQueryFilterAttributeInput is an input type that accepts FunctionFunctionItemQueryFilterAttributeArgs and FunctionFunctionItemQueryFilterAttributeOutput values.
// You can construct a concrete instance of `FunctionFunctionItemQueryFilterAttributeInput` via:
//
//	FunctionFunctionItemQueryFilterAttributeArgs{...}
type FunctionFunctionItemQueryFilterAttributeInput interface {
	pulumi.Input

	ToFunctionFunctionItemQueryFilterAttributeOutput() FunctionFunctionItemQueryFilterAttributeOutput
	ToFunctionFunctionItemQueryFilterAttributeOutputWithContext(context.Context) FunctionFunctionItemQueryFilterAttributeOutput
}

type FunctionFunctionItemQueryFilterAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// type of the resource
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FunctionFunctionItemQueryFilterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFunctionItemQueryFilterAttribute)(nil)).Elem()
}

func (i FunctionFunctionItemQueryFilterAttributeArgs) ToFunctionFunctionItemQueryFilterAttributeOutput() FunctionFunctionItemQueryFilterAttributeOutput {
	return i.ToFunctionFunctionItemQueryFilterAttributeOutputWithContext(context.Background())
}

func (i FunctionFunctionItemQueryFilterAttributeArgs) ToFunctionFunctionItemQueryFilterAttributeOutputWithContext(ctx context.Context) FunctionFunctionItemQueryFilterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionFunctionItemQueryFilterAttributeOutput)
}

type FunctionFunctionItemQueryFilterAttributeOutput struct{ *pulumi.OutputState }

func (FunctionFunctionItemQueryFilterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFunctionItemQueryFilterAttribute)(nil)).Elem()
}

func (o FunctionFunctionItemQueryFilterAttributeOutput) ToFunctionFunctionItemQueryFilterAttributeOutput() FunctionFunctionItemQueryFilterAttributeOutput {
	return o
}

func (o FunctionFunctionItemQueryFilterAttributeOutput) ToFunctionFunctionItemQueryFilterAttributeOutputWithContext(ctx context.Context) FunctionFunctionItemQueryFilterAttributeOutput {
	return o
}

// Id of the resource
func (o FunctionFunctionItemQueryFilterAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionFunctionItemQueryFilterAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o FunctionFunctionItemQueryFilterAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionFunctionItemQueryFilterAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// type of the resource
func (o FunctionFunctionItemQueryFilterAttributeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionFunctionItemQueryFilterAttribute) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FunctionTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// FunctionTagInput is an input type that accepts FunctionTagArgs and FunctionTagOutput values.
// You can construct a concrete instance of `FunctionTagInput` via:
//
//	FunctionTagArgs{...}
type FunctionTagInput interface {
	pulumi.Input

	ToFunctionTagOutput() FunctionTagOutput
	ToFunctionTagOutputWithContext(context.Context) FunctionTagOutput
}

type FunctionTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (FunctionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTag)(nil)).Elem()
}

func (i FunctionTagArgs) ToFunctionTagOutput() FunctionTagOutput {
	return i.ToFunctionTagOutputWithContext(context.Background())
}

func (i FunctionTagArgs) ToFunctionTagOutputWithContext(ctx context.Context) FunctionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTagOutput)
}

// FunctionTagArrayInput is an input type that accepts FunctionTagArray and FunctionTagArrayOutput values.
// You can construct a concrete instance of `FunctionTagArrayInput` via:
//
//	FunctionTagArray{ FunctionTagArgs{...} }
type FunctionTagArrayInput interface {
	pulumi.Input

	ToFunctionTagArrayOutput() FunctionTagArrayOutput
	ToFunctionTagArrayOutputWithContext(context.Context) FunctionTagArrayOutput
}

type FunctionTagArray []FunctionTagInput

func (FunctionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionTag)(nil)).Elem()
}

func (i FunctionTagArray) ToFunctionTagArrayOutput() FunctionTagArrayOutput {
	return i.ToFunctionTagArrayOutputWithContext(context.Background())
}

func (i FunctionTagArray) ToFunctionTagArrayOutputWithContext(ctx context.Context) FunctionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTagArrayOutput)
}

type FunctionTagOutput struct{ *pulumi.OutputState }

func (FunctionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTag)(nil)).Elem()
}

func (o FunctionTagOutput) ToFunctionTagOutput() FunctionTagOutput {
	return o
}

func (o FunctionTagOutput) ToFunctionTagOutputWithContext(ctx context.Context) FunctionTagOutput {
	return o
}

// tag id
func (o FunctionTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o FunctionTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionTag) string { return v.Name }).(pulumi.StringOutput)
}

type FunctionTagArrayOutput struct{ *pulumi.OutputState }

func (FunctionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionTag)(nil)).Elem()
}

func (o FunctionTagArrayOutput) ToFunctionTagArrayOutput() FunctionTagArrayOutput {
	return o
}

func (o FunctionTagArrayOutput) ToFunctionTagArrayOutputWithContext(ctx context.Context) FunctionTagArrayOutput {
	return o
}

func (o FunctionTagArrayOutput) Index(i pulumi.IntInput) FunctionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionTag {
		return vs[0].([]FunctionTag)[vs[1].(int)]
	}).(FunctionTagOutput)
}

type FunctionTargetAsset struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
}

// FunctionTargetAssetInput is an input type that accepts FunctionTargetAssetArgs and FunctionTargetAssetOutput values.
// You can construct a concrete instance of `FunctionTargetAssetInput` via:
//
//	FunctionTargetAssetArgs{...}
type FunctionTargetAssetInput interface {
	pulumi.Input

	ToFunctionTargetAssetOutput() FunctionTargetAssetOutput
	ToFunctionTargetAssetOutputWithContext(context.Context) FunctionTargetAssetOutput
}

type FunctionTargetAssetArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (FunctionTargetAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTargetAsset)(nil)).Elem()
}

func (i FunctionTargetAssetArgs) ToFunctionTargetAssetOutput() FunctionTargetAssetOutput {
	return i.ToFunctionTargetAssetOutputWithContext(context.Background())
}

func (i FunctionTargetAssetArgs) ToFunctionTargetAssetOutputWithContext(ctx context.Context) FunctionTargetAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTargetAssetOutput)
}

func (i FunctionTargetAssetArgs) ToFunctionTargetAssetPtrOutput() FunctionTargetAssetPtrOutput {
	return i.ToFunctionTargetAssetPtrOutputWithContext(context.Background())
}

func (i FunctionTargetAssetArgs) ToFunctionTargetAssetPtrOutputWithContext(ctx context.Context) FunctionTargetAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTargetAssetOutput).ToFunctionTargetAssetPtrOutputWithContext(ctx)
}

// FunctionTargetAssetPtrInput is an input type that accepts FunctionTargetAssetArgs, FunctionTargetAssetPtr and FunctionTargetAssetPtrOutput values.
// You can construct a concrete instance of `FunctionTargetAssetPtrInput` via:
//
//	        FunctionTargetAssetArgs{...}
//
//	or:
//
//	        nil
type FunctionTargetAssetPtrInput interface {
	pulumi.Input

	ToFunctionTargetAssetPtrOutput() FunctionTargetAssetPtrOutput
	ToFunctionTargetAssetPtrOutputWithContext(context.Context) FunctionTargetAssetPtrOutput
}

type functionTargetAssetPtrType FunctionTargetAssetArgs

func FunctionTargetAssetPtr(v *FunctionTargetAssetArgs) FunctionTargetAssetPtrInput {
	return (*functionTargetAssetPtrType)(v)
}

func (*functionTargetAssetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTargetAsset)(nil)).Elem()
}

func (i *functionTargetAssetPtrType) ToFunctionTargetAssetPtrOutput() FunctionTargetAssetPtrOutput {
	return i.ToFunctionTargetAssetPtrOutputWithContext(context.Background())
}

func (i *functionTargetAssetPtrType) ToFunctionTargetAssetPtrOutputWithContext(ctx context.Context) FunctionTargetAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTargetAssetPtrOutput)
}

type FunctionTargetAssetOutput struct{ *pulumi.OutputState }

func (FunctionTargetAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTargetAsset)(nil)).Elem()
}

func (o FunctionTargetAssetOutput) ToFunctionTargetAssetOutput() FunctionTargetAssetOutput {
	return o
}

func (o FunctionTargetAssetOutput) ToFunctionTargetAssetOutputWithContext(ctx context.Context) FunctionTargetAssetOutput {
	return o
}

func (o FunctionTargetAssetOutput) ToFunctionTargetAssetPtrOutput() FunctionTargetAssetPtrOutput {
	return o.ToFunctionTargetAssetPtrOutputWithContext(context.Background())
}

func (o FunctionTargetAssetOutput) ToFunctionTargetAssetPtrOutputWithContext(ctx context.Context) FunctionTargetAssetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionTargetAsset) *FunctionTargetAsset {
		return &v
	}).(FunctionTargetAssetPtrOutput)
}

// Id of the resource
func (o FunctionTargetAssetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTargetAsset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o FunctionTargetAssetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTargetAsset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type FunctionTargetAssetPtrOutput struct{ *pulumi.OutputState }

func (FunctionTargetAssetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTargetAsset)(nil)).Elem()
}

func (o FunctionTargetAssetPtrOutput) ToFunctionTargetAssetPtrOutput() FunctionTargetAssetPtrOutput {
	return o
}

func (o FunctionTargetAssetPtrOutput) ToFunctionTargetAssetPtrOutputWithContext(ctx context.Context) FunctionTargetAssetPtrOutput {
	return o
}

func (o FunctionTargetAssetPtrOutput) Elem() FunctionTargetAssetOutput {
	return o.ApplyT(func(v *FunctionTargetAsset) FunctionTargetAsset {
		if v != nil {
			return *v
		}
		var ret FunctionTargetAsset
		return ret
	}).(FunctionTargetAssetOutput)
}

// Id of the resource
func (o FunctionTargetAssetPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTargetAsset) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o FunctionTargetAssetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTargetAsset) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type FunctionTargetAttribute struct {
	// Id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// type of the resource
	Type *string `pulumi:"type"`
}

// FunctionTargetAttributeInput is an input type that accepts FunctionTargetAttributeArgs and FunctionTargetAttributeOutput values.
// You can construct a concrete instance of `FunctionTargetAttributeInput` via:
//
//	FunctionTargetAttributeArgs{...}
type FunctionTargetAttributeInput interface {
	pulumi.Input

	ToFunctionTargetAttributeOutput() FunctionTargetAttributeOutput
	ToFunctionTargetAttributeOutputWithContext(context.Context) FunctionTargetAttributeOutput
}

type FunctionTargetAttributeArgs struct {
	// Id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// type of the resource
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FunctionTargetAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTargetAttribute)(nil)).Elem()
}

func (i FunctionTargetAttributeArgs) ToFunctionTargetAttributeOutput() FunctionTargetAttributeOutput {
	return i.ToFunctionTargetAttributeOutputWithContext(context.Background())
}

func (i FunctionTargetAttributeArgs) ToFunctionTargetAttributeOutputWithContext(ctx context.Context) FunctionTargetAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTargetAttributeOutput)
}

func (i FunctionTargetAttributeArgs) ToFunctionTargetAttributePtrOutput() FunctionTargetAttributePtrOutput {
	return i.ToFunctionTargetAttributePtrOutputWithContext(context.Background())
}

func (i FunctionTargetAttributeArgs) ToFunctionTargetAttributePtrOutputWithContext(ctx context.Context) FunctionTargetAttributePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTargetAttributeOutput).ToFunctionTargetAttributePtrOutputWithContext(ctx)
}

// FunctionTargetAttributePtrInput is an input type that accepts FunctionTargetAttributeArgs, FunctionTargetAttributePtr and FunctionTargetAttributePtrOutput values.
// You can construct a concrete instance of `FunctionTargetAttributePtrInput` via:
//
//	        FunctionTargetAttributeArgs{...}
//
//	or:
//
//	        nil
type FunctionTargetAttributePtrInput interface {
	pulumi.Input

	ToFunctionTargetAttributePtrOutput() FunctionTargetAttributePtrOutput
	ToFunctionTargetAttributePtrOutputWithContext(context.Context) FunctionTargetAttributePtrOutput
}

type functionTargetAttributePtrType FunctionTargetAttributeArgs

func FunctionTargetAttributePtr(v *FunctionTargetAttributeArgs) FunctionTargetAttributePtrInput {
	return (*functionTargetAttributePtrType)(v)
}

func (*functionTargetAttributePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTargetAttribute)(nil)).Elem()
}

func (i *functionTargetAttributePtrType) ToFunctionTargetAttributePtrOutput() FunctionTargetAttributePtrOutput {
	return i.ToFunctionTargetAttributePtrOutputWithContext(context.Background())
}

func (i *functionTargetAttributePtrType) ToFunctionTargetAttributePtrOutputWithContext(ctx context.Context) FunctionTargetAttributePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTargetAttributePtrOutput)
}

type FunctionTargetAttributeOutput struct{ *pulumi.OutputState }

func (FunctionTargetAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTargetAttribute)(nil)).Elem()
}

func (o FunctionTargetAttributeOutput) ToFunctionTargetAttributeOutput() FunctionTargetAttributeOutput {
	return o
}

func (o FunctionTargetAttributeOutput) ToFunctionTargetAttributeOutputWithContext(ctx context.Context) FunctionTargetAttributeOutput {
	return o
}

func (o FunctionTargetAttributeOutput) ToFunctionTargetAttributePtrOutput() FunctionTargetAttributePtrOutput {
	return o.ToFunctionTargetAttributePtrOutputWithContext(context.Background())
}

func (o FunctionTargetAttributeOutput) ToFunctionTargetAttributePtrOutputWithContext(ctx context.Context) FunctionTargetAttributePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionTargetAttribute) *FunctionTargetAttribute {
		return &v
	}).(FunctionTargetAttributePtrOutput)
}

// Id of the resource
func (o FunctionTargetAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTargetAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o FunctionTargetAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTargetAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// type of the resource
func (o FunctionTargetAttributeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTargetAttribute) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FunctionTargetAttributePtrOutput struct{ *pulumi.OutputState }

func (FunctionTargetAttributePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTargetAttribute)(nil)).Elem()
}

func (o FunctionTargetAttributePtrOutput) ToFunctionTargetAttributePtrOutput() FunctionTargetAttributePtrOutput {
	return o
}

func (o FunctionTargetAttributePtrOutput) ToFunctionTargetAttributePtrOutputWithContext(ctx context.Context) FunctionTargetAttributePtrOutput {
	return o
}

func (o FunctionTargetAttributePtrOutput) Elem() FunctionTargetAttributeOutput {
	return o.ApplyT(func(v *FunctionTargetAttribute) FunctionTargetAttribute {
		if v != nil {
			return *v
		}
		var ret FunctionTargetAttribute
		return ret
	}).(FunctionTargetAttributeOutput)
}

// Id of the resource
func (o FunctionTargetAttributePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTargetAttribute) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o FunctionTargetAttributePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTargetAttribute) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// type of the resource
func (o FunctionTargetAttributePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTargetAttribute) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type GeneratorActivePower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// GeneratorActivePowerInput is an input type that accepts GeneratorActivePowerArgs and GeneratorActivePowerOutput values.
// You can construct a concrete instance of `GeneratorActivePowerInput` via:
//
//	GeneratorActivePowerArgs{...}
type GeneratorActivePowerInput interface {
	pulumi.Input

	ToGeneratorActivePowerOutput() GeneratorActivePowerOutput
	ToGeneratorActivePowerOutputWithContext(context.Context) GeneratorActivePowerOutput
}

type GeneratorActivePowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (GeneratorActivePowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorActivePower)(nil)).Elem()
}

func (i GeneratorActivePowerArgs) ToGeneratorActivePowerOutput() GeneratorActivePowerOutput {
	return i.ToGeneratorActivePowerOutputWithContext(context.Background())
}

func (i GeneratorActivePowerArgs) ToGeneratorActivePowerOutputWithContext(ctx context.Context) GeneratorActivePowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorActivePowerOutput)
}

// GeneratorActivePowerArrayInput is an input type that accepts GeneratorActivePowerArray and GeneratorActivePowerArrayOutput values.
// You can construct a concrete instance of `GeneratorActivePowerArrayInput` via:
//
//	GeneratorActivePowerArray{ GeneratorActivePowerArgs{...} }
type GeneratorActivePowerArrayInput interface {
	pulumi.Input

	ToGeneratorActivePowerArrayOutput() GeneratorActivePowerArrayOutput
	ToGeneratorActivePowerArrayOutputWithContext(context.Context) GeneratorActivePowerArrayOutput
}

type GeneratorActivePowerArray []GeneratorActivePowerInput

func (GeneratorActivePowerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorActivePower)(nil)).Elem()
}

func (i GeneratorActivePowerArray) ToGeneratorActivePowerArrayOutput() GeneratorActivePowerArrayOutput {
	return i.ToGeneratorActivePowerArrayOutputWithContext(context.Background())
}

func (i GeneratorActivePowerArray) ToGeneratorActivePowerArrayOutputWithContext(ctx context.Context) GeneratorActivePowerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorActivePowerArrayOutput)
}

type GeneratorActivePowerOutput struct{ *pulumi.OutputState }

func (GeneratorActivePowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorActivePower)(nil)).Elem()
}

func (o GeneratorActivePowerOutput) ToGeneratorActivePowerOutput() GeneratorActivePowerOutput {
	return o
}

func (o GeneratorActivePowerOutput) ToGeneratorActivePowerOutputWithContext(ctx context.Context) GeneratorActivePowerOutput {
	return o
}

// reference to the asset to be linked to
func (o GeneratorActivePowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorActivePower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o GeneratorActivePowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorActivePower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o GeneratorActivePowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorActivePower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o GeneratorActivePowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorActivePower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o GeneratorActivePowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorActivePower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type GeneratorActivePowerArrayOutput struct{ *pulumi.OutputState }

func (GeneratorActivePowerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorActivePower)(nil)).Elem()
}

func (o GeneratorActivePowerArrayOutput) ToGeneratorActivePowerArrayOutput() GeneratorActivePowerArrayOutput {
	return o
}

func (o GeneratorActivePowerArrayOutput) ToGeneratorActivePowerArrayOutputWithContext(ctx context.Context) GeneratorActivePowerArrayOutput {
	return o
}

func (o GeneratorActivePowerArrayOutput) Index(i pulumi.IntInput) GeneratorActivePowerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GeneratorActivePower {
		return vs[0].([]GeneratorActivePower)[vs[1].(int)]
	}).(GeneratorActivePowerOutput)
}

type GeneratorCo2Coefficient struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// GeneratorCo2CoefficientInput is an input type that accepts GeneratorCo2CoefficientArgs and GeneratorCo2CoefficientOutput values.
// You can construct a concrete instance of `GeneratorCo2CoefficientInput` via:
//
//	GeneratorCo2CoefficientArgs{...}
type GeneratorCo2CoefficientInput interface {
	pulumi.Input

	ToGeneratorCo2CoefficientOutput() GeneratorCo2CoefficientOutput
	ToGeneratorCo2CoefficientOutputWithContext(context.Context) GeneratorCo2CoefficientOutput
}

type GeneratorCo2CoefficientArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GeneratorCo2CoefficientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorCo2Coefficient)(nil)).Elem()
}

func (i GeneratorCo2CoefficientArgs) ToGeneratorCo2CoefficientOutput() GeneratorCo2CoefficientOutput {
	return i.ToGeneratorCo2CoefficientOutputWithContext(context.Background())
}

func (i GeneratorCo2CoefficientArgs) ToGeneratorCo2CoefficientOutputWithContext(ctx context.Context) GeneratorCo2CoefficientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorCo2CoefficientOutput)
}

func (i GeneratorCo2CoefficientArgs) ToGeneratorCo2CoefficientPtrOutput() GeneratorCo2CoefficientPtrOutput {
	return i.ToGeneratorCo2CoefficientPtrOutputWithContext(context.Background())
}

func (i GeneratorCo2CoefficientArgs) ToGeneratorCo2CoefficientPtrOutputWithContext(ctx context.Context) GeneratorCo2CoefficientPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorCo2CoefficientOutput).ToGeneratorCo2CoefficientPtrOutputWithContext(ctx)
}

// GeneratorCo2CoefficientPtrInput is an input type that accepts GeneratorCo2CoefficientArgs, GeneratorCo2CoefficientPtr and GeneratorCo2CoefficientPtrOutput values.
// You can construct a concrete instance of `GeneratorCo2CoefficientPtrInput` via:
//
//	        GeneratorCo2CoefficientArgs{...}
//
//	or:
//
//	        nil
type GeneratorCo2CoefficientPtrInput interface {
	pulumi.Input

	ToGeneratorCo2CoefficientPtrOutput() GeneratorCo2CoefficientPtrOutput
	ToGeneratorCo2CoefficientPtrOutputWithContext(context.Context) GeneratorCo2CoefficientPtrOutput
}

type generatorCo2CoefficientPtrType GeneratorCo2CoefficientArgs

func GeneratorCo2CoefficientPtr(v *GeneratorCo2CoefficientArgs) GeneratorCo2CoefficientPtrInput {
	return (*generatorCo2CoefficientPtrType)(v)
}

func (*generatorCo2CoefficientPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GeneratorCo2Coefficient)(nil)).Elem()
}

func (i *generatorCo2CoefficientPtrType) ToGeneratorCo2CoefficientPtrOutput() GeneratorCo2CoefficientPtrOutput {
	return i.ToGeneratorCo2CoefficientPtrOutputWithContext(context.Background())
}

func (i *generatorCo2CoefficientPtrType) ToGeneratorCo2CoefficientPtrOutputWithContext(ctx context.Context) GeneratorCo2CoefficientPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorCo2CoefficientPtrOutput)
}

type GeneratorCo2CoefficientOutput struct{ *pulumi.OutputState }

func (GeneratorCo2CoefficientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorCo2Coefficient)(nil)).Elem()
}

func (o GeneratorCo2CoefficientOutput) ToGeneratorCo2CoefficientOutput() GeneratorCo2CoefficientOutput {
	return o
}

func (o GeneratorCo2CoefficientOutput) ToGeneratorCo2CoefficientOutputWithContext(ctx context.Context) GeneratorCo2CoefficientOutput {
	return o
}

func (o GeneratorCo2CoefficientOutput) ToGeneratorCo2CoefficientPtrOutput() GeneratorCo2CoefficientPtrOutput {
	return o.ToGeneratorCo2CoefficientPtrOutputWithContext(context.Background())
}

func (o GeneratorCo2CoefficientOutput) ToGeneratorCo2CoefficientPtrOutputWithContext(ctx context.Context) GeneratorCo2CoefficientPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GeneratorCo2Coefficient) *GeneratorCo2Coefficient {
		return &v
	}).(GeneratorCo2CoefficientPtrOutput)
}

// reference to the asset to be linked to
func (o GeneratorCo2CoefficientOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorCo2Coefficient) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o GeneratorCo2CoefficientOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorCo2Coefficient) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o GeneratorCo2CoefficientOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorCo2Coefficient) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o GeneratorCo2CoefficientOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorCo2Coefficient) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o GeneratorCo2CoefficientOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorCo2Coefficient) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o GeneratorCo2CoefficientOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorCo2Coefficient) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GeneratorCo2CoefficientPtrOutput struct{ *pulumi.OutputState }

func (GeneratorCo2CoefficientPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeneratorCo2Coefficient)(nil)).Elem()
}

func (o GeneratorCo2CoefficientPtrOutput) ToGeneratorCo2CoefficientPtrOutput() GeneratorCo2CoefficientPtrOutput {
	return o
}

func (o GeneratorCo2CoefficientPtrOutput) ToGeneratorCo2CoefficientPtrOutputWithContext(ctx context.Context) GeneratorCo2CoefficientPtrOutput {
	return o
}

func (o GeneratorCo2CoefficientPtrOutput) Elem() GeneratorCo2CoefficientOutput {
	return o.ApplyT(func(v *GeneratorCo2Coefficient) GeneratorCo2Coefficient {
		if v != nil {
			return *v
		}
		var ret GeneratorCo2Coefficient
		return ret
	}).(GeneratorCo2CoefficientOutput)
}

// reference to the asset to be linked to
func (o GeneratorCo2CoefficientPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GeneratorCo2Coefficient) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o GeneratorCo2CoefficientPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GeneratorCo2Coefficient) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o GeneratorCo2CoefficientPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GeneratorCo2Coefficient) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o GeneratorCo2CoefficientPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GeneratorCo2Coefficient) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o GeneratorCo2CoefficientPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GeneratorCo2Coefficient) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o GeneratorCo2CoefficientPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GeneratorCo2Coefficient) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type GeneratorDailyEmissionAvoided struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// GeneratorDailyEmissionAvoidedInput is an input type that accepts GeneratorDailyEmissionAvoidedArgs and GeneratorDailyEmissionAvoidedOutput values.
// You can construct a concrete instance of `GeneratorDailyEmissionAvoidedInput` via:
//
//	GeneratorDailyEmissionAvoidedArgs{...}
type GeneratorDailyEmissionAvoidedInput interface {
	pulumi.Input

	ToGeneratorDailyEmissionAvoidedOutput() GeneratorDailyEmissionAvoidedOutput
	ToGeneratorDailyEmissionAvoidedOutputWithContext(context.Context) GeneratorDailyEmissionAvoidedOutput
}

type GeneratorDailyEmissionAvoidedArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (GeneratorDailyEmissionAvoidedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorDailyEmissionAvoided)(nil)).Elem()
}

func (i GeneratorDailyEmissionAvoidedArgs) ToGeneratorDailyEmissionAvoidedOutput() GeneratorDailyEmissionAvoidedOutput {
	return i.ToGeneratorDailyEmissionAvoidedOutputWithContext(context.Background())
}

func (i GeneratorDailyEmissionAvoidedArgs) ToGeneratorDailyEmissionAvoidedOutputWithContext(ctx context.Context) GeneratorDailyEmissionAvoidedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorDailyEmissionAvoidedOutput)
}

// GeneratorDailyEmissionAvoidedArrayInput is an input type that accepts GeneratorDailyEmissionAvoidedArray and GeneratorDailyEmissionAvoidedArrayOutput values.
// You can construct a concrete instance of `GeneratorDailyEmissionAvoidedArrayInput` via:
//
//	GeneratorDailyEmissionAvoidedArray{ GeneratorDailyEmissionAvoidedArgs{...} }
type GeneratorDailyEmissionAvoidedArrayInput interface {
	pulumi.Input

	ToGeneratorDailyEmissionAvoidedArrayOutput() GeneratorDailyEmissionAvoidedArrayOutput
	ToGeneratorDailyEmissionAvoidedArrayOutputWithContext(context.Context) GeneratorDailyEmissionAvoidedArrayOutput
}

type GeneratorDailyEmissionAvoidedArray []GeneratorDailyEmissionAvoidedInput

func (GeneratorDailyEmissionAvoidedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorDailyEmissionAvoided)(nil)).Elem()
}

func (i GeneratorDailyEmissionAvoidedArray) ToGeneratorDailyEmissionAvoidedArrayOutput() GeneratorDailyEmissionAvoidedArrayOutput {
	return i.ToGeneratorDailyEmissionAvoidedArrayOutputWithContext(context.Background())
}

func (i GeneratorDailyEmissionAvoidedArray) ToGeneratorDailyEmissionAvoidedArrayOutputWithContext(ctx context.Context) GeneratorDailyEmissionAvoidedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorDailyEmissionAvoidedArrayOutput)
}

type GeneratorDailyEmissionAvoidedOutput struct{ *pulumi.OutputState }

func (GeneratorDailyEmissionAvoidedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorDailyEmissionAvoided)(nil)).Elem()
}

func (o GeneratorDailyEmissionAvoidedOutput) ToGeneratorDailyEmissionAvoidedOutput() GeneratorDailyEmissionAvoidedOutput {
	return o
}

func (o GeneratorDailyEmissionAvoidedOutput) ToGeneratorDailyEmissionAvoidedOutputWithContext(ctx context.Context) GeneratorDailyEmissionAvoidedOutput {
	return o
}

// reference to the asset to be linked to
func (o GeneratorDailyEmissionAvoidedOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorDailyEmissionAvoided) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o GeneratorDailyEmissionAvoidedOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorDailyEmissionAvoided) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o GeneratorDailyEmissionAvoidedOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorDailyEmissionAvoided) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o GeneratorDailyEmissionAvoidedOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorDailyEmissionAvoided) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o GeneratorDailyEmissionAvoidedOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorDailyEmissionAvoided) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type GeneratorDailyEmissionAvoidedArrayOutput struct{ *pulumi.OutputState }

func (GeneratorDailyEmissionAvoidedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorDailyEmissionAvoided)(nil)).Elem()
}

func (o GeneratorDailyEmissionAvoidedArrayOutput) ToGeneratorDailyEmissionAvoidedArrayOutput() GeneratorDailyEmissionAvoidedArrayOutput {
	return o
}

func (o GeneratorDailyEmissionAvoidedArrayOutput) ToGeneratorDailyEmissionAvoidedArrayOutputWithContext(ctx context.Context) GeneratorDailyEmissionAvoidedArrayOutput {
	return o
}

func (o GeneratorDailyEmissionAvoidedArrayOutput) Index(i pulumi.IntInput) GeneratorDailyEmissionAvoidedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GeneratorDailyEmissionAvoided {
		return vs[0].([]GeneratorDailyEmissionAvoided)[vs[1].(int)]
	}).(GeneratorDailyEmissionAvoidedOutput)
}

type GeneratorDailyEnergy struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// GeneratorDailyEnergyInput is an input type that accepts GeneratorDailyEnergyArgs and GeneratorDailyEnergyOutput values.
// You can construct a concrete instance of `GeneratorDailyEnergyInput` via:
//
//	GeneratorDailyEnergyArgs{...}
type GeneratorDailyEnergyInput interface {
	pulumi.Input

	ToGeneratorDailyEnergyOutput() GeneratorDailyEnergyOutput
	ToGeneratorDailyEnergyOutputWithContext(context.Context) GeneratorDailyEnergyOutput
}

type GeneratorDailyEnergyArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (GeneratorDailyEnergyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorDailyEnergy)(nil)).Elem()
}

func (i GeneratorDailyEnergyArgs) ToGeneratorDailyEnergyOutput() GeneratorDailyEnergyOutput {
	return i.ToGeneratorDailyEnergyOutputWithContext(context.Background())
}

func (i GeneratorDailyEnergyArgs) ToGeneratorDailyEnergyOutputWithContext(ctx context.Context) GeneratorDailyEnergyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorDailyEnergyOutput)
}

// GeneratorDailyEnergyArrayInput is an input type that accepts GeneratorDailyEnergyArray and GeneratorDailyEnergyArrayOutput values.
// You can construct a concrete instance of `GeneratorDailyEnergyArrayInput` via:
//
//	GeneratorDailyEnergyArray{ GeneratorDailyEnergyArgs{...} }
type GeneratorDailyEnergyArrayInput interface {
	pulumi.Input

	ToGeneratorDailyEnergyArrayOutput() GeneratorDailyEnergyArrayOutput
	ToGeneratorDailyEnergyArrayOutputWithContext(context.Context) GeneratorDailyEnergyArrayOutput
}

type GeneratorDailyEnergyArray []GeneratorDailyEnergyInput

func (GeneratorDailyEnergyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorDailyEnergy)(nil)).Elem()
}

func (i GeneratorDailyEnergyArray) ToGeneratorDailyEnergyArrayOutput() GeneratorDailyEnergyArrayOutput {
	return i.ToGeneratorDailyEnergyArrayOutputWithContext(context.Background())
}

func (i GeneratorDailyEnergyArray) ToGeneratorDailyEnergyArrayOutputWithContext(ctx context.Context) GeneratorDailyEnergyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorDailyEnergyArrayOutput)
}

type GeneratorDailyEnergyOutput struct{ *pulumi.OutputState }

func (GeneratorDailyEnergyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorDailyEnergy)(nil)).Elem()
}

func (o GeneratorDailyEnergyOutput) ToGeneratorDailyEnergyOutput() GeneratorDailyEnergyOutput {
	return o
}

func (o GeneratorDailyEnergyOutput) ToGeneratorDailyEnergyOutputWithContext(ctx context.Context) GeneratorDailyEnergyOutput {
	return o
}

// reference to the asset to be linked to
func (o GeneratorDailyEnergyOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorDailyEnergy) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o GeneratorDailyEnergyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorDailyEnergy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o GeneratorDailyEnergyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorDailyEnergy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o GeneratorDailyEnergyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorDailyEnergy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o GeneratorDailyEnergyOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorDailyEnergy) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type GeneratorDailyEnergyArrayOutput struct{ *pulumi.OutputState }

func (GeneratorDailyEnergyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorDailyEnergy)(nil)).Elem()
}

func (o GeneratorDailyEnergyArrayOutput) ToGeneratorDailyEnergyArrayOutput() GeneratorDailyEnergyArrayOutput {
	return o
}

func (o GeneratorDailyEnergyArrayOutput) ToGeneratorDailyEnergyArrayOutputWithContext(ctx context.Context) GeneratorDailyEnergyArrayOutput {
	return o
}

func (o GeneratorDailyEnergyArrayOutput) Index(i pulumi.IntInput) GeneratorDailyEnergyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GeneratorDailyEnergy {
		return vs[0].([]GeneratorDailyEnergy)[vs[1].(int)]
	}).(GeneratorDailyEnergyOutput)
}

type GeneratorKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// GeneratorKindInput is an input type that accepts GeneratorKindArgs and GeneratorKindOutput values.
// You can construct a concrete instance of `GeneratorKindInput` via:
//
//	GeneratorKindArgs{...}
type GeneratorKindInput interface {
	pulumi.Input

	ToGeneratorKindOutput() GeneratorKindOutput
	ToGeneratorKindOutputWithContext(context.Context) GeneratorKindOutput
}

type GeneratorKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (GeneratorKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorKind)(nil)).Elem()
}

func (i GeneratorKindArgs) ToGeneratorKindOutput() GeneratorKindOutput {
	return i.ToGeneratorKindOutputWithContext(context.Background())
}

func (i GeneratorKindArgs) ToGeneratorKindOutputWithContext(ctx context.Context) GeneratorKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorKindOutput)
}

// GeneratorKindArrayInput is an input type that accepts GeneratorKindArray and GeneratorKindArrayOutput values.
// You can construct a concrete instance of `GeneratorKindArrayInput` via:
//
//	GeneratorKindArray{ GeneratorKindArgs{...} }
type GeneratorKindArrayInput interface {
	pulumi.Input

	ToGeneratorKindArrayOutput() GeneratorKindArrayOutput
	ToGeneratorKindArrayOutputWithContext(context.Context) GeneratorKindArrayOutput
}

type GeneratorKindArray []GeneratorKindInput

func (GeneratorKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorKind)(nil)).Elem()
}

func (i GeneratorKindArray) ToGeneratorKindArrayOutput() GeneratorKindArrayOutput {
	return i.ToGeneratorKindArrayOutputWithContext(context.Background())
}

func (i GeneratorKindArray) ToGeneratorKindArrayOutputWithContext(ctx context.Context) GeneratorKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorKindArrayOutput)
}

type GeneratorKindOutput struct{ *pulumi.OutputState }

func (GeneratorKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorKind)(nil)).Elem()
}

func (o GeneratorKindOutput) ToGeneratorKindOutput() GeneratorKindOutput {
	return o
}

func (o GeneratorKindOutput) ToGeneratorKindOutputWithContext(ctx context.Context) GeneratorKindOutput {
	return o
}

// kind id
func (o GeneratorKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GeneratorKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o GeneratorKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GeneratorKind) string { return v.Name }).(pulumi.StringOutput)
}

type GeneratorKindArrayOutput struct{ *pulumi.OutputState }

func (GeneratorKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorKind)(nil)).Elem()
}

func (o GeneratorKindArrayOutput) ToGeneratorKindArrayOutput() GeneratorKindArrayOutput {
	return o
}

func (o GeneratorKindArrayOutput) ToGeneratorKindArrayOutputWithContext(ctx context.Context) GeneratorKindArrayOutput {
	return o
}

func (o GeneratorKindArrayOutput) Index(i pulumi.IntInput) GeneratorKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GeneratorKind {
		return vs[0].([]GeneratorKind)[vs[1].(int)]
	}).(GeneratorKindOutput)
}

type GeneratorMonthlyEnergy struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// GeneratorMonthlyEnergyInput is an input type that accepts GeneratorMonthlyEnergyArgs and GeneratorMonthlyEnergyOutput values.
// You can construct a concrete instance of `GeneratorMonthlyEnergyInput` via:
//
//	GeneratorMonthlyEnergyArgs{...}
type GeneratorMonthlyEnergyInput interface {
	pulumi.Input

	ToGeneratorMonthlyEnergyOutput() GeneratorMonthlyEnergyOutput
	ToGeneratorMonthlyEnergyOutputWithContext(context.Context) GeneratorMonthlyEnergyOutput
}

type GeneratorMonthlyEnergyArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (GeneratorMonthlyEnergyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorMonthlyEnergy)(nil)).Elem()
}

func (i GeneratorMonthlyEnergyArgs) ToGeneratorMonthlyEnergyOutput() GeneratorMonthlyEnergyOutput {
	return i.ToGeneratorMonthlyEnergyOutputWithContext(context.Background())
}

func (i GeneratorMonthlyEnergyArgs) ToGeneratorMonthlyEnergyOutputWithContext(ctx context.Context) GeneratorMonthlyEnergyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorMonthlyEnergyOutput)
}

// GeneratorMonthlyEnergyArrayInput is an input type that accepts GeneratorMonthlyEnergyArray and GeneratorMonthlyEnergyArrayOutput values.
// You can construct a concrete instance of `GeneratorMonthlyEnergyArrayInput` via:
//
//	GeneratorMonthlyEnergyArray{ GeneratorMonthlyEnergyArgs{...} }
type GeneratorMonthlyEnergyArrayInput interface {
	pulumi.Input

	ToGeneratorMonthlyEnergyArrayOutput() GeneratorMonthlyEnergyArrayOutput
	ToGeneratorMonthlyEnergyArrayOutputWithContext(context.Context) GeneratorMonthlyEnergyArrayOutput
}

type GeneratorMonthlyEnergyArray []GeneratorMonthlyEnergyInput

func (GeneratorMonthlyEnergyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorMonthlyEnergy)(nil)).Elem()
}

func (i GeneratorMonthlyEnergyArray) ToGeneratorMonthlyEnergyArrayOutput() GeneratorMonthlyEnergyArrayOutput {
	return i.ToGeneratorMonthlyEnergyArrayOutputWithContext(context.Background())
}

func (i GeneratorMonthlyEnergyArray) ToGeneratorMonthlyEnergyArrayOutputWithContext(ctx context.Context) GeneratorMonthlyEnergyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorMonthlyEnergyArrayOutput)
}

type GeneratorMonthlyEnergyOutput struct{ *pulumi.OutputState }

func (GeneratorMonthlyEnergyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorMonthlyEnergy)(nil)).Elem()
}

func (o GeneratorMonthlyEnergyOutput) ToGeneratorMonthlyEnergyOutput() GeneratorMonthlyEnergyOutput {
	return o
}

func (o GeneratorMonthlyEnergyOutput) ToGeneratorMonthlyEnergyOutputWithContext(ctx context.Context) GeneratorMonthlyEnergyOutput {
	return o
}

// reference to the asset to be linked to
func (o GeneratorMonthlyEnergyOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorMonthlyEnergy) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o GeneratorMonthlyEnergyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorMonthlyEnergy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o GeneratorMonthlyEnergyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorMonthlyEnergy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o GeneratorMonthlyEnergyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorMonthlyEnergy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o GeneratorMonthlyEnergyOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorMonthlyEnergy) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type GeneratorMonthlyEnergyArrayOutput struct{ *pulumi.OutputState }

func (GeneratorMonthlyEnergyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorMonthlyEnergy)(nil)).Elem()
}

func (o GeneratorMonthlyEnergyArrayOutput) ToGeneratorMonthlyEnergyArrayOutput() GeneratorMonthlyEnergyArrayOutput {
	return o
}

func (o GeneratorMonthlyEnergyArrayOutput) ToGeneratorMonthlyEnergyArrayOutputWithContext(ctx context.Context) GeneratorMonthlyEnergyArrayOutput {
	return o
}

func (o GeneratorMonthlyEnergyArrayOutput) Index(i pulumi.IntInput) GeneratorMonthlyEnergyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GeneratorMonthlyEnergy {
		return vs[0].([]GeneratorMonthlyEnergy)[vs[1].(int)]
	}).(GeneratorMonthlyEnergyOutput)
}

type GeneratorReactivePower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// GeneratorReactivePowerInput is an input type that accepts GeneratorReactivePowerArgs and GeneratorReactivePowerOutput values.
// You can construct a concrete instance of `GeneratorReactivePowerInput` via:
//
//	GeneratorReactivePowerArgs{...}
type GeneratorReactivePowerInput interface {
	pulumi.Input

	ToGeneratorReactivePowerOutput() GeneratorReactivePowerOutput
	ToGeneratorReactivePowerOutputWithContext(context.Context) GeneratorReactivePowerOutput
}

type GeneratorReactivePowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (GeneratorReactivePowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorReactivePower)(nil)).Elem()
}

func (i GeneratorReactivePowerArgs) ToGeneratorReactivePowerOutput() GeneratorReactivePowerOutput {
	return i.ToGeneratorReactivePowerOutputWithContext(context.Background())
}

func (i GeneratorReactivePowerArgs) ToGeneratorReactivePowerOutputWithContext(ctx context.Context) GeneratorReactivePowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorReactivePowerOutput)
}

// GeneratorReactivePowerArrayInput is an input type that accepts GeneratorReactivePowerArray and GeneratorReactivePowerArrayOutput values.
// You can construct a concrete instance of `GeneratorReactivePowerArrayInput` via:
//
//	GeneratorReactivePowerArray{ GeneratorReactivePowerArgs{...} }
type GeneratorReactivePowerArrayInput interface {
	pulumi.Input

	ToGeneratorReactivePowerArrayOutput() GeneratorReactivePowerArrayOutput
	ToGeneratorReactivePowerArrayOutputWithContext(context.Context) GeneratorReactivePowerArrayOutput
}

type GeneratorReactivePowerArray []GeneratorReactivePowerInput

func (GeneratorReactivePowerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorReactivePower)(nil)).Elem()
}

func (i GeneratorReactivePowerArray) ToGeneratorReactivePowerArrayOutput() GeneratorReactivePowerArrayOutput {
	return i.ToGeneratorReactivePowerArrayOutputWithContext(context.Background())
}

func (i GeneratorReactivePowerArray) ToGeneratorReactivePowerArrayOutputWithContext(ctx context.Context) GeneratorReactivePowerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorReactivePowerArrayOutput)
}

type GeneratorReactivePowerOutput struct{ *pulumi.OutputState }

func (GeneratorReactivePowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorReactivePower)(nil)).Elem()
}

func (o GeneratorReactivePowerOutput) ToGeneratorReactivePowerOutput() GeneratorReactivePowerOutput {
	return o
}

func (o GeneratorReactivePowerOutput) ToGeneratorReactivePowerOutputWithContext(ctx context.Context) GeneratorReactivePowerOutput {
	return o
}

// reference to the asset to be linked to
func (o GeneratorReactivePowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorReactivePower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o GeneratorReactivePowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorReactivePower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o GeneratorReactivePowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorReactivePower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o GeneratorReactivePowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorReactivePower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o GeneratorReactivePowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorReactivePower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type GeneratorReactivePowerArrayOutput struct{ *pulumi.OutputState }

func (GeneratorReactivePowerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorReactivePower)(nil)).Elem()
}

func (o GeneratorReactivePowerArrayOutput) ToGeneratorReactivePowerArrayOutput() GeneratorReactivePowerArrayOutput {
	return o
}

func (o GeneratorReactivePowerArrayOutput) ToGeneratorReactivePowerArrayOutputWithContext(ctx context.Context) GeneratorReactivePowerArrayOutput {
	return o
}

func (o GeneratorReactivePowerArrayOutput) Index(i pulumi.IntInput) GeneratorReactivePowerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GeneratorReactivePower {
		return vs[0].([]GeneratorReactivePower)[vs[1].(int)]
	}).(GeneratorReactivePowerOutput)
}

type GeneratorSwitchStatus struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// GeneratorSwitchStatusInput is an input type that accepts GeneratorSwitchStatusArgs and GeneratorSwitchStatusOutput values.
// You can construct a concrete instance of `GeneratorSwitchStatusInput` via:
//
//	GeneratorSwitchStatusArgs{...}
type GeneratorSwitchStatusInput interface {
	pulumi.Input

	ToGeneratorSwitchStatusOutput() GeneratorSwitchStatusOutput
	ToGeneratorSwitchStatusOutputWithContext(context.Context) GeneratorSwitchStatusOutput
}

type GeneratorSwitchStatusArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (GeneratorSwitchStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorSwitchStatus)(nil)).Elem()
}

func (i GeneratorSwitchStatusArgs) ToGeneratorSwitchStatusOutput() GeneratorSwitchStatusOutput {
	return i.ToGeneratorSwitchStatusOutputWithContext(context.Background())
}

func (i GeneratorSwitchStatusArgs) ToGeneratorSwitchStatusOutputWithContext(ctx context.Context) GeneratorSwitchStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorSwitchStatusOutput)
}

// GeneratorSwitchStatusArrayInput is an input type that accepts GeneratorSwitchStatusArray and GeneratorSwitchStatusArrayOutput values.
// You can construct a concrete instance of `GeneratorSwitchStatusArrayInput` via:
//
//	GeneratorSwitchStatusArray{ GeneratorSwitchStatusArgs{...} }
type GeneratorSwitchStatusArrayInput interface {
	pulumi.Input

	ToGeneratorSwitchStatusArrayOutput() GeneratorSwitchStatusArrayOutput
	ToGeneratorSwitchStatusArrayOutputWithContext(context.Context) GeneratorSwitchStatusArrayOutput
}

type GeneratorSwitchStatusArray []GeneratorSwitchStatusInput

func (GeneratorSwitchStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorSwitchStatus)(nil)).Elem()
}

func (i GeneratorSwitchStatusArray) ToGeneratorSwitchStatusArrayOutput() GeneratorSwitchStatusArrayOutput {
	return i.ToGeneratorSwitchStatusArrayOutputWithContext(context.Background())
}

func (i GeneratorSwitchStatusArray) ToGeneratorSwitchStatusArrayOutputWithContext(ctx context.Context) GeneratorSwitchStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorSwitchStatusArrayOutput)
}

type GeneratorSwitchStatusOutput struct{ *pulumi.OutputState }

func (GeneratorSwitchStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorSwitchStatus)(nil)).Elem()
}

func (o GeneratorSwitchStatusOutput) ToGeneratorSwitchStatusOutput() GeneratorSwitchStatusOutput {
	return o
}

func (o GeneratorSwitchStatusOutput) ToGeneratorSwitchStatusOutputWithContext(ctx context.Context) GeneratorSwitchStatusOutput {
	return o
}

// reference to the asset to be linked to
func (o GeneratorSwitchStatusOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorSwitchStatus) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o GeneratorSwitchStatusOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorSwitchStatus) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o GeneratorSwitchStatusOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorSwitchStatus) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o GeneratorSwitchStatusOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorSwitchStatus) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o GeneratorSwitchStatusOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GeneratorSwitchStatus) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type GeneratorSwitchStatusArrayOutput struct{ *pulumi.OutputState }

func (GeneratorSwitchStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorSwitchStatus)(nil)).Elem()
}

func (o GeneratorSwitchStatusArrayOutput) ToGeneratorSwitchStatusArrayOutput() GeneratorSwitchStatusArrayOutput {
	return o
}

func (o GeneratorSwitchStatusArrayOutput) ToGeneratorSwitchStatusArrayOutputWithContext(ctx context.Context) GeneratorSwitchStatusArrayOutput {
	return o
}

func (o GeneratorSwitchStatusArrayOutput) Index(i pulumi.IntInput) GeneratorSwitchStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GeneratorSwitchStatus {
		return vs[0].([]GeneratorSwitchStatus)[vs[1].(int)]
	}).(GeneratorSwitchStatusOutput)
}

type GeneratorTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// GeneratorTagInput is an input type that accepts GeneratorTagArgs and GeneratorTagOutput values.
// You can construct a concrete instance of `GeneratorTagInput` via:
//
//	GeneratorTagArgs{...}
type GeneratorTagInput interface {
	pulumi.Input

	ToGeneratorTagOutput() GeneratorTagOutput
	ToGeneratorTagOutputWithContext(context.Context) GeneratorTagOutput
}

type GeneratorTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (GeneratorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorTag)(nil)).Elem()
}

func (i GeneratorTagArgs) ToGeneratorTagOutput() GeneratorTagOutput {
	return i.ToGeneratorTagOutputWithContext(context.Background())
}

func (i GeneratorTagArgs) ToGeneratorTagOutputWithContext(ctx context.Context) GeneratorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorTagOutput)
}

// GeneratorTagArrayInput is an input type that accepts GeneratorTagArray and GeneratorTagArrayOutput values.
// You can construct a concrete instance of `GeneratorTagArrayInput` via:
//
//	GeneratorTagArray{ GeneratorTagArgs{...} }
type GeneratorTagArrayInput interface {
	pulumi.Input

	ToGeneratorTagArrayOutput() GeneratorTagArrayOutput
	ToGeneratorTagArrayOutputWithContext(context.Context) GeneratorTagArrayOutput
}

type GeneratorTagArray []GeneratorTagInput

func (GeneratorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorTag)(nil)).Elem()
}

func (i GeneratorTagArray) ToGeneratorTagArrayOutput() GeneratorTagArrayOutput {
	return i.ToGeneratorTagArrayOutputWithContext(context.Background())
}

func (i GeneratorTagArray) ToGeneratorTagArrayOutputWithContext(ctx context.Context) GeneratorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorTagArrayOutput)
}

type GeneratorTagOutput struct{ *pulumi.OutputState }

func (GeneratorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeneratorTag)(nil)).Elem()
}

func (o GeneratorTagOutput) ToGeneratorTagOutput() GeneratorTagOutput {
	return o
}

func (o GeneratorTagOutput) ToGeneratorTagOutputWithContext(ctx context.Context) GeneratorTagOutput {
	return o
}

// tag id
func (o GeneratorTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GeneratorTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o GeneratorTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GeneratorTag) string { return v.Name }).(pulumi.StringOutput)
}

type GeneratorTagArrayOutput struct{ *pulumi.OutputState }

func (GeneratorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeneratorTag)(nil)).Elem()
}

func (o GeneratorTagArrayOutput) ToGeneratorTagArrayOutput() GeneratorTagArrayOutput {
	return o
}

func (o GeneratorTagArrayOutput) ToGeneratorTagArrayOutputWithContext(ctx context.Context) GeneratorTagArrayOutput {
	return o
}

func (o GeneratorTagArrayOutput) Index(i pulumi.IntInput) GeneratorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GeneratorTag {
		return vs[0].([]GeneratorTag)[vs[1].(int)]
	}).(GeneratorTagOutput)
}

type GridKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// GridKindInput is an input type that accepts GridKindArgs and GridKindOutput values.
// You can construct a concrete instance of `GridKindInput` via:
//
//	GridKindArgs{...}
type GridKindInput interface {
	pulumi.Input

	ToGridKindOutput() GridKindOutput
	ToGridKindOutputWithContext(context.Context) GridKindOutput
}

type GridKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (GridKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GridKind)(nil)).Elem()
}

func (i GridKindArgs) ToGridKindOutput() GridKindOutput {
	return i.ToGridKindOutputWithContext(context.Background())
}

func (i GridKindArgs) ToGridKindOutputWithContext(ctx context.Context) GridKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GridKindOutput)
}

// GridKindArrayInput is an input type that accepts GridKindArray and GridKindArrayOutput values.
// You can construct a concrete instance of `GridKindArrayInput` via:
//
//	GridKindArray{ GridKindArgs{...} }
type GridKindArrayInput interface {
	pulumi.Input

	ToGridKindArrayOutput() GridKindArrayOutput
	ToGridKindArrayOutputWithContext(context.Context) GridKindArrayOutput
}

type GridKindArray []GridKindInput

func (GridKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GridKind)(nil)).Elem()
}

func (i GridKindArray) ToGridKindArrayOutput() GridKindArrayOutput {
	return i.ToGridKindArrayOutputWithContext(context.Background())
}

func (i GridKindArray) ToGridKindArrayOutputWithContext(ctx context.Context) GridKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GridKindArrayOutput)
}

type GridKindOutput struct{ *pulumi.OutputState }

func (GridKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GridKind)(nil)).Elem()
}

func (o GridKindOutput) ToGridKindOutput() GridKindOutput {
	return o
}

func (o GridKindOutput) ToGridKindOutputWithContext(ctx context.Context) GridKindOutput {
	return o
}

// kind id
func (o GridKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GridKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o GridKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GridKind) string { return v.Name }).(pulumi.StringOutput)
}

type GridKindArrayOutput struct{ *pulumi.OutputState }

func (GridKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GridKind)(nil)).Elem()
}

func (o GridKindArrayOutput) ToGridKindArrayOutput() GridKindArrayOutput {
	return o
}

func (o GridKindArrayOutput) ToGridKindArrayOutputWithContext(ctx context.Context) GridKindArrayOutput {
	return o
}

func (o GridKindArrayOutput) Index(i pulumi.IntInput) GridKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GridKind {
		return vs[0].([]GridKind)[vs[1].(int)]
	}).(GridKindOutput)
}

type GridTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// GridTagInput is an input type that accepts GridTagArgs and GridTagOutput values.
// You can construct a concrete instance of `GridTagInput` via:
//
//	GridTagArgs{...}
type GridTagInput interface {
	pulumi.Input

	ToGridTagOutput() GridTagOutput
	ToGridTagOutputWithContext(context.Context) GridTagOutput
}

type GridTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (GridTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GridTag)(nil)).Elem()
}

func (i GridTagArgs) ToGridTagOutput() GridTagOutput {
	return i.ToGridTagOutputWithContext(context.Background())
}

func (i GridTagArgs) ToGridTagOutputWithContext(ctx context.Context) GridTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GridTagOutput)
}

// GridTagArrayInput is an input type that accepts GridTagArray and GridTagArrayOutput values.
// You can construct a concrete instance of `GridTagArrayInput` via:
//
//	GridTagArray{ GridTagArgs{...} }
type GridTagArrayInput interface {
	pulumi.Input

	ToGridTagArrayOutput() GridTagArrayOutput
	ToGridTagArrayOutputWithContext(context.Context) GridTagArrayOutput
}

type GridTagArray []GridTagInput

func (GridTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GridTag)(nil)).Elem()
}

func (i GridTagArray) ToGridTagArrayOutput() GridTagArrayOutput {
	return i.ToGridTagArrayOutputWithContext(context.Background())
}

func (i GridTagArray) ToGridTagArrayOutputWithContext(ctx context.Context) GridTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GridTagArrayOutput)
}

type GridTagOutput struct{ *pulumi.OutputState }

func (GridTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GridTag)(nil)).Elem()
}

func (o GridTagOutput) ToGridTagOutput() GridTagOutput {
	return o
}

func (o GridTagOutput) ToGridTagOutputWithContext(ctx context.Context) GridTagOutput {
	return o
}

// tag id
func (o GridTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GridTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o GridTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GridTag) string { return v.Name }).(pulumi.StringOutput)
}

type GridTagArrayOutput struct{ *pulumi.OutputState }

func (GridTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GridTag)(nil)).Elem()
}

func (o GridTagArrayOutput) ToGridTagArrayOutput() GridTagArrayOutput {
	return o
}

func (o GridTagArrayOutput) ToGridTagArrayOutputWithContext(ctx context.Context) GridTagArrayOutput {
	return o
}

func (o GridTagArrayOutput) Index(i pulumi.IntInput) GridTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GridTag {
		return vs[0].([]GridTag)[vs[1].(int)]
	}).(GridTagOutput)
}

type InverterAccumulatedEnergy struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// InverterAccumulatedEnergyInput is an input type that accepts InverterAccumulatedEnergyArgs and InverterAccumulatedEnergyOutput values.
// You can construct a concrete instance of `InverterAccumulatedEnergyInput` via:
//
//	InverterAccumulatedEnergyArgs{...}
type InverterAccumulatedEnergyInput interface {
	pulumi.Input

	ToInverterAccumulatedEnergyOutput() InverterAccumulatedEnergyOutput
	ToInverterAccumulatedEnergyOutputWithContext(context.Context) InverterAccumulatedEnergyOutput
}

type InverterAccumulatedEnergyArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (InverterAccumulatedEnergyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterAccumulatedEnergy)(nil)).Elem()
}

func (i InverterAccumulatedEnergyArgs) ToInverterAccumulatedEnergyOutput() InverterAccumulatedEnergyOutput {
	return i.ToInverterAccumulatedEnergyOutputWithContext(context.Background())
}

func (i InverterAccumulatedEnergyArgs) ToInverterAccumulatedEnergyOutputWithContext(ctx context.Context) InverterAccumulatedEnergyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterAccumulatedEnergyOutput)
}

// InverterAccumulatedEnergyArrayInput is an input type that accepts InverterAccumulatedEnergyArray and InverterAccumulatedEnergyArrayOutput values.
// You can construct a concrete instance of `InverterAccumulatedEnergyArrayInput` via:
//
//	InverterAccumulatedEnergyArray{ InverterAccumulatedEnergyArgs{...} }
type InverterAccumulatedEnergyArrayInput interface {
	pulumi.Input

	ToInverterAccumulatedEnergyArrayOutput() InverterAccumulatedEnergyArrayOutput
	ToInverterAccumulatedEnergyArrayOutputWithContext(context.Context) InverterAccumulatedEnergyArrayOutput
}

type InverterAccumulatedEnergyArray []InverterAccumulatedEnergyInput

func (InverterAccumulatedEnergyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterAccumulatedEnergy)(nil)).Elem()
}

func (i InverterAccumulatedEnergyArray) ToInverterAccumulatedEnergyArrayOutput() InverterAccumulatedEnergyArrayOutput {
	return i.ToInverterAccumulatedEnergyArrayOutputWithContext(context.Background())
}

func (i InverterAccumulatedEnergyArray) ToInverterAccumulatedEnergyArrayOutputWithContext(ctx context.Context) InverterAccumulatedEnergyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterAccumulatedEnergyArrayOutput)
}

type InverterAccumulatedEnergyOutput struct{ *pulumi.OutputState }

func (InverterAccumulatedEnergyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterAccumulatedEnergy)(nil)).Elem()
}

func (o InverterAccumulatedEnergyOutput) ToInverterAccumulatedEnergyOutput() InverterAccumulatedEnergyOutput {
	return o
}

func (o InverterAccumulatedEnergyOutput) ToInverterAccumulatedEnergyOutputWithContext(ctx context.Context) InverterAccumulatedEnergyOutput {
	return o
}

// reference to the asset to be linked to
func (o InverterAccumulatedEnergyOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterAccumulatedEnergy) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterAccumulatedEnergyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterAccumulatedEnergy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterAccumulatedEnergyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterAccumulatedEnergy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterAccumulatedEnergyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterAccumulatedEnergy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterAccumulatedEnergyOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterAccumulatedEnergy) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type InverterAccumulatedEnergyArrayOutput struct{ *pulumi.OutputState }

func (InverterAccumulatedEnergyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterAccumulatedEnergy)(nil)).Elem()
}

func (o InverterAccumulatedEnergyArrayOutput) ToInverterAccumulatedEnergyArrayOutput() InverterAccumulatedEnergyArrayOutput {
	return o
}

func (o InverterAccumulatedEnergyArrayOutput) ToInverterAccumulatedEnergyArrayOutputWithContext(ctx context.Context) InverterAccumulatedEnergyArrayOutput {
	return o
}

func (o InverterAccumulatedEnergyArrayOutput) Index(i pulumi.IntInput) InverterAccumulatedEnergyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InverterAccumulatedEnergy {
		return vs[0].([]InverterAccumulatedEnergy)[vs[1].(int)]
	}).(InverterAccumulatedEnergyOutput)
}

type InverterActivePower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// InverterActivePowerInput is an input type that accepts InverterActivePowerArgs and InverterActivePowerOutput values.
// You can construct a concrete instance of `InverterActivePowerInput` via:
//
//	InverterActivePowerArgs{...}
type InverterActivePowerInput interface {
	pulumi.Input

	ToInverterActivePowerOutput() InverterActivePowerOutput
	ToInverterActivePowerOutputWithContext(context.Context) InverterActivePowerOutput
}

type InverterActivePowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (InverterActivePowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterActivePower)(nil)).Elem()
}

func (i InverterActivePowerArgs) ToInverterActivePowerOutput() InverterActivePowerOutput {
	return i.ToInverterActivePowerOutputWithContext(context.Background())
}

func (i InverterActivePowerArgs) ToInverterActivePowerOutputWithContext(ctx context.Context) InverterActivePowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterActivePowerOutput)
}

// InverterActivePowerArrayInput is an input type that accepts InverterActivePowerArray and InverterActivePowerArrayOutput values.
// You can construct a concrete instance of `InverterActivePowerArrayInput` via:
//
//	InverterActivePowerArray{ InverterActivePowerArgs{...} }
type InverterActivePowerArrayInput interface {
	pulumi.Input

	ToInverterActivePowerArrayOutput() InverterActivePowerArrayOutput
	ToInverterActivePowerArrayOutputWithContext(context.Context) InverterActivePowerArrayOutput
}

type InverterActivePowerArray []InverterActivePowerInput

func (InverterActivePowerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterActivePower)(nil)).Elem()
}

func (i InverterActivePowerArray) ToInverterActivePowerArrayOutput() InverterActivePowerArrayOutput {
	return i.ToInverterActivePowerArrayOutputWithContext(context.Background())
}

func (i InverterActivePowerArray) ToInverterActivePowerArrayOutputWithContext(ctx context.Context) InverterActivePowerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterActivePowerArrayOutput)
}

type InverterActivePowerOutput struct{ *pulumi.OutputState }

func (InverterActivePowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterActivePower)(nil)).Elem()
}

func (o InverterActivePowerOutput) ToInverterActivePowerOutput() InverterActivePowerOutput {
	return o
}

func (o InverterActivePowerOutput) ToInverterActivePowerOutputWithContext(ctx context.Context) InverterActivePowerOutput {
	return o
}

// reference to the asset to be linked to
func (o InverterActivePowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterActivePower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterActivePowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterActivePower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterActivePowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterActivePower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterActivePowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterActivePower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterActivePowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterActivePower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type InverterActivePowerArrayOutput struct{ *pulumi.OutputState }

func (InverterActivePowerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterActivePower)(nil)).Elem()
}

func (o InverterActivePowerArrayOutput) ToInverterActivePowerArrayOutput() InverterActivePowerArrayOutput {
	return o
}

func (o InverterActivePowerArrayOutput) ToInverterActivePowerArrayOutputWithContext(ctx context.Context) InverterActivePowerArrayOutput {
	return o
}

func (o InverterActivePowerArrayOutput) Index(i pulumi.IntInput) InverterActivePowerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InverterActivePower {
		return vs[0].([]InverterActivePower)[vs[1].(int)]
	}).(InverterActivePowerOutput)
}

type InverterDailyEnergy struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// InverterDailyEnergyInput is an input type that accepts InverterDailyEnergyArgs and InverterDailyEnergyOutput values.
// You can construct a concrete instance of `InverterDailyEnergyInput` via:
//
//	InverterDailyEnergyArgs{...}
type InverterDailyEnergyInput interface {
	pulumi.Input

	ToInverterDailyEnergyOutput() InverterDailyEnergyOutput
	ToInverterDailyEnergyOutputWithContext(context.Context) InverterDailyEnergyOutput
}

type InverterDailyEnergyArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (InverterDailyEnergyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterDailyEnergy)(nil)).Elem()
}

func (i InverterDailyEnergyArgs) ToInverterDailyEnergyOutput() InverterDailyEnergyOutput {
	return i.ToInverterDailyEnergyOutputWithContext(context.Background())
}

func (i InverterDailyEnergyArgs) ToInverterDailyEnergyOutputWithContext(ctx context.Context) InverterDailyEnergyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterDailyEnergyOutput)
}

// InverterDailyEnergyArrayInput is an input type that accepts InverterDailyEnergyArray and InverterDailyEnergyArrayOutput values.
// You can construct a concrete instance of `InverterDailyEnergyArrayInput` via:
//
//	InverterDailyEnergyArray{ InverterDailyEnergyArgs{...} }
type InverterDailyEnergyArrayInput interface {
	pulumi.Input

	ToInverterDailyEnergyArrayOutput() InverterDailyEnergyArrayOutput
	ToInverterDailyEnergyArrayOutputWithContext(context.Context) InverterDailyEnergyArrayOutput
}

type InverterDailyEnergyArray []InverterDailyEnergyInput

func (InverterDailyEnergyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterDailyEnergy)(nil)).Elem()
}

func (i InverterDailyEnergyArray) ToInverterDailyEnergyArrayOutput() InverterDailyEnergyArrayOutput {
	return i.ToInverterDailyEnergyArrayOutputWithContext(context.Background())
}

func (i InverterDailyEnergyArray) ToInverterDailyEnergyArrayOutputWithContext(ctx context.Context) InverterDailyEnergyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterDailyEnergyArrayOutput)
}

type InverterDailyEnergyOutput struct{ *pulumi.OutputState }

func (InverterDailyEnergyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterDailyEnergy)(nil)).Elem()
}

func (o InverterDailyEnergyOutput) ToInverterDailyEnergyOutput() InverterDailyEnergyOutput {
	return o
}

func (o InverterDailyEnergyOutput) ToInverterDailyEnergyOutputWithContext(ctx context.Context) InverterDailyEnergyOutput {
	return o
}

// reference to the asset to be linked to
func (o InverterDailyEnergyOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterDailyEnergy) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterDailyEnergyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterDailyEnergy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterDailyEnergyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterDailyEnergy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterDailyEnergyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterDailyEnergy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterDailyEnergyOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterDailyEnergy) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type InverterDailyEnergyArrayOutput struct{ *pulumi.OutputState }

func (InverterDailyEnergyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterDailyEnergy)(nil)).Elem()
}

func (o InverterDailyEnergyArrayOutput) ToInverterDailyEnergyArrayOutput() InverterDailyEnergyArrayOutput {
	return o
}

func (o InverterDailyEnergyArrayOutput) ToInverterDailyEnergyArrayOutputWithContext(ctx context.Context) InverterDailyEnergyArrayOutput {
	return o
}

func (o InverterDailyEnergyArrayOutput) Index(i pulumi.IntInput) InverterDailyEnergyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InverterDailyEnergy {
		return vs[0].([]InverterDailyEnergy)[vs[1].(int)]
	}).(InverterDailyEnergyOutput)
}

type InverterEnergyMeasurementType struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// InverterEnergyMeasurementTypeInput is an input type that accepts InverterEnergyMeasurementTypeArgs and InverterEnergyMeasurementTypeOutput values.
// You can construct a concrete instance of `InverterEnergyMeasurementTypeInput` via:
//
//	InverterEnergyMeasurementTypeArgs{...}
type InverterEnergyMeasurementTypeInput interface {
	pulumi.Input

	ToInverterEnergyMeasurementTypeOutput() InverterEnergyMeasurementTypeOutput
	ToInverterEnergyMeasurementTypeOutputWithContext(context.Context) InverterEnergyMeasurementTypeOutput
}

type InverterEnergyMeasurementTypeArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (InverterEnergyMeasurementTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterEnergyMeasurementType)(nil)).Elem()
}

func (i InverterEnergyMeasurementTypeArgs) ToInverterEnergyMeasurementTypeOutput() InverterEnergyMeasurementTypeOutput {
	return i.ToInverterEnergyMeasurementTypeOutputWithContext(context.Background())
}

func (i InverterEnergyMeasurementTypeArgs) ToInverterEnergyMeasurementTypeOutputWithContext(ctx context.Context) InverterEnergyMeasurementTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterEnergyMeasurementTypeOutput)
}

func (i InverterEnergyMeasurementTypeArgs) ToInverterEnergyMeasurementTypePtrOutput() InverterEnergyMeasurementTypePtrOutput {
	return i.ToInverterEnergyMeasurementTypePtrOutputWithContext(context.Background())
}

func (i InverterEnergyMeasurementTypeArgs) ToInverterEnergyMeasurementTypePtrOutputWithContext(ctx context.Context) InverterEnergyMeasurementTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterEnergyMeasurementTypeOutput).ToInverterEnergyMeasurementTypePtrOutputWithContext(ctx)
}

// InverterEnergyMeasurementTypePtrInput is an input type that accepts InverterEnergyMeasurementTypeArgs, InverterEnergyMeasurementTypePtr and InverterEnergyMeasurementTypePtrOutput values.
// You can construct a concrete instance of `InverterEnergyMeasurementTypePtrInput` via:
//
//	        InverterEnergyMeasurementTypeArgs{...}
//
//	or:
//
//	        nil
type InverterEnergyMeasurementTypePtrInput interface {
	pulumi.Input

	ToInverterEnergyMeasurementTypePtrOutput() InverterEnergyMeasurementTypePtrOutput
	ToInverterEnergyMeasurementTypePtrOutputWithContext(context.Context) InverterEnergyMeasurementTypePtrOutput
}

type inverterEnergyMeasurementTypePtrType InverterEnergyMeasurementTypeArgs

func InverterEnergyMeasurementTypePtr(v *InverterEnergyMeasurementTypeArgs) InverterEnergyMeasurementTypePtrInput {
	return (*inverterEnergyMeasurementTypePtrType)(v)
}

func (*inverterEnergyMeasurementTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InverterEnergyMeasurementType)(nil)).Elem()
}

func (i *inverterEnergyMeasurementTypePtrType) ToInverterEnergyMeasurementTypePtrOutput() InverterEnergyMeasurementTypePtrOutput {
	return i.ToInverterEnergyMeasurementTypePtrOutputWithContext(context.Background())
}

func (i *inverterEnergyMeasurementTypePtrType) ToInverterEnergyMeasurementTypePtrOutputWithContext(ctx context.Context) InverterEnergyMeasurementTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterEnergyMeasurementTypePtrOutput)
}

type InverterEnergyMeasurementTypeOutput struct{ *pulumi.OutputState }

func (InverterEnergyMeasurementTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterEnergyMeasurementType)(nil)).Elem()
}

func (o InverterEnergyMeasurementTypeOutput) ToInverterEnergyMeasurementTypeOutput() InverterEnergyMeasurementTypeOutput {
	return o
}

func (o InverterEnergyMeasurementTypeOutput) ToInverterEnergyMeasurementTypeOutputWithContext(ctx context.Context) InverterEnergyMeasurementTypeOutput {
	return o
}

func (o InverterEnergyMeasurementTypeOutput) ToInverterEnergyMeasurementTypePtrOutput() InverterEnergyMeasurementTypePtrOutput {
	return o.ToInverterEnergyMeasurementTypePtrOutputWithContext(context.Background())
}

func (o InverterEnergyMeasurementTypeOutput) ToInverterEnergyMeasurementTypePtrOutputWithContext(ctx context.Context) InverterEnergyMeasurementTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InverterEnergyMeasurementType) *InverterEnergyMeasurementType {
		return &v
	}).(InverterEnergyMeasurementTypePtrOutput)
}

// reference to the asset to be linked to
func (o InverterEnergyMeasurementTypeOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterEnergyMeasurementType) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterEnergyMeasurementTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterEnergyMeasurementType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterEnergyMeasurementTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterEnergyMeasurementType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterEnergyMeasurementTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterEnergyMeasurementType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterEnergyMeasurementTypeOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterEnergyMeasurementType) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o InverterEnergyMeasurementTypeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterEnergyMeasurementType) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type InverterEnergyMeasurementTypePtrOutput struct{ *pulumi.OutputState }

func (InverterEnergyMeasurementTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InverterEnergyMeasurementType)(nil)).Elem()
}

func (o InverterEnergyMeasurementTypePtrOutput) ToInverterEnergyMeasurementTypePtrOutput() InverterEnergyMeasurementTypePtrOutput {
	return o
}

func (o InverterEnergyMeasurementTypePtrOutput) ToInverterEnergyMeasurementTypePtrOutputWithContext(ctx context.Context) InverterEnergyMeasurementTypePtrOutput {
	return o
}

func (o InverterEnergyMeasurementTypePtrOutput) Elem() InverterEnergyMeasurementTypeOutput {
	return o.ApplyT(func(v *InverterEnergyMeasurementType) InverterEnergyMeasurementType {
		if v != nil {
			return *v
		}
		var ret InverterEnergyMeasurementType
		return ret
	}).(InverterEnergyMeasurementTypeOutput)
}

// reference to the asset to be linked to
func (o InverterEnergyMeasurementTypePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterEnergyMeasurementType) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterEnergyMeasurementTypePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterEnergyMeasurementType) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterEnergyMeasurementTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterEnergyMeasurementType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterEnergyMeasurementTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterEnergyMeasurementType) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterEnergyMeasurementTypePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterEnergyMeasurementType) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o InverterEnergyMeasurementTypePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterEnergyMeasurementType) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type InverterKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// InverterKindInput is an input type that accepts InverterKindArgs and InverterKindOutput values.
// You can construct a concrete instance of `InverterKindInput` via:
//
//	InverterKindArgs{...}
type InverterKindInput interface {
	pulumi.Input

	ToInverterKindOutput() InverterKindOutput
	ToInverterKindOutputWithContext(context.Context) InverterKindOutput
}

type InverterKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (InverterKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterKind)(nil)).Elem()
}

func (i InverterKindArgs) ToInverterKindOutput() InverterKindOutput {
	return i.ToInverterKindOutputWithContext(context.Background())
}

func (i InverterKindArgs) ToInverterKindOutputWithContext(ctx context.Context) InverterKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterKindOutput)
}

// InverterKindArrayInput is an input type that accepts InverterKindArray and InverterKindArrayOutput values.
// You can construct a concrete instance of `InverterKindArrayInput` via:
//
//	InverterKindArray{ InverterKindArgs{...} }
type InverterKindArrayInput interface {
	pulumi.Input

	ToInverterKindArrayOutput() InverterKindArrayOutput
	ToInverterKindArrayOutputWithContext(context.Context) InverterKindArrayOutput
}

type InverterKindArray []InverterKindInput

func (InverterKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterKind)(nil)).Elem()
}

func (i InverterKindArray) ToInverterKindArrayOutput() InverterKindArrayOutput {
	return i.ToInverterKindArrayOutputWithContext(context.Background())
}

func (i InverterKindArray) ToInverterKindArrayOutputWithContext(ctx context.Context) InverterKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterKindArrayOutput)
}

type InverterKindOutput struct{ *pulumi.OutputState }

func (InverterKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterKind)(nil)).Elem()
}

func (o InverterKindOutput) ToInverterKindOutput() InverterKindOutput {
	return o
}

func (o InverterKindOutput) ToInverterKindOutputWithContext(ctx context.Context) InverterKindOutput {
	return o
}

// kind id
func (o InverterKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InverterKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o InverterKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InverterKind) string { return v.Name }).(pulumi.StringOutput)
}

type InverterKindArrayOutput struct{ *pulumi.OutputState }

func (InverterKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterKind)(nil)).Elem()
}

func (o InverterKindArrayOutput) ToInverterKindArrayOutput() InverterKindArrayOutput {
	return o
}

func (o InverterKindArrayOutput) ToInverterKindArrayOutputWithContext(ctx context.Context) InverterKindArrayOutput {
	return o
}

func (o InverterKindArrayOutput) Index(i pulumi.IntInput) InverterKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InverterKind {
		return vs[0].([]InverterKind)[vs[1].(int)]
	}).(InverterKindOutput)
}

type InverterMake struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// InverterMakeInput is an input type that accepts InverterMakeArgs and InverterMakeOutput values.
// You can construct a concrete instance of `InverterMakeInput` via:
//
//	InverterMakeArgs{...}
type InverterMakeInput interface {
	pulumi.Input

	ToInverterMakeOutput() InverterMakeOutput
	ToInverterMakeOutputWithContext(context.Context) InverterMakeOutput
}

type InverterMakeArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (InverterMakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterMake)(nil)).Elem()
}

func (i InverterMakeArgs) ToInverterMakeOutput() InverterMakeOutput {
	return i.ToInverterMakeOutputWithContext(context.Background())
}

func (i InverterMakeArgs) ToInverterMakeOutputWithContext(ctx context.Context) InverterMakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterMakeOutput)
}

func (i InverterMakeArgs) ToInverterMakePtrOutput() InverterMakePtrOutput {
	return i.ToInverterMakePtrOutputWithContext(context.Background())
}

func (i InverterMakeArgs) ToInverterMakePtrOutputWithContext(ctx context.Context) InverterMakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterMakeOutput).ToInverterMakePtrOutputWithContext(ctx)
}

// InverterMakePtrInput is an input type that accepts InverterMakeArgs, InverterMakePtr and InverterMakePtrOutput values.
// You can construct a concrete instance of `InverterMakePtrInput` via:
//
//	        InverterMakeArgs{...}
//
//	or:
//
//	        nil
type InverterMakePtrInput interface {
	pulumi.Input

	ToInverterMakePtrOutput() InverterMakePtrOutput
	ToInverterMakePtrOutputWithContext(context.Context) InverterMakePtrOutput
}

type inverterMakePtrType InverterMakeArgs

func InverterMakePtr(v *InverterMakeArgs) InverterMakePtrInput {
	return (*inverterMakePtrType)(v)
}

func (*inverterMakePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InverterMake)(nil)).Elem()
}

func (i *inverterMakePtrType) ToInverterMakePtrOutput() InverterMakePtrOutput {
	return i.ToInverterMakePtrOutputWithContext(context.Background())
}

func (i *inverterMakePtrType) ToInverterMakePtrOutputWithContext(ctx context.Context) InverterMakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterMakePtrOutput)
}

type InverterMakeOutput struct{ *pulumi.OutputState }

func (InverterMakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterMake)(nil)).Elem()
}

func (o InverterMakeOutput) ToInverterMakeOutput() InverterMakeOutput {
	return o
}

func (o InverterMakeOutput) ToInverterMakeOutputWithContext(ctx context.Context) InverterMakeOutput {
	return o
}

func (o InverterMakeOutput) ToInverterMakePtrOutput() InverterMakePtrOutput {
	return o.ToInverterMakePtrOutputWithContext(context.Background())
}

func (o InverterMakeOutput) ToInverterMakePtrOutputWithContext(ctx context.Context) InverterMakePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InverterMake) *InverterMake {
		return &v
	}).(InverterMakePtrOutput)
}

// reference to the asset to be linked to
func (o InverterMakeOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMake) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterMakeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMake) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterMakeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMake) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterMakeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMake) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterMakeOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMake) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o InverterMakeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMake) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type InverterMakePtrOutput struct{ *pulumi.OutputState }

func (InverterMakePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InverterMake)(nil)).Elem()
}

func (o InverterMakePtrOutput) ToInverterMakePtrOutput() InverterMakePtrOutput {
	return o
}

func (o InverterMakePtrOutput) ToInverterMakePtrOutputWithContext(ctx context.Context) InverterMakePtrOutput {
	return o
}

func (o InverterMakePtrOutput) Elem() InverterMakeOutput {
	return o.ApplyT(func(v *InverterMake) InverterMake {
		if v != nil {
			return *v
		}
		var ret InverterMake
		return ret
	}).(InverterMakeOutput)
}

// reference to the asset to be linked to
func (o InverterMakePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMake) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterMakePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMake) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterMakePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMake) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterMakePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMake) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterMakePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMake) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o InverterMakePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMake) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type InverterMaxActivePower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// InverterMaxActivePowerInput is an input type that accepts InverterMaxActivePowerArgs and InverterMaxActivePowerOutput values.
// You can construct a concrete instance of `InverterMaxActivePowerInput` via:
//
//	InverterMaxActivePowerArgs{...}
type InverterMaxActivePowerInput interface {
	pulumi.Input

	ToInverterMaxActivePowerOutput() InverterMaxActivePowerOutput
	ToInverterMaxActivePowerOutputWithContext(context.Context) InverterMaxActivePowerOutput
}

type InverterMaxActivePowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (InverterMaxActivePowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterMaxActivePower)(nil)).Elem()
}

func (i InverterMaxActivePowerArgs) ToInverterMaxActivePowerOutput() InverterMaxActivePowerOutput {
	return i.ToInverterMaxActivePowerOutputWithContext(context.Background())
}

func (i InverterMaxActivePowerArgs) ToInverterMaxActivePowerOutputWithContext(ctx context.Context) InverterMaxActivePowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterMaxActivePowerOutput)
}

func (i InverterMaxActivePowerArgs) ToInverterMaxActivePowerPtrOutput() InverterMaxActivePowerPtrOutput {
	return i.ToInverterMaxActivePowerPtrOutputWithContext(context.Background())
}

func (i InverterMaxActivePowerArgs) ToInverterMaxActivePowerPtrOutputWithContext(ctx context.Context) InverterMaxActivePowerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterMaxActivePowerOutput).ToInverterMaxActivePowerPtrOutputWithContext(ctx)
}

// InverterMaxActivePowerPtrInput is an input type that accepts InverterMaxActivePowerArgs, InverterMaxActivePowerPtr and InverterMaxActivePowerPtrOutput values.
// You can construct a concrete instance of `InverterMaxActivePowerPtrInput` via:
//
//	        InverterMaxActivePowerArgs{...}
//
//	or:
//
//	        nil
type InverterMaxActivePowerPtrInput interface {
	pulumi.Input

	ToInverterMaxActivePowerPtrOutput() InverterMaxActivePowerPtrOutput
	ToInverterMaxActivePowerPtrOutputWithContext(context.Context) InverterMaxActivePowerPtrOutput
}

type inverterMaxActivePowerPtrType InverterMaxActivePowerArgs

func InverterMaxActivePowerPtr(v *InverterMaxActivePowerArgs) InverterMaxActivePowerPtrInput {
	return (*inverterMaxActivePowerPtrType)(v)
}

func (*inverterMaxActivePowerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InverterMaxActivePower)(nil)).Elem()
}

func (i *inverterMaxActivePowerPtrType) ToInverterMaxActivePowerPtrOutput() InverterMaxActivePowerPtrOutput {
	return i.ToInverterMaxActivePowerPtrOutputWithContext(context.Background())
}

func (i *inverterMaxActivePowerPtrType) ToInverterMaxActivePowerPtrOutputWithContext(ctx context.Context) InverterMaxActivePowerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterMaxActivePowerPtrOutput)
}

type InverterMaxActivePowerOutput struct{ *pulumi.OutputState }

func (InverterMaxActivePowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterMaxActivePower)(nil)).Elem()
}

func (o InverterMaxActivePowerOutput) ToInverterMaxActivePowerOutput() InverterMaxActivePowerOutput {
	return o
}

func (o InverterMaxActivePowerOutput) ToInverterMaxActivePowerOutputWithContext(ctx context.Context) InverterMaxActivePowerOutput {
	return o
}

func (o InverterMaxActivePowerOutput) ToInverterMaxActivePowerPtrOutput() InverterMaxActivePowerPtrOutput {
	return o.ToInverterMaxActivePowerPtrOutputWithContext(context.Background())
}

func (o InverterMaxActivePowerOutput) ToInverterMaxActivePowerPtrOutputWithContext(ctx context.Context) InverterMaxActivePowerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InverterMaxActivePower) *InverterMaxActivePower {
		return &v
	}).(InverterMaxActivePowerPtrOutput)
}

// reference to the asset to be linked to
func (o InverterMaxActivePowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMaxActivePower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterMaxActivePowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMaxActivePower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterMaxActivePowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMaxActivePower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterMaxActivePowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMaxActivePower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterMaxActivePowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMaxActivePower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o InverterMaxActivePowerOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterMaxActivePower) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type InverterMaxActivePowerPtrOutput struct{ *pulumi.OutputState }

func (InverterMaxActivePowerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InverterMaxActivePower)(nil)).Elem()
}

func (o InverterMaxActivePowerPtrOutput) ToInverterMaxActivePowerPtrOutput() InverterMaxActivePowerPtrOutput {
	return o
}

func (o InverterMaxActivePowerPtrOutput) ToInverterMaxActivePowerPtrOutputWithContext(ctx context.Context) InverterMaxActivePowerPtrOutput {
	return o
}

func (o InverterMaxActivePowerPtrOutput) Elem() InverterMaxActivePowerOutput {
	return o.ApplyT(func(v *InverterMaxActivePower) InverterMaxActivePower {
		if v != nil {
			return *v
		}
		var ret InverterMaxActivePower
		return ret
	}).(InverterMaxActivePowerOutput)
}

// reference to the asset to be linked to
func (o InverterMaxActivePowerPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMaxActivePower) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterMaxActivePowerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMaxActivePower) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterMaxActivePowerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMaxActivePower) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterMaxActivePowerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMaxActivePower) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterMaxActivePowerPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMaxActivePower) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o InverterMaxActivePowerPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterMaxActivePower) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type InverterModel struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// InverterModelInput is an input type that accepts InverterModelArgs and InverterModelOutput values.
// You can construct a concrete instance of `InverterModelInput` via:
//
//	InverterModelArgs{...}
type InverterModelInput interface {
	pulumi.Input

	ToInverterModelOutput() InverterModelOutput
	ToInverterModelOutputWithContext(context.Context) InverterModelOutput
}

type InverterModelArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (InverterModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterModel)(nil)).Elem()
}

func (i InverterModelArgs) ToInverterModelOutput() InverterModelOutput {
	return i.ToInverterModelOutputWithContext(context.Background())
}

func (i InverterModelArgs) ToInverterModelOutputWithContext(ctx context.Context) InverterModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterModelOutput)
}

func (i InverterModelArgs) ToInverterModelPtrOutput() InverterModelPtrOutput {
	return i.ToInverterModelPtrOutputWithContext(context.Background())
}

func (i InverterModelArgs) ToInverterModelPtrOutputWithContext(ctx context.Context) InverterModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterModelOutput).ToInverterModelPtrOutputWithContext(ctx)
}

// InverterModelPtrInput is an input type that accepts InverterModelArgs, InverterModelPtr and InverterModelPtrOutput values.
// You can construct a concrete instance of `InverterModelPtrInput` via:
//
//	        InverterModelArgs{...}
//
//	or:
//
//	        nil
type InverterModelPtrInput interface {
	pulumi.Input

	ToInverterModelPtrOutput() InverterModelPtrOutput
	ToInverterModelPtrOutputWithContext(context.Context) InverterModelPtrOutput
}

type inverterModelPtrType InverterModelArgs

func InverterModelPtr(v *InverterModelArgs) InverterModelPtrInput {
	return (*inverterModelPtrType)(v)
}

func (*inverterModelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InverterModel)(nil)).Elem()
}

func (i *inverterModelPtrType) ToInverterModelPtrOutput() InverterModelPtrOutput {
	return i.ToInverterModelPtrOutputWithContext(context.Background())
}

func (i *inverterModelPtrType) ToInverterModelPtrOutputWithContext(ctx context.Context) InverterModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterModelPtrOutput)
}

type InverterModelOutput struct{ *pulumi.OutputState }

func (InverterModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterModel)(nil)).Elem()
}

func (o InverterModelOutput) ToInverterModelOutput() InverterModelOutput {
	return o
}

func (o InverterModelOutput) ToInverterModelOutputWithContext(ctx context.Context) InverterModelOutput {
	return o
}

func (o InverterModelOutput) ToInverterModelPtrOutput() InverterModelPtrOutput {
	return o.ToInverterModelPtrOutputWithContext(context.Background())
}

func (o InverterModelOutput) ToInverterModelPtrOutputWithContext(ctx context.Context) InverterModelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InverterModel) *InverterModel {
		return &v
	}).(InverterModelPtrOutput)
}

// reference to the asset to be linked to
func (o InverterModelOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterModel) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterModelOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterModel) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterModelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterModel) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterModelOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterModel) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterModelOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterModel) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o InverterModelOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterModel) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type InverterModelPtrOutput struct{ *pulumi.OutputState }

func (InverterModelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InverterModel)(nil)).Elem()
}

func (o InverterModelPtrOutput) ToInverterModelPtrOutput() InverterModelPtrOutput {
	return o
}

func (o InverterModelPtrOutput) ToInverterModelPtrOutputWithContext(ctx context.Context) InverterModelPtrOutput {
	return o
}

func (o InverterModelPtrOutput) Elem() InverterModelOutput {
	return o.ApplyT(func(v *InverterModel) InverterModel {
		if v != nil {
			return *v
		}
		var ret InverterModel
		return ret
	}).(InverterModelOutput)
}

// reference to the asset to be linked to
func (o InverterModelPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterModel) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterModelPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterModel) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterModelPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterModel) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterModelPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterModel) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterModelPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterModel) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o InverterModelPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterModel) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type InverterRawDailyEnergy struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// InverterRawDailyEnergyInput is an input type that accepts InverterRawDailyEnergyArgs and InverterRawDailyEnergyOutput values.
// You can construct a concrete instance of `InverterRawDailyEnergyInput` via:
//
//	InverterRawDailyEnergyArgs{...}
type InverterRawDailyEnergyInput interface {
	pulumi.Input

	ToInverterRawDailyEnergyOutput() InverterRawDailyEnergyOutput
	ToInverterRawDailyEnergyOutputWithContext(context.Context) InverterRawDailyEnergyOutput
}

type InverterRawDailyEnergyArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (InverterRawDailyEnergyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterRawDailyEnergy)(nil)).Elem()
}

func (i InverterRawDailyEnergyArgs) ToInverterRawDailyEnergyOutput() InverterRawDailyEnergyOutput {
	return i.ToInverterRawDailyEnergyOutputWithContext(context.Background())
}

func (i InverterRawDailyEnergyArgs) ToInverterRawDailyEnergyOutputWithContext(ctx context.Context) InverterRawDailyEnergyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterRawDailyEnergyOutput)
}

// InverterRawDailyEnergyArrayInput is an input type that accepts InverterRawDailyEnergyArray and InverterRawDailyEnergyArrayOutput values.
// You can construct a concrete instance of `InverterRawDailyEnergyArrayInput` via:
//
//	InverterRawDailyEnergyArray{ InverterRawDailyEnergyArgs{...} }
type InverterRawDailyEnergyArrayInput interface {
	pulumi.Input

	ToInverterRawDailyEnergyArrayOutput() InverterRawDailyEnergyArrayOutput
	ToInverterRawDailyEnergyArrayOutputWithContext(context.Context) InverterRawDailyEnergyArrayOutput
}

type InverterRawDailyEnergyArray []InverterRawDailyEnergyInput

func (InverterRawDailyEnergyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterRawDailyEnergy)(nil)).Elem()
}

func (i InverterRawDailyEnergyArray) ToInverterRawDailyEnergyArrayOutput() InverterRawDailyEnergyArrayOutput {
	return i.ToInverterRawDailyEnergyArrayOutputWithContext(context.Background())
}

func (i InverterRawDailyEnergyArray) ToInverterRawDailyEnergyArrayOutputWithContext(ctx context.Context) InverterRawDailyEnergyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterRawDailyEnergyArrayOutput)
}

type InverterRawDailyEnergyOutput struct{ *pulumi.OutputState }

func (InverterRawDailyEnergyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterRawDailyEnergy)(nil)).Elem()
}

func (o InverterRawDailyEnergyOutput) ToInverterRawDailyEnergyOutput() InverterRawDailyEnergyOutput {
	return o
}

func (o InverterRawDailyEnergyOutput) ToInverterRawDailyEnergyOutputWithContext(ctx context.Context) InverterRawDailyEnergyOutput {
	return o
}

// reference to the asset to be linked to
func (o InverterRawDailyEnergyOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterRawDailyEnergy) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterRawDailyEnergyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterRawDailyEnergy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterRawDailyEnergyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterRawDailyEnergy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterRawDailyEnergyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterRawDailyEnergy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterRawDailyEnergyOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterRawDailyEnergy) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type InverterRawDailyEnergyArrayOutput struct{ *pulumi.OutputState }

func (InverterRawDailyEnergyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterRawDailyEnergy)(nil)).Elem()
}

func (o InverterRawDailyEnergyArrayOutput) ToInverterRawDailyEnergyArrayOutput() InverterRawDailyEnergyArrayOutput {
	return o
}

func (o InverterRawDailyEnergyArrayOutput) ToInverterRawDailyEnergyArrayOutputWithContext(ctx context.Context) InverterRawDailyEnergyArrayOutput {
	return o
}

func (o InverterRawDailyEnergyArrayOutput) Index(i pulumi.IntInput) InverterRawDailyEnergyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InverterRawDailyEnergy {
		return vs[0].([]InverterRawDailyEnergy)[vs[1].(int)]
	}).(InverterRawDailyEnergyOutput)
}

type InverterSerialNumber struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// InverterSerialNumberInput is an input type that accepts InverterSerialNumberArgs and InverterSerialNumberOutput values.
// You can construct a concrete instance of `InverterSerialNumberInput` via:
//
//	InverterSerialNumberArgs{...}
type InverterSerialNumberInput interface {
	pulumi.Input

	ToInverterSerialNumberOutput() InverterSerialNumberOutput
	ToInverterSerialNumberOutputWithContext(context.Context) InverterSerialNumberOutput
}

type InverterSerialNumberArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (InverterSerialNumberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterSerialNumber)(nil)).Elem()
}

func (i InverterSerialNumberArgs) ToInverterSerialNumberOutput() InverterSerialNumberOutput {
	return i.ToInverterSerialNumberOutputWithContext(context.Background())
}

func (i InverterSerialNumberArgs) ToInverterSerialNumberOutputWithContext(ctx context.Context) InverterSerialNumberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterSerialNumberOutput)
}

func (i InverterSerialNumberArgs) ToInverterSerialNumberPtrOutput() InverterSerialNumberPtrOutput {
	return i.ToInverterSerialNumberPtrOutputWithContext(context.Background())
}

func (i InverterSerialNumberArgs) ToInverterSerialNumberPtrOutputWithContext(ctx context.Context) InverterSerialNumberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterSerialNumberOutput).ToInverterSerialNumberPtrOutputWithContext(ctx)
}

// InverterSerialNumberPtrInput is an input type that accepts InverterSerialNumberArgs, InverterSerialNumberPtr and InverterSerialNumberPtrOutput values.
// You can construct a concrete instance of `InverterSerialNumberPtrInput` via:
//
//	        InverterSerialNumberArgs{...}
//
//	or:
//
//	        nil
type InverterSerialNumberPtrInput interface {
	pulumi.Input

	ToInverterSerialNumberPtrOutput() InverterSerialNumberPtrOutput
	ToInverterSerialNumberPtrOutputWithContext(context.Context) InverterSerialNumberPtrOutput
}

type inverterSerialNumberPtrType InverterSerialNumberArgs

func InverterSerialNumberPtr(v *InverterSerialNumberArgs) InverterSerialNumberPtrInput {
	return (*inverterSerialNumberPtrType)(v)
}

func (*inverterSerialNumberPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InverterSerialNumber)(nil)).Elem()
}

func (i *inverterSerialNumberPtrType) ToInverterSerialNumberPtrOutput() InverterSerialNumberPtrOutput {
	return i.ToInverterSerialNumberPtrOutputWithContext(context.Background())
}

func (i *inverterSerialNumberPtrType) ToInverterSerialNumberPtrOutputWithContext(ctx context.Context) InverterSerialNumberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterSerialNumberPtrOutput)
}

type InverterSerialNumberOutput struct{ *pulumi.OutputState }

func (InverterSerialNumberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterSerialNumber)(nil)).Elem()
}

func (o InverterSerialNumberOutput) ToInverterSerialNumberOutput() InverterSerialNumberOutput {
	return o
}

func (o InverterSerialNumberOutput) ToInverterSerialNumberOutputWithContext(ctx context.Context) InverterSerialNumberOutput {
	return o
}

func (o InverterSerialNumberOutput) ToInverterSerialNumberPtrOutput() InverterSerialNumberPtrOutput {
	return o.ToInverterSerialNumberPtrOutputWithContext(context.Background())
}

func (o InverterSerialNumberOutput) ToInverterSerialNumberPtrOutputWithContext(ctx context.Context) InverterSerialNumberPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InverterSerialNumber) *InverterSerialNumber {
		return &v
	}).(InverterSerialNumberPtrOutput)
}

// reference to the asset to be linked to
func (o InverterSerialNumberOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterSerialNumber) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterSerialNumberOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterSerialNumber) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterSerialNumberOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterSerialNumber) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterSerialNumberOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterSerialNumber) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterSerialNumberOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterSerialNumber) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o InverterSerialNumberOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterSerialNumber) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type InverterSerialNumberPtrOutput struct{ *pulumi.OutputState }

func (InverterSerialNumberPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InverterSerialNumber)(nil)).Elem()
}

func (o InverterSerialNumberPtrOutput) ToInverterSerialNumberPtrOutput() InverterSerialNumberPtrOutput {
	return o
}

func (o InverterSerialNumberPtrOutput) ToInverterSerialNumberPtrOutputWithContext(ctx context.Context) InverterSerialNumberPtrOutput {
	return o
}

func (o InverterSerialNumberPtrOutput) Elem() InverterSerialNumberOutput {
	return o.ApplyT(func(v *InverterSerialNumber) InverterSerialNumber {
		if v != nil {
			return *v
		}
		var ret InverterSerialNumber
		return ret
	}).(InverterSerialNumberOutput)
}

// reference to the asset to be linked to
func (o InverterSerialNumberPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterSerialNumber) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterSerialNumberPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterSerialNumber) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterSerialNumberPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterSerialNumber) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterSerialNumberPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterSerialNumber) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterSerialNumberPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterSerialNumber) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o InverterSerialNumberPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InverterSerialNumber) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type InverterSwitchStatus struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// InverterSwitchStatusInput is an input type that accepts InverterSwitchStatusArgs and InverterSwitchStatusOutput values.
// You can construct a concrete instance of `InverterSwitchStatusInput` via:
//
//	InverterSwitchStatusArgs{...}
type InverterSwitchStatusInput interface {
	pulumi.Input

	ToInverterSwitchStatusOutput() InverterSwitchStatusOutput
	ToInverterSwitchStatusOutputWithContext(context.Context) InverterSwitchStatusOutput
}

type InverterSwitchStatusArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (InverterSwitchStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterSwitchStatus)(nil)).Elem()
}

func (i InverterSwitchStatusArgs) ToInverterSwitchStatusOutput() InverterSwitchStatusOutput {
	return i.ToInverterSwitchStatusOutputWithContext(context.Background())
}

func (i InverterSwitchStatusArgs) ToInverterSwitchStatusOutputWithContext(ctx context.Context) InverterSwitchStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterSwitchStatusOutput)
}

// InverterSwitchStatusArrayInput is an input type that accepts InverterSwitchStatusArray and InverterSwitchStatusArrayOutput values.
// You can construct a concrete instance of `InverterSwitchStatusArrayInput` via:
//
//	InverterSwitchStatusArray{ InverterSwitchStatusArgs{...} }
type InverterSwitchStatusArrayInput interface {
	pulumi.Input

	ToInverterSwitchStatusArrayOutput() InverterSwitchStatusArrayOutput
	ToInverterSwitchStatusArrayOutputWithContext(context.Context) InverterSwitchStatusArrayOutput
}

type InverterSwitchStatusArray []InverterSwitchStatusInput

func (InverterSwitchStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterSwitchStatus)(nil)).Elem()
}

func (i InverterSwitchStatusArray) ToInverterSwitchStatusArrayOutput() InverterSwitchStatusArrayOutput {
	return i.ToInverterSwitchStatusArrayOutputWithContext(context.Background())
}

func (i InverterSwitchStatusArray) ToInverterSwitchStatusArrayOutputWithContext(ctx context.Context) InverterSwitchStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterSwitchStatusArrayOutput)
}

type InverterSwitchStatusOutput struct{ *pulumi.OutputState }

func (InverterSwitchStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterSwitchStatus)(nil)).Elem()
}

func (o InverterSwitchStatusOutput) ToInverterSwitchStatusOutput() InverterSwitchStatusOutput {
	return o
}

func (o InverterSwitchStatusOutput) ToInverterSwitchStatusOutputWithContext(ctx context.Context) InverterSwitchStatusOutput {
	return o
}

// reference to the asset to be linked to
func (o InverterSwitchStatusOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterSwitchStatus) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterSwitchStatusOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterSwitchStatus) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterSwitchStatusOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterSwitchStatus) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterSwitchStatusOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterSwitchStatus) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterSwitchStatusOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterSwitchStatus) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type InverterSwitchStatusArrayOutput struct{ *pulumi.OutputState }

func (InverterSwitchStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterSwitchStatus)(nil)).Elem()
}

func (o InverterSwitchStatusArrayOutput) ToInverterSwitchStatusArrayOutput() InverterSwitchStatusArrayOutput {
	return o
}

func (o InverterSwitchStatusArrayOutput) ToInverterSwitchStatusArrayOutputWithContext(ctx context.Context) InverterSwitchStatusArrayOutput {
	return o
}

func (o InverterSwitchStatusArrayOutput) Index(i pulumi.IntInput) InverterSwitchStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InverterSwitchStatus {
		return vs[0].([]InverterSwitchStatus)[vs[1].(int)]
	}).(InverterSwitchStatusOutput)
}

type InverterTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// InverterTagInput is an input type that accepts InverterTagArgs and InverterTagOutput values.
// You can construct a concrete instance of `InverterTagInput` via:
//
//	InverterTagArgs{...}
type InverterTagInput interface {
	pulumi.Input

	ToInverterTagOutput() InverterTagOutput
	ToInverterTagOutputWithContext(context.Context) InverterTagOutput
}

type InverterTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (InverterTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterTag)(nil)).Elem()
}

func (i InverterTagArgs) ToInverterTagOutput() InverterTagOutput {
	return i.ToInverterTagOutputWithContext(context.Background())
}

func (i InverterTagArgs) ToInverterTagOutputWithContext(ctx context.Context) InverterTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterTagOutput)
}

// InverterTagArrayInput is an input type that accepts InverterTagArray and InverterTagArrayOutput values.
// You can construct a concrete instance of `InverterTagArrayInput` via:
//
//	InverterTagArray{ InverterTagArgs{...} }
type InverterTagArrayInput interface {
	pulumi.Input

	ToInverterTagArrayOutput() InverterTagArrayOutput
	ToInverterTagArrayOutputWithContext(context.Context) InverterTagArrayOutput
}

type InverterTagArray []InverterTagInput

func (InverterTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterTag)(nil)).Elem()
}

func (i InverterTagArray) ToInverterTagArrayOutput() InverterTagArrayOutput {
	return i.ToInverterTagArrayOutputWithContext(context.Background())
}

func (i InverterTagArray) ToInverterTagArrayOutputWithContext(ctx context.Context) InverterTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterTagArrayOutput)
}

type InverterTagOutput struct{ *pulumi.OutputState }

func (InverterTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterTag)(nil)).Elem()
}

func (o InverterTagOutput) ToInverterTagOutput() InverterTagOutput {
	return o
}

func (o InverterTagOutput) ToInverterTagOutputWithContext(ctx context.Context) InverterTagOutput {
	return o
}

// tag id
func (o InverterTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InverterTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o InverterTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InverterTag) string { return v.Name }).(pulumi.StringOutput)
}

type InverterTagArrayOutput struct{ *pulumi.OutputState }

func (InverterTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterTag)(nil)).Elem()
}

func (o InverterTagArrayOutput) ToInverterTagArrayOutput() InverterTagArrayOutput {
	return o
}

func (o InverterTagArrayOutput) ToInverterTagArrayOutputWithContext(ctx context.Context) InverterTagArrayOutput {
	return o
}

func (o InverterTagArrayOutput) Index(i pulumi.IntInput) InverterTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InverterTag {
		return vs[0].([]InverterTag)[vs[1].(int)]
	}).(InverterTagOutput)
}

type InverterTemperature struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// InverterTemperatureInput is an input type that accepts InverterTemperatureArgs and InverterTemperatureOutput values.
// You can construct a concrete instance of `InverterTemperatureInput` via:
//
//	InverterTemperatureArgs{...}
type InverterTemperatureInput interface {
	pulumi.Input

	ToInverterTemperatureOutput() InverterTemperatureOutput
	ToInverterTemperatureOutputWithContext(context.Context) InverterTemperatureOutput
}

type InverterTemperatureArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (InverterTemperatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterTemperature)(nil)).Elem()
}

func (i InverterTemperatureArgs) ToInverterTemperatureOutput() InverterTemperatureOutput {
	return i.ToInverterTemperatureOutputWithContext(context.Background())
}

func (i InverterTemperatureArgs) ToInverterTemperatureOutputWithContext(ctx context.Context) InverterTemperatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterTemperatureOutput)
}

// InverterTemperatureArrayInput is an input type that accepts InverterTemperatureArray and InverterTemperatureArrayOutput values.
// You can construct a concrete instance of `InverterTemperatureArrayInput` via:
//
//	InverterTemperatureArray{ InverterTemperatureArgs{...} }
type InverterTemperatureArrayInput interface {
	pulumi.Input

	ToInverterTemperatureArrayOutput() InverterTemperatureArrayOutput
	ToInverterTemperatureArrayOutputWithContext(context.Context) InverterTemperatureArrayOutput
}

type InverterTemperatureArray []InverterTemperatureInput

func (InverterTemperatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterTemperature)(nil)).Elem()
}

func (i InverterTemperatureArray) ToInverterTemperatureArrayOutput() InverterTemperatureArrayOutput {
	return i.ToInverterTemperatureArrayOutputWithContext(context.Background())
}

func (i InverterTemperatureArray) ToInverterTemperatureArrayOutputWithContext(ctx context.Context) InverterTemperatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterTemperatureArrayOutput)
}

type InverterTemperatureOutput struct{ *pulumi.OutputState }

func (InverterTemperatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InverterTemperature)(nil)).Elem()
}

func (o InverterTemperatureOutput) ToInverterTemperatureOutput() InverterTemperatureOutput {
	return o
}

func (o InverterTemperatureOutput) ToInverterTemperatureOutputWithContext(ctx context.Context) InverterTemperatureOutput {
	return o
}

// reference to the asset to be linked to
func (o InverterTemperatureOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterTemperature) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o InverterTemperatureOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterTemperature) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o InverterTemperatureOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterTemperature) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o InverterTemperatureOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterTemperature) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o InverterTemperatureOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InverterTemperature) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type InverterTemperatureArrayOutput struct{ *pulumi.OutputState }

func (InverterTemperatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InverterTemperature)(nil)).Elem()
}

func (o InverterTemperatureArrayOutput) ToInverterTemperatureArrayOutput() InverterTemperatureArrayOutput {
	return o
}

func (o InverterTemperatureArrayOutput) ToInverterTemperatureArrayOutputWithContext(ctx context.Context) InverterTemperatureArrayOutput {
	return o
}

func (o InverterTemperatureArrayOutput) Index(i pulumi.IntInput) InverterTemperatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InverterTemperature {
		return vs[0].([]InverterTemperature)[vs[1].(int)]
	}).(InverterTemperatureOutput)
}

type LineAbsorptivity struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineAbsorptivityInput is an input type that accepts LineAbsorptivityArgs and LineAbsorptivityOutput values.
// You can construct a concrete instance of `LineAbsorptivityInput` via:
//
//	LineAbsorptivityArgs{...}
type LineAbsorptivityInput interface {
	pulumi.Input

	ToLineAbsorptivityOutput() LineAbsorptivityOutput
	ToLineAbsorptivityOutputWithContext(context.Context) LineAbsorptivityOutput
}

type LineAbsorptivityArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineAbsorptivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineAbsorptivity)(nil)).Elem()
}

func (i LineAbsorptivityArgs) ToLineAbsorptivityOutput() LineAbsorptivityOutput {
	return i.ToLineAbsorptivityOutputWithContext(context.Background())
}

func (i LineAbsorptivityArgs) ToLineAbsorptivityOutputWithContext(ctx context.Context) LineAbsorptivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineAbsorptivityOutput)
}

func (i LineAbsorptivityArgs) ToLineAbsorptivityPtrOutput() LineAbsorptivityPtrOutput {
	return i.ToLineAbsorptivityPtrOutputWithContext(context.Background())
}

func (i LineAbsorptivityArgs) ToLineAbsorptivityPtrOutputWithContext(ctx context.Context) LineAbsorptivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineAbsorptivityOutput).ToLineAbsorptivityPtrOutputWithContext(ctx)
}

// LineAbsorptivityPtrInput is an input type that accepts LineAbsorptivityArgs, LineAbsorptivityPtr and LineAbsorptivityPtrOutput values.
// You can construct a concrete instance of `LineAbsorptivityPtrInput` via:
//
//	        LineAbsorptivityArgs{...}
//
//	or:
//
//	        nil
type LineAbsorptivityPtrInput interface {
	pulumi.Input

	ToLineAbsorptivityPtrOutput() LineAbsorptivityPtrOutput
	ToLineAbsorptivityPtrOutputWithContext(context.Context) LineAbsorptivityPtrOutput
}

type lineAbsorptivityPtrType LineAbsorptivityArgs

func LineAbsorptivityPtr(v *LineAbsorptivityArgs) LineAbsorptivityPtrInput {
	return (*lineAbsorptivityPtrType)(v)
}

func (*lineAbsorptivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineAbsorptivity)(nil)).Elem()
}

func (i *lineAbsorptivityPtrType) ToLineAbsorptivityPtrOutput() LineAbsorptivityPtrOutput {
	return i.ToLineAbsorptivityPtrOutputWithContext(context.Background())
}

func (i *lineAbsorptivityPtrType) ToLineAbsorptivityPtrOutputWithContext(ctx context.Context) LineAbsorptivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineAbsorptivityPtrOutput)
}

type LineAbsorptivityOutput struct{ *pulumi.OutputState }

func (LineAbsorptivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineAbsorptivity)(nil)).Elem()
}

func (o LineAbsorptivityOutput) ToLineAbsorptivityOutput() LineAbsorptivityOutput {
	return o
}

func (o LineAbsorptivityOutput) ToLineAbsorptivityOutputWithContext(ctx context.Context) LineAbsorptivityOutput {
	return o
}

func (o LineAbsorptivityOutput) ToLineAbsorptivityPtrOutput() LineAbsorptivityPtrOutput {
	return o.ToLineAbsorptivityPtrOutputWithContext(context.Background())
}

func (o LineAbsorptivityOutput) ToLineAbsorptivityPtrOutputWithContext(ctx context.Context) LineAbsorptivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineAbsorptivity) *LineAbsorptivity {
		return &v
	}).(LineAbsorptivityPtrOutput)
}

// reference to the asset to be linked to
func (o LineAbsorptivityOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAbsorptivity) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineAbsorptivityOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAbsorptivity) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineAbsorptivityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAbsorptivity) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineAbsorptivityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAbsorptivity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineAbsorptivityOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAbsorptivity) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineAbsorptivityOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAbsorptivity) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineAbsorptivityPtrOutput struct{ *pulumi.OutputState }

func (LineAbsorptivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineAbsorptivity)(nil)).Elem()
}

func (o LineAbsorptivityPtrOutput) ToLineAbsorptivityPtrOutput() LineAbsorptivityPtrOutput {
	return o
}

func (o LineAbsorptivityPtrOutput) ToLineAbsorptivityPtrOutputWithContext(ctx context.Context) LineAbsorptivityPtrOutput {
	return o
}

func (o LineAbsorptivityPtrOutput) Elem() LineAbsorptivityOutput {
	return o.ApplyT(func(v *LineAbsorptivity) LineAbsorptivity {
		if v != nil {
			return *v
		}
		var ret LineAbsorptivity
		return ret
	}).(LineAbsorptivityOutput)
}

// reference to the asset to be linked to
func (o LineAbsorptivityPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAbsorptivity) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineAbsorptivityPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAbsorptivity) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineAbsorptivityPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAbsorptivity) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineAbsorptivityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAbsorptivity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineAbsorptivityPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAbsorptivity) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineAbsorptivityPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAbsorptivity) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineActivePower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineActivePowerInput is an input type that accepts LineActivePowerArgs and LineActivePowerOutput values.
// You can construct a concrete instance of `LineActivePowerInput` via:
//
//	LineActivePowerArgs{...}
type LineActivePowerInput interface {
	pulumi.Input

	ToLineActivePowerOutput() LineActivePowerOutput
	ToLineActivePowerOutputWithContext(context.Context) LineActivePowerOutput
}

type LineActivePowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineActivePowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineActivePower)(nil)).Elem()
}

func (i LineActivePowerArgs) ToLineActivePowerOutput() LineActivePowerOutput {
	return i.ToLineActivePowerOutputWithContext(context.Background())
}

func (i LineActivePowerArgs) ToLineActivePowerOutputWithContext(ctx context.Context) LineActivePowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineActivePowerOutput)
}

// LineActivePowerArrayInput is an input type that accepts LineActivePowerArray and LineActivePowerArrayOutput values.
// You can construct a concrete instance of `LineActivePowerArrayInput` via:
//
//	LineActivePowerArray{ LineActivePowerArgs{...} }
type LineActivePowerArrayInput interface {
	pulumi.Input

	ToLineActivePowerArrayOutput() LineActivePowerArrayOutput
	ToLineActivePowerArrayOutputWithContext(context.Context) LineActivePowerArrayOutput
}

type LineActivePowerArray []LineActivePowerInput

func (LineActivePowerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineActivePower)(nil)).Elem()
}

func (i LineActivePowerArray) ToLineActivePowerArrayOutput() LineActivePowerArrayOutput {
	return i.ToLineActivePowerArrayOutputWithContext(context.Background())
}

func (i LineActivePowerArray) ToLineActivePowerArrayOutputWithContext(ctx context.Context) LineActivePowerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineActivePowerArrayOutput)
}

type LineActivePowerOutput struct{ *pulumi.OutputState }

func (LineActivePowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineActivePower)(nil)).Elem()
}

func (o LineActivePowerOutput) ToLineActivePowerOutput() LineActivePowerOutput {
	return o
}

func (o LineActivePowerOutput) ToLineActivePowerOutputWithContext(ctx context.Context) LineActivePowerOutput {
	return o
}

// reference to the asset to be linked to
func (o LineActivePowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineActivePower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineActivePowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineActivePower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineActivePowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineActivePower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineActivePowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineActivePower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineActivePowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineActivePower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineActivePowerArrayOutput struct{ *pulumi.OutputState }

func (LineActivePowerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineActivePower)(nil)).Elem()
}

func (o LineActivePowerArrayOutput) ToLineActivePowerArrayOutput() LineActivePowerArrayOutput {
	return o
}

func (o LineActivePowerArrayOutput) ToLineActivePowerArrayOutputWithContext(ctx context.Context) LineActivePowerArrayOutput {
	return o
}

func (o LineActivePowerArrayOutput) Index(i pulumi.IntInput) LineActivePowerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineActivePower {
		return vs[0].([]LineActivePower)[vs[1].(int)]
	}).(LineActivePowerOutput)
}

type LineActivePowerEnd struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineActivePowerEndInput is an input type that accepts LineActivePowerEndArgs and LineActivePowerEndOutput values.
// You can construct a concrete instance of `LineActivePowerEndInput` via:
//
//	LineActivePowerEndArgs{...}
type LineActivePowerEndInput interface {
	pulumi.Input

	ToLineActivePowerEndOutput() LineActivePowerEndOutput
	ToLineActivePowerEndOutputWithContext(context.Context) LineActivePowerEndOutput
}

type LineActivePowerEndArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineActivePowerEndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineActivePowerEnd)(nil)).Elem()
}

func (i LineActivePowerEndArgs) ToLineActivePowerEndOutput() LineActivePowerEndOutput {
	return i.ToLineActivePowerEndOutputWithContext(context.Background())
}

func (i LineActivePowerEndArgs) ToLineActivePowerEndOutputWithContext(ctx context.Context) LineActivePowerEndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineActivePowerEndOutput)
}

// LineActivePowerEndArrayInput is an input type that accepts LineActivePowerEndArray and LineActivePowerEndArrayOutput values.
// You can construct a concrete instance of `LineActivePowerEndArrayInput` via:
//
//	LineActivePowerEndArray{ LineActivePowerEndArgs{...} }
type LineActivePowerEndArrayInput interface {
	pulumi.Input

	ToLineActivePowerEndArrayOutput() LineActivePowerEndArrayOutput
	ToLineActivePowerEndArrayOutputWithContext(context.Context) LineActivePowerEndArrayOutput
}

type LineActivePowerEndArray []LineActivePowerEndInput

func (LineActivePowerEndArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineActivePowerEnd)(nil)).Elem()
}

func (i LineActivePowerEndArray) ToLineActivePowerEndArrayOutput() LineActivePowerEndArrayOutput {
	return i.ToLineActivePowerEndArrayOutputWithContext(context.Background())
}

func (i LineActivePowerEndArray) ToLineActivePowerEndArrayOutputWithContext(ctx context.Context) LineActivePowerEndArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineActivePowerEndArrayOutput)
}

type LineActivePowerEndOutput struct{ *pulumi.OutputState }

func (LineActivePowerEndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineActivePowerEnd)(nil)).Elem()
}

func (o LineActivePowerEndOutput) ToLineActivePowerEndOutput() LineActivePowerEndOutput {
	return o
}

func (o LineActivePowerEndOutput) ToLineActivePowerEndOutputWithContext(ctx context.Context) LineActivePowerEndOutput {
	return o
}

// reference to the asset to be linked to
func (o LineActivePowerEndOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineActivePowerEnd) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineActivePowerEndOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineActivePowerEnd) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineActivePowerEndOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineActivePowerEnd) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineActivePowerEndOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineActivePowerEnd) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineActivePowerEndOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineActivePowerEnd) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineActivePowerEndArrayOutput struct{ *pulumi.OutputState }

func (LineActivePowerEndArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineActivePowerEnd)(nil)).Elem()
}

func (o LineActivePowerEndArrayOutput) ToLineActivePowerEndArrayOutput() LineActivePowerEndArrayOutput {
	return o
}

func (o LineActivePowerEndArrayOutput) ToLineActivePowerEndArrayOutputWithContext(ctx context.Context) LineActivePowerEndArrayOutput {
	return o
}

func (o LineActivePowerEndArrayOutput) Index(i pulumi.IntInput) LineActivePowerEndOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineActivePowerEnd {
		return vs[0].([]LineActivePowerEnd)[vs[1].(int)]
	}).(LineActivePowerEndOutput)
}

type LineAmpacity struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineAmpacityInput is an input type that accepts LineAmpacityArgs and LineAmpacityOutput values.
// You can construct a concrete instance of `LineAmpacityInput` via:
//
//	LineAmpacityArgs{...}
type LineAmpacityInput interface {
	pulumi.Input

	ToLineAmpacityOutput() LineAmpacityOutput
	ToLineAmpacityOutputWithContext(context.Context) LineAmpacityOutput
}

type LineAmpacityArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineAmpacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineAmpacity)(nil)).Elem()
}

func (i LineAmpacityArgs) ToLineAmpacityOutput() LineAmpacityOutput {
	return i.ToLineAmpacityOutputWithContext(context.Background())
}

func (i LineAmpacityArgs) ToLineAmpacityOutputWithContext(ctx context.Context) LineAmpacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineAmpacityOutput)
}

// LineAmpacityArrayInput is an input type that accepts LineAmpacityArray and LineAmpacityArrayOutput values.
// You can construct a concrete instance of `LineAmpacityArrayInput` via:
//
//	LineAmpacityArray{ LineAmpacityArgs{...} }
type LineAmpacityArrayInput interface {
	pulumi.Input

	ToLineAmpacityArrayOutput() LineAmpacityArrayOutput
	ToLineAmpacityArrayOutputWithContext(context.Context) LineAmpacityArrayOutput
}

type LineAmpacityArray []LineAmpacityInput

func (LineAmpacityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineAmpacity)(nil)).Elem()
}

func (i LineAmpacityArray) ToLineAmpacityArrayOutput() LineAmpacityArrayOutput {
	return i.ToLineAmpacityArrayOutputWithContext(context.Background())
}

func (i LineAmpacityArray) ToLineAmpacityArrayOutputWithContext(ctx context.Context) LineAmpacityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineAmpacityArrayOutput)
}

type LineAmpacityOutput struct{ *pulumi.OutputState }

func (LineAmpacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineAmpacity)(nil)).Elem()
}

func (o LineAmpacityOutput) ToLineAmpacityOutput() LineAmpacityOutput {
	return o
}

func (o LineAmpacityOutput) ToLineAmpacityOutputWithContext(ctx context.Context) LineAmpacityOutput {
	return o
}

// reference to the asset to be linked to
func (o LineAmpacityOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAmpacity) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineAmpacityOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAmpacity) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineAmpacityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAmpacity) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineAmpacityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAmpacity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineAmpacityOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAmpacity) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineAmpacityArrayOutput struct{ *pulumi.OutputState }

func (LineAmpacityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineAmpacity)(nil)).Elem()
}

func (o LineAmpacityArrayOutput) ToLineAmpacityArrayOutput() LineAmpacityArrayOutput {
	return o
}

func (o LineAmpacityArrayOutput) ToLineAmpacityArrayOutputWithContext(ctx context.Context) LineAmpacityArrayOutput {
	return o
}

func (o LineAmpacityArrayOutput) Index(i pulumi.IntInput) LineAmpacityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineAmpacity {
		return vs[0].([]LineAmpacity)[vs[1].(int)]
	}).(LineAmpacityOutput)
}

type LineAtmosphere struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineAtmosphereInput is an input type that accepts LineAtmosphereArgs and LineAtmosphereOutput values.
// You can construct a concrete instance of `LineAtmosphereInput` via:
//
//	LineAtmosphereArgs{...}
type LineAtmosphereInput interface {
	pulumi.Input

	ToLineAtmosphereOutput() LineAtmosphereOutput
	ToLineAtmosphereOutputWithContext(context.Context) LineAtmosphereOutput
}

type LineAtmosphereArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineAtmosphereArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineAtmosphere)(nil)).Elem()
}

func (i LineAtmosphereArgs) ToLineAtmosphereOutput() LineAtmosphereOutput {
	return i.ToLineAtmosphereOutputWithContext(context.Background())
}

func (i LineAtmosphereArgs) ToLineAtmosphereOutputWithContext(ctx context.Context) LineAtmosphereOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineAtmosphereOutput)
}

func (i LineAtmosphereArgs) ToLineAtmospherePtrOutput() LineAtmospherePtrOutput {
	return i.ToLineAtmospherePtrOutputWithContext(context.Background())
}

func (i LineAtmosphereArgs) ToLineAtmospherePtrOutputWithContext(ctx context.Context) LineAtmospherePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineAtmosphereOutput).ToLineAtmospherePtrOutputWithContext(ctx)
}

// LineAtmospherePtrInput is an input type that accepts LineAtmosphereArgs, LineAtmospherePtr and LineAtmospherePtrOutput values.
// You can construct a concrete instance of `LineAtmospherePtrInput` via:
//
//	        LineAtmosphereArgs{...}
//
//	or:
//
//	        nil
type LineAtmospherePtrInput interface {
	pulumi.Input

	ToLineAtmospherePtrOutput() LineAtmospherePtrOutput
	ToLineAtmospherePtrOutputWithContext(context.Context) LineAtmospherePtrOutput
}

type lineAtmospherePtrType LineAtmosphereArgs

func LineAtmospherePtr(v *LineAtmosphereArgs) LineAtmospherePtrInput {
	return (*lineAtmospherePtrType)(v)
}

func (*lineAtmospherePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineAtmosphere)(nil)).Elem()
}

func (i *lineAtmospherePtrType) ToLineAtmospherePtrOutput() LineAtmospherePtrOutput {
	return i.ToLineAtmospherePtrOutputWithContext(context.Background())
}

func (i *lineAtmospherePtrType) ToLineAtmospherePtrOutputWithContext(ctx context.Context) LineAtmospherePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineAtmospherePtrOutput)
}

type LineAtmosphereOutput struct{ *pulumi.OutputState }

func (LineAtmosphereOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineAtmosphere)(nil)).Elem()
}

func (o LineAtmosphereOutput) ToLineAtmosphereOutput() LineAtmosphereOutput {
	return o
}

func (o LineAtmosphereOutput) ToLineAtmosphereOutputWithContext(ctx context.Context) LineAtmosphereOutput {
	return o
}

func (o LineAtmosphereOutput) ToLineAtmospherePtrOutput() LineAtmospherePtrOutput {
	return o.ToLineAtmospherePtrOutputWithContext(context.Background())
}

func (o LineAtmosphereOutput) ToLineAtmospherePtrOutputWithContext(ctx context.Context) LineAtmospherePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineAtmosphere) *LineAtmosphere {
		return &v
	}).(LineAtmospherePtrOutput)
}

// reference to the asset to be linked to
func (o LineAtmosphereOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAtmosphere) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineAtmosphereOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAtmosphere) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineAtmosphereOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAtmosphere) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineAtmosphereOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAtmosphere) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineAtmosphereOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAtmosphere) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineAtmosphereOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineAtmosphere) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineAtmospherePtrOutput struct{ *pulumi.OutputState }

func (LineAtmospherePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineAtmosphere)(nil)).Elem()
}

func (o LineAtmospherePtrOutput) ToLineAtmospherePtrOutput() LineAtmospherePtrOutput {
	return o
}

func (o LineAtmospherePtrOutput) ToLineAtmospherePtrOutputWithContext(ctx context.Context) LineAtmospherePtrOutput {
	return o
}

func (o LineAtmospherePtrOutput) Elem() LineAtmosphereOutput {
	return o.ApplyT(func(v *LineAtmosphere) LineAtmosphere {
		if v != nil {
			return *v
		}
		var ret LineAtmosphere
		return ret
	}).(LineAtmosphereOutput)
}

// reference to the asset to be linked to
func (o LineAtmospherePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAtmosphere) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineAtmospherePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAtmosphere) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineAtmospherePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAtmosphere) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineAtmospherePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAtmosphere) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineAtmospherePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAtmosphere) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineAtmospherePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineAtmosphere) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineCapacitance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineCapacitanceInput is an input type that accepts LineCapacitanceArgs and LineCapacitanceOutput values.
// You can construct a concrete instance of `LineCapacitanceInput` via:
//
//	LineCapacitanceArgs{...}
type LineCapacitanceInput interface {
	pulumi.Input

	ToLineCapacitanceOutput() LineCapacitanceOutput
	ToLineCapacitanceOutputWithContext(context.Context) LineCapacitanceOutput
}

type LineCapacitanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineCapacitanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineCapacitance)(nil)).Elem()
}

func (i LineCapacitanceArgs) ToLineCapacitanceOutput() LineCapacitanceOutput {
	return i.ToLineCapacitanceOutputWithContext(context.Background())
}

func (i LineCapacitanceArgs) ToLineCapacitanceOutputWithContext(ctx context.Context) LineCapacitanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineCapacitanceOutput)
}

func (i LineCapacitanceArgs) ToLineCapacitancePtrOutput() LineCapacitancePtrOutput {
	return i.ToLineCapacitancePtrOutputWithContext(context.Background())
}

func (i LineCapacitanceArgs) ToLineCapacitancePtrOutputWithContext(ctx context.Context) LineCapacitancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineCapacitanceOutput).ToLineCapacitancePtrOutputWithContext(ctx)
}

// LineCapacitancePtrInput is an input type that accepts LineCapacitanceArgs, LineCapacitancePtr and LineCapacitancePtrOutput values.
// You can construct a concrete instance of `LineCapacitancePtrInput` via:
//
//	        LineCapacitanceArgs{...}
//
//	or:
//
//	        nil
type LineCapacitancePtrInput interface {
	pulumi.Input

	ToLineCapacitancePtrOutput() LineCapacitancePtrOutput
	ToLineCapacitancePtrOutputWithContext(context.Context) LineCapacitancePtrOutput
}

type lineCapacitancePtrType LineCapacitanceArgs

func LineCapacitancePtr(v *LineCapacitanceArgs) LineCapacitancePtrInput {
	return (*lineCapacitancePtrType)(v)
}

func (*lineCapacitancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineCapacitance)(nil)).Elem()
}

func (i *lineCapacitancePtrType) ToLineCapacitancePtrOutput() LineCapacitancePtrOutput {
	return i.ToLineCapacitancePtrOutputWithContext(context.Background())
}

func (i *lineCapacitancePtrType) ToLineCapacitancePtrOutputWithContext(ctx context.Context) LineCapacitancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineCapacitancePtrOutput)
}

type LineCapacitanceOutput struct{ *pulumi.OutputState }

func (LineCapacitanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineCapacitance)(nil)).Elem()
}

func (o LineCapacitanceOutput) ToLineCapacitanceOutput() LineCapacitanceOutput {
	return o
}

func (o LineCapacitanceOutput) ToLineCapacitanceOutputWithContext(ctx context.Context) LineCapacitanceOutput {
	return o
}

func (o LineCapacitanceOutput) ToLineCapacitancePtrOutput() LineCapacitancePtrOutput {
	return o.ToLineCapacitancePtrOutputWithContext(context.Background())
}

func (o LineCapacitanceOutput) ToLineCapacitancePtrOutputWithContext(ctx context.Context) LineCapacitancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineCapacitance) *LineCapacitance {
		return &v
	}).(LineCapacitancePtrOutput)
}

// reference to the asset to be linked to
func (o LineCapacitanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCapacitance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineCapacitanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCapacitance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineCapacitanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCapacitance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineCapacitanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCapacitance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineCapacitanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCapacitance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineCapacitanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCapacitance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineCapacitancePtrOutput struct{ *pulumi.OutputState }

func (LineCapacitancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineCapacitance)(nil)).Elem()
}

func (o LineCapacitancePtrOutput) ToLineCapacitancePtrOutput() LineCapacitancePtrOutput {
	return o
}

func (o LineCapacitancePtrOutput) ToLineCapacitancePtrOutputWithContext(ctx context.Context) LineCapacitancePtrOutput {
	return o
}

func (o LineCapacitancePtrOutput) Elem() LineCapacitanceOutput {
	return o.ApplyT(func(v *LineCapacitance) LineCapacitance {
		if v != nil {
			return *v
		}
		var ret LineCapacitance
		return ret
	}).(LineCapacitanceOutput)
}

// reference to the asset to be linked to
func (o LineCapacitancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineCapacitancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineCapacitancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineCapacitancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineCapacitancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineCapacitancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineConductance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineConductanceInput is an input type that accepts LineConductanceArgs and LineConductanceOutput values.
// You can construct a concrete instance of `LineConductanceInput` via:
//
//	LineConductanceArgs{...}
type LineConductanceInput interface {
	pulumi.Input

	ToLineConductanceOutput() LineConductanceOutput
	ToLineConductanceOutputWithContext(context.Context) LineConductanceOutput
}

type LineConductanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineConductanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineConductance)(nil)).Elem()
}

func (i LineConductanceArgs) ToLineConductanceOutput() LineConductanceOutput {
	return i.ToLineConductanceOutputWithContext(context.Background())
}

func (i LineConductanceArgs) ToLineConductanceOutputWithContext(ctx context.Context) LineConductanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineConductanceOutput)
}

func (i LineConductanceArgs) ToLineConductancePtrOutput() LineConductancePtrOutput {
	return i.ToLineConductancePtrOutputWithContext(context.Background())
}

func (i LineConductanceArgs) ToLineConductancePtrOutputWithContext(ctx context.Context) LineConductancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineConductanceOutput).ToLineConductancePtrOutputWithContext(ctx)
}

// LineConductancePtrInput is an input type that accepts LineConductanceArgs, LineConductancePtr and LineConductancePtrOutput values.
// You can construct a concrete instance of `LineConductancePtrInput` via:
//
//	        LineConductanceArgs{...}
//
//	or:
//
//	        nil
type LineConductancePtrInput interface {
	pulumi.Input

	ToLineConductancePtrOutput() LineConductancePtrOutput
	ToLineConductancePtrOutputWithContext(context.Context) LineConductancePtrOutput
}

type lineConductancePtrType LineConductanceArgs

func LineConductancePtr(v *LineConductanceArgs) LineConductancePtrInput {
	return (*lineConductancePtrType)(v)
}

func (*lineConductancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineConductance)(nil)).Elem()
}

func (i *lineConductancePtrType) ToLineConductancePtrOutput() LineConductancePtrOutput {
	return i.ToLineConductancePtrOutputWithContext(context.Background())
}

func (i *lineConductancePtrType) ToLineConductancePtrOutputWithContext(ctx context.Context) LineConductancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineConductancePtrOutput)
}

type LineConductanceOutput struct{ *pulumi.OutputState }

func (LineConductanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineConductance)(nil)).Elem()
}

func (o LineConductanceOutput) ToLineConductanceOutput() LineConductanceOutput {
	return o
}

func (o LineConductanceOutput) ToLineConductanceOutputWithContext(ctx context.Context) LineConductanceOutput {
	return o
}

func (o LineConductanceOutput) ToLineConductancePtrOutput() LineConductancePtrOutput {
	return o.ToLineConductancePtrOutputWithContext(context.Background())
}

func (o LineConductanceOutput) ToLineConductancePtrOutputWithContext(ctx context.Context) LineConductancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineConductance) *LineConductance {
		return &v
	}).(LineConductancePtrOutput)
}

// reference to the asset to be linked to
func (o LineConductanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineConductanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineConductanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineConductanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineConductanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineConductanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineConductancePtrOutput struct{ *pulumi.OutputState }

func (LineConductancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineConductance)(nil)).Elem()
}

func (o LineConductancePtrOutput) ToLineConductancePtrOutput() LineConductancePtrOutput {
	return o
}

func (o LineConductancePtrOutput) ToLineConductancePtrOutputWithContext(ctx context.Context) LineConductancePtrOutput {
	return o
}

func (o LineConductancePtrOutput) Elem() LineConductanceOutput {
	return o.ApplyT(func(v *LineConductance) LineConductance {
		if v != nil {
			return *v
		}
		var ret LineConductance
		return ret
	}).(LineConductanceOutput)
}

// reference to the asset to be linked to
func (o LineConductancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineConductancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineConductancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineConductancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineConductancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineConductancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineConductorMass struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineConductorMassInput is an input type that accepts LineConductorMassArgs and LineConductorMassOutput values.
// You can construct a concrete instance of `LineConductorMassInput` via:
//
//	LineConductorMassArgs{...}
type LineConductorMassInput interface {
	pulumi.Input

	ToLineConductorMassOutput() LineConductorMassOutput
	ToLineConductorMassOutputWithContext(context.Context) LineConductorMassOutput
}

type LineConductorMassArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineConductorMassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineConductorMass)(nil)).Elem()
}

func (i LineConductorMassArgs) ToLineConductorMassOutput() LineConductorMassOutput {
	return i.ToLineConductorMassOutputWithContext(context.Background())
}

func (i LineConductorMassArgs) ToLineConductorMassOutputWithContext(ctx context.Context) LineConductorMassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineConductorMassOutput)
}

func (i LineConductorMassArgs) ToLineConductorMassPtrOutput() LineConductorMassPtrOutput {
	return i.ToLineConductorMassPtrOutputWithContext(context.Background())
}

func (i LineConductorMassArgs) ToLineConductorMassPtrOutputWithContext(ctx context.Context) LineConductorMassPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineConductorMassOutput).ToLineConductorMassPtrOutputWithContext(ctx)
}

// LineConductorMassPtrInput is an input type that accepts LineConductorMassArgs, LineConductorMassPtr and LineConductorMassPtrOutput values.
// You can construct a concrete instance of `LineConductorMassPtrInput` via:
//
//	        LineConductorMassArgs{...}
//
//	or:
//
//	        nil
type LineConductorMassPtrInput interface {
	pulumi.Input

	ToLineConductorMassPtrOutput() LineConductorMassPtrOutput
	ToLineConductorMassPtrOutputWithContext(context.Context) LineConductorMassPtrOutput
}

type lineConductorMassPtrType LineConductorMassArgs

func LineConductorMassPtr(v *LineConductorMassArgs) LineConductorMassPtrInput {
	return (*lineConductorMassPtrType)(v)
}

func (*lineConductorMassPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineConductorMass)(nil)).Elem()
}

func (i *lineConductorMassPtrType) ToLineConductorMassPtrOutput() LineConductorMassPtrOutput {
	return i.ToLineConductorMassPtrOutputWithContext(context.Background())
}

func (i *lineConductorMassPtrType) ToLineConductorMassPtrOutputWithContext(ctx context.Context) LineConductorMassPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineConductorMassPtrOutput)
}

type LineConductorMassOutput struct{ *pulumi.OutputState }

func (LineConductorMassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineConductorMass)(nil)).Elem()
}

func (o LineConductorMassOutput) ToLineConductorMassOutput() LineConductorMassOutput {
	return o
}

func (o LineConductorMassOutput) ToLineConductorMassOutputWithContext(ctx context.Context) LineConductorMassOutput {
	return o
}

func (o LineConductorMassOutput) ToLineConductorMassPtrOutput() LineConductorMassPtrOutput {
	return o.ToLineConductorMassPtrOutputWithContext(context.Background())
}

func (o LineConductorMassOutput) ToLineConductorMassPtrOutputWithContext(ctx context.Context) LineConductorMassPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineConductorMass) *LineConductorMass {
		return &v
	}).(LineConductorMassPtrOutput)
}

// reference to the asset to be linked to
func (o LineConductorMassOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductorMass) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineConductorMassOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductorMass) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineConductorMassOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductorMass) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineConductorMassOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductorMass) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineConductorMassOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductorMass) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineConductorMassOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConductorMass) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineConductorMassPtrOutput struct{ *pulumi.OutputState }

func (LineConductorMassPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineConductorMass)(nil)).Elem()
}

func (o LineConductorMassPtrOutput) ToLineConductorMassPtrOutput() LineConductorMassPtrOutput {
	return o
}

func (o LineConductorMassPtrOutput) ToLineConductorMassPtrOutputWithContext(ctx context.Context) LineConductorMassPtrOutput {
	return o
}

func (o LineConductorMassPtrOutput) Elem() LineConductorMassOutput {
	return o.ApplyT(func(v *LineConductorMass) LineConductorMass {
		if v != nil {
			return *v
		}
		var ret LineConductorMass
		return ret
	}).(LineConductorMassOutput)
}

// reference to the asset to be linked to
func (o LineConductorMassPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductorMass) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineConductorMassPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductorMass) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineConductorMassPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductorMass) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineConductorMassPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductorMass) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineConductorMassPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductorMass) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineConductorMassPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineConductorMass) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineContingency struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineContingencyInput is an input type that accepts LineContingencyArgs and LineContingencyOutput values.
// You can construct a concrete instance of `LineContingencyInput` via:
//
//	LineContingencyArgs{...}
type LineContingencyInput interface {
	pulumi.Input

	ToLineContingencyOutput() LineContingencyOutput
	ToLineContingencyOutputWithContext(context.Context) LineContingencyOutput
}

type LineContingencyArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineContingencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineContingency)(nil)).Elem()
}

func (i LineContingencyArgs) ToLineContingencyOutput() LineContingencyOutput {
	return i.ToLineContingencyOutputWithContext(context.Background())
}

func (i LineContingencyArgs) ToLineContingencyOutputWithContext(ctx context.Context) LineContingencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineContingencyOutput)
}

// LineContingencyArrayInput is an input type that accepts LineContingencyArray and LineContingencyArrayOutput values.
// You can construct a concrete instance of `LineContingencyArrayInput` via:
//
//	LineContingencyArray{ LineContingencyArgs{...} }
type LineContingencyArrayInput interface {
	pulumi.Input

	ToLineContingencyArrayOutput() LineContingencyArrayOutput
	ToLineContingencyArrayOutputWithContext(context.Context) LineContingencyArrayOutput
}

type LineContingencyArray []LineContingencyInput

func (LineContingencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineContingency)(nil)).Elem()
}

func (i LineContingencyArray) ToLineContingencyArrayOutput() LineContingencyArrayOutput {
	return i.ToLineContingencyArrayOutputWithContext(context.Background())
}

func (i LineContingencyArray) ToLineContingencyArrayOutputWithContext(ctx context.Context) LineContingencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineContingencyArrayOutput)
}

type LineContingencyOutput struct{ *pulumi.OutputState }

func (LineContingencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineContingency)(nil)).Elem()
}

func (o LineContingencyOutput) ToLineContingencyOutput() LineContingencyOutput {
	return o
}

func (o LineContingencyOutput) ToLineContingencyOutputWithContext(ctx context.Context) LineContingencyOutput {
	return o
}

// reference to the asset to be linked to
func (o LineContingencyOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineContingency) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineContingencyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineContingency) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineContingencyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineContingency) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineContingencyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineContingency) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineContingencyOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineContingency) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineContingencyArrayOutput struct{ *pulumi.OutputState }

func (LineContingencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineContingency)(nil)).Elem()
}

func (o LineContingencyArrayOutput) ToLineContingencyArrayOutput() LineContingencyArrayOutput {
	return o
}

func (o LineContingencyArrayOutput) ToLineContingencyArrayOutputWithContext(ctx context.Context) LineContingencyArrayOutput {
	return o
}

func (o LineContingencyArrayOutput) Index(i pulumi.IntInput) LineContingencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineContingency {
		return vs[0].([]LineContingency)[vs[1].(int)]
	}).(LineContingencyOutput)
}

type LineCurrent struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineCurrentInput is an input type that accepts LineCurrentArgs and LineCurrentOutput values.
// You can construct a concrete instance of `LineCurrentInput` via:
//
//	LineCurrentArgs{...}
type LineCurrentInput interface {
	pulumi.Input

	ToLineCurrentOutput() LineCurrentOutput
	ToLineCurrentOutputWithContext(context.Context) LineCurrentOutput
}

type LineCurrentArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineCurrentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineCurrent)(nil)).Elem()
}

func (i LineCurrentArgs) ToLineCurrentOutput() LineCurrentOutput {
	return i.ToLineCurrentOutputWithContext(context.Background())
}

func (i LineCurrentArgs) ToLineCurrentOutputWithContext(ctx context.Context) LineCurrentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineCurrentOutput)
}

// LineCurrentArrayInput is an input type that accepts LineCurrentArray and LineCurrentArrayOutput values.
// You can construct a concrete instance of `LineCurrentArrayInput` via:
//
//	LineCurrentArray{ LineCurrentArgs{...} }
type LineCurrentArrayInput interface {
	pulumi.Input

	ToLineCurrentArrayOutput() LineCurrentArrayOutput
	ToLineCurrentArrayOutputWithContext(context.Context) LineCurrentArrayOutput
}

type LineCurrentArray []LineCurrentInput

func (LineCurrentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineCurrent)(nil)).Elem()
}

func (i LineCurrentArray) ToLineCurrentArrayOutput() LineCurrentArrayOutput {
	return i.ToLineCurrentArrayOutputWithContext(context.Background())
}

func (i LineCurrentArray) ToLineCurrentArrayOutputWithContext(ctx context.Context) LineCurrentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineCurrentArrayOutput)
}

type LineCurrentOutput struct{ *pulumi.OutputState }

func (LineCurrentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineCurrent)(nil)).Elem()
}

func (o LineCurrentOutput) ToLineCurrentOutput() LineCurrentOutput {
	return o
}

func (o LineCurrentOutput) ToLineCurrentOutputWithContext(ctx context.Context) LineCurrentOutput {
	return o
}

// reference to the asset to be linked to
func (o LineCurrentOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrent) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineCurrentOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrent) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineCurrentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrent) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineCurrentOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrent) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineCurrentOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrent) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineCurrentArrayOutput struct{ *pulumi.OutputState }

func (LineCurrentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineCurrent)(nil)).Elem()
}

func (o LineCurrentArrayOutput) ToLineCurrentArrayOutput() LineCurrentArrayOutput {
	return o
}

func (o LineCurrentArrayOutput) ToLineCurrentArrayOutputWithContext(ctx context.Context) LineCurrentArrayOutput {
	return o
}

func (o LineCurrentArrayOutput) Index(i pulumi.IntInput) LineCurrentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineCurrent {
		return vs[0].([]LineCurrent)[vs[1].(int)]
	}).(LineCurrentOutput)
}

type LineCurrentR struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineCurrentRInput is an input type that accepts LineCurrentRArgs and LineCurrentROutput values.
// You can construct a concrete instance of `LineCurrentRInput` via:
//
//	LineCurrentRArgs{...}
type LineCurrentRInput interface {
	pulumi.Input

	ToLineCurrentROutput() LineCurrentROutput
	ToLineCurrentROutputWithContext(context.Context) LineCurrentROutput
}

type LineCurrentRArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineCurrentRArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineCurrentR)(nil)).Elem()
}

func (i LineCurrentRArgs) ToLineCurrentROutput() LineCurrentROutput {
	return i.ToLineCurrentROutputWithContext(context.Background())
}

func (i LineCurrentRArgs) ToLineCurrentROutputWithContext(ctx context.Context) LineCurrentROutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineCurrentROutput)
}

// LineCurrentRArrayInput is an input type that accepts LineCurrentRArray and LineCurrentRArrayOutput values.
// You can construct a concrete instance of `LineCurrentRArrayInput` via:
//
//	LineCurrentRArray{ LineCurrentRArgs{...} }
type LineCurrentRArrayInput interface {
	pulumi.Input

	ToLineCurrentRArrayOutput() LineCurrentRArrayOutput
	ToLineCurrentRArrayOutputWithContext(context.Context) LineCurrentRArrayOutput
}

type LineCurrentRArray []LineCurrentRInput

func (LineCurrentRArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineCurrentR)(nil)).Elem()
}

func (i LineCurrentRArray) ToLineCurrentRArrayOutput() LineCurrentRArrayOutput {
	return i.ToLineCurrentRArrayOutputWithContext(context.Background())
}

func (i LineCurrentRArray) ToLineCurrentRArrayOutputWithContext(ctx context.Context) LineCurrentRArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineCurrentRArrayOutput)
}

type LineCurrentROutput struct{ *pulumi.OutputState }

func (LineCurrentROutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineCurrentR)(nil)).Elem()
}

func (o LineCurrentROutput) ToLineCurrentROutput() LineCurrentROutput {
	return o
}

func (o LineCurrentROutput) ToLineCurrentROutputWithContext(ctx context.Context) LineCurrentROutput {
	return o
}

// reference to the asset to be linked to
func (o LineCurrentROutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrentR) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineCurrentROutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrentR) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineCurrentROutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrentR) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineCurrentROutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrentR) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineCurrentROutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrentR) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineCurrentRArrayOutput struct{ *pulumi.OutputState }

func (LineCurrentRArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineCurrentR)(nil)).Elem()
}

func (o LineCurrentRArrayOutput) ToLineCurrentRArrayOutput() LineCurrentRArrayOutput {
	return o
}

func (o LineCurrentRArrayOutput) ToLineCurrentRArrayOutputWithContext(ctx context.Context) LineCurrentRArrayOutput {
	return o
}

func (o LineCurrentRArrayOutput) Index(i pulumi.IntInput) LineCurrentROutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineCurrentR {
		return vs[0].([]LineCurrentR)[vs[1].(int)]
	}).(LineCurrentROutput)
}

type LineCurrentT struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineCurrentTInput is an input type that accepts LineCurrentTArgs and LineCurrentTOutput values.
// You can construct a concrete instance of `LineCurrentTInput` via:
//
//	LineCurrentTArgs{...}
type LineCurrentTInput interface {
	pulumi.Input

	ToLineCurrentTOutput() LineCurrentTOutput
	ToLineCurrentTOutputWithContext(context.Context) LineCurrentTOutput
}

type LineCurrentTArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineCurrentTArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineCurrentT)(nil)).Elem()
}

func (i LineCurrentTArgs) ToLineCurrentTOutput() LineCurrentTOutput {
	return i.ToLineCurrentTOutputWithContext(context.Background())
}

func (i LineCurrentTArgs) ToLineCurrentTOutputWithContext(ctx context.Context) LineCurrentTOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineCurrentTOutput)
}

// LineCurrentTArrayInput is an input type that accepts LineCurrentTArray and LineCurrentTArrayOutput values.
// You can construct a concrete instance of `LineCurrentTArrayInput` via:
//
//	LineCurrentTArray{ LineCurrentTArgs{...} }
type LineCurrentTArrayInput interface {
	pulumi.Input

	ToLineCurrentTArrayOutput() LineCurrentTArrayOutput
	ToLineCurrentTArrayOutputWithContext(context.Context) LineCurrentTArrayOutput
}

type LineCurrentTArray []LineCurrentTInput

func (LineCurrentTArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineCurrentT)(nil)).Elem()
}

func (i LineCurrentTArray) ToLineCurrentTArrayOutput() LineCurrentTArrayOutput {
	return i.ToLineCurrentTArrayOutputWithContext(context.Background())
}

func (i LineCurrentTArray) ToLineCurrentTArrayOutputWithContext(ctx context.Context) LineCurrentTArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineCurrentTArrayOutput)
}

type LineCurrentTOutput struct{ *pulumi.OutputState }

func (LineCurrentTOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineCurrentT)(nil)).Elem()
}

func (o LineCurrentTOutput) ToLineCurrentTOutput() LineCurrentTOutput {
	return o
}

func (o LineCurrentTOutput) ToLineCurrentTOutputWithContext(ctx context.Context) LineCurrentTOutput {
	return o
}

// reference to the asset to be linked to
func (o LineCurrentTOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrentT) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineCurrentTOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrentT) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineCurrentTOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrentT) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineCurrentTOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrentT) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineCurrentTOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineCurrentT) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineCurrentTArrayOutput struct{ *pulumi.OutputState }

func (LineCurrentTArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineCurrentT)(nil)).Elem()
}

func (o LineCurrentTArrayOutput) ToLineCurrentTArrayOutput() LineCurrentTArrayOutput {
	return o
}

func (o LineCurrentTArrayOutput) ToLineCurrentTArrayOutputWithContext(ctx context.Context) LineCurrentTArrayOutput {
	return o
}

func (o LineCurrentTArrayOutput) Index(i pulumi.IntInput) LineCurrentTOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineCurrentT {
		return vs[0].([]LineCurrentT)[vs[1].(int)]
	}).(LineCurrentTOutput)
}

type LineDiameter struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineDiameterInput is an input type that accepts LineDiameterArgs and LineDiameterOutput values.
// You can construct a concrete instance of `LineDiameterInput` via:
//
//	LineDiameterArgs{...}
type LineDiameterInput interface {
	pulumi.Input

	ToLineDiameterOutput() LineDiameterOutput
	ToLineDiameterOutputWithContext(context.Context) LineDiameterOutput
}

type LineDiameterArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineDiameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineDiameter)(nil)).Elem()
}

func (i LineDiameterArgs) ToLineDiameterOutput() LineDiameterOutput {
	return i.ToLineDiameterOutputWithContext(context.Background())
}

func (i LineDiameterArgs) ToLineDiameterOutputWithContext(ctx context.Context) LineDiameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineDiameterOutput)
}

func (i LineDiameterArgs) ToLineDiameterPtrOutput() LineDiameterPtrOutput {
	return i.ToLineDiameterPtrOutputWithContext(context.Background())
}

func (i LineDiameterArgs) ToLineDiameterPtrOutputWithContext(ctx context.Context) LineDiameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineDiameterOutput).ToLineDiameterPtrOutputWithContext(ctx)
}

// LineDiameterPtrInput is an input type that accepts LineDiameterArgs, LineDiameterPtr and LineDiameterPtrOutput values.
// You can construct a concrete instance of `LineDiameterPtrInput` via:
//
//	        LineDiameterArgs{...}
//
//	or:
//
//	        nil
type LineDiameterPtrInput interface {
	pulumi.Input

	ToLineDiameterPtrOutput() LineDiameterPtrOutput
	ToLineDiameterPtrOutputWithContext(context.Context) LineDiameterPtrOutput
}

type lineDiameterPtrType LineDiameterArgs

func LineDiameterPtr(v *LineDiameterArgs) LineDiameterPtrInput {
	return (*lineDiameterPtrType)(v)
}

func (*lineDiameterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineDiameter)(nil)).Elem()
}

func (i *lineDiameterPtrType) ToLineDiameterPtrOutput() LineDiameterPtrOutput {
	return i.ToLineDiameterPtrOutputWithContext(context.Background())
}

func (i *lineDiameterPtrType) ToLineDiameterPtrOutputWithContext(ctx context.Context) LineDiameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineDiameterPtrOutput)
}

type LineDiameterOutput struct{ *pulumi.OutputState }

func (LineDiameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineDiameter)(nil)).Elem()
}

func (o LineDiameterOutput) ToLineDiameterOutput() LineDiameterOutput {
	return o
}

func (o LineDiameterOutput) ToLineDiameterOutputWithContext(ctx context.Context) LineDiameterOutput {
	return o
}

func (o LineDiameterOutput) ToLineDiameterPtrOutput() LineDiameterPtrOutput {
	return o.ToLineDiameterPtrOutputWithContext(context.Background())
}

func (o LineDiameterOutput) ToLineDiameterPtrOutputWithContext(ctx context.Context) LineDiameterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineDiameter) *LineDiameter {
		return &v
	}).(LineDiameterPtrOutput)
}

// reference to the asset to be linked to
func (o LineDiameterOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineDiameter) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineDiameterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineDiameter) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineDiameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineDiameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineDiameterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineDiameter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineDiameterOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineDiameter) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineDiameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineDiameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineDiameterPtrOutput struct{ *pulumi.OutputState }

func (LineDiameterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineDiameter)(nil)).Elem()
}

func (o LineDiameterPtrOutput) ToLineDiameterPtrOutput() LineDiameterPtrOutput {
	return o
}

func (o LineDiameterPtrOutput) ToLineDiameterPtrOutputWithContext(ctx context.Context) LineDiameterPtrOutput {
	return o
}

func (o LineDiameterPtrOutput) Elem() LineDiameterOutput {
	return o.ApplyT(func(v *LineDiameter) LineDiameter {
		if v != nil {
			return *v
		}
		var ret LineDiameter
		return ret
	}).(LineDiameterOutput)
}

// reference to the asset to be linked to
func (o LineDiameterPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineDiameter) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineDiameterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineDiameter) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineDiameterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineDiameter) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineDiameterPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineDiameter) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineDiameterPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineDiameter) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineDiameterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineDiameter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineEmissivity struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineEmissivityInput is an input type that accepts LineEmissivityArgs and LineEmissivityOutput values.
// You can construct a concrete instance of `LineEmissivityInput` via:
//
//	LineEmissivityArgs{...}
type LineEmissivityInput interface {
	pulumi.Input

	ToLineEmissivityOutput() LineEmissivityOutput
	ToLineEmissivityOutputWithContext(context.Context) LineEmissivityOutput
}

type LineEmissivityArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineEmissivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineEmissivity)(nil)).Elem()
}

func (i LineEmissivityArgs) ToLineEmissivityOutput() LineEmissivityOutput {
	return i.ToLineEmissivityOutputWithContext(context.Background())
}

func (i LineEmissivityArgs) ToLineEmissivityOutputWithContext(ctx context.Context) LineEmissivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineEmissivityOutput)
}

func (i LineEmissivityArgs) ToLineEmissivityPtrOutput() LineEmissivityPtrOutput {
	return i.ToLineEmissivityPtrOutputWithContext(context.Background())
}

func (i LineEmissivityArgs) ToLineEmissivityPtrOutputWithContext(ctx context.Context) LineEmissivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineEmissivityOutput).ToLineEmissivityPtrOutputWithContext(ctx)
}

// LineEmissivityPtrInput is an input type that accepts LineEmissivityArgs, LineEmissivityPtr and LineEmissivityPtrOutput values.
// You can construct a concrete instance of `LineEmissivityPtrInput` via:
//
//	        LineEmissivityArgs{...}
//
//	or:
//
//	        nil
type LineEmissivityPtrInput interface {
	pulumi.Input

	ToLineEmissivityPtrOutput() LineEmissivityPtrOutput
	ToLineEmissivityPtrOutputWithContext(context.Context) LineEmissivityPtrOutput
}

type lineEmissivityPtrType LineEmissivityArgs

func LineEmissivityPtr(v *LineEmissivityArgs) LineEmissivityPtrInput {
	return (*lineEmissivityPtrType)(v)
}

func (*lineEmissivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineEmissivity)(nil)).Elem()
}

func (i *lineEmissivityPtrType) ToLineEmissivityPtrOutput() LineEmissivityPtrOutput {
	return i.ToLineEmissivityPtrOutputWithContext(context.Background())
}

func (i *lineEmissivityPtrType) ToLineEmissivityPtrOutputWithContext(ctx context.Context) LineEmissivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineEmissivityPtrOutput)
}

type LineEmissivityOutput struct{ *pulumi.OutputState }

func (LineEmissivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineEmissivity)(nil)).Elem()
}

func (o LineEmissivityOutput) ToLineEmissivityOutput() LineEmissivityOutput {
	return o
}

func (o LineEmissivityOutput) ToLineEmissivityOutputWithContext(ctx context.Context) LineEmissivityOutput {
	return o
}

func (o LineEmissivityOutput) ToLineEmissivityPtrOutput() LineEmissivityPtrOutput {
	return o.ToLineEmissivityPtrOutputWithContext(context.Background())
}

func (o LineEmissivityOutput) ToLineEmissivityPtrOutputWithContext(ctx context.Context) LineEmissivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineEmissivity) *LineEmissivity {
		return &v
	}).(LineEmissivityPtrOutput)
}

// reference to the asset to be linked to
func (o LineEmissivityOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineEmissivity) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineEmissivityOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineEmissivity) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineEmissivityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineEmissivity) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineEmissivityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineEmissivity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineEmissivityOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineEmissivity) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineEmissivityOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineEmissivity) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineEmissivityPtrOutput struct{ *pulumi.OutputState }

func (LineEmissivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineEmissivity)(nil)).Elem()
}

func (o LineEmissivityPtrOutput) ToLineEmissivityPtrOutput() LineEmissivityPtrOutput {
	return o
}

func (o LineEmissivityPtrOutput) ToLineEmissivityPtrOutputWithContext(ctx context.Context) LineEmissivityPtrOutput {
	return o
}

func (o LineEmissivityPtrOutput) Elem() LineEmissivityOutput {
	return o.ApplyT(func(v *LineEmissivity) LineEmissivity {
		if v != nil {
			return *v
		}
		var ret LineEmissivity
		return ret
	}).(LineEmissivityOutput)
}

// reference to the asset to be linked to
func (o LineEmissivityPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineEmissivity) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineEmissivityPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineEmissivity) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineEmissivityPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineEmissivity) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineEmissivityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineEmissivity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineEmissivityPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineEmissivity) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineEmissivityPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineEmissivity) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineEnergy struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineEnergyInput is an input type that accepts LineEnergyArgs and LineEnergyOutput values.
// You can construct a concrete instance of `LineEnergyInput` via:
//
//	LineEnergyArgs{...}
type LineEnergyInput interface {
	pulumi.Input

	ToLineEnergyOutput() LineEnergyOutput
	ToLineEnergyOutputWithContext(context.Context) LineEnergyOutput
}

type LineEnergyArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineEnergyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineEnergy)(nil)).Elem()
}

func (i LineEnergyArgs) ToLineEnergyOutput() LineEnergyOutput {
	return i.ToLineEnergyOutputWithContext(context.Background())
}

func (i LineEnergyArgs) ToLineEnergyOutputWithContext(ctx context.Context) LineEnergyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineEnergyOutput)
}

// LineEnergyArrayInput is an input type that accepts LineEnergyArray and LineEnergyArrayOutput values.
// You can construct a concrete instance of `LineEnergyArrayInput` via:
//
//	LineEnergyArray{ LineEnergyArgs{...} }
type LineEnergyArrayInput interface {
	pulumi.Input

	ToLineEnergyArrayOutput() LineEnergyArrayOutput
	ToLineEnergyArrayOutputWithContext(context.Context) LineEnergyArrayOutput
}

type LineEnergyArray []LineEnergyInput

func (LineEnergyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineEnergy)(nil)).Elem()
}

func (i LineEnergyArray) ToLineEnergyArrayOutput() LineEnergyArrayOutput {
	return i.ToLineEnergyArrayOutputWithContext(context.Background())
}

func (i LineEnergyArray) ToLineEnergyArrayOutputWithContext(ctx context.Context) LineEnergyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineEnergyArrayOutput)
}

type LineEnergyOutput struct{ *pulumi.OutputState }

func (LineEnergyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineEnergy)(nil)).Elem()
}

func (o LineEnergyOutput) ToLineEnergyOutput() LineEnergyOutput {
	return o
}

func (o LineEnergyOutput) ToLineEnergyOutputWithContext(ctx context.Context) LineEnergyOutput {
	return o
}

// reference to the asset to be linked to
func (o LineEnergyOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineEnergy) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineEnergyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineEnergy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineEnergyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineEnergy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineEnergyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineEnergy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineEnergyOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineEnergy) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineEnergyArrayOutput struct{ *pulumi.OutputState }

func (LineEnergyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineEnergy)(nil)).Elem()
}

func (o LineEnergyArrayOutput) ToLineEnergyArrayOutput() LineEnergyArrayOutput {
	return o
}

func (o LineEnergyArrayOutput) ToLineEnergyArrayOutputWithContext(ctx context.Context) LineEnergyArrayOutput {
	return o
}

func (o LineEnergyArrayOutput) Index(i pulumi.IntInput) LineEnergyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineEnergy {
		return vs[0].([]LineEnergy)[vs[1].(int)]
	}).(LineEnergyOutput)
}

type LineKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// LineKindInput is an input type that accepts LineKindArgs and LineKindOutput values.
// You can construct a concrete instance of `LineKindInput` via:
//
//	LineKindArgs{...}
type LineKindInput interface {
	pulumi.Input

	ToLineKindOutput() LineKindOutput
	ToLineKindOutputWithContext(context.Context) LineKindOutput
}

type LineKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (LineKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineKind)(nil)).Elem()
}

func (i LineKindArgs) ToLineKindOutput() LineKindOutput {
	return i.ToLineKindOutputWithContext(context.Background())
}

func (i LineKindArgs) ToLineKindOutputWithContext(ctx context.Context) LineKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineKindOutput)
}

// LineKindArrayInput is an input type that accepts LineKindArray and LineKindArrayOutput values.
// You can construct a concrete instance of `LineKindArrayInput` via:
//
//	LineKindArray{ LineKindArgs{...} }
type LineKindArrayInput interface {
	pulumi.Input

	ToLineKindArrayOutput() LineKindArrayOutput
	ToLineKindArrayOutputWithContext(context.Context) LineKindArrayOutput
}

type LineKindArray []LineKindInput

func (LineKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineKind)(nil)).Elem()
}

func (i LineKindArray) ToLineKindArrayOutput() LineKindArrayOutput {
	return i.ToLineKindArrayOutputWithContext(context.Background())
}

func (i LineKindArray) ToLineKindArrayOutputWithContext(ctx context.Context) LineKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineKindArrayOutput)
}

type LineKindOutput struct{ *pulumi.OutputState }

func (LineKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineKind)(nil)).Elem()
}

func (o LineKindOutput) ToLineKindOutput() LineKindOutput {
	return o
}

func (o LineKindOutput) ToLineKindOutputWithContext(ctx context.Context) LineKindOutput {
	return o
}

// kind id
func (o LineKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LineKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o LineKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LineKind) string { return v.Name }).(pulumi.StringOutput)
}

type LineKindArrayOutput struct{ *pulumi.OutputState }

func (LineKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineKind)(nil)).Elem()
}

func (o LineKindArrayOutput) ToLineKindArrayOutput() LineKindArrayOutput {
	return o
}

func (o LineKindArrayOutput) ToLineKindArrayOutputWithContext(ctx context.Context) LineKindArrayOutput {
	return o
}

func (o LineKindArrayOutput) Index(i pulumi.IntInput) LineKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineKind {
		return vs[0].([]LineKind)[vs[1].(int)]
	}).(LineKindOutput)
}

type LineLength struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineLengthInput is an input type that accepts LineLengthArgs and LineLengthOutput values.
// You can construct a concrete instance of `LineLengthInput` via:
//
//	LineLengthArgs{...}
type LineLengthInput interface {
	pulumi.Input

	ToLineLengthOutput() LineLengthOutput
	ToLineLengthOutputWithContext(context.Context) LineLengthOutput
}

type LineLengthArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineLengthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineLength)(nil)).Elem()
}

func (i LineLengthArgs) ToLineLengthOutput() LineLengthOutput {
	return i.ToLineLengthOutputWithContext(context.Background())
}

func (i LineLengthArgs) ToLineLengthOutputWithContext(ctx context.Context) LineLengthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineLengthOutput)
}

func (i LineLengthArgs) ToLineLengthPtrOutput() LineLengthPtrOutput {
	return i.ToLineLengthPtrOutputWithContext(context.Background())
}

func (i LineLengthArgs) ToLineLengthPtrOutputWithContext(ctx context.Context) LineLengthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineLengthOutput).ToLineLengthPtrOutputWithContext(ctx)
}

// LineLengthPtrInput is an input type that accepts LineLengthArgs, LineLengthPtr and LineLengthPtrOutput values.
// You can construct a concrete instance of `LineLengthPtrInput` via:
//
//	        LineLengthArgs{...}
//
//	or:
//
//	        nil
type LineLengthPtrInput interface {
	pulumi.Input

	ToLineLengthPtrOutput() LineLengthPtrOutput
	ToLineLengthPtrOutputWithContext(context.Context) LineLengthPtrOutput
}

type lineLengthPtrType LineLengthArgs

func LineLengthPtr(v *LineLengthArgs) LineLengthPtrInput {
	return (*lineLengthPtrType)(v)
}

func (*lineLengthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineLength)(nil)).Elem()
}

func (i *lineLengthPtrType) ToLineLengthPtrOutput() LineLengthPtrOutput {
	return i.ToLineLengthPtrOutputWithContext(context.Background())
}

func (i *lineLengthPtrType) ToLineLengthPtrOutputWithContext(ctx context.Context) LineLengthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineLengthPtrOutput)
}

type LineLengthOutput struct{ *pulumi.OutputState }

func (LineLengthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineLength)(nil)).Elem()
}

func (o LineLengthOutput) ToLineLengthOutput() LineLengthOutput {
	return o
}

func (o LineLengthOutput) ToLineLengthOutputWithContext(ctx context.Context) LineLengthOutput {
	return o
}

func (o LineLengthOutput) ToLineLengthPtrOutput() LineLengthPtrOutput {
	return o.ToLineLengthPtrOutputWithContext(context.Background())
}

func (o LineLengthOutput) ToLineLengthPtrOutputWithContext(ctx context.Context) LineLengthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineLength) *LineLength {
		return &v
	}).(LineLengthPtrOutput)
}

// reference to the asset to be linked to
func (o LineLengthOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineLength) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineLengthOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineLength) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineLengthOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineLength) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineLengthOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineLength) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineLengthOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineLength) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineLengthOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineLength) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineLengthPtrOutput struct{ *pulumi.OutputState }

func (LineLengthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineLength)(nil)).Elem()
}

func (o LineLengthPtrOutput) ToLineLengthPtrOutput() LineLengthPtrOutput {
	return o
}

func (o LineLengthPtrOutput) ToLineLengthPtrOutputWithContext(ctx context.Context) LineLengthPtrOutput {
	return o
}

func (o LineLengthPtrOutput) Elem() LineLengthOutput {
	return o.ApplyT(func(v *LineLength) LineLength {
		if v != nil {
			return *v
		}
		var ret LineLength
		return ret
	}).(LineLengthOutput)
}

// reference to the asset to be linked to
func (o LineLengthPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineLength) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineLengthPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineLength) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineLengthPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineLength) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineLengthPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineLength) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineLengthPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineLength) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineLengthPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineLength) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineMaxTemperature struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineMaxTemperatureInput is an input type that accepts LineMaxTemperatureArgs and LineMaxTemperatureOutput values.
// You can construct a concrete instance of `LineMaxTemperatureInput` via:
//
//	LineMaxTemperatureArgs{...}
type LineMaxTemperatureInput interface {
	pulumi.Input

	ToLineMaxTemperatureOutput() LineMaxTemperatureOutput
	ToLineMaxTemperatureOutputWithContext(context.Context) LineMaxTemperatureOutput
}

type LineMaxTemperatureArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineMaxTemperatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaxTemperature)(nil)).Elem()
}

func (i LineMaxTemperatureArgs) ToLineMaxTemperatureOutput() LineMaxTemperatureOutput {
	return i.ToLineMaxTemperatureOutputWithContext(context.Background())
}

func (i LineMaxTemperatureArgs) ToLineMaxTemperatureOutputWithContext(ctx context.Context) LineMaxTemperatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaxTemperatureOutput)
}

// LineMaxTemperatureArrayInput is an input type that accepts LineMaxTemperatureArray and LineMaxTemperatureArrayOutput values.
// You can construct a concrete instance of `LineMaxTemperatureArrayInput` via:
//
//	LineMaxTemperatureArray{ LineMaxTemperatureArgs{...} }
type LineMaxTemperatureArrayInput interface {
	pulumi.Input

	ToLineMaxTemperatureArrayOutput() LineMaxTemperatureArrayOutput
	ToLineMaxTemperatureArrayOutputWithContext(context.Context) LineMaxTemperatureArrayOutput
}

type LineMaxTemperatureArray []LineMaxTemperatureInput

func (LineMaxTemperatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineMaxTemperature)(nil)).Elem()
}

func (i LineMaxTemperatureArray) ToLineMaxTemperatureArrayOutput() LineMaxTemperatureArrayOutput {
	return i.ToLineMaxTemperatureArrayOutputWithContext(context.Background())
}

func (i LineMaxTemperatureArray) ToLineMaxTemperatureArrayOutputWithContext(ctx context.Context) LineMaxTemperatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaxTemperatureArrayOutput)
}

type LineMaxTemperatureOutput struct{ *pulumi.OutputState }

func (LineMaxTemperatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaxTemperature)(nil)).Elem()
}

func (o LineMaxTemperatureOutput) ToLineMaxTemperatureOutput() LineMaxTemperatureOutput {
	return o
}

func (o LineMaxTemperatureOutput) ToLineMaxTemperatureOutputWithContext(ctx context.Context) LineMaxTemperatureOutput {
	return o
}

// reference to the asset to be linked to
func (o LineMaxTemperatureOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaxTemperature) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineMaxTemperatureOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaxTemperature) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineMaxTemperatureOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaxTemperature) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineMaxTemperatureOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaxTemperature) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineMaxTemperatureOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaxTemperature) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineMaxTemperatureArrayOutput struct{ *pulumi.OutputState }

func (LineMaxTemperatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineMaxTemperature)(nil)).Elem()
}

func (o LineMaxTemperatureArrayOutput) ToLineMaxTemperatureArrayOutput() LineMaxTemperatureArrayOutput {
	return o
}

func (o LineMaxTemperatureArrayOutput) ToLineMaxTemperatureArrayOutputWithContext(ctx context.Context) LineMaxTemperatureArrayOutput {
	return o
}

func (o LineMaxTemperatureArrayOutput) Index(i pulumi.IntInput) LineMaxTemperatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineMaxTemperature {
		return vs[0].([]LineMaxTemperature)[vs[1].(int)]
	}).(LineMaxTemperatureOutput)
}

type LineMaximumAllowedCurrent struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineMaximumAllowedCurrentInput is an input type that accepts LineMaximumAllowedCurrentArgs and LineMaximumAllowedCurrentOutput values.
// You can construct a concrete instance of `LineMaximumAllowedCurrentInput` via:
//
//	LineMaximumAllowedCurrentArgs{...}
type LineMaximumAllowedCurrentInput interface {
	pulumi.Input

	ToLineMaximumAllowedCurrentOutput() LineMaximumAllowedCurrentOutput
	ToLineMaximumAllowedCurrentOutputWithContext(context.Context) LineMaximumAllowedCurrentOutput
}

type LineMaximumAllowedCurrentArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineMaximumAllowedCurrentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaximumAllowedCurrent)(nil)).Elem()
}

func (i LineMaximumAllowedCurrentArgs) ToLineMaximumAllowedCurrentOutput() LineMaximumAllowedCurrentOutput {
	return i.ToLineMaximumAllowedCurrentOutputWithContext(context.Background())
}

func (i LineMaximumAllowedCurrentArgs) ToLineMaximumAllowedCurrentOutputWithContext(ctx context.Context) LineMaximumAllowedCurrentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedCurrentOutput)
}

func (i LineMaximumAllowedCurrentArgs) ToLineMaximumAllowedCurrentPtrOutput() LineMaximumAllowedCurrentPtrOutput {
	return i.ToLineMaximumAllowedCurrentPtrOutputWithContext(context.Background())
}

func (i LineMaximumAllowedCurrentArgs) ToLineMaximumAllowedCurrentPtrOutputWithContext(ctx context.Context) LineMaximumAllowedCurrentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedCurrentOutput).ToLineMaximumAllowedCurrentPtrOutputWithContext(ctx)
}

// LineMaximumAllowedCurrentPtrInput is an input type that accepts LineMaximumAllowedCurrentArgs, LineMaximumAllowedCurrentPtr and LineMaximumAllowedCurrentPtrOutput values.
// You can construct a concrete instance of `LineMaximumAllowedCurrentPtrInput` via:
//
//	        LineMaximumAllowedCurrentArgs{...}
//
//	or:
//
//	        nil
type LineMaximumAllowedCurrentPtrInput interface {
	pulumi.Input

	ToLineMaximumAllowedCurrentPtrOutput() LineMaximumAllowedCurrentPtrOutput
	ToLineMaximumAllowedCurrentPtrOutputWithContext(context.Context) LineMaximumAllowedCurrentPtrOutput
}

type lineMaximumAllowedCurrentPtrType LineMaximumAllowedCurrentArgs

func LineMaximumAllowedCurrentPtr(v *LineMaximumAllowedCurrentArgs) LineMaximumAllowedCurrentPtrInput {
	return (*lineMaximumAllowedCurrentPtrType)(v)
}

func (*lineMaximumAllowedCurrentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineMaximumAllowedCurrent)(nil)).Elem()
}

func (i *lineMaximumAllowedCurrentPtrType) ToLineMaximumAllowedCurrentPtrOutput() LineMaximumAllowedCurrentPtrOutput {
	return i.ToLineMaximumAllowedCurrentPtrOutputWithContext(context.Background())
}

func (i *lineMaximumAllowedCurrentPtrType) ToLineMaximumAllowedCurrentPtrOutputWithContext(ctx context.Context) LineMaximumAllowedCurrentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedCurrentPtrOutput)
}

type LineMaximumAllowedCurrentOutput struct{ *pulumi.OutputState }

func (LineMaximumAllowedCurrentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaximumAllowedCurrent)(nil)).Elem()
}

func (o LineMaximumAllowedCurrentOutput) ToLineMaximumAllowedCurrentOutput() LineMaximumAllowedCurrentOutput {
	return o
}

func (o LineMaximumAllowedCurrentOutput) ToLineMaximumAllowedCurrentOutputWithContext(ctx context.Context) LineMaximumAllowedCurrentOutput {
	return o
}

func (o LineMaximumAllowedCurrentOutput) ToLineMaximumAllowedCurrentPtrOutput() LineMaximumAllowedCurrentPtrOutput {
	return o.ToLineMaximumAllowedCurrentPtrOutputWithContext(context.Background())
}

func (o LineMaximumAllowedCurrentOutput) ToLineMaximumAllowedCurrentPtrOutputWithContext(ctx context.Context) LineMaximumAllowedCurrentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineMaximumAllowedCurrent) *LineMaximumAllowedCurrent {
		return &v
	}).(LineMaximumAllowedCurrentPtrOutput)
}

// reference to the asset to be linked to
func (o LineMaximumAllowedCurrentOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedCurrent) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineMaximumAllowedCurrentOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedCurrent) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineMaximumAllowedCurrentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedCurrent) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineMaximumAllowedCurrentOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedCurrent) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineMaximumAllowedCurrentOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedCurrent) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineMaximumAllowedCurrentOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedCurrent) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineMaximumAllowedCurrentPtrOutput struct{ *pulumi.OutputState }

func (LineMaximumAllowedCurrentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineMaximumAllowedCurrent)(nil)).Elem()
}

func (o LineMaximumAllowedCurrentPtrOutput) ToLineMaximumAllowedCurrentPtrOutput() LineMaximumAllowedCurrentPtrOutput {
	return o
}

func (o LineMaximumAllowedCurrentPtrOutput) ToLineMaximumAllowedCurrentPtrOutputWithContext(ctx context.Context) LineMaximumAllowedCurrentPtrOutput {
	return o
}

func (o LineMaximumAllowedCurrentPtrOutput) Elem() LineMaximumAllowedCurrentOutput {
	return o.ApplyT(func(v *LineMaximumAllowedCurrent) LineMaximumAllowedCurrent {
		if v != nil {
			return *v
		}
		var ret LineMaximumAllowedCurrent
		return ret
	}).(LineMaximumAllowedCurrentOutput)
}

// reference to the asset to be linked to
func (o LineMaximumAllowedCurrentPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineMaximumAllowedCurrentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineMaximumAllowedCurrentPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineMaximumAllowedCurrentPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineMaximumAllowedCurrentPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineMaximumAllowedCurrentPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineMaximumAllowedPower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineMaximumAllowedPowerInput is an input type that accepts LineMaximumAllowedPowerArgs and LineMaximumAllowedPowerOutput values.
// You can construct a concrete instance of `LineMaximumAllowedPowerInput` via:
//
//	LineMaximumAllowedPowerArgs{...}
type LineMaximumAllowedPowerInput interface {
	pulumi.Input

	ToLineMaximumAllowedPowerOutput() LineMaximumAllowedPowerOutput
	ToLineMaximumAllowedPowerOutputWithContext(context.Context) LineMaximumAllowedPowerOutput
}

type LineMaximumAllowedPowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineMaximumAllowedPowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaximumAllowedPower)(nil)).Elem()
}

func (i LineMaximumAllowedPowerArgs) ToLineMaximumAllowedPowerOutput() LineMaximumAllowedPowerOutput {
	return i.ToLineMaximumAllowedPowerOutputWithContext(context.Background())
}

func (i LineMaximumAllowedPowerArgs) ToLineMaximumAllowedPowerOutputWithContext(ctx context.Context) LineMaximumAllowedPowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedPowerOutput)
}

func (i LineMaximumAllowedPowerArgs) ToLineMaximumAllowedPowerPtrOutput() LineMaximumAllowedPowerPtrOutput {
	return i.ToLineMaximumAllowedPowerPtrOutputWithContext(context.Background())
}

func (i LineMaximumAllowedPowerArgs) ToLineMaximumAllowedPowerPtrOutputWithContext(ctx context.Context) LineMaximumAllowedPowerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedPowerOutput).ToLineMaximumAllowedPowerPtrOutputWithContext(ctx)
}

// LineMaximumAllowedPowerPtrInput is an input type that accepts LineMaximumAllowedPowerArgs, LineMaximumAllowedPowerPtr and LineMaximumAllowedPowerPtrOutput values.
// You can construct a concrete instance of `LineMaximumAllowedPowerPtrInput` via:
//
//	        LineMaximumAllowedPowerArgs{...}
//
//	or:
//
//	        nil
type LineMaximumAllowedPowerPtrInput interface {
	pulumi.Input

	ToLineMaximumAllowedPowerPtrOutput() LineMaximumAllowedPowerPtrOutput
	ToLineMaximumAllowedPowerPtrOutputWithContext(context.Context) LineMaximumAllowedPowerPtrOutput
}

type lineMaximumAllowedPowerPtrType LineMaximumAllowedPowerArgs

func LineMaximumAllowedPowerPtr(v *LineMaximumAllowedPowerArgs) LineMaximumAllowedPowerPtrInput {
	return (*lineMaximumAllowedPowerPtrType)(v)
}

func (*lineMaximumAllowedPowerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineMaximumAllowedPower)(nil)).Elem()
}

func (i *lineMaximumAllowedPowerPtrType) ToLineMaximumAllowedPowerPtrOutput() LineMaximumAllowedPowerPtrOutput {
	return i.ToLineMaximumAllowedPowerPtrOutputWithContext(context.Background())
}

func (i *lineMaximumAllowedPowerPtrType) ToLineMaximumAllowedPowerPtrOutputWithContext(ctx context.Context) LineMaximumAllowedPowerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedPowerPtrOutput)
}

type LineMaximumAllowedPowerOutput struct{ *pulumi.OutputState }

func (LineMaximumAllowedPowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaximumAllowedPower)(nil)).Elem()
}

func (o LineMaximumAllowedPowerOutput) ToLineMaximumAllowedPowerOutput() LineMaximumAllowedPowerOutput {
	return o
}

func (o LineMaximumAllowedPowerOutput) ToLineMaximumAllowedPowerOutputWithContext(ctx context.Context) LineMaximumAllowedPowerOutput {
	return o
}

func (o LineMaximumAllowedPowerOutput) ToLineMaximumAllowedPowerPtrOutput() LineMaximumAllowedPowerPtrOutput {
	return o.ToLineMaximumAllowedPowerPtrOutputWithContext(context.Background())
}

func (o LineMaximumAllowedPowerOutput) ToLineMaximumAllowedPowerPtrOutputWithContext(ctx context.Context) LineMaximumAllowedPowerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineMaximumAllowedPower) *LineMaximumAllowedPower {
		return &v
	}).(LineMaximumAllowedPowerPtrOutput)
}

// reference to the asset to be linked to
func (o LineMaximumAllowedPowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedPower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineMaximumAllowedPowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedPower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineMaximumAllowedPowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedPower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineMaximumAllowedPowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedPower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineMaximumAllowedPowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedPower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineMaximumAllowedPowerOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedPower) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineMaximumAllowedPowerPtrOutput struct{ *pulumi.OutputState }

func (LineMaximumAllowedPowerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineMaximumAllowedPower)(nil)).Elem()
}

func (o LineMaximumAllowedPowerPtrOutput) ToLineMaximumAllowedPowerPtrOutput() LineMaximumAllowedPowerPtrOutput {
	return o
}

func (o LineMaximumAllowedPowerPtrOutput) ToLineMaximumAllowedPowerPtrOutputWithContext(ctx context.Context) LineMaximumAllowedPowerPtrOutput {
	return o
}

func (o LineMaximumAllowedPowerPtrOutput) Elem() LineMaximumAllowedPowerOutput {
	return o.ApplyT(func(v *LineMaximumAllowedPower) LineMaximumAllowedPower {
		if v != nil {
			return *v
		}
		var ret LineMaximumAllowedPower
		return ret
	}).(LineMaximumAllowedPowerOutput)
}

// reference to the asset to be linked to
func (o LineMaximumAllowedPowerPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineMaximumAllowedPowerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineMaximumAllowedPowerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineMaximumAllowedPowerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineMaximumAllowedPowerPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineMaximumAllowedPowerPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineMaximumAllowedTemperature struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineMaximumAllowedTemperatureInput is an input type that accepts LineMaximumAllowedTemperatureArgs and LineMaximumAllowedTemperatureOutput values.
// You can construct a concrete instance of `LineMaximumAllowedTemperatureInput` via:
//
//	LineMaximumAllowedTemperatureArgs{...}
type LineMaximumAllowedTemperatureInput interface {
	pulumi.Input

	ToLineMaximumAllowedTemperatureOutput() LineMaximumAllowedTemperatureOutput
	ToLineMaximumAllowedTemperatureOutputWithContext(context.Context) LineMaximumAllowedTemperatureOutput
}

type LineMaximumAllowedTemperatureArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineMaximumAllowedTemperatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaximumAllowedTemperature)(nil)).Elem()
}

func (i LineMaximumAllowedTemperatureArgs) ToLineMaximumAllowedTemperatureOutput() LineMaximumAllowedTemperatureOutput {
	return i.ToLineMaximumAllowedTemperatureOutputWithContext(context.Background())
}

func (i LineMaximumAllowedTemperatureArgs) ToLineMaximumAllowedTemperatureOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedTemperatureOutput)
}

func (i LineMaximumAllowedTemperatureArgs) ToLineMaximumAllowedTemperaturePtrOutput() LineMaximumAllowedTemperaturePtrOutput {
	return i.ToLineMaximumAllowedTemperaturePtrOutputWithContext(context.Background())
}

func (i LineMaximumAllowedTemperatureArgs) ToLineMaximumAllowedTemperaturePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedTemperatureOutput).ToLineMaximumAllowedTemperaturePtrOutputWithContext(ctx)
}

// LineMaximumAllowedTemperaturePtrInput is an input type that accepts LineMaximumAllowedTemperatureArgs, LineMaximumAllowedTemperaturePtr and LineMaximumAllowedTemperaturePtrOutput values.
// You can construct a concrete instance of `LineMaximumAllowedTemperaturePtrInput` via:
//
//	        LineMaximumAllowedTemperatureArgs{...}
//
//	or:
//
//	        nil
type LineMaximumAllowedTemperaturePtrInput interface {
	pulumi.Input

	ToLineMaximumAllowedTemperaturePtrOutput() LineMaximumAllowedTemperaturePtrOutput
	ToLineMaximumAllowedTemperaturePtrOutputWithContext(context.Context) LineMaximumAllowedTemperaturePtrOutput
}

type lineMaximumAllowedTemperaturePtrType LineMaximumAllowedTemperatureArgs

func LineMaximumAllowedTemperaturePtr(v *LineMaximumAllowedTemperatureArgs) LineMaximumAllowedTemperaturePtrInput {
	return (*lineMaximumAllowedTemperaturePtrType)(v)
}

func (*lineMaximumAllowedTemperaturePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineMaximumAllowedTemperature)(nil)).Elem()
}

func (i *lineMaximumAllowedTemperaturePtrType) ToLineMaximumAllowedTemperaturePtrOutput() LineMaximumAllowedTemperaturePtrOutput {
	return i.ToLineMaximumAllowedTemperaturePtrOutputWithContext(context.Background())
}

func (i *lineMaximumAllowedTemperaturePtrType) ToLineMaximumAllowedTemperaturePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedTemperaturePtrOutput)
}

type LineMaximumAllowedTemperatureOutput struct{ *pulumi.OutputState }

func (LineMaximumAllowedTemperatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaximumAllowedTemperature)(nil)).Elem()
}

func (o LineMaximumAllowedTemperatureOutput) ToLineMaximumAllowedTemperatureOutput() LineMaximumAllowedTemperatureOutput {
	return o
}

func (o LineMaximumAllowedTemperatureOutput) ToLineMaximumAllowedTemperatureOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureOutput {
	return o
}

func (o LineMaximumAllowedTemperatureOutput) ToLineMaximumAllowedTemperaturePtrOutput() LineMaximumAllowedTemperaturePtrOutput {
	return o.ToLineMaximumAllowedTemperaturePtrOutputWithContext(context.Background())
}

func (o LineMaximumAllowedTemperatureOutput) ToLineMaximumAllowedTemperaturePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperaturePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineMaximumAllowedTemperature) *LineMaximumAllowedTemperature {
		return &v
	}).(LineMaximumAllowedTemperaturePtrOutput)
}

// reference to the asset to be linked to
func (o LineMaximumAllowedTemperatureOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperature) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineMaximumAllowedTemperatureOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperature) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineMaximumAllowedTemperatureOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperature) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineMaximumAllowedTemperatureOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperature) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineMaximumAllowedTemperatureOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperature) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineMaximumAllowedTemperatureOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperature) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineMaximumAllowedTemperaturePtrOutput struct{ *pulumi.OutputState }

func (LineMaximumAllowedTemperaturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineMaximumAllowedTemperature)(nil)).Elem()
}

func (o LineMaximumAllowedTemperaturePtrOutput) ToLineMaximumAllowedTemperaturePtrOutput() LineMaximumAllowedTemperaturePtrOutput {
	return o
}

func (o LineMaximumAllowedTemperaturePtrOutput) ToLineMaximumAllowedTemperaturePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperaturePtrOutput {
	return o
}

func (o LineMaximumAllowedTemperaturePtrOutput) Elem() LineMaximumAllowedTemperatureOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperature) LineMaximumAllowedTemperature {
		if v != nil {
			return *v
		}
		var ret LineMaximumAllowedTemperature
		return ret
	}).(LineMaximumAllowedTemperatureOutput)
}

// reference to the asset to be linked to
func (o LineMaximumAllowedTemperaturePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineMaximumAllowedTemperaturePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineMaximumAllowedTemperaturePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineMaximumAllowedTemperaturePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineMaximumAllowedTemperaturePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineMaximumAllowedTemperaturePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineMaximumAllowedTemperatureLte struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineMaximumAllowedTemperatureLteInput is an input type that accepts LineMaximumAllowedTemperatureLteArgs and LineMaximumAllowedTemperatureLteOutput values.
// You can construct a concrete instance of `LineMaximumAllowedTemperatureLteInput` via:
//
//	LineMaximumAllowedTemperatureLteArgs{...}
type LineMaximumAllowedTemperatureLteInput interface {
	pulumi.Input

	ToLineMaximumAllowedTemperatureLteOutput() LineMaximumAllowedTemperatureLteOutput
	ToLineMaximumAllowedTemperatureLteOutputWithContext(context.Context) LineMaximumAllowedTemperatureLteOutput
}

type LineMaximumAllowedTemperatureLteArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineMaximumAllowedTemperatureLteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaximumAllowedTemperatureLte)(nil)).Elem()
}

func (i LineMaximumAllowedTemperatureLteArgs) ToLineMaximumAllowedTemperatureLteOutput() LineMaximumAllowedTemperatureLteOutput {
	return i.ToLineMaximumAllowedTemperatureLteOutputWithContext(context.Background())
}

func (i LineMaximumAllowedTemperatureLteArgs) ToLineMaximumAllowedTemperatureLteOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureLteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedTemperatureLteOutput)
}

func (i LineMaximumAllowedTemperatureLteArgs) ToLineMaximumAllowedTemperatureLtePtrOutput() LineMaximumAllowedTemperatureLtePtrOutput {
	return i.ToLineMaximumAllowedTemperatureLtePtrOutputWithContext(context.Background())
}

func (i LineMaximumAllowedTemperatureLteArgs) ToLineMaximumAllowedTemperatureLtePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureLtePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedTemperatureLteOutput).ToLineMaximumAllowedTemperatureLtePtrOutputWithContext(ctx)
}

// LineMaximumAllowedTemperatureLtePtrInput is an input type that accepts LineMaximumAllowedTemperatureLteArgs, LineMaximumAllowedTemperatureLtePtr and LineMaximumAllowedTemperatureLtePtrOutput values.
// You can construct a concrete instance of `LineMaximumAllowedTemperatureLtePtrInput` via:
//
//	        LineMaximumAllowedTemperatureLteArgs{...}
//
//	or:
//
//	        nil
type LineMaximumAllowedTemperatureLtePtrInput interface {
	pulumi.Input

	ToLineMaximumAllowedTemperatureLtePtrOutput() LineMaximumAllowedTemperatureLtePtrOutput
	ToLineMaximumAllowedTemperatureLtePtrOutputWithContext(context.Context) LineMaximumAllowedTemperatureLtePtrOutput
}

type lineMaximumAllowedTemperatureLtePtrType LineMaximumAllowedTemperatureLteArgs

func LineMaximumAllowedTemperatureLtePtr(v *LineMaximumAllowedTemperatureLteArgs) LineMaximumAllowedTemperatureLtePtrInput {
	return (*lineMaximumAllowedTemperatureLtePtrType)(v)
}

func (*lineMaximumAllowedTemperatureLtePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineMaximumAllowedTemperatureLte)(nil)).Elem()
}

func (i *lineMaximumAllowedTemperatureLtePtrType) ToLineMaximumAllowedTemperatureLtePtrOutput() LineMaximumAllowedTemperatureLtePtrOutput {
	return i.ToLineMaximumAllowedTemperatureLtePtrOutputWithContext(context.Background())
}

func (i *lineMaximumAllowedTemperatureLtePtrType) ToLineMaximumAllowedTemperatureLtePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureLtePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedTemperatureLtePtrOutput)
}

type LineMaximumAllowedTemperatureLteOutput struct{ *pulumi.OutputState }

func (LineMaximumAllowedTemperatureLteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaximumAllowedTemperatureLte)(nil)).Elem()
}

func (o LineMaximumAllowedTemperatureLteOutput) ToLineMaximumAllowedTemperatureLteOutput() LineMaximumAllowedTemperatureLteOutput {
	return o
}

func (o LineMaximumAllowedTemperatureLteOutput) ToLineMaximumAllowedTemperatureLteOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureLteOutput {
	return o
}

func (o LineMaximumAllowedTemperatureLteOutput) ToLineMaximumAllowedTemperatureLtePtrOutput() LineMaximumAllowedTemperatureLtePtrOutput {
	return o.ToLineMaximumAllowedTemperatureLtePtrOutputWithContext(context.Background())
}

func (o LineMaximumAllowedTemperatureLteOutput) ToLineMaximumAllowedTemperatureLtePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureLtePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineMaximumAllowedTemperatureLte) *LineMaximumAllowedTemperatureLte {
		return &v
	}).(LineMaximumAllowedTemperatureLtePtrOutput)
}

// reference to the asset to be linked to
func (o LineMaximumAllowedTemperatureLteOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureLte) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineMaximumAllowedTemperatureLteOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureLte) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineMaximumAllowedTemperatureLteOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureLte) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineMaximumAllowedTemperatureLteOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureLte) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineMaximumAllowedTemperatureLteOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureLte) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineMaximumAllowedTemperatureLteOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureLte) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineMaximumAllowedTemperatureLtePtrOutput struct{ *pulumi.OutputState }

func (LineMaximumAllowedTemperatureLtePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineMaximumAllowedTemperatureLte)(nil)).Elem()
}

func (o LineMaximumAllowedTemperatureLtePtrOutput) ToLineMaximumAllowedTemperatureLtePtrOutput() LineMaximumAllowedTemperatureLtePtrOutput {
	return o
}

func (o LineMaximumAllowedTemperatureLtePtrOutput) ToLineMaximumAllowedTemperatureLtePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureLtePtrOutput {
	return o
}

func (o LineMaximumAllowedTemperatureLtePtrOutput) Elem() LineMaximumAllowedTemperatureLteOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureLte) LineMaximumAllowedTemperatureLte {
		if v != nil {
			return *v
		}
		var ret LineMaximumAllowedTemperatureLte
		return ret
	}).(LineMaximumAllowedTemperatureLteOutput)
}

// reference to the asset to be linked to
func (o LineMaximumAllowedTemperatureLtePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureLte) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineMaximumAllowedTemperatureLtePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureLte) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineMaximumAllowedTemperatureLtePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureLte) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineMaximumAllowedTemperatureLtePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureLte) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineMaximumAllowedTemperatureLtePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureLte) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineMaximumAllowedTemperatureLtePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureLte) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineMaximumAllowedTemperatureSte struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineMaximumAllowedTemperatureSteInput is an input type that accepts LineMaximumAllowedTemperatureSteArgs and LineMaximumAllowedTemperatureSteOutput values.
// You can construct a concrete instance of `LineMaximumAllowedTemperatureSteInput` via:
//
//	LineMaximumAllowedTemperatureSteArgs{...}
type LineMaximumAllowedTemperatureSteInput interface {
	pulumi.Input

	ToLineMaximumAllowedTemperatureSteOutput() LineMaximumAllowedTemperatureSteOutput
	ToLineMaximumAllowedTemperatureSteOutputWithContext(context.Context) LineMaximumAllowedTemperatureSteOutput
}

type LineMaximumAllowedTemperatureSteArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineMaximumAllowedTemperatureSteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaximumAllowedTemperatureSte)(nil)).Elem()
}

func (i LineMaximumAllowedTemperatureSteArgs) ToLineMaximumAllowedTemperatureSteOutput() LineMaximumAllowedTemperatureSteOutput {
	return i.ToLineMaximumAllowedTemperatureSteOutputWithContext(context.Background())
}

func (i LineMaximumAllowedTemperatureSteArgs) ToLineMaximumAllowedTemperatureSteOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureSteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedTemperatureSteOutput)
}

func (i LineMaximumAllowedTemperatureSteArgs) ToLineMaximumAllowedTemperatureStePtrOutput() LineMaximumAllowedTemperatureStePtrOutput {
	return i.ToLineMaximumAllowedTemperatureStePtrOutputWithContext(context.Background())
}

func (i LineMaximumAllowedTemperatureSteArgs) ToLineMaximumAllowedTemperatureStePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureStePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedTemperatureSteOutput).ToLineMaximumAllowedTemperatureStePtrOutputWithContext(ctx)
}

// LineMaximumAllowedTemperatureStePtrInput is an input type that accepts LineMaximumAllowedTemperatureSteArgs, LineMaximumAllowedTemperatureStePtr and LineMaximumAllowedTemperatureStePtrOutput values.
// You can construct a concrete instance of `LineMaximumAllowedTemperatureStePtrInput` via:
//
//	        LineMaximumAllowedTemperatureSteArgs{...}
//
//	or:
//
//	        nil
type LineMaximumAllowedTemperatureStePtrInput interface {
	pulumi.Input

	ToLineMaximumAllowedTemperatureStePtrOutput() LineMaximumAllowedTemperatureStePtrOutput
	ToLineMaximumAllowedTemperatureStePtrOutputWithContext(context.Context) LineMaximumAllowedTemperatureStePtrOutput
}

type lineMaximumAllowedTemperatureStePtrType LineMaximumAllowedTemperatureSteArgs

func LineMaximumAllowedTemperatureStePtr(v *LineMaximumAllowedTemperatureSteArgs) LineMaximumAllowedTemperatureStePtrInput {
	return (*lineMaximumAllowedTemperatureStePtrType)(v)
}

func (*lineMaximumAllowedTemperatureStePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineMaximumAllowedTemperatureSte)(nil)).Elem()
}

func (i *lineMaximumAllowedTemperatureStePtrType) ToLineMaximumAllowedTemperatureStePtrOutput() LineMaximumAllowedTemperatureStePtrOutput {
	return i.ToLineMaximumAllowedTemperatureStePtrOutputWithContext(context.Background())
}

func (i *lineMaximumAllowedTemperatureStePtrType) ToLineMaximumAllowedTemperatureStePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureStePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMaximumAllowedTemperatureStePtrOutput)
}

type LineMaximumAllowedTemperatureSteOutput struct{ *pulumi.OutputState }

func (LineMaximumAllowedTemperatureSteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineMaximumAllowedTemperatureSte)(nil)).Elem()
}

func (o LineMaximumAllowedTemperatureSteOutput) ToLineMaximumAllowedTemperatureSteOutput() LineMaximumAllowedTemperatureSteOutput {
	return o
}

func (o LineMaximumAllowedTemperatureSteOutput) ToLineMaximumAllowedTemperatureSteOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureSteOutput {
	return o
}

func (o LineMaximumAllowedTemperatureSteOutput) ToLineMaximumAllowedTemperatureStePtrOutput() LineMaximumAllowedTemperatureStePtrOutput {
	return o.ToLineMaximumAllowedTemperatureStePtrOutputWithContext(context.Background())
}

func (o LineMaximumAllowedTemperatureSteOutput) ToLineMaximumAllowedTemperatureStePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureStePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineMaximumAllowedTemperatureSte) *LineMaximumAllowedTemperatureSte {
		return &v
	}).(LineMaximumAllowedTemperatureStePtrOutput)
}

// reference to the asset to be linked to
func (o LineMaximumAllowedTemperatureSteOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureSte) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineMaximumAllowedTemperatureSteOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureSte) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineMaximumAllowedTemperatureSteOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureSte) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineMaximumAllowedTemperatureSteOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureSte) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineMaximumAllowedTemperatureSteOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureSte) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineMaximumAllowedTemperatureSteOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineMaximumAllowedTemperatureSte) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineMaximumAllowedTemperatureStePtrOutput struct{ *pulumi.OutputState }

func (LineMaximumAllowedTemperatureStePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineMaximumAllowedTemperatureSte)(nil)).Elem()
}

func (o LineMaximumAllowedTemperatureStePtrOutput) ToLineMaximumAllowedTemperatureStePtrOutput() LineMaximumAllowedTemperatureStePtrOutput {
	return o
}

func (o LineMaximumAllowedTemperatureStePtrOutput) ToLineMaximumAllowedTemperatureStePtrOutputWithContext(ctx context.Context) LineMaximumAllowedTemperatureStePtrOutput {
	return o
}

func (o LineMaximumAllowedTemperatureStePtrOutput) Elem() LineMaximumAllowedTemperatureSteOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureSte) LineMaximumAllowedTemperatureSte {
		if v != nil {
			return *v
		}
		var ret LineMaximumAllowedTemperatureSte
		return ret
	}).(LineMaximumAllowedTemperatureSteOutput)
}

// reference to the asset to be linked to
func (o LineMaximumAllowedTemperatureStePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureSte) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineMaximumAllowedTemperatureStePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureSte) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineMaximumAllowedTemperatureStePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureSte) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineMaximumAllowedTemperatureStePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureSte) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineMaximumAllowedTemperatureStePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureSte) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineMaximumAllowedTemperatureStePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineMaximumAllowedTemperatureSte) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineNumberOfConductors struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineNumberOfConductorsInput is an input type that accepts LineNumberOfConductorsArgs and LineNumberOfConductorsOutput values.
// You can construct a concrete instance of `LineNumberOfConductorsInput` via:
//
//	LineNumberOfConductorsArgs{...}
type LineNumberOfConductorsInput interface {
	pulumi.Input

	ToLineNumberOfConductorsOutput() LineNumberOfConductorsOutput
	ToLineNumberOfConductorsOutputWithContext(context.Context) LineNumberOfConductorsOutput
}

type LineNumberOfConductorsArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineNumberOfConductorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineNumberOfConductors)(nil)).Elem()
}

func (i LineNumberOfConductorsArgs) ToLineNumberOfConductorsOutput() LineNumberOfConductorsOutput {
	return i.ToLineNumberOfConductorsOutputWithContext(context.Background())
}

func (i LineNumberOfConductorsArgs) ToLineNumberOfConductorsOutputWithContext(ctx context.Context) LineNumberOfConductorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineNumberOfConductorsOutput)
}

func (i LineNumberOfConductorsArgs) ToLineNumberOfConductorsPtrOutput() LineNumberOfConductorsPtrOutput {
	return i.ToLineNumberOfConductorsPtrOutputWithContext(context.Background())
}

func (i LineNumberOfConductorsArgs) ToLineNumberOfConductorsPtrOutputWithContext(ctx context.Context) LineNumberOfConductorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineNumberOfConductorsOutput).ToLineNumberOfConductorsPtrOutputWithContext(ctx)
}

// LineNumberOfConductorsPtrInput is an input type that accepts LineNumberOfConductorsArgs, LineNumberOfConductorsPtr and LineNumberOfConductorsPtrOutput values.
// You can construct a concrete instance of `LineNumberOfConductorsPtrInput` via:
//
//	        LineNumberOfConductorsArgs{...}
//
//	or:
//
//	        nil
type LineNumberOfConductorsPtrInput interface {
	pulumi.Input

	ToLineNumberOfConductorsPtrOutput() LineNumberOfConductorsPtrOutput
	ToLineNumberOfConductorsPtrOutputWithContext(context.Context) LineNumberOfConductorsPtrOutput
}

type lineNumberOfConductorsPtrType LineNumberOfConductorsArgs

func LineNumberOfConductorsPtr(v *LineNumberOfConductorsArgs) LineNumberOfConductorsPtrInput {
	return (*lineNumberOfConductorsPtrType)(v)
}

func (*lineNumberOfConductorsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineNumberOfConductors)(nil)).Elem()
}

func (i *lineNumberOfConductorsPtrType) ToLineNumberOfConductorsPtrOutput() LineNumberOfConductorsPtrOutput {
	return i.ToLineNumberOfConductorsPtrOutputWithContext(context.Background())
}

func (i *lineNumberOfConductorsPtrType) ToLineNumberOfConductorsPtrOutputWithContext(ctx context.Context) LineNumberOfConductorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineNumberOfConductorsPtrOutput)
}

type LineNumberOfConductorsOutput struct{ *pulumi.OutputState }

func (LineNumberOfConductorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineNumberOfConductors)(nil)).Elem()
}

func (o LineNumberOfConductorsOutput) ToLineNumberOfConductorsOutput() LineNumberOfConductorsOutput {
	return o
}

func (o LineNumberOfConductorsOutput) ToLineNumberOfConductorsOutputWithContext(ctx context.Context) LineNumberOfConductorsOutput {
	return o
}

func (o LineNumberOfConductorsOutput) ToLineNumberOfConductorsPtrOutput() LineNumberOfConductorsPtrOutput {
	return o.ToLineNumberOfConductorsPtrOutputWithContext(context.Background())
}

func (o LineNumberOfConductorsOutput) ToLineNumberOfConductorsPtrOutputWithContext(ctx context.Context) LineNumberOfConductorsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineNumberOfConductors) *LineNumberOfConductors {
		return &v
	}).(LineNumberOfConductorsPtrOutput)
}

// reference to the asset to be linked to
func (o LineNumberOfConductorsOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineNumberOfConductors) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineNumberOfConductorsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineNumberOfConductors) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineNumberOfConductorsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineNumberOfConductors) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineNumberOfConductorsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineNumberOfConductors) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineNumberOfConductorsOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineNumberOfConductors) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineNumberOfConductorsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineNumberOfConductors) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineNumberOfConductorsPtrOutput struct{ *pulumi.OutputState }

func (LineNumberOfConductorsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineNumberOfConductors)(nil)).Elem()
}

func (o LineNumberOfConductorsPtrOutput) ToLineNumberOfConductorsPtrOutput() LineNumberOfConductorsPtrOutput {
	return o
}

func (o LineNumberOfConductorsPtrOutput) ToLineNumberOfConductorsPtrOutputWithContext(ctx context.Context) LineNumberOfConductorsPtrOutput {
	return o
}

func (o LineNumberOfConductorsPtrOutput) Elem() LineNumberOfConductorsOutput {
	return o.ApplyT(func(v *LineNumberOfConductors) LineNumberOfConductors {
		if v != nil {
			return *v
		}
		var ret LineNumberOfConductors
		return ret
	}).(LineNumberOfConductorsOutput)
}

// reference to the asset to be linked to
func (o LineNumberOfConductorsPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineNumberOfConductors) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineNumberOfConductorsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineNumberOfConductors) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineNumberOfConductorsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineNumberOfConductors) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineNumberOfConductorsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineNumberOfConductors) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineNumberOfConductorsPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineNumberOfConductors) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineNumberOfConductorsPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineNumberOfConductors) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineReactance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineReactanceInput is an input type that accepts LineReactanceArgs and LineReactanceOutput values.
// You can construct a concrete instance of `LineReactanceInput` via:
//
//	LineReactanceArgs{...}
type LineReactanceInput interface {
	pulumi.Input

	ToLineReactanceOutput() LineReactanceOutput
	ToLineReactanceOutputWithContext(context.Context) LineReactanceOutput
}

type LineReactanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineReactanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineReactance)(nil)).Elem()
}

func (i LineReactanceArgs) ToLineReactanceOutput() LineReactanceOutput {
	return i.ToLineReactanceOutputWithContext(context.Background())
}

func (i LineReactanceArgs) ToLineReactanceOutputWithContext(ctx context.Context) LineReactanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineReactanceOutput)
}

func (i LineReactanceArgs) ToLineReactancePtrOutput() LineReactancePtrOutput {
	return i.ToLineReactancePtrOutputWithContext(context.Background())
}

func (i LineReactanceArgs) ToLineReactancePtrOutputWithContext(ctx context.Context) LineReactancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineReactanceOutput).ToLineReactancePtrOutputWithContext(ctx)
}

// LineReactancePtrInput is an input type that accepts LineReactanceArgs, LineReactancePtr and LineReactancePtrOutput values.
// You can construct a concrete instance of `LineReactancePtrInput` via:
//
//	        LineReactanceArgs{...}
//
//	or:
//
//	        nil
type LineReactancePtrInput interface {
	pulumi.Input

	ToLineReactancePtrOutput() LineReactancePtrOutput
	ToLineReactancePtrOutputWithContext(context.Context) LineReactancePtrOutput
}

type lineReactancePtrType LineReactanceArgs

func LineReactancePtr(v *LineReactanceArgs) LineReactancePtrInput {
	return (*lineReactancePtrType)(v)
}

func (*lineReactancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineReactance)(nil)).Elem()
}

func (i *lineReactancePtrType) ToLineReactancePtrOutput() LineReactancePtrOutput {
	return i.ToLineReactancePtrOutputWithContext(context.Background())
}

func (i *lineReactancePtrType) ToLineReactancePtrOutputWithContext(ctx context.Context) LineReactancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineReactancePtrOutput)
}

type LineReactanceOutput struct{ *pulumi.OutputState }

func (LineReactanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineReactance)(nil)).Elem()
}

func (o LineReactanceOutput) ToLineReactanceOutput() LineReactanceOutput {
	return o
}

func (o LineReactanceOutput) ToLineReactanceOutputWithContext(ctx context.Context) LineReactanceOutput {
	return o
}

func (o LineReactanceOutput) ToLineReactancePtrOutput() LineReactancePtrOutput {
	return o.ToLineReactancePtrOutputWithContext(context.Background())
}

func (o LineReactanceOutput) ToLineReactancePtrOutputWithContext(ctx context.Context) LineReactancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineReactance) *LineReactance {
		return &v
	}).(LineReactancePtrOutput)
}

// reference to the asset to be linked to
func (o LineReactanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReactance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineReactanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReactance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineReactanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReactance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineReactanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReactance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineReactanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReactance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineReactanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReactance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineReactancePtrOutput struct{ *pulumi.OutputState }

func (LineReactancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineReactance)(nil)).Elem()
}

func (o LineReactancePtrOutput) ToLineReactancePtrOutput() LineReactancePtrOutput {
	return o
}

func (o LineReactancePtrOutput) ToLineReactancePtrOutputWithContext(ctx context.Context) LineReactancePtrOutput {
	return o
}

func (o LineReactancePtrOutput) Elem() LineReactanceOutput {
	return o.ApplyT(func(v *LineReactance) LineReactance {
		if v != nil {
			return *v
		}
		var ret LineReactance
		return ret
	}).(LineReactanceOutput)
}

// reference to the asset to be linked to
func (o LineReactancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReactance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineReactancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReactance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineReactancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReactance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineReactancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReactance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineReactancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReactance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineReactancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReactance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineReactivePower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineReactivePowerInput is an input type that accepts LineReactivePowerArgs and LineReactivePowerOutput values.
// You can construct a concrete instance of `LineReactivePowerInput` via:
//
//	LineReactivePowerArgs{...}
type LineReactivePowerInput interface {
	pulumi.Input

	ToLineReactivePowerOutput() LineReactivePowerOutput
	ToLineReactivePowerOutputWithContext(context.Context) LineReactivePowerOutput
}

type LineReactivePowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineReactivePowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineReactivePower)(nil)).Elem()
}

func (i LineReactivePowerArgs) ToLineReactivePowerOutput() LineReactivePowerOutput {
	return i.ToLineReactivePowerOutputWithContext(context.Background())
}

func (i LineReactivePowerArgs) ToLineReactivePowerOutputWithContext(ctx context.Context) LineReactivePowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineReactivePowerOutput)
}

// LineReactivePowerArrayInput is an input type that accepts LineReactivePowerArray and LineReactivePowerArrayOutput values.
// You can construct a concrete instance of `LineReactivePowerArrayInput` via:
//
//	LineReactivePowerArray{ LineReactivePowerArgs{...} }
type LineReactivePowerArrayInput interface {
	pulumi.Input

	ToLineReactivePowerArrayOutput() LineReactivePowerArrayOutput
	ToLineReactivePowerArrayOutputWithContext(context.Context) LineReactivePowerArrayOutput
}

type LineReactivePowerArray []LineReactivePowerInput

func (LineReactivePowerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineReactivePower)(nil)).Elem()
}

func (i LineReactivePowerArray) ToLineReactivePowerArrayOutput() LineReactivePowerArrayOutput {
	return i.ToLineReactivePowerArrayOutputWithContext(context.Background())
}

func (i LineReactivePowerArray) ToLineReactivePowerArrayOutputWithContext(ctx context.Context) LineReactivePowerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineReactivePowerArrayOutput)
}

type LineReactivePowerOutput struct{ *pulumi.OutputState }

func (LineReactivePowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineReactivePower)(nil)).Elem()
}

func (o LineReactivePowerOutput) ToLineReactivePowerOutput() LineReactivePowerOutput {
	return o
}

func (o LineReactivePowerOutput) ToLineReactivePowerOutputWithContext(ctx context.Context) LineReactivePowerOutput {
	return o
}

// reference to the asset to be linked to
func (o LineReactivePowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReactivePower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineReactivePowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReactivePower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineReactivePowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReactivePower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineReactivePowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReactivePower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineReactivePowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReactivePower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineReactivePowerArrayOutput struct{ *pulumi.OutputState }

func (LineReactivePowerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineReactivePower)(nil)).Elem()
}

func (o LineReactivePowerArrayOutput) ToLineReactivePowerArrayOutput() LineReactivePowerArrayOutput {
	return o
}

func (o LineReactivePowerArrayOutput) ToLineReactivePowerArrayOutputWithContext(ctx context.Context) LineReactivePowerArrayOutput {
	return o
}

func (o LineReactivePowerArrayOutput) Index(i pulumi.IntInput) LineReactivePowerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineReactivePower {
		return vs[0].([]LineReactivePower)[vs[1].(int)]
	}).(LineReactivePowerOutput)
}

type LineReferenceResistance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineReferenceResistanceInput is an input type that accepts LineReferenceResistanceArgs and LineReferenceResistanceOutput values.
// You can construct a concrete instance of `LineReferenceResistanceInput` via:
//
//	LineReferenceResistanceArgs{...}
type LineReferenceResistanceInput interface {
	pulumi.Input

	ToLineReferenceResistanceOutput() LineReferenceResistanceOutput
	ToLineReferenceResistanceOutputWithContext(context.Context) LineReferenceResistanceOutput
}

type LineReferenceResistanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineReferenceResistanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineReferenceResistance)(nil)).Elem()
}

func (i LineReferenceResistanceArgs) ToLineReferenceResistanceOutput() LineReferenceResistanceOutput {
	return i.ToLineReferenceResistanceOutputWithContext(context.Background())
}

func (i LineReferenceResistanceArgs) ToLineReferenceResistanceOutputWithContext(ctx context.Context) LineReferenceResistanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineReferenceResistanceOutput)
}

func (i LineReferenceResistanceArgs) ToLineReferenceResistancePtrOutput() LineReferenceResistancePtrOutput {
	return i.ToLineReferenceResistancePtrOutputWithContext(context.Background())
}

func (i LineReferenceResistanceArgs) ToLineReferenceResistancePtrOutputWithContext(ctx context.Context) LineReferenceResistancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineReferenceResistanceOutput).ToLineReferenceResistancePtrOutputWithContext(ctx)
}

// LineReferenceResistancePtrInput is an input type that accepts LineReferenceResistanceArgs, LineReferenceResistancePtr and LineReferenceResistancePtrOutput values.
// You can construct a concrete instance of `LineReferenceResistancePtrInput` via:
//
//	        LineReferenceResistanceArgs{...}
//
//	or:
//
//	        nil
type LineReferenceResistancePtrInput interface {
	pulumi.Input

	ToLineReferenceResistancePtrOutput() LineReferenceResistancePtrOutput
	ToLineReferenceResistancePtrOutputWithContext(context.Context) LineReferenceResistancePtrOutput
}

type lineReferenceResistancePtrType LineReferenceResistanceArgs

func LineReferenceResistancePtr(v *LineReferenceResistanceArgs) LineReferenceResistancePtrInput {
	return (*lineReferenceResistancePtrType)(v)
}

func (*lineReferenceResistancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineReferenceResistance)(nil)).Elem()
}

func (i *lineReferenceResistancePtrType) ToLineReferenceResistancePtrOutput() LineReferenceResistancePtrOutput {
	return i.ToLineReferenceResistancePtrOutputWithContext(context.Background())
}

func (i *lineReferenceResistancePtrType) ToLineReferenceResistancePtrOutputWithContext(ctx context.Context) LineReferenceResistancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineReferenceResistancePtrOutput)
}

type LineReferenceResistanceOutput struct{ *pulumi.OutputState }

func (LineReferenceResistanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineReferenceResistance)(nil)).Elem()
}

func (o LineReferenceResistanceOutput) ToLineReferenceResistanceOutput() LineReferenceResistanceOutput {
	return o
}

func (o LineReferenceResistanceOutput) ToLineReferenceResistanceOutputWithContext(ctx context.Context) LineReferenceResistanceOutput {
	return o
}

func (o LineReferenceResistanceOutput) ToLineReferenceResistancePtrOutput() LineReferenceResistancePtrOutput {
	return o.ToLineReferenceResistancePtrOutputWithContext(context.Background())
}

func (o LineReferenceResistanceOutput) ToLineReferenceResistancePtrOutputWithContext(ctx context.Context) LineReferenceResistancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineReferenceResistance) *LineReferenceResistance {
		return &v
	}).(LineReferenceResistancePtrOutput)
}

// reference to the asset to be linked to
func (o LineReferenceResistanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReferenceResistance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineReferenceResistanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReferenceResistance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineReferenceResistanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReferenceResistance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineReferenceResistanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReferenceResistance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineReferenceResistanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReferenceResistance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineReferenceResistanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineReferenceResistance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineReferenceResistancePtrOutput struct{ *pulumi.OutputState }

func (LineReferenceResistancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineReferenceResistance)(nil)).Elem()
}

func (o LineReferenceResistancePtrOutput) ToLineReferenceResistancePtrOutput() LineReferenceResistancePtrOutput {
	return o
}

func (o LineReferenceResistancePtrOutput) ToLineReferenceResistancePtrOutputWithContext(ctx context.Context) LineReferenceResistancePtrOutput {
	return o
}

func (o LineReferenceResistancePtrOutput) Elem() LineReferenceResistanceOutput {
	return o.ApplyT(func(v *LineReferenceResistance) LineReferenceResistance {
		if v != nil {
			return *v
		}
		var ret LineReferenceResistance
		return ret
	}).(LineReferenceResistanceOutput)
}

// reference to the asset to be linked to
func (o LineReferenceResistancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReferenceResistance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineReferenceResistancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReferenceResistance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineReferenceResistancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReferenceResistance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineReferenceResistancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReferenceResistance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineReferenceResistancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReferenceResistance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineReferenceResistancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineReferenceResistance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineResistance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineResistanceInput is an input type that accepts LineResistanceArgs and LineResistanceOutput values.
// You can construct a concrete instance of `LineResistanceInput` via:
//
//	LineResistanceArgs{...}
type LineResistanceInput interface {
	pulumi.Input

	ToLineResistanceOutput() LineResistanceOutput
	ToLineResistanceOutputWithContext(context.Context) LineResistanceOutput
}

type LineResistanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineResistanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineResistance)(nil)).Elem()
}

func (i LineResistanceArgs) ToLineResistanceOutput() LineResistanceOutput {
	return i.ToLineResistanceOutputWithContext(context.Background())
}

func (i LineResistanceArgs) ToLineResistanceOutputWithContext(ctx context.Context) LineResistanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineResistanceOutput)
}

func (i LineResistanceArgs) ToLineResistancePtrOutput() LineResistancePtrOutput {
	return i.ToLineResistancePtrOutputWithContext(context.Background())
}

func (i LineResistanceArgs) ToLineResistancePtrOutputWithContext(ctx context.Context) LineResistancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineResistanceOutput).ToLineResistancePtrOutputWithContext(ctx)
}

// LineResistancePtrInput is an input type that accepts LineResistanceArgs, LineResistancePtr and LineResistancePtrOutput values.
// You can construct a concrete instance of `LineResistancePtrInput` via:
//
//	        LineResistanceArgs{...}
//
//	or:
//
//	        nil
type LineResistancePtrInput interface {
	pulumi.Input

	ToLineResistancePtrOutput() LineResistancePtrOutput
	ToLineResistancePtrOutputWithContext(context.Context) LineResistancePtrOutput
}

type lineResistancePtrType LineResistanceArgs

func LineResistancePtr(v *LineResistanceArgs) LineResistancePtrInput {
	return (*lineResistancePtrType)(v)
}

func (*lineResistancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineResistance)(nil)).Elem()
}

func (i *lineResistancePtrType) ToLineResistancePtrOutput() LineResistancePtrOutput {
	return i.ToLineResistancePtrOutputWithContext(context.Background())
}

func (i *lineResistancePtrType) ToLineResistancePtrOutputWithContext(ctx context.Context) LineResistancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineResistancePtrOutput)
}

type LineResistanceOutput struct{ *pulumi.OutputState }

func (LineResistanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineResistance)(nil)).Elem()
}

func (o LineResistanceOutput) ToLineResistanceOutput() LineResistanceOutput {
	return o
}

func (o LineResistanceOutput) ToLineResistanceOutputWithContext(ctx context.Context) LineResistanceOutput {
	return o
}

func (o LineResistanceOutput) ToLineResistancePtrOutput() LineResistancePtrOutput {
	return o.ToLineResistancePtrOutputWithContext(context.Background())
}

func (o LineResistanceOutput) ToLineResistancePtrOutputWithContext(ctx context.Context) LineResistancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineResistance) *LineResistance {
		return &v
	}).(LineResistancePtrOutput)
}

// reference to the asset to be linked to
func (o LineResistanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineResistance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineResistanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineResistance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineResistanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineResistance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineResistanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineResistance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineResistanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineResistance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineResistanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineResistance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineResistancePtrOutput struct{ *pulumi.OutputState }

func (LineResistancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineResistance)(nil)).Elem()
}

func (o LineResistancePtrOutput) ToLineResistancePtrOutput() LineResistancePtrOutput {
	return o
}

func (o LineResistancePtrOutput) ToLineResistancePtrOutputWithContext(ctx context.Context) LineResistancePtrOutput {
	return o
}

func (o LineResistancePtrOutput) Elem() LineResistanceOutput {
	return o.ApplyT(func(v *LineResistance) LineResistance {
		if v != nil {
			return *v
		}
		var ret LineResistance
		return ret
	}).(LineResistanceOutput)
}

// reference to the asset to be linked to
func (o LineResistancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineResistance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineResistancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineResistance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineResistancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineResistance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineResistancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineResistance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineResistancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineResistance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineResistancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineResistance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineSafetyMarginForPower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineSafetyMarginForPowerInput is an input type that accepts LineSafetyMarginForPowerArgs and LineSafetyMarginForPowerOutput values.
// You can construct a concrete instance of `LineSafetyMarginForPowerInput` via:
//
//	LineSafetyMarginForPowerArgs{...}
type LineSafetyMarginForPowerInput interface {
	pulumi.Input

	ToLineSafetyMarginForPowerOutput() LineSafetyMarginForPowerOutput
	ToLineSafetyMarginForPowerOutputWithContext(context.Context) LineSafetyMarginForPowerOutput
}

type LineSafetyMarginForPowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineSafetyMarginForPowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineSafetyMarginForPower)(nil)).Elem()
}

func (i LineSafetyMarginForPowerArgs) ToLineSafetyMarginForPowerOutput() LineSafetyMarginForPowerOutput {
	return i.ToLineSafetyMarginForPowerOutputWithContext(context.Background())
}

func (i LineSafetyMarginForPowerArgs) ToLineSafetyMarginForPowerOutputWithContext(ctx context.Context) LineSafetyMarginForPowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSafetyMarginForPowerOutput)
}

func (i LineSafetyMarginForPowerArgs) ToLineSafetyMarginForPowerPtrOutput() LineSafetyMarginForPowerPtrOutput {
	return i.ToLineSafetyMarginForPowerPtrOutputWithContext(context.Background())
}

func (i LineSafetyMarginForPowerArgs) ToLineSafetyMarginForPowerPtrOutputWithContext(ctx context.Context) LineSafetyMarginForPowerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSafetyMarginForPowerOutput).ToLineSafetyMarginForPowerPtrOutputWithContext(ctx)
}

// LineSafetyMarginForPowerPtrInput is an input type that accepts LineSafetyMarginForPowerArgs, LineSafetyMarginForPowerPtr and LineSafetyMarginForPowerPtrOutput values.
// You can construct a concrete instance of `LineSafetyMarginForPowerPtrInput` via:
//
//	        LineSafetyMarginForPowerArgs{...}
//
//	or:
//
//	        nil
type LineSafetyMarginForPowerPtrInput interface {
	pulumi.Input

	ToLineSafetyMarginForPowerPtrOutput() LineSafetyMarginForPowerPtrOutput
	ToLineSafetyMarginForPowerPtrOutputWithContext(context.Context) LineSafetyMarginForPowerPtrOutput
}

type lineSafetyMarginForPowerPtrType LineSafetyMarginForPowerArgs

func LineSafetyMarginForPowerPtr(v *LineSafetyMarginForPowerArgs) LineSafetyMarginForPowerPtrInput {
	return (*lineSafetyMarginForPowerPtrType)(v)
}

func (*lineSafetyMarginForPowerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineSafetyMarginForPower)(nil)).Elem()
}

func (i *lineSafetyMarginForPowerPtrType) ToLineSafetyMarginForPowerPtrOutput() LineSafetyMarginForPowerPtrOutput {
	return i.ToLineSafetyMarginForPowerPtrOutputWithContext(context.Background())
}

func (i *lineSafetyMarginForPowerPtrType) ToLineSafetyMarginForPowerPtrOutputWithContext(ctx context.Context) LineSafetyMarginForPowerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSafetyMarginForPowerPtrOutput)
}

type LineSafetyMarginForPowerOutput struct{ *pulumi.OutputState }

func (LineSafetyMarginForPowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineSafetyMarginForPower)(nil)).Elem()
}

func (o LineSafetyMarginForPowerOutput) ToLineSafetyMarginForPowerOutput() LineSafetyMarginForPowerOutput {
	return o
}

func (o LineSafetyMarginForPowerOutput) ToLineSafetyMarginForPowerOutputWithContext(ctx context.Context) LineSafetyMarginForPowerOutput {
	return o
}

func (o LineSafetyMarginForPowerOutput) ToLineSafetyMarginForPowerPtrOutput() LineSafetyMarginForPowerPtrOutput {
	return o.ToLineSafetyMarginForPowerPtrOutputWithContext(context.Background())
}

func (o LineSafetyMarginForPowerOutput) ToLineSafetyMarginForPowerPtrOutputWithContext(ctx context.Context) LineSafetyMarginForPowerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineSafetyMarginForPower) *LineSafetyMarginForPower {
		return &v
	}).(LineSafetyMarginForPowerPtrOutput)
}

// reference to the asset to be linked to
func (o LineSafetyMarginForPowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSafetyMarginForPower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineSafetyMarginForPowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSafetyMarginForPower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineSafetyMarginForPowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSafetyMarginForPower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineSafetyMarginForPowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSafetyMarginForPower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineSafetyMarginForPowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSafetyMarginForPower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineSafetyMarginForPowerOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSafetyMarginForPower) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineSafetyMarginForPowerPtrOutput struct{ *pulumi.OutputState }

func (LineSafetyMarginForPowerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineSafetyMarginForPower)(nil)).Elem()
}

func (o LineSafetyMarginForPowerPtrOutput) ToLineSafetyMarginForPowerPtrOutput() LineSafetyMarginForPowerPtrOutput {
	return o
}

func (o LineSafetyMarginForPowerPtrOutput) ToLineSafetyMarginForPowerPtrOutputWithContext(ctx context.Context) LineSafetyMarginForPowerPtrOutput {
	return o
}

func (o LineSafetyMarginForPowerPtrOutput) Elem() LineSafetyMarginForPowerOutput {
	return o.ApplyT(func(v *LineSafetyMarginForPower) LineSafetyMarginForPower {
		if v != nil {
			return *v
		}
		var ret LineSafetyMarginForPower
		return ret
	}).(LineSafetyMarginForPowerOutput)
}

// reference to the asset to be linked to
func (o LineSafetyMarginForPowerPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineSafetyMarginForPowerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineSafetyMarginForPowerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineSafetyMarginForPowerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineSafetyMarginForPowerPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineSafetyMarginForPowerPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineSpecificHeat struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineSpecificHeatInput is an input type that accepts LineSpecificHeatArgs and LineSpecificHeatOutput values.
// You can construct a concrete instance of `LineSpecificHeatInput` via:
//
//	LineSpecificHeatArgs{...}
type LineSpecificHeatInput interface {
	pulumi.Input

	ToLineSpecificHeatOutput() LineSpecificHeatOutput
	ToLineSpecificHeatOutputWithContext(context.Context) LineSpecificHeatOutput
}

type LineSpecificHeatArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineSpecificHeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineSpecificHeat)(nil)).Elem()
}

func (i LineSpecificHeatArgs) ToLineSpecificHeatOutput() LineSpecificHeatOutput {
	return i.ToLineSpecificHeatOutputWithContext(context.Background())
}

func (i LineSpecificHeatArgs) ToLineSpecificHeatOutputWithContext(ctx context.Context) LineSpecificHeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSpecificHeatOutput)
}

func (i LineSpecificHeatArgs) ToLineSpecificHeatPtrOutput() LineSpecificHeatPtrOutput {
	return i.ToLineSpecificHeatPtrOutputWithContext(context.Background())
}

func (i LineSpecificHeatArgs) ToLineSpecificHeatPtrOutputWithContext(ctx context.Context) LineSpecificHeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSpecificHeatOutput).ToLineSpecificHeatPtrOutputWithContext(ctx)
}

// LineSpecificHeatPtrInput is an input type that accepts LineSpecificHeatArgs, LineSpecificHeatPtr and LineSpecificHeatPtrOutput values.
// You can construct a concrete instance of `LineSpecificHeatPtrInput` via:
//
//	        LineSpecificHeatArgs{...}
//
//	or:
//
//	        nil
type LineSpecificHeatPtrInput interface {
	pulumi.Input

	ToLineSpecificHeatPtrOutput() LineSpecificHeatPtrOutput
	ToLineSpecificHeatPtrOutputWithContext(context.Context) LineSpecificHeatPtrOutput
}

type lineSpecificHeatPtrType LineSpecificHeatArgs

func LineSpecificHeatPtr(v *LineSpecificHeatArgs) LineSpecificHeatPtrInput {
	return (*lineSpecificHeatPtrType)(v)
}

func (*lineSpecificHeatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineSpecificHeat)(nil)).Elem()
}

func (i *lineSpecificHeatPtrType) ToLineSpecificHeatPtrOutput() LineSpecificHeatPtrOutput {
	return i.ToLineSpecificHeatPtrOutputWithContext(context.Background())
}

func (i *lineSpecificHeatPtrType) ToLineSpecificHeatPtrOutputWithContext(ctx context.Context) LineSpecificHeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSpecificHeatPtrOutput)
}

type LineSpecificHeatOutput struct{ *pulumi.OutputState }

func (LineSpecificHeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineSpecificHeat)(nil)).Elem()
}

func (o LineSpecificHeatOutput) ToLineSpecificHeatOutput() LineSpecificHeatOutput {
	return o
}

func (o LineSpecificHeatOutput) ToLineSpecificHeatOutputWithContext(ctx context.Context) LineSpecificHeatOutput {
	return o
}

func (o LineSpecificHeatOutput) ToLineSpecificHeatPtrOutput() LineSpecificHeatPtrOutput {
	return o.ToLineSpecificHeatPtrOutputWithContext(context.Background())
}

func (o LineSpecificHeatOutput) ToLineSpecificHeatPtrOutputWithContext(ctx context.Context) LineSpecificHeatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineSpecificHeat) *LineSpecificHeat {
		return &v
	}).(LineSpecificHeatPtrOutput)
}

// reference to the asset to be linked to
func (o LineSpecificHeatOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSpecificHeat) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineSpecificHeatOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSpecificHeat) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineSpecificHeatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSpecificHeat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineSpecificHeatOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSpecificHeat) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineSpecificHeatOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSpecificHeat) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineSpecificHeatOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSpecificHeat) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineSpecificHeatPtrOutput struct{ *pulumi.OutputState }

func (LineSpecificHeatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineSpecificHeat)(nil)).Elem()
}

func (o LineSpecificHeatPtrOutput) ToLineSpecificHeatPtrOutput() LineSpecificHeatPtrOutput {
	return o
}

func (o LineSpecificHeatPtrOutput) ToLineSpecificHeatPtrOutputWithContext(ctx context.Context) LineSpecificHeatPtrOutput {
	return o
}

func (o LineSpecificHeatPtrOutput) Elem() LineSpecificHeatOutput {
	return o.ApplyT(func(v *LineSpecificHeat) LineSpecificHeat {
		if v != nil {
			return *v
		}
		var ret LineSpecificHeat
		return ret
	}).(LineSpecificHeatOutput)
}

// reference to the asset to be linked to
func (o LineSpecificHeatPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSpecificHeat) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineSpecificHeatPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSpecificHeat) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineSpecificHeatPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSpecificHeat) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineSpecificHeatPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSpecificHeat) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineSpecificHeatPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSpecificHeat) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineSpecificHeatPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSpecificHeat) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineSusceptance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineSusceptanceInput is an input type that accepts LineSusceptanceArgs and LineSusceptanceOutput values.
// You can construct a concrete instance of `LineSusceptanceInput` via:
//
//	LineSusceptanceArgs{...}
type LineSusceptanceInput interface {
	pulumi.Input

	ToLineSusceptanceOutput() LineSusceptanceOutput
	ToLineSusceptanceOutputWithContext(context.Context) LineSusceptanceOutput
}

type LineSusceptanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineSusceptanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineSusceptance)(nil)).Elem()
}

func (i LineSusceptanceArgs) ToLineSusceptanceOutput() LineSusceptanceOutput {
	return i.ToLineSusceptanceOutputWithContext(context.Background())
}

func (i LineSusceptanceArgs) ToLineSusceptanceOutputWithContext(ctx context.Context) LineSusceptanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSusceptanceOutput)
}

func (i LineSusceptanceArgs) ToLineSusceptancePtrOutput() LineSusceptancePtrOutput {
	return i.ToLineSusceptancePtrOutputWithContext(context.Background())
}

func (i LineSusceptanceArgs) ToLineSusceptancePtrOutputWithContext(ctx context.Context) LineSusceptancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSusceptanceOutput).ToLineSusceptancePtrOutputWithContext(ctx)
}

// LineSusceptancePtrInput is an input type that accepts LineSusceptanceArgs, LineSusceptancePtr and LineSusceptancePtrOutput values.
// You can construct a concrete instance of `LineSusceptancePtrInput` via:
//
//	        LineSusceptanceArgs{...}
//
//	or:
//
//	        nil
type LineSusceptancePtrInput interface {
	pulumi.Input

	ToLineSusceptancePtrOutput() LineSusceptancePtrOutput
	ToLineSusceptancePtrOutputWithContext(context.Context) LineSusceptancePtrOutput
}

type lineSusceptancePtrType LineSusceptanceArgs

func LineSusceptancePtr(v *LineSusceptanceArgs) LineSusceptancePtrInput {
	return (*lineSusceptancePtrType)(v)
}

func (*lineSusceptancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineSusceptance)(nil)).Elem()
}

func (i *lineSusceptancePtrType) ToLineSusceptancePtrOutput() LineSusceptancePtrOutput {
	return i.ToLineSusceptancePtrOutputWithContext(context.Background())
}

func (i *lineSusceptancePtrType) ToLineSusceptancePtrOutputWithContext(ctx context.Context) LineSusceptancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSusceptancePtrOutput)
}

type LineSusceptanceOutput struct{ *pulumi.OutputState }

func (LineSusceptanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineSusceptance)(nil)).Elem()
}

func (o LineSusceptanceOutput) ToLineSusceptanceOutput() LineSusceptanceOutput {
	return o
}

func (o LineSusceptanceOutput) ToLineSusceptanceOutputWithContext(ctx context.Context) LineSusceptanceOutput {
	return o
}

func (o LineSusceptanceOutput) ToLineSusceptancePtrOutput() LineSusceptancePtrOutput {
	return o.ToLineSusceptancePtrOutputWithContext(context.Background())
}

func (o LineSusceptanceOutput) ToLineSusceptancePtrOutputWithContext(ctx context.Context) LineSusceptancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineSusceptance) *LineSusceptance {
		return &v
	}).(LineSusceptancePtrOutput)
}

// reference to the asset to be linked to
func (o LineSusceptanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSusceptance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineSusceptanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSusceptance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineSusceptanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSusceptance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineSusceptanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSusceptance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineSusceptanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSusceptance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineSusceptanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSusceptance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineSusceptancePtrOutput struct{ *pulumi.OutputState }

func (LineSusceptancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineSusceptance)(nil)).Elem()
}

func (o LineSusceptancePtrOutput) ToLineSusceptancePtrOutput() LineSusceptancePtrOutput {
	return o
}

func (o LineSusceptancePtrOutput) ToLineSusceptancePtrOutputWithContext(ctx context.Context) LineSusceptancePtrOutput {
	return o
}

func (o LineSusceptancePtrOutput) Elem() LineSusceptanceOutput {
	return o.ApplyT(func(v *LineSusceptance) LineSusceptance {
		if v != nil {
			return *v
		}
		var ret LineSusceptance
		return ret
	}).(LineSusceptanceOutput)
}

// reference to the asset to be linked to
func (o LineSusceptancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSusceptance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineSusceptancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSusceptance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineSusceptancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSusceptance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineSusceptancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSusceptance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineSusceptancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSusceptance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineSusceptancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineSusceptance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineSwitchStatusEnd struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineSwitchStatusEndInput is an input type that accepts LineSwitchStatusEndArgs and LineSwitchStatusEndOutput values.
// You can construct a concrete instance of `LineSwitchStatusEndInput` via:
//
//	LineSwitchStatusEndArgs{...}
type LineSwitchStatusEndInput interface {
	pulumi.Input

	ToLineSwitchStatusEndOutput() LineSwitchStatusEndOutput
	ToLineSwitchStatusEndOutputWithContext(context.Context) LineSwitchStatusEndOutput
}

type LineSwitchStatusEndArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineSwitchStatusEndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineSwitchStatusEnd)(nil)).Elem()
}

func (i LineSwitchStatusEndArgs) ToLineSwitchStatusEndOutput() LineSwitchStatusEndOutput {
	return i.ToLineSwitchStatusEndOutputWithContext(context.Background())
}

func (i LineSwitchStatusEndArgs) ToLineSwitchStatusEndOutputWithContext(ctx context.Context) LineSwitchStatusEndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSwitchStatusEndOutput)
}

// LineSwitchStatusEndArrayInput is an input type that accepts LineSwitchStatusEndArray and LineSwitchStatusEndArrayOutput values.
// You can construct a concrete instance of `LineSwitchStatusEndArrayInput` via:
//
//	LineSwitchStatusEndArray{ LineSwitchStatusEndArgs{...} }
type LineSwitchStatusEndArrayInput interface {
	pulumi.Input

	ToLineSwitchStatusEndArrayOutput() LineSwitchStatusEndArrayOutput
	ToLineSwitchStatusEndArrayOutputWithContext(context.Context) LineSwitchStatusEndArrayOutput
}

type LineSwitchStatusEndArray []LineSwitchStatusEndInput

func (LineSwitchStatusEndArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineSwitchStatusEnd)(nil)).Elem()
}

func (i LineSwitchStatusEndArray) ToLineSwitchStatusEndArrayOutput() LineSwitchStatusEndArrayOutput {
	return i.ToLineSwitchStatusEndArrayOutputWithContext(context.Background())
}

func (i LineSwitchStatusEndArray) ToLineSwitchStatusEndArrayOutputWithContext(ctx context.Context) LineSwitchStatusEndArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSwitchStatusEndArrayOutput)
}

type LineSwitchStatusEndOutput struct{ *pulumi.OutputState }

func (LineSwitchStatusEndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineSwitchStatusEnd)(nil)).Elem()
}

func (o LineSwitchStatusEndOutput) ToLineSwitchStatusEndOutput() LineSwitchStatusEndOutput {
	return o
}

func (o LineSwitchStatusEndOutput) ToLineSwitchStatusEndOutputWithContext(ctx context.Context) LineSwitchStatusEndOutput {
	return o
}

// reference to the asset to be linked to
func (o LineSwitchStatusEndOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSwitchStatusEnd) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineSwitchStatusEndOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSwitchStatusEnd) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineSwitchStatusEndOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSwitchStatusEnd) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineSwitchStatusEndOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSwitchStatusEnd) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineSwitchStatusEndOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSwitchStatusEnd) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineSwitchStatusEndArrayOutput struct{ *pulumi.OutputState }

func (LineSwitchStatusEndArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineSwitchStatusEnd)(nil)).Elem()
}

func (o LineSwitchStatusEndArrayOutput) ToLineSwitchStatusEndArrayOutput() LineSwitchStatusEndArrayOutput {
	return o
}

func (o LineSwitchStatusEndArrayOutput) ToLineSwitchStatusEndArrayOutputWithContext(ctx context.Context) LineSwitchStatusEndArrayOutput {
	return o
}

func (o LineSwitchStatusEndArrayOutput) Index(i pulumi.IntInput) LineSwitchStatusEndOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineSwitchStatusEnd {
		return vs[0].([]LineSwitchStatusEnd)[vs[1].(int)]
	}).(LineSwitchStatusEndOutput)
}

type LineSwitchStatusStart struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineSwitchStatusStartInput is an input type that accepts LineSwitchStatusStartArgs and LineSwitchStatusStartOutput values.
// You can construct a concrete instance of `LineSwitchStatusStartInput` via:
//
//	LineSwitchStatusStartArgs{...}
type LineSwitchStatusStartInput interface {
	pulumi.Input

	ToLineSwitchStatusStartOutput() LineSwitchStatusStartOutput
	ToLineSwitchStatusStartOutputWithContext(context.Context) LineSwitchStatusStartOutput
}

type LineSwitchStatusStartArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineSwitchStatusStartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineSwitchStatusStart)(nil)).Elem()
}

func (i LineSwitchStatusStartArgs) ToLineSwitchStatusStartOutput() LineSwitchStatusStartOutput {
	return i.ToLineSwitchStatusStartOutputWithContext(context.Background())
}

func (i LineSwitchStatusStartArgs) ToLineSwitchStatusStartOutputWithContext(ctx context.Context) LineSwitchStatusStartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSwitchStatusStartOutput)
}

// LineSwitchStatusStartArrayInput is an input type that accepts LineSwitchStatusStartArray and LineSwitchStatusStartArrayOutput values.
// You can construct a concrete instance of `LineSwitchStatusStartArrayInput` via:
//
//	LineSwitchStatusStartArray{ LineSwitchStatusStartArgs{...} }
type LineSwitchStatusStartArrayInput interface {
	pulumi.Input

	ToLineSwitchStatusStartArrayOutput() LineSwitchStatusStartArrayOutput
	ToLineSwitchStatusStartArrayOutputWithContext(context.Context) LineSwitchStatusStartArrayOutput
}

type LineSwitchStatusStartArray []LineSwitchStatusStartInput

func (LineSwitchStatusStartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineSwitchStatusStart)(nil)).Elem()
}

func (i LineSwitchStatusStartArray) ToLineSwitchStatusStartArrayOutput() LineSwitchStatusStartArrayOutput {
	return i.ToLineSwitchStatusStartArrayOutputWithContext(context.Background())
}

func (i LineSwitchStatusStartArray) ToLineSwitchStatusStartArrayOutputWithContext(ctx context.Context) LineSwitchStatusStartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineSwitchStatusStartArrayOutput)
}

type LineSwitchStatusStartOutput struct{ *pulumi.OutputState }

func (LineSwitchStatusStartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineSwitchStatusStart)(nil)).Elem()
}

func (o LineSwitchStatusStartOutput) ToLineSwitchStatusStartOutput() LineSwitchStatusStartOutput {
	return o
}

func (o LineSwitchStatusStartOutput) ToLineSwitchStatusStartOutputWithContext(ctx context.Context) LineSwitchStatusStartOutput {
	return o
}

// reference to the asset to be linked to
func (o LineSwitchStatusStartOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSwitchStatusStart) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineSwitchStatusStartOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSwitchStatusStart) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineSwitchStatusStartOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSwitchStatusStart) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineSwitchStatusStartOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSwitchStatusStart) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineSwitchStatusStartOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineSwitchStatusStart) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineSwitchStatusStartArrayOutput struct{ *pulumi.OutputState }

func (LineSwitchStatusStartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineSwitchStatusStart)(nil)).Elem()
}

func (o LineSwitchStatusStartArrayOutput) ToLineSwitchStatusStartArrayOutput() LineSwitchStatusStartArrayOutput {
	return o
}

func (o LineSwitchStatusStartArrayOutput) ToLineSwitchStatusStartArrayOutputWithContext(ctx context.Context) LineSwitchStatusStartArrayOutput {
	return o
}

func (o LineSwitchStatusStartArrayOutput) Index(i pulumi.IntInput) LineSwitchStatusStartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineSwitchStatusStart {
		return vs[0].([]LineSwitchStatusStart)[vs[1].(int)]
	}).(LineSwitchStatusStartOutput)
}

type LineTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// LineTagInput is an input type that accepts LineTagArgs and LineTagOutput values.
// You can construct a concrete instance of `LineTagInput` via:
//
//	LineTagArgs{...}
type LineTagInput interface {
	pulumi.Input

	ToLineTagOutput() LineTagOutput
	ToLineTagOutputWithContext(context.Context) LineTagOutput
}

type LineTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (LineTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineTag)(nil)).Elem()
}

func (i LineTagArgs) ToLineTagOutput() LineTagOutput {
	return i.ToLineTagOutputWithContext(context.Background())
}

func (i LineTagArgs) ToLineTagOutputWithContext(ctx context.Context) LineTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineTagOutput)
}

// LineTagArrayInput is an input type that accepts LineTagArray and LineTagArrayOutput values.
// You can construct a concrete instance of `LineTagArrayInput` via:
//
//	LineTagArray{ LineTagArgs{...} }
type LineTagArrayInput interface {
	pulumi.Input

	ToLineTagArrayOutput() LineTagArrayOutput
	ToLineTagArrayOutputWithContext(context.Context) LineTagArrayOutput
}

type LineTagArray []LineTagInput

func (LineTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineTag)(nil)).Elem()
}

func (i LineTagArray) ToLineTagArrayOutput() LineTagArrayOutput {
	return i.ToLineTagArrayOutputWithContext(context.Background())
}

func (i LineTagArray) ToLineTagArrayOutputWithContext(ctx context.Context) LineTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineTagArrayOutput)
}

type LineTagOutput struct{ *pulumi.OutputState }

func (LineTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineTag)(nil)).Elem()
}

func (o LineTagOutput) ToLineTagOutput() LineTagOutput {
	return o
}

func (o LineTagOutput) ToLineTagOutputWithContext(ctx context.Context) LineTagOutput {
	return o
}

// tag id
func (o LineTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LineTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o LineTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LineTag) string { return v.Name }).(pulumi.StringOutput)
}

type LineTagArrayOutput struct{ *pulumi.OutputState }

func (LineTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineTag)(nil)).Elem()
}

func (o LineTagArrayOutput) ToLineTagArrayOutput() LineTagArrayOutput {
	return o
}

func (o LineTagArrayOutput) ToLineTagArrayOutputWithContext(ctx context.Context) LineTagArrayOutput {
	return o
}

func (o LineTagArrayOutput) Index(i pulumi.IntInput) LineTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineTag {
		return vs[0].([]LineTag)[vs[1].(int)]
	}).(LineTagOutput)
}

type LineTemperatureCoeffResistance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineTemperatureCoeffResistanceInput is an input type that accepts LineTemperatureCoeffResistanceArgs and LineTemperatureCoeffResistanceOutput values.
// You can construct a concrete instance of `LineTemperatureCoeffResistanceInput` via:
//
//	LineTemperatureCoeffResistanceArgs{...}
type LineTemperatureCoeffResistanceInput interface {
	pulumi.Input

	ToLineTemperatureCoeffResistanceOutput() LineTemperatureCoeffResistanceOutput
	ToLineTemperatureCoeffResistanceOutputWithContext(context.Context) LineTemperatureCoeffResistanceOutput
}

type LineTemperatureCoeffResistanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineTemperatureCoeffResistanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineTemperatureCoeffResistance)(nil)).Elem()
}

func (i LineTemperatureCoeffResistanceArgs) ToLineTemperatureCoeffResistanceOutput() LineTemperatureCoeffResistanceOutput {
	return i.ToLineTemperatureCoeffResistanceOutputWithContext(context.Background())
}

func (i LineTemperatureCoeffResistanceArgs) ToLineTemperatureCoeffResistanceOutputWithContext(ctx context.Context) LineTemperatureCoeffResistanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineTemperatureCoeffResistanceOutput)
}

func (i LineTemperatureCoeffResistanceArgs) ToLineTemperatureCoeffResistancePtrOutput() LineTemperatureCoeffResistancePtrOutput {
	return i.ToLineTemperatureCoeffResistancePtrOutputWithContext(context.Background())
}

func (i LineTemperatureCoeffResistanceArgs) ToLineTemperatureCoeffResistancePtrOutputWithContext(ctx context.Context) LineTemperatureCoeffResistancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineTemperatureCoeffResistanceOutput).ToLineTemperatureCoeffResistancePtrOutputWithContext(ctx)
}

// LineTemperatureCoeffResistancePtrInput is an input type that accepts LineTemperatureCoeffResistanceArgs, LineTemperatureCoeffResistancePtr and LineTemperatureCoeffResistancePtrOutput values.
// You can construct a concrete instance of `LineTemperatureCoeffResistancePtrInput` via:
//
//	        LineTemperatureCoeffResistanceArgs{...}
//
//	or:
//
//	        nil
type LineTemperatureCoeffResistancePtrInput interface {
	pulumi.Input

	ToLineTemperatureCoeffResistancePtrOutput() LineTemperatureCoeffResistancePtrOutput
	ToLineTemperatureCoeffResistancePtrOutputWithContext(context.Context) LineTemperatureCoeffResistancePtrOutput
}

type lineTemperatureCoeffResistancePtrType LineTemperatureCoeffResistanceArgs

func LineTemperatureCoeffResistancePtr(v *LineTemperatureCoeffResistanceArgs) LineTemperatureCoeffResistancePtrInput {
	return (*lineTemperatureCoeffResistancePtrType)(v)
}

func (*lineTemperatureCoeffResistancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineTemperatureCoeffResistance)(nil)).Elem()
}

func (i *lineTemperatureCoeffResistancePtrType) ToLineTemperatureCoeffResistancePtrOutput() LineTemperatureCoeffResistancePtrOutput {
	return i.ToLineTemperatureCoeffResistancePtrOutputWithContext(context.Background())
}

func (i *lineTemperatureCoeffResistancePtrType) ToLineTemperatureCoeffResistancePtrOutputWithContext(ctx context.Context) LineTemperatureCoeffResistancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineTemperatureCoeffResistancePtrOutput)
}

type LineTemperatureCoeffResistanceOutput struct{ *pulumi.OutputState }

func (LineTemperatureCoeffResistanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineTemperatureCoeffResistance)(nil)).Elem()
}

func (o LineTemperatureCoeffResistanceOutput) ToLineTemperatureCoeffResistanceOutput() LineTemperatureCoeffResistanceOutput {
	return o
}

func (o LineTemperatureCoeffResistanceOutput) ToLineTemperatureCoeffResistanceOutputWithContext(ctx context.Context) LineTemperatureCoeffResistanceOutput {
	return o
}

func (o LineTemperatureCoeffResistanceOutput) ToLineTemperatureCoeffResistancePtrOutput() LineTemperatureCoeffResistancePtrOutput {
	return o.ToLineTemperatureCoeffResistancePtrOutputWithContext(context.Background())
}

func (o LineTemperatureCoeffResistanceOutput) ToLineTemperatureCoeffResistancePtrOutputWithContext(ctx context.Context) LineTemperatureCoeffResistancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineTemperatureCoeffResistance) *LineTemperatureCoeffResistance {
		return &v
	}).(LineTemperatureCoeffResistancePtrOutput)
}

// reference to the asset to be linked to
func (o LineTemperatureCoeffResistanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineTemperatureCoeffResistance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineTemperatureCoeffResistanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineTemperatureCoeffResistance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineTemperatureCoeffResistanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineTemperatureCoeffResistance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineTemperatureCoeffResistanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineTemperatureCoeffResistance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineTemperatureCoeffResistanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineTemperatureCoeffResistance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineTemperatureCoeffResistanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineTemperatureCoeffResistance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineTemperatureCoeffResistancePtrOutput struct{ *pulumi.OutputState }

func (LineTemperatureCoeffResistancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineTemperatureCoeffResistance)(nil)).Elem()
}

func (o LineTemperatureCoeffResistancePtrOutput) ToLineTemperatureCoeffResistancePtrOutput() LineTemperatureCoeffResistancePtrOutput {
	return o
}

func (o LineTemperatureCoeffResistancePtrOutput) ToLineTemperatureCoeffResistancePtrOutputWithContext(ctx context.Context) LineTemperatureCoeffResistancePtrOutput {
	return o
}

func (o LineTemperatureCoeffResistancePtrOutput) Elem() LineTemperatureCoeffResistanceOutput {
	return o.ApplyT(func(v *LineTemperatureCoeffResistance) LineTemperatureCoeffResistance {
		if v != nil {
			return *v
		}
		var ret LineTemperatureCoeffResistance
		return ret
	}).(LineTemperatureCoeffResistanceOutput)
}

// reference to the asset to be linked to
func (o LineTemperatureCoeffResistancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineTemperatureCoeffResistance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineTemperatureCoeffResistancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineTemperatureCoeffResistance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineTemperatureCoeffResistancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineTemperatureCoeffResistance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineTemperatureCoeffResistancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineTemperatureCoeffResistance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineTemperatureCoeffResistancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineTemperatureCoeffResistance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineTemperatureCoeffResistancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineTemperatureCoeffResistance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineThermalElongationCoef struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// LineThermalElongationCoefInput is an input type that accepts LineThermalElongationCoefArgs and LineThermalElongationCoefOutput values.
// You can construct a concrete instance of `LineThermalElongationCoefInput` via:
//
//	LineThermalElongationCoefArgs{...}
type LineThermalElongationCoefInput interface {
	pulumi.Input

	ToLineThermalElongationCoefOutput() LineThermalElongationCoefOutput
	ToLineThermalElongationCoefOutputWithContext(context.Context) LineThermalElongationCoefOutput
}

type LineThermalElongationCoefArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LineThermalElongationCoefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineThermalElongationCoef)(nil)).Elem()
}

func (i LineThermalElongationCoefArgs) ToLineThermalElongationCoefOutput() LineThermalElongationCoefOutput {
	return i.ToLineThermalElongationCoefOutputWithContext(context.Background())
}

func (i LineThermalElongationCoefArgs) ToLineThermalElongationCoefOutputWithContext(ctx context.Context) LineThermalElongationCoefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineThermalElongationCoefOutput)
}

func (i LineThermalElongationCoefArgs) ToLineThermalElongationCoefPtrOutput() LineThermalElongationCoefPtrOutput {
	return i.ToLineThermalElongationCoefPtrOutputWithContext(context.Background())
}

func (i LineThermalElongationCoefArgs) ToLineThermalElongationCoefPtrOutputWithContext(ctx context.Context) LineThermalElongationCoefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineThermalElongationCoefOutput).ToLineThermalElongationCoefPtrOutputWithContext(ctx)
}

// LineThermalElongationCoefPtrInput is an input type that accepts LineThermalElongationCoefArgs, LineThermalElongationCoefPtr and LineThermalElongationCoefPtrOutput values.
// You can construct a concrete instance of `LineThermalElongationCoefPtrInput` via:
//
//	        LineThermalElongationCoefArgs{...}
//
//	or:
//
//	        nil
type LineThermalElongationCoefPtrInput interface {
	pulumi.Input

	ToLineThermalElongationCoefPtrOutput() LineThermalElongationCoefPtrOutput
	ToLineThermalElongationCoefPtrOutputWithContext(context.Context) LineThermalElongationCoefPtrOutput
}

type lineThermalElongationCoefPtrType LineThermalElongationCoefArgs

func LineThermalElongationCoefPtr(v *LineThermalElongationCoefArgs) LineThermalElongationCoefPtrInput {
	return (*lineThermalElongationCoefPtrType)(v)
}

func (*lineThermalElongationCoefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LineThermalElongationCoef)(nil)).Elem()
}

func (i *lineThermalElongationCoefPtrType) ToLineThermalElongationCoefPtrOutput() LineThermalElongationCoefPtrOutput {
	return i.ToLineThermalElongationCoefPtrOutputWithContext(context.Background())
}

func (i *lineThermalElongationCoefPtrType) ToLineThermalElongationCoefPtrOutputWithContext(ctx context.Context) LineThermalElongationCoefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineThermalElongationCoefPtrOutput)
}

type LineThermalElongationCoefOutput struct{ *pulumi.OutputState }

func (LineThermalElongationCoefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineThermalElongationCoef)(nil)).Elem()
}

func (o LineThermalElongationCoefOutput) ToLineThermalElongationCoefOutput() LineThermalElongationCoefOutput {
	return o
}

func (o LineThermalElongationCoefOutput) ToLineThermalElongationCoefOutputWithContext(ctx context.Context) LineThermalElongationCoefOutput {
	return o
}

func (o LineThermalElongationCoefOutput) ToLineThermalElongationCoefPtrOutput() LineThermalElongationCoefPtrOutput {
	return o.ToLineThermalElongationCoefPtrOutputWithContext(context.Background())
}

func (o LineThermalElongationCoefOutput) ToLineThermalElongationCoefPtrOutputWithContext(ctx context.Context) LineThermalElongationCoefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LineThermalElongationCoef) *LineThermalElongationCoef {
		return &v
	}).(LineThermalElongationCoefPtrOutput)
}

// reference to the asset to be linked to
func (o LineThermalElongationCoefOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineThermalElongationCoef) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineThermalElongationCoefOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineThermalElongationCoef) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineThermalElongationCoefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineThermalElongationCoef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineThermalElongationCoefOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineThermalElongationCoef) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineThermalElongationCoefOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineThermalElongationCoef) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineThermalElongationCoefOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineThermalElongationCoef) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LineThermalElongationCoefPtrOutput struct{ *pulumi.OutputState }

func (LineThermalElongationCoefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineThermalElongationCoef)(nil)).Elem()
}

func (o LineThermalElongationCoefPtrOutput) ToLineThermalElongationCoefPtrOutput() LineThermalElongationCoefPtrOutput {
	return o
}

func (o LineThermalElongationCoefPtrOutput) ToLineThermalElongationCoefPtrOutputWithContext(ctx context.Context) LineThermalElongationCoefPtrOutput {
	return o
}

func (o LineThermalElongationCoefPtrOutput) Elem() LineThermalElongationCoefOutput {
	return o.ApplyT(func(v *LineThermalElongationCoef) LineThermalElongationCoef {
		if v != nil {
			return *v
		}
		var ret LineThermalElongationCoef
		return ret
	}).(LineThermalElongationCoefOutput)
}

// reference to the asset to be linked to
func (o LineThermalElongationCoefPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineThermalElongationCoef) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineThermalElongationCoefPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineThermalElongationCoef) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineThermalElongationCoefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineThermalElongationCoef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineThermalElongationCoefPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineThermalElongationCoef) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineThermalElongationCoefPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineThermalElongationCoef) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o LineThermalElongationCoefPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LineThermalElongationCoef) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type LineVoltageR struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineVoltageRInput is an input type that accepts LineVoltageRArgs and LineVoltageROutput values.
// You can construct a concrete instance of `LineVoltageRInput` via:
//
//	LineVoltageRArgs{...}
type LineVoltageRInput interface {
	pulumi.Input

	ToLineVoltageROutput() LineVoltageROutput
	ToLineVoltageROutputWithContext(context.Context) LineVoltageROutput
}

type LineVoltageRArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineVoltageRArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineVoltageR)(nil)).Elem()
}

func (i LineVoltageRArgs) ToLineVoltageROutput() LineVoltageROutput {
	return i.ToLineVoltageROutputWithContext(context.Background())
}

func (i LineVoltageRArgs) ToLineVoltageROutputWithContext(ctx context.Context) LineVoltageROutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineVoltageROutput)
}

// LineVoltageRArrayInput is an input type that accepts LineVoltageRArray and LineVoltageRArrayOutput values.
// You can construct a concrete instance of `LineVoltageRArrayInput` via:
//
//	LineVoltageRArray{ LineVoltageRArgs{...} }
type LineVoltageRArrayInput interface {
	pulumi.Input

	ToLineVoltageRArrayOutput() LineVoltageRArrayOutput
	ToLineVoltageRArrayOutputWithContext(context.Context) LineVoltageRArrayOutput
}

type LineVoltageRArray []LineVoltageRInput

func (LineVoltageRArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineVoltageR)(nil)).Elem()
}

func (i LineVoltageRArray) ToLineVoltageRArrayOutput() LineVoltageRArrayOutput {
	return i.ToLineVoltageRArrayOutputWithContext(context.Background())
}

func (i LineVoltageRArray) ToLineVoltageRArrayOutputWithContext(ctx context.Context) LineVoltageRArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineVoltageRArrayOutput)
}

type LineVoltageROutput struct{ *pulumi.OutputState }

func (LineVoltageROutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineVoltageR)(nil)).Elem()
}

func (o LineVoltageROutput) ToLineVoltageROutput() LineVoltageROutput {
	return o
}

func (o LineVoltageROutput) ToLineVoltageROutputWithContext(ctx context.Context) LineVoltageROutput {
	return o
}

// reference to the asset to be linked to
func (o LineVoltageROutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageR) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineVoltageROutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageR) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineVoltageROutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageR) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineVoltageROutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageR) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineVoltageROutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageR) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineVoltageRArrayOutput struct{ *pulumi.OutputState }

func (LineVoltageRArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineVoltageR)(nil)).Elem()
}

func (o LineVoltageRArrayOutput) ToLineVoltageRArrayOutput() LineVoltageRArrayOutput {
	return o
}

func (o LineVoltageRArrayOutput) ToLineVoltageRArrayOutputWithContext(ctx context.Context) LineVoltageRArrayOutput {
	return o
}

func (o LineVoltageRArrayOutput) Index(i pulumi.IntInput) LineVoltageROutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineVoltageR {
		return vs[0].([]LineVoltageR)[vs[1].(int)]
	}).(LineVoltageROutput)
}

type LineVoltageSt struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineVoltageStInput is an input type that accepts LineVoltageStArgs and LineVoltageStOutput values.
// You can construct a concrete instance of `LineVoltageStInput` via:
//
//	LineVoltageStArgs{...}
type LineVoltageStInput interface {
	pulumi.Input

	ToLineVoltageStOutput() LineVoltageStOutput
	ToLineVoltageStOutputWithContext(context.Context) LineVoltageStOutput
}

type LineVoltageStArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineVoltageStArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineVoltageSt)(nil)).Elem()
}

func (i LineVoltageStArgs) ToLineVoltageStOutput() LineVoltageStOutput {
	return i.ToLineVoltageStOutputWithContext(context.Background())
}

func (i LineVoltageStArgs) ToLineVoltageStOutputWithContext(ctx context.Context) LineVoltageStOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineVoltageStOutput)
}

// LineVoltageStArrayInput is an input type that accepts LineVoltageStArray and LineVoltageStArrayOutput values.
// You can construct a concrete instance of `LineVoltageStArrayInput` via:
//
//	LineVoltageStArray{ LineVoltageStArgs{...} }
type LineVoltageStArrayInput interface {
	pulumi.Input

	ToLineVoltageStArrayOutput() LineVoltageStArrayOutput
	ToLineVoltageStArrayOutputWithContext(context.Context) LineVoltageStArrayOutput
}

type LineVoltageStArray []LineVoltageStInput

func (LineVoltageStArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineVoltageSt)(nil)).Elem()
}

func (i LineVoltageStArray) ToLineVoltageStArrayOutput() LineVoltageStArrayOutput {
	return i.ToLineVoltageStArrayOutputWithContext(context.Background())
}

func (i LineVoltageStArray) ToLineVoltageStArrayOutputWithContext(ctx context.Context) LineVoltageStArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineVoltageStArrayOutput)
}

type LineVoltageStOutput struct{ *pulumi.OutputState }

func (LineVoltageStOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineVoltageSt)(nil)).Elem()
}

func (o LineVoltageStOutput) ToLineVoltageStOutput() LineVoltageStOutput {
	return o
}

func (o LineVoltageStOutput) ToLineVoltageStOutputWithContext(ctx context.Context) LineVoltageStOutput {
	return o
}

// reference to the asset to be linked to
func (o LineVoltageStOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageSt) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineVoltageStOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageSt) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineVoltageStOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageSt) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineVoltageStOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageSt) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineVoltageStOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageSt) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineVoltageStArrayOutput struct{ *pulumi.OutputState }

func (LineVoltageStArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineVoltageSt)(nil)).Elem()
}

func (o LineVoltageStArrayOutput) ToLineVoltageStArrayOutput() LineVoltageStArrayOutput {
	return o
}

func (o LineVoltageStArrayOutput) ToLineVoltageStArrayOutputWithContext(ctx context.Context) LineVoltageStArrayOutput {
	return o
}

func (o LineVoltageStArrayOutput) Index(i pulumi.IntInput) LineVoltageStOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineVoltageSt {
		return vs[0].([]LineVoltageSt)[vs[1].(int)]
	}).(LineVoltageStOutput)
}

type LineVoltageTr struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// LineVoltageTrInput is an input type that accepts LineVoltageTrArgs and LineVoltageTrOutput values.
// You can construct a concrete instance of `LineVoltageTrInput` via:
//
//	LineVoltageTrArgs{...}
type LineVoltageTrInput interface {
	pulumi.Input

	ToLineVoltageTrOutput() LineVoltageTrOutput
	ToLineVoltageTrOutputWithContext(context.Context) LineVoltageTrOutput
}

type LineVoltageTrArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (LineVoltageTrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineVoltageTr)(nil)).Elem()
}

func (i LineVoltageTrArgs) ToLineVoltageTrOutput() LineVoltageTrOutput {
	return i.ToLineVoltageTrOutputWithContext(context.Background())
}

func (i LineVoltageTrArgs) ToLineVoltageTrOutputWithContext(ctx context.Context) LineVoltageTrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineVoltageTrOutput)
}

// LineVoltageTrArrayInput is an input type that accepts LineVoltageTrArray and LineVoltageTrArrayOutput values.
// You can construct a concrete instance of `LineVoltageTrArrayInput` via:
//
//	LineVoltageTrArray{ LineVoltageTrArgs{...} }
type LineVoltageTrArrayInput interface {
	pulumi.Input

	ToLineVoltageTrArrayOutput() LineVoltageTrArrayOutput
	ToLineVoltageTrArrayOutputWithContext(context.Context) LineVoltageTrArrayOutput
}

type LineVoltageTrArray []LineVoltageTrInput

func (LineVoltageTrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineVoltageTr)(nil)).Elem()
}

func (i LineVoltageTrArray) ToLineVoltageTrArrayOutput() LineVoltageTrArrayOutput {
	return i.ToLineVoltageTrArrayOutputWithContext(context.Background())
}

func (i LineVoltageTrArray) ToLineVoltageTrArrayOutputWithContext(ctx context.Context) LineVoltageTrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineVoltageTrArrayOutput)
}

type LineVoltageTrOutput struct{ *pulumi.OutputState }

func (LineVoltageTrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineVoltageTr)(nil)).Elem()
}

func (o LineVoltageTrOutput) ToLineVoltageTrOutput() LineVoltageTrOutput {
	return o
}

func (o LineVoltageTrOutput) ToLineVoltageTrOutputWithContext(ctx context.Context) LineVoltageTrOutput {
	return o
}

// reference to the asset to be linked to
func (o LineVoltageTrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageTr) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o LineVoltageTrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageTr) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o LineVoltageTrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageTr) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o LineVoltageTrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageTr) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o LineVoltageTrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVoltageTr) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type LineVoltageTrArrayOutput struct{ *pulumi.OutputState }

func (LineVoltageTrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineVoltageTr)(nil)).Elem()
}

func (o LineVoltageTrArrayOutput) ToLineVoltageTrArrayOutput() LineVoltageTrArrayOutput {
	return o
}

func (o LineVoltageTrArrayOutput) ToLineVoltageTrArrayOutputWithContext(ctx context.Context) LineVoltageTrArrayOutput {
	return o
}

func (o LineVoltageTrArrayOutput) Index(i pulumi.IntInput) LineVoltageTrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineVoltageTr {
		return vs[0].([]LineVoltageTr)[vs[1].(int)]
	}).(LineVoltageTrOutput)
}

type SegmentAltitude struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// SegmentAltitudeInput is an input type that accepts SegmentAltitudeArgs and SegmentAltitudeOutput values.
// You can construct a concrete instance of `SegmentAltitudeInput` via:
//
//	SegmentAltitudeArgs{...}
type SegmentAltitudeInput interface {
	pulumi.Input

	ToSegmentAltitudeOutput() SegmentAltitudeOutput
	ToSegmentAltitudeOutputWithContext(context.Context) SegmentAltitudeOutput
}

type SegmentAltitudeArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SegmentAltitudeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentAltitude)(nil)).Elem()
}

func (i SegmentAltitudeArgs) ToSegmentAltitudeOutput() SegmentAltitudeOutput {
	return i.ToSegmentAltitudeOutputWithContext(context.Background())
}

func (i SegmentAltitudeArgs) ToSegmentAltitudeOutputWithContext(ctx context.Context) SegmentAltitudeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentAltitudeOutput)
}

func (i SegmentAltitudeArgs) ToSegmentAltitudePtrOutput() SegmentAltitudePtrOutput {
	return i.ToSegmentAltitudePtrOutputWithContext(context.Background())
}

func (i SegmentAltitudeArgs) ToSegmentAltitudePtrOutputWithContext(ctx context.Context) SegmentAltitudePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentAltitudeOutput).ToSegmentAltitudePtrOutputWithContext(ctx)
}

// SegmentAltitudePtrInput is an input type that accepts SegmentAltitudeArgs, SegmentAltitudePtr and SegmentAltitudePtrOutput values.
// You can construct a concrete instance of `SegmentAltitudePtrInput` via:
//
//	        SegmentAltitudeArgs{...}
//
//	or:
//
//	        nil
type SegmentAltitudePtrInput interface {
	pulumi.Input

	ToSegmentAltitudePtrOutput() SegmentAltitudePtrOutput
	ToSegmentAltitudePtrOutputWithContext(context.Context) SegmentAltitudePtrOutput
}

type segmentAltitudePtrType SegmentAltitudeArgs

func SegmentAltitudePtr(v *SegmentAltitudeArgs) SegmentAltitudePtrInput {
	return (*segmentAltitudePtrType)(v)
}

func (*segmentAltitudePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentAltitude)(nil)).Elem()
}

func (i *segmentAltitudePtrType) ToSegmentAltitudePtrOutput() SegmentAltitudePtrOutput {
	return i.ToSegmentAltitudePtrOutputWithContext(context.Background())
}

func (i *segmentAltitudePtrType) ToSegmentAltitudePtrOutputWithContext(ctx context.Context) SegmentAltitudePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentAltitudePtrOutput)
}

type SegmentAltitudeOutput struct{ *pulumi.OutputState }

func (SegmentAltitudeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentAltitude)(nil)).Elem()
}

func (o SegmentAltitudeOutput) ToSegmentAltitudeOutput() SegmentAltitudeOutput {
	return o
}

func (o SegmentAltitudeOutput) ToSegmentAltitudeOutputWithContext(ctx context.Context) SegmentAltitudeOutput {
	return o
}

func (o SegmentAltitudeOutput) ToSegmentAltitudePtrOutput() SegmentAltitudePtrOutput {
	return o.ToSegmentAltitudePtrOutputWithContext(context.Background())
}

func (o SegmentAltitudeOutput) ToSegmentAltitudePtrOutputWithContext(ctx context.Context) SegmentAltitudePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SegmentAltitude) *SegmentAltitude {
		return &v
	}).(SegmentAltitudePtrOutput)
}

// reference to the asset to be linked to
func (o SegmentAltitudeOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAltitude) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentAltitudeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAltitude) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentAltitudeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAltitude) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentAltitudeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAltitude) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentAltitudeOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAltitude) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentAltitudeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAltitude) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SegmentAltitudePtrOutput struct{ *pulumi.OutputState }

func (SegmentAltitudePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentAltitude)(nil)).Elem()
}

func (o SegmentAltitudePtrOutput) ToSegmentAltitudePtrOutput() SegmentAltitudePtrOutput {
	return o
}

func (o SegmentAltitudePtrOutput) ToSegmentAltitudePtrOutputWithContext(ctx context.Context) SegmentAltitudePtrOutput {
	return o
}

func (o SegmentAltitudePtrOutput) Elem() SegmentAltitudeOutput {
	return o.ApplyT(func(v *SegmentAltitude) SegmentAltitude {
		if v != nil {
			return *v
		}
		var ret SegmentAltitude
		return ret
	}).(SegmentAltitudeOutput)
}

// reference to the asset to be linked to
func (o SegmentAltitudePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAltitude) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentAltitudePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAltitude) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentAltitudePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAltitude) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentAltitudePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAltitude) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentAltitudePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAltitude) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentAltitudePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAltitude) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type SegmentAzimuth struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// SegmentAzimuthInput is an input type that accepts SegmentAzimuthArgs and SegmentAzimuthOutput values.
// You can construct a concrete instance of `SegmentAzimuthInput` via:
//
//	SegmentAzimuthArgs{...}
type SegmentAzimuthInput interface {
	pulumi.Input

	ToSegmentAzimuthOutput() SegmentAzimuthOutput
	ToSegmentAzimuthOutputWithContext(context.Context) SegmentAzimuthOutput
}

type SegmentAzimuthArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SegmentAzimuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentAzimuth)(nil)).Elem()
}

func (i SegmentAzimuthArgs) ToSegmentAzimuthOutput() SegmentAzimuthOutput {
	return i.ToSegmentAzimuthOutputWithContext(context.Background())
}

func (i SegmentAzimuthArgs) ToSegmentAzimuthOutputWithContext(ctx context.Context) SegmentAzimuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentAzimuthOutput)
}

func (i SegmentAzimuthArgs) ToSegmentAzimuthPtrOutput() SegmentAzimuthPtrOutput {
	return i.ToSegmentAzimuthPtrOutputWithContext(context.Background())
}

func (i SegmentAzimuthArgs) ToSegmentAzimuthPtrOutputWithContext(ctx context.Context) SegmentAzimuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentAzimuthOutput).ToSegmentAzimuthPtrOutputWithContext(ctx)
}

// SegmentAzimuthPtrInput is an input type that accepts SegmentAzimuthArgs, SegmentAzimuthPtr and SegmentAzimuthPtrOutput values.
// You can construct a concrete instance of `SegmentAzimuthPtrInput` via:
//
//	        SegmentAzimuthArgs{...}
//
//	or:
//
//	        nil
type SegmentAzimuthPtrInput interface {
	pulumi.Input

	ToSegmentAzimuthPtrOutput() SegmentAzimuthPtrOutput
	ToSegmentAzimuthPtrOutputWithContext(context.Context) SegmentAzimuthPtrOutput
}

type segmentAzimuthPtrType SegmentAzimuthArgs

func SegmentAzimuthPtr(v *SegmentAzimuthArgs) SegmentAzimuthPtrInput {
	return (*segmentAzimuthPtrType)(v)
}

func (*segmentAzimuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentAzimuth)(nil)).Elem()
}

func (i *segmentAzimuthPtrType) ToSegmentAzimuthPtrOutput() SegmentAzimuthPtrOutput {
	return i.ToSegmentAzimuthPtrOutputWithContext(context.Background())
}

func (i *segmentAzimuthPtrType) ToSegmentAzimuthPtrOutputWithContext(ctx context.Context) SegmentAzimuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentAzimuthPtrOutput)
}

type SegmentAzimuthOutput struct{ *pulumi.OutputState }

func (SegmentAzimuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentAzimuth)(nil)).Elem()
}

func (o SegmentAzimuthOutput) ToSegmentAzimuthOutput() SegmentAzimuthOutput {
	return o
}

func (o SegmentAzimuthOutput) ToSegmentAzimuthOutputWithContext(ctx context.Context) SegmentAzimuthOutput {
	return o
}

func (o SegmentAzimuthOutput) ToSegmentAzimuthPtrOutput() SegmentAzimuthPtrOutput {
	return o.ToSegmentAzimuthPtrOutputWithContext(context.Background())
}

func (o SegmentAzimuthOutput) ToSegmentAzimuthPtrOutputWithContext(ctx context.Context) SegmentAzimuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SegmentAzimuth) *SegmentAzimuth {
		return &v
	}).(SegmentAzimuthPtrOutput)
}

// reference to the asset to be linked to
func (o SegmentAzimuthOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAzimuth) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentAzimuthOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAzimuth) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentAzimuthOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAzimuth) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentAzimuthOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAzimuth) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentAzimuthOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAzimuth) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentAzimuthOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentAzimuth) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SegmentAzimuthPtrOutput struct{ *pulumi.OutputState }

func (SegmentAzimuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentAzimuth)(nil)).Elem()
}

func (o SegmentAzimuthPtrOutput) ToSegmentAzimuthPtrOutput() SegmentAzimuthPtrOutput {
	return o
}

func (o SegmentAzimuthPtrOutput) ToSegmentAzimuthPtrOutputWithContext(ctx context.Context) SegmentAzimuthPtrOutput {
	return o
}

func (o SegmentAzimuthPtrOutput) Elem() SegmentAzimuthOutput {
	return o.ApplyT(func(v *SegmentAzimuth) SegmentAzimuth {
		if v != nil {
			return *v
		}
		var ret SegmentAzimuth
		return ret
	}).(SegmentAzimuthOutput)
}

// reference to the asset to be linked to
func (o SegmentAzimuthPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAzimuth) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentAzimuthPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAzimuth) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentAzimuthPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAzimuth) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentAzimuthPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAzimuth) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentAzimuthPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAzimuth) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentAzimuthPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentAzimuth) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type SegmentCumulativeDistance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// SegmentCumulativeDistanceInput is an input type that accepts SegmentCumulativeDistanceArgs and SegmentCumulativeDistanceOutput values.
// You can construct a concrete instance of `SegmentCumulativeDistanceInput` via:
//
//	SegmentCumulativeDistanceArgs{...}
type SegmentCumulativeDistanceInput interface {
	pulumi.Input

	ToSegmentCumulativeDistanceOutput() SegmentCumulativeDistanceOutput
	ToSegmentCumulativeDistanceOutputWithContext(context.Context) SegmentCumulativeDistanceOutput
}

type SegmentCumulativeDistanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SegmentCumulativeDistanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentCumulativeDistance)(nil)).Elem()
}

func (i SegmentCumulativeDistanceArgs) ToSegmentCumulativeDistanceOutput() SegmentCumulativeDistanceOutput {
	return i.ToSegmentCumulativeDistanceOutputWithContext(context.Background())
}

func (i SegmentCumulativeDistanceArgs) ToSegmentCumulativeDistanceOutputWithContext(ctx context.Context) SegmentCumulativeDistanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentCumulativeDistanceOutput)
}

func (i SegmentCumulativeDistanceArgs) ToSegmentCumulativeDistancePtrOutput() SegmentCumulativeDistancePtrOutput {
	return i.ToSegmentCumulativeDistancePtrOutputWithContext(context.Background())
}

func (i SegmentCumulativeDistanceArgs) ToSegmentCumulativeDistancePtrOutputWithContext(ctx context.Context) SegmentCumulativeDistancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentCumulativeDistanceOutput).ToSegmentCumulativeDistancePtrOutputWithContext(ctx)
}

// SegmentCumulativeDistancePtrInput is an input type that accepts SegmentCumulativeDistanceArgs, SegmentCumulativeDistancePtr and SegmentCumulativeDistancePtrOutput values.
// You can construct a concrete instance of `SegmentCumulativeDistancePtrInput` via:
//
//	        SegmentCumulativeDistanceArgs{...}
//
//	or:
//
//	        nil
type SegmentCumulativeDistancePtrInput interface {
	pulumi.Input

	ToSegmentCumulativeDistancePtrOutput() SegmentCumulativeDistancePtrOutput
	ToSegmentCumulativeDistancePtrOutputWithContext(context.Context) SegmentCumulativeDistancePtrOutput
}

type segmentCumulativeDistancePtrType SegmentCumulativeDistanceArgs

func SegmentCumulativeDistancePtr(v *SegmentCumulativeDistanceArgs) SegmentCumulativeDistancePtrInput {
	return (*segmentCumulativeDistancePtrType)(v)
}

func (*segmentCumulativeDistancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentCumulativeDistance)(nil)).Elem()
}

func (i *segmentCumulativeDistancePtrType) ToSegmentCumulativeDistancePtrOutput() SegmentCumulativeDistancePtrOutput {
	return i.ToSegmentCumulativeDistancePtrOutputWithContext(context.Background())
}

func (i *segmentCumulativeDistancePtrType) ToSegmentCumulativeDistancePtrOutputWithContext(ctx context.Context) SegmentCumulativeDistancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentCumulativeDistancePtrOutput)
}

type SegmentCumulativeDistanceOutput struct{ *pulumi.OutputState }

func (SegmentCumulativeDistanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentCumulativeDistance)(nil)).Elem()
}

func (o SegmentCumulativeDistanceOutput) ToSegmentCumulativeDistanceOutput() SegmentCumulativeDistanceOutput {
	return o
}

func (o SegmentCumulativeDistanceOutput) ToSegmentCumulativeDistanceOutputWithContext(ctx context.Context) SegmentCumulativeDistanceOutput {
	return o
}

func (o SegmentCumulativeDistanceOutput) ToSegmentCumulativeDistancePtrOutput() SegmentCumulativeDistancePtrOutput {
	return o.ToSegmentCumulativeDistancePtrOutputWithContext(context.Background())
}

func (o SegmentCumulativeDistanceOutput) ToSegmentCumulativeDistancePtrOutputWithContext(ctx context.Context) SegmentCumulativeDistancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SegmentCumulativeDistance) *SegmentCumulativeDistance {
		return &v
	}).(SegmentCumulativeDistancePtrOutput)
}

// reference to the asset to be linked to
func (o SegmentCumulativeDistanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentCumulativeDistance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentCumulativeDistanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentCumulativeDistance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentCumulativeDistanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentCumulativeDistance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentCumulativeDistanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentCumulativeDistance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentCumulativeDistanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentCumulativeDistance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentCumulativeDistanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentCumulativeDistance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SegmentCumulativeDistancePtrOutput struct{ *pulumi.OutputState }

func (SegmentCumulativeDistancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentCumulativeDistance)(nil)).Elem()
}

func (o SegmentCumulativeDistancePtrOutput) ToSegmentCumulativeDistancePtrOutput() SegmentCumulativeDistancePtrOutput {
	return o
}

func (o SegmentCumulativeDistancePtrOutput) ToSegmentCumulativeDistancePtrOutputWithContext(ctx context.Context) SegmentCumulativeDistancePtrOutput {
	return o
}

func (o SegmentCumulativeDistancePtrOutput) Elem() SegmentCumulativeDistanceOutput {
	return o.ApplyT(func(v *SegmentCumulativeDistance) SegmentCumulativeDistance {
		if v != nil {
			return *v
		}
		var ret SegmentCumulativeDistance
		return ret
	}).(SegmentCumulativeDistanceOutput)
}

// reference to the asset to be linked to
func (o SegmentCumulativeDistancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentCumulativeDistance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentCumulativeDistancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentCumulativeDistance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentCumulativeDistancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentCumulativeDistance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentCumulativeDistancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentCumulativeDistance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentCumulativeDistancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentCumulativeDistance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentCumulativeDistancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentCumulativeDistance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type SegmentKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// SegmentKindInput is an input type that accepts SegmentKindArgs and SegmentKindOutput values.
// You can construct a concrete instance of `SegmentKindInput` via:
//
//	SegmentKindArgs{...}
type SegmentKindInput interface {
	pulumi.Input

	ToSegmentKindOutput() SegmentKindOutput
	ToSegmentKindOutputWithContext(context.Context) SegmentKindOutput
}

type SegmentKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (SegmentKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentKind)(nil)).Elem()
}

func (i SegmentKindArgs) ToSegmentKindOutput() SegmentKindOutput {
	return i.ToSegmentKindOutputWithContext(context.Background())
}

func (i SegmentKindArgs) ToSegmentKindOutputWithContext(ctx context.Context) SegmentKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentKindOutput)
}

// SegmentKindArrayInput is an input type that accepts SegmentKindArray and SegmentKindArrayOutput values.
// You can construct a concrete instance of `SegmentKindArrayInput` via:
//
//	SegmentKindArray{ SegmentKindArgs{...} }
type SegmentKindArrayInput interface {
	pulumi.Input

	ToSegmentKindArrayOutput() SegmentKindArrayOutput
	ToSegmentKindArrayOutputWithContext(context.Context) SegmentKindArrayOutput
}

type SegmentKindArray []SegmentKindInput

func (SegmentKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentKind)(nil)).Elem()
}

func (i SegmentKindArray) ToSegmentKindArrayOutput() SegmentKindArrayOutput {
	return i.ToSegmentKindArrayOutputWithContext(context.Background())
}

func (i SegmentKindArray) ToSegmentKindArrayOutputWithContext(ctx context.Context) SegmentKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentKindArrayOutput)
}

type SegmentKindOutput struct{ *pulumi.OutputState }

func (SegmentKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentKind)(nil)).Elem()
}

func (o SegmentKindOutput) ToSegmentKindOutput() SegmentKindOutput {
	return o
}

func (o SegmentKindOutput) ToSegmentKindOutputWithContext(ctx context.Context) SegmentKindOutput {
	return o
}

// kind id
func (o SegmentKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SegmentKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o SegmentKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SegmentKind) string { return v.Name }).(pulumi.StringOutput)
}

type SegmentKindArrayOutput struct{ *pulumi.OutputState }

func (SegmentKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentKind)(nil)).Elem()
}

func (o SegmentKindArrayOutput) ToSegmentKindArrayOutput() SegmentKindArrayOutput {
	return o
}

func (o SegmentKindArrayOutput) ToSegmentKindArrayOutputWithContext(ctx context.Context) SegmentKindArrayOutput {
	return o
}

func (o SegmentKindArrayOutput) Index(i pulumi.IntInput) SegmentKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SegmentKind {
		return vs[0].([]SegmentKind)[vs[1].(int)]
	}).(SegmentKindOutput)
}

type SegmentReferenceSag struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// SegmentReferenceSagInput is an input type that accepts SegmentReferenceSagArgs and SegmentReferenceSagOutput values.
// You can construct a concrete instance of `SegmentReferenceSagInput` via:
//
//	SegmentReferenceSagArgs{...}
type SegmentReferenceSagInput interface {
	pulumi.Input

	ToSegmentReferenceSagOutput() SegmentReferenceSagOutput
	ToSegmentReferenceSagOutputWithContext(context.Context) SegmentReferenceSagOutput
}

type SegmentReferenceSagArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SegmentReferenceSagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentReferenceSag)(nil)).Elem()
}

func (i SegmentReferenceSagArgs) ToSegmentReferenceSagOutput() SegmentReferenceSagOutput {
	return i.ToSegmentReferenceSagOutputWithContext(context.Background())
}

func (i SegmentReferenceSagArgs) ToSegmentReferenceSagOutputWithContext(ctx context.Context) SegmentReferenceSagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentReferenceSagOutput)
}

func (i SegmentReferenceSagArgs) ToSegmentReferenceSagPtrOutput() SegmentReferenceSagPtrOutput {
	return i.ToSegmentReferenceSagPtrOutputWithContext(context.Background())
}

func (i SegmentReferenceSagArgs) ToSegmentReferenceSagPtrOutputWithContext(ctx context.Context) SegmentReferenceSagPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentReferenceSagOutput).ToSegmentReferenceSagPtrOutputWithContext(ctx)
}

// SegmentReferenceSagPtrInput is an input type that accepts SegmentReferenceSagArgs, SegmentReferenceSagPtr and SegmentReferenceSagPtrOutput values.
// You can construct a concrete instance of `SegmentReferenceSagPtrInput` via:
//
//	        SegmentReferenceSagArgs{...}
//
//	or:
//
//	        nil
type SegmentReferenceSagPtrInput interface {
	pulumi.Input

	ToSegmentReferenceSagPtrOutput() SegmentReferenceSagPtrOutput
	ToSegmentReferenceSagPtrOutputWithContext(context.Context) SegmentReferenceSagPtrOutput
}

type segmentReferenceSagPtrType SegmentReferenceSagArgs

func SegmentReferenceSagPtr(v *SegmentReferenceSagArgs) SegmentReferenceSagPtrInput {
	return (*segmentReferenceSagPtrType)(v)
}

func (*segmentReferenceSagPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentReferenceSag)(nil)).Elem()
}

func (i *segmentReferenceSagPtrType) ToSegmentReferenceSagPtrOutput() SegmentReferenceSagPtrOutput {
	return i.ToSegmentReferenceSagPtrOutputWithContext(context.Background())
}

func (i *segmentReferenceSagPtrType) ToSegmentReferenceSagPtrOutputWithContext(ctx context.Context) SegmentReferenceSagPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentReferenceSagPtrOutput)
}

type SegmentReferenceSagOutput struct{ *pulumi.OutputState }

func (SegmentReferenceSagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentReferenceSag)(nil)).Elem()
}

func (o SegmentReferenceSagOutput) ToSegmentReferenceSagOutput() SegmentReferenceSagOutput {
	return o
}

func (o SegmentReferenceSagOutput) ToSegmentReferenceSagOutputWithContext(ctx context.Context) SegmentReferenceSagOutput {
	return o
}

func (o SegmentReferenceSagOutput) ToSegmentReferenceSagPtrOutput() SegmentReferenceSagPtrOutput {
	return o.ToSegmentReferenceSagPtrOutputWithContext(context.Background())
}

func (o SegmentReferenceSagOutput) ToSegmentReferenceSagPtrOutputWithContext(ctx context.Context) SegmentReferenceSagPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SegmentReferenceSag) *SegmentReferenceSag {
		return &v
	}).(SegmentReferenceSagPtrOutput)
}

// reference to the asset to be linked to
func (o SegmentReferenceSagOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceSag) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentReferenceSagOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceSag) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentReferenceSagOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceSag) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentReferenceSagOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceSag) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentReferenceSagOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceSag) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentReferenceSagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceSag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SegmentReferenceSagPtrOutput struct{ *pulumi.OutputState }

func (SegmentReferenceSagPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentReferenceSag)(nil)).Elem()
}

func (o SegmentReferenceSagPtrOutput) ToSegmentReferenceSagPtrOutput() SegmentReferenceSagPtrOutput {
	return o
}

func (o SegmentReferenceSagPtrOutput) ToSegmentReferenceSagPtrOutputWithContext(ctx context.Context) SegmentReferenceSagPtrOutput {
	return o
}

func (o SegmentReferenceSagPtrOutput) Elem() SegmentReferenceSagOutput {
	return o.ApplyT(func(v *SegmentReferenceSag) SegmentReferenceSag {
		if v != nil {
			return *v
		}
		var ret SegmentReferenceSag
		return ret
	}).(SegmentReferenceSagOutput)
}

// reference to the asset to be linked to
func (o SegmentReferenceSagPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceSag) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentReferenceSagPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceSag) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentReferenceSagPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceSag) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentReferenceSagPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceSag) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentReferenceSagPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceSag) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentReferenceSagPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceSag) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type SegmentReferenceTemperature struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// SegmentReferenceTemperatureInput is an input type that accepts SegmentReferenceTemperatureArgs and SegmentReferenceTemperatureOutput values.
// You can construct a concrete instance of `SegmentReferenceTemperatureInput` via:
//
//	SegmentReferenceTemperatureArgs{...}
type SegmentReferenceTemperatureInput interface {
	pulumi.Input

	ToSegmentReferenceTemperatureOutput() SegmentReferenceTemperatureOutput
	ToSegmentReferenceTemperatureOutputWithContext(context.Context) SegmentReferenceTemperatureOutput
}

type SegmentReferenceTemperatureArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SegmentReferenceTemperatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentReferenceTemperature)(nil)).Elem()
}

func (i SegmentReferenceTemperatureArgs) ToSegmentReferenceTemperatureOutput() SegmentReferenceTemperatureOutput {
	return i.ToSegmentReferenceTemperatureOutputWithContext(context.Background())
}

func (i SegmentReferenceTemperatureArgs) ToSegmentReferenceTemperatureOutputWithContext(ctx context.Context) SegmentReferenceTemperatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentReferenceTemperatureOutput)
}

func (i SegmentReferenceTemperatureArgs) ToSegmentReferenceTemperaturePtrOutput() SegmentReferenceTemperaturePtrOutput {
	return i.ToSegmentReferenceTemperaturePtrOutputWithContext(context.Background())
}

func (i SegmentReferenceTemperatureArgs) ToSegmentReferenceTemperaturePtrOutputWithContext(ctx context.Context) SegmentReferenceTemperaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentReferenceTemperatureOutput).ToSegmentReferenceTemperaturePtrOutputWithContext(ctx)
}

// SegmentReferenceTemperaturePtrInput is an input type that accepts SegmentReferenceTemperatureArgs, SegmentReferenceTemperaturePtr and SegmentReferenceTemperaturePtrOutput values.
// You can construct a concrete instance of `SegmentReferenceTemperaturePtrInput` via:
//
//	        SegmentReferenceTemperatureArgs{...}
//
//	or:
//
//	        nil
type SegmentReferenceTemperaturePtrInput interface {
	pulumi.Input

	ToSegmentReferenceTemperaturePtrOutput() SegmentReferenceTemperaturePtrOutput
	ToSegmentReferenceTemperaturePtrOutputWithContext(context.Context) SegmentReferenceTemperaturePtrOutput
}

type segmentReferenceTemperaturePtrType SegmentReferenceTemperatureArgs

func SegmentReferenceTemperaturePtr(v *SegmentReferenceTemperatureArgs) SegmentReferenceTemperaturePtrInput {
	return (*segmentReferenceTemperaturePtrType)(v)
}

func (*segmentReferenceTemperaturePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentReferenceTemperature)(nil)).Elem()
}

func (i *segmentReferenceTemperaturePtrType) ToSegmentReferenceTemperaturePtrOutput() SegmentReferenceTemperaturePtrOutput {
	return i.ToSegmentReferenceTemperaturePtrOutputWithContext(context.Background())
}

func (i *segmentReferenceTemperaturePtrType) ToSegmentReferenceTemperaturePtrOutputWithContext(ctx context.Context) SegmentReferenceTemperaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentReferenceTemperaturePtrOutput)
}

type SegmentReferenceTemperatureOutput struct{ *pulumi.OutputState }

func (SegmentReferenceTemperatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentReferenceTemperature)(nil)).Elem()
}

func (o SegmentReferenceTemperatureOutput) ToSegmentReferenceTemperatureOutput() SegmentReferenceTemperatureOutput {
	return o
}

func (o SegmentReferenceTemperatureOutput) ToSegmentReferenceTemperatureOutputWithContext(ctx context.Context) SegmentReferenceTemperatureOutput {
	return o
}

func (o SegmentReferenceTemperatureOutput) ToSegmentReferenceTemperaturePtrOutput() SegmentReferenceTemperaturePtrOutput {
	return o.ToSegmentReferenceTemperaturePtrOutputWithContext(context.Background())
}

func (o SegmentReferenceTemperatureOutput) ToSegmentReferenceTemperaturePtrOutputWithContext(ctx context.Context) SegmentReferenceTemperaturePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SegmentReferenceTemperature) *SegmentReferenceTemperature {
		return &v
	}).(SegmentReferenceTemperaturePtrOutput)
}

// reference to the asset to be linked to
func (o SegmentReferenceTemperatureOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceTemperature) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentReferenceTemperatureOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceTemperature) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentReferenceTemperatureOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceTemperature) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentReferenceTemperatureOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceTemperature) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentReferenceTemperatureOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceTemperature) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentReferenceTemperatureOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentReferenceTemperature) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SegmentReferenceTemperaturePtrOutput struct{ *pulumi.OutputState }

func (SegmentReferenceTemperaturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentReferenceTemperature)(nil)).Elem()
}

func (o SegmentReferenceTemperaturePtrOutput) ToSegmentReferenceTemperaturePtrOutput() SegmentReferenceTemperaturePtrOutput {
	return o
}

func (o SegmentReferenceTemperaturePtrOutput) ToSegmentReferenceTemperaturePtrOutputWithContext(ctx context.Context) SegmentReferenceTemperaturePtrOutput {
	return o
}

func (o SegmentReferenceTemperaturePtrOutput) Elem() SegmentReferenceTemperatureOutput {
	return o.ApplyT(func(v *SegmentReferenceTemperature) SegmentReferenceTemperature {
		if v != nil {
			return *v
		}
		var ret SegmentReferenceTemperature
		return ret
	}).(SegmentReferenceTemperatureOutput)
}

// reference to the asset to be linked to
func (o SegmentReferenceTemperaturePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentReferenceTemperaturePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentReferenceTemperaturePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentReferenceTemperaturePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentReferenceTemperaturePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentReferenceTemperaturePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentReferenceTemperature) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type SegmentSpanLength struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// SegmentSpanLengthInput is an input type that accepts SegmentSpanLengthArgs and SegmentSpanLengthOutput values.
// You can construct a concrete instance of `SegmentSpanLengthInput` via:
//
//	SegmentSpanLengthArgs{...}
type SegmentSpanLengthInput interface {
	pulumi.Input

	ToSegmentSpanLengthOutput() SegmentSpanLengthOutput
	ToSegmentSpanLengthOutputWithContext(context.Context) SegmentSpanLengthOutput
}

type SegmentSpanLengthArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SegmentSpanLengthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentSpanLength)(nil)).Elem()
}

func (i SegmentSpanLengthArgs) ToSegmentSpanLengthOutput() SegmentSpanLengthOutput {
	return i.ToSegmentSpanLengthOutputWithContext(context.Background())
}

func (i SegmentSpanLengthArgs) ToSegmentSpanLengthOutputWithContext(ctx context.Context) SegmentSpanLengthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentSpanLengthOutput)
}

func (i SegmentSpanLengthArgs) ToSegmentSpanLengthPtrOutput() SegmentSpanLengthPtrOutput {
	return i.ToSegmentSpanLengthPtrOutputWithContext(context.Background())
}

func (i SegmentSpanLengthArgs) ToSegmentSpanLengthPtrOutputWithContext(ctx context.Context) SegmentSpanLengthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentSpanLengthOutput).ToSegmentSpanLengthPtrOutputWithContext(ctx)
}

// SegmentSpanLengthPtrInput is an input type that accepts SegmentSpanLengthArgs, SegmentSpanLengthPtr and SegmentSpanLengthPtrOutput values.
// You can construct a concrete instance of `SegmentSpanLengthPtrInput` via:
//
//	        SegmentSpanLengthArgs{...}
//
//	or:
//
//	        nil
type SegmentSpanLengthPtrInput interface {
	pulumi.Input

	ToSegmentSpanLengthPtrOutput() SegmentSpanLengthPtrOutput
	ToSegmentSpanLengthPtrOutputWithContext(context.Context) SegmentSpanLengthPtrOutput
}

type segmentSpanLengthPtrType SegmentSpanLengthArgs

func SegmentSpanLengthPtr(v *SegmentSpanLengthArgs) SegmentSpanLengthPtrInput {
	return (*segmentSpanLengthPtrType)(v)
}

func (*segmentSpanLengthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentSpanLength)(nil)).Elem()
}

func (i *segmentSpanLengthPtrType) ToSegmentSpanLengthPtrOutput() SegmentSpanLengthPtrOutput {
	return i.ToSegmentSpanLengthPtrOutputWithContext(context.Background())
}

func (i *segmentSpanLengthPtrType) ToSegmentSpanLengthPtrOutputWithContext(ctx context.Context) SegmentSpanLengthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentSpanLengthPtrOutput)
}

type SegmentSpanLengthOutput struct{ *pulumi.OutputState }

func (SegmentSpanLengthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentSpanLength)(nil)).Elem()
}

func (o SegmentSpanLengthOutput) ToSegmentSpanLengthOutput() SegmentSpanLengthOutput {
	return o
}

func (o SegmentSpanLengthOutput) ToSegmentSpanLengthOutputWithContext(ctx context.Context) SegmentSpanLengthOutput {
	return o
}

func (o SegmentSpanLengthOutput) ToSegmentSpanLengthPtrOutput() SegmentSpanLengthPtrOutput {
	return o.ToSegmentSpanLengthPtrOutputWithContext(context.Background())
}

func (o SegmentSpanLengthOutput) ToSegmentSpanLengthPtrOutputWithContext(ctx context.Context) SegmentSpanLengthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SegmentSpanLength) *SegmentSpanLength {
		return &v
	}).(SegmentSpanLengthPtrOutput)
}

// reference to the asset to be linked to
func (o SegmentSpanLengthOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentSpanLength) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentSpanLengthOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentSpanLength) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentSpanLengthOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentSpanLength) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentSpanLengthOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentSpanLength) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentSpanLengthOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentSpanLength) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentSpanLengthOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentSpanLength) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SegmentSpanLengthPtrOutput struct{ *pulumi.OutputState }

func (SegmentSpanLengthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentSpanLength)(nil)).Elem()
}

func (o SegmentSpanLengthPtrOutput) ToSegmentSpanLengthPtrOutput() SegmentSpanLengthPtrOutput {
	return o
}

func (o SegmentSpanLengthPtrOutput) ToSegmentSpanLengthPtrOutputWithContext(ctx context.Context) SegmentSpanLengthPtrOutput {
	return o
}

func (o SegmentSpanLengthPtrOutput) Elem() SegmentSpanLengthOutput {
	return o.ApplyT(func(v *SegmentSpanLength) SegmentSpanLength {
		if v != nil {
			return *v
		}
		var ret SegmentSpanLength
		return ret
	}).(SegmentSpanLengthOutput)
}

// reference to the asset to be linked to
func (o SegmentSpanLengthPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentSpanLength) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentSpanLengthPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentSpanLength) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentSpanLengthPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentSpanLength) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentSpanLengthPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentSpanLength) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentSpanLengthPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentSpanLength) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o SegmentSpanLengthPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentSpanLength) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type SegmentTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// SegmentTagInput is an input type that accepts SegmentTagArgs and SegmentTagOutput values.
// You can construct a concrete instance of `SegmentTagInput` via:
//
//	SegmentTagArgs{...}
type SegmentTagInput interface {
	pulumi.Input

	ToSegmentTagOutput() SegmentTagOutput
	ToSegmentTagOutputWithContext(context.Context) SegmentTagOutput
}

type SegmentTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (SegmentTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentTag)(nil)).Elem()
}

func (i SegmentTagArgs) ToSegmentTagOutput() SegmentTagOutput {
	return i.ToSegmentTagOutputWithContext(context.Background())
}

func (i SegmentTagArgs) ToSegmentTagOutputWithContext(ctx context.Context) SegmentTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentTagOutput)
}

// SegmentTagArrayInput is an input type that accepts SegmentTagArray and SegmentTagArrayOutput values.
// You can construct a concrete instance of `SegmentTagArrayInput` via:
//
//	SegmentTagArray{ SegmentTagArgs{...} }
type SegmentTagArrayInput interface {
	pulumi.Input

	ToSegmentTagArrayOutput() SegmentTagArrayOutput
	ToSegmentTagArrayOutputWithContext(context.Context) SegmentTagArrayOutput
}

type SegmentTagArray []SegmentTagInput

func (SegmentTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentTag)(nil)).Elem()
}

func (i SegmentTagArray) ToSegmentTagArrayOutput() SegmentTagArrayOutput {
	return i.ToSegmentTagArrayOutputWithContext(context.Background())
}

func (i SegmentTagArray) ToSegmentTagArrayOutputWithContext(ctx context.Context) SegmentTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentTagArrayOutput)
}

type SegmentTagOutput struct{ *pulumi.OutputState }

func (SegmentTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentTag)(nil)).Elem()
}

func (o SegmentTagOutput) ToSegmentTagOutput() SegmentTagOutput {
	return o
}

func (o SegmentTagOutput) ToSegmentTagOutputWithContext(ctx context.Context) SegmentTagOutput {
	return o
}

// tag id
func (o SegmentTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SegmentTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o SegmentTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SegmentTag) string { return v.Name }).(pulumi.StringOutput)
}

type SegmentTagArrayOutput struct{ *pulumi.OutputState }

func (SegmentTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentTag)(nil)).Elem()
}

func (o SegmentTagArrayOutput) ToSegmentTagArrayOutput() SegmentTagArrayOutput {
	return o
}

func (o SegmentTagArrayOutput) ToSegmentTagArrayOutputWithContext(ctx context.Context) SegmentTagArrayOutput {
	return o
}

func (o SegmentTagArrayOutput) Index(i pulumi.IntInput) SegmentTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SegmentTag {
		return vs[0].([]SegmentTag)[vs[1].(int)]
	}).(SegmentTagOutput)
}

type SegmentTemperature struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// SegmentTemperatureInput is an input type that accepts SegmentTemperatureArgs and SegmentTemperatureOutput values.
// You can construct a concrete instance of `SegmentTemperatureInput` via:
//
//	SegmentTemperatureArgs{...}
type SegmentTemperatureInput interface {
	pulumi.Input

	ToSegmentTemperatureOutput() SegmentTemperatureOutput
	ToSegmentTemperatureOutputWithContext(context.Context) SegmentTemperatureOutput
}

type SegmentTemperatureArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (SegmentTemperatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentTemperature)(nil)).Elem()
}

func (i SegmentTemperatureArgs) ToSegmentTemperatureOutput() SegmentTemperatureOutput {
	return i.ToSegmentTemperatureOutputWithContext(context.Background())
}

func (i SegmentTemperatureArgs) ToSegmentTemperatureOutputWithContext(ctx context.Context) SegmentTemperatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentTemperatureOutput)
}

// SegmentTemperatureArrayInput is an input type that accepts SegmentTemperatureArray and SegmentTemperatureArrayOutput values.
// You can construct a concrete instance of `SegmentTemperatureArrayInput` via:
//
//	SegmentTemperatureArray{ SegmentTemperatureArgs{...} }
type SegmentTemperatureArrayInput interface {
	pulumi.Input

	ToSegmentTemperatureArrayOutput() SegmentTemperatureArrayOutput
	ToSegmentTemperatureArrayOutputWithContext(context.Context) SegmentTemperatureArrayOutput
}

type SegmentTemperatureArray []SegmentTemperatureInput

func (SegmentTemperatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentTemperature)(nil)).Elem()
}

func (i SegmentTemperatureArray) ToSegmentTemperatureArrayOutput() SegmentTemperatureArrayOutput {
	return i.ToSegmentTemperatureArrayOutputWithContext(context.Background())
}

func (i SegmentTemperatureArray) ToSegmentTemperatureArrayOutputWithContext(ctx context.Context) SegmentTemperatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentTemperatureArrayOutput)
}

type SegmentTemperatureOutput struct{ *pulumi.OutputState }

func (SegmentTemperatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentTemperature)(nil)).Elem()
}

func (o SegmentTemperatureOutput) ToSegmentTemperatureOutput() SegmentTemperatureOutput {
	return o
}

func (o SegmentTemperatureOutput) ToSegmentTemperatureOutputWithContext(ctx context.Context) SegmentTemperatureOutput {
	return o
}

// reference to the asset to be linked to
func (o SegmentTemperatureOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentTemperature) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentTemperatureOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentTemperature) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentTemperatureOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentTemperature) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentTemperatureOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentTemperature) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentTemperatureOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentTemperature) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type SegmentTemperatureArrayOutput struct{ *pulumi.OutputState }

func (SegmentTemperatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentTemperature)(nil)).Elem()
}

func (o SegmentTemperatureArrayOutput) ToSegmentTemperatureArrayOutput() SegmentTemperatureArrayOutput {
	return o
}

func (o SegmentTemperatureArrayOutput) ToSegmentTemperatureArrayOutputWithContext(ctx context.Context) SegmentTemperatureArrayOutput {
	return o
}

func (o SegmentTemperatureArrayOutput) Index(i pulumi.IntInput) SegmentTemperatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SegmentTemperature {
		return vs[0].([]SegmentTemperature)[vs[1].(int)]
	}).(SegmentTemperatureOutput)
}

type SegmentWindDirection struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// SegmentWindDirectionInput is an input type that accepts SegmentWindDirectionArgs and SegmentWindDirectionOutput values.
// You can construct a concrete instance of `SegmentWindDirectionInput` via:
//
//	SegmentWindDirectionArgs{...}
type SegmentWindDirectionInput interface {
	pulumi.Input

	ToSegmentWindDirectionOutput() SegmentWindDirectionOutput
	ToSegmentWindDirectionOutputWithContext(context.Context) SegmentWindDirectionOutput
}

type SegmentWindDirectionArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (SegmentWindDirectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentWindDirection)(nil)).Elem()
}

func (i SegmentWindDirectionArgs) ToSegmentWindDirectionOutput() SegmentWindDirectionOutput {
	return i.ToSegmentWindDirectionOutputWithContext(context.Background())
}

func (i SegmentWindDirectionArgs) ToSegmentWindDirectionOutputWithContext(ctx context.Context) SegmentWindDirectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentWindDirectionOutput)
}

// SegmentWindDirectionArrayInput is an input type that accepts SegmentWindDirectionArray and SegmentWindDirectionArrayOutput values.
// You can construct a concrete instance of `SegmentWindDirectionArrayInput` via:
//
//	SegmentWindDirectionArray{ SegmentWindDirectionArgs{...} }
type SegmentWindDirectionArrayInput interface {
	pulumi.Input

	ToSegmentWindDirectionArrayOutput() SegmentWindDirectionArrayOutput
	ToSegmentWindDirectionArrayOutputWithContext(context.Context) SegmentWindDirectionArrayOutput
}

type SegmentWindDirectionArray []SegmentWindDirectionInput

func (SegmentWindDirectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentWindDirection)(nil)).Elem()
}

func (i SegmentWindDirectionArray) ToSegmentWindDirectionArrayOutput() SegmentWindDirectionArrayOutput {
	return i.ToSegmentWindDirectionArrayOutputWithContext(context.Background())
}

func (i SegmentWindDirectionArray) ToSegmentWindDirectionArrayOutputWithContext(ctx context.Context) SegmentWindDirectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentWindDirectionArrayOutput)
}

type SegmentWindDirectionOutput struct{ *pulumi.OutputState }

func (SegmentWindDirectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentWindDirection)(nil)).Elem()
}

func (o SegmentWindDirectionOutput) ToSegmentWindDirectionOutput() SegmentWindDirectionOutput {
	return o
}

func (o SegmentWindDirectionOutput) ToSegmentWindDirectionOutputWithContext(ctx context.Context) SegmentWindDirectionOutput {
	return o
}

// reference to the asset to be linked to
func (o SegmentWindDirectionOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentWindDirection) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentWindDirectionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentWindDirection) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentWindDirectionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentWindDirection) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentWindDirectionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentWindDirection) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentWindDirectionOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentWindDirection) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type SegmentWindDirectionArrayOutput struct{ *pulumi.OutputState }

func (SegmentWindDirectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentWindDirection)(nil)).Elem()
}

func (o SegmentWindDirectionArrayOutput) ToSegmentWindDirectionArrayOutput() SegmentWindDirectionArrayOutput {
	return o
}

func (o SegmentWindDirectionArrayOutput) ToSegmentWindDirectionArrayOutputWithContext(ctx context.Context) SegmentWindDirectionArrayOutput {
	return o
}

func (o SegmentWindDirectionArrayOutput) Index(i pulumi.IntInput) SegmentWindDirectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SegmentWindDirection {
		return vs[0].([]SegmentWindDirection)[vs[1].(int)]
	}).(SegmentWindDirectionOutput)
}

type SegmentWindSpeed struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// SegmentWindSpeedInput is an input type that accepts SegmentWindSpeedArgs and SegmentWindSpeedOutput values.
// You can construct a concrete instance of `SegmentWindSpeedInput` via:
//
//	SegmentWindSpeedArgs{...}
type SegmentWindSpeedInput interface {
	pulumi.Input

	ToSegmentWindSpeedOutput() SegmentWindSpeedOutput
	ToSegmentWindSpeedOutputWithContext(context.Context) SegmentWindSpeedOutput
}

type SegmentWindSpeedArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (SegmentWindSpeedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentWindSpeed)(nil)).Elem()
}

func (i SegmentWindSpeedArgs) ToSegmentWindSpeedOutput() SegmentWindSpeedOutput {
	return i.ToSegmentWindSpeedOutputWithContext(context.Background())
}

func (i SegmentWindSpeedArgs) ToSegmentWindSpeedOutputWithContext(ctx context.Context) SegmentWindSpeedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentWindSpeedOutput)
}

// SegmentWindSpeedArrayInput is an input type that accepts SegmentWindSpeedArray and SegmentWindSpeedArrayOutput values.
// You can construct a concrete instance of `SegmentWindSpeedArrayInput` via:
//
//	SegmentWindSpeedArray{ SegmentWindSpeedArgs{...} }
type SegmentWindSpeedArrayInput interface {
	pulumi.Input

	ToSegmentWindSpeedArrayOutput() SegmentWindSpeedArrayOutput
	ToSegmentWindSpeedArrayOutputWithContext(context.Context) SegmentWindSpeedArrayOutput
}

type SegmentWindSpeedArray []SegmentWindSpeedInput

func (SegmentWindSpeedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentWindSpeed)(nil)).Elem()
}

func (i SegmentWindSpeedArray) ToSegmentWindSpeedArrayOutput() SegmentWindSpeedArrayOutput {
	return i.ToSegmentWindSpeedArrayOutputWithContext(context.Background())
}

func (i SegmentWindSpeedArray) ToSegmentWindSpeedArrayOutputWithContext(ctx context.Context) SegmentWindSpeedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentWindSpeedArrayOutput)
}

type SegmentWindSpeedOutput struct{ *pulumi.OutputState }

func (SegmentWindSpeedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentWindSpeed)(nil)).Elem()
}

func (o SegmentWindSpeedOutput) ToSegmentWindSpeedOutput() SegmentWindSpeedOutput {
	return o
}

func (o SegmentWindSpeedOutput) ToSegmentWindSpeedOutputWithContext(ctx context.Context) SegmentWindSpeedOutput {
	return o
}

// reference to the asset to be linked to
func (o SegmentWindSpeedOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentWindSpeed) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SegmentWindSpeedOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentWindSpeed) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SegmentWindSpeedOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentWindSpeed) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SegmentWindSpeedOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentWindSpeed) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SegmentWindSpeedOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentWindSpeed) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type SegmentWindSpeedArrayOutput struct{ *pulumi.OutputState }

func (SegmentWindSpeedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentWindSpeed)(nil)).Elem()
}

func (o SegmentWindSpeedArrayOutput) ToSegmentWindSpeedArrayOutput() SegmentWindSpeedArrayOutput {
	return o
}

func (o SegmentWindSpeedArrayOutput) ToSegmentWindSpeedArrayOutputWithContext(ctx context.Context) SegmentWindSpeedArrayOutput {
	return o
}

func (o SegmentWindSpeedArrayOutput) Index(i pulumi.IntInput) SegmentWindSpeedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SegmentWindSpeed {
		return vs[0].([]SegmentWindSpeed)[vs[1].(int)]
	}).(SegmentWindSpeedOutput)
}

type ServerConfig struct {
	Description *string `pulumi:"description"`
	Multiple    *bool   `pulumi:"multiple"`
	Name        string  `pulumi:"name"`
	Required    *bool   `pulumi:"required"`
	Sensitive   *bool   `pulumi:"sensitive"`
	Type        string  `pulumi:"type"`
	Value       *string `pulumi:"value"`
}

// ServerConfigInput is an input type that accepts ServerConfigArgs and ServerConfigOutput values.
// You can construct a concrete instance of `ServerConfigInput` via:
//
//	ServerConfigArgs{...}
type ServerConfigInput interface {
	pulumi.Input

	ToServerConfigOutput() ServerConfigOutput
	ToServerConfigOutputWithContext(context.Context) ServerConfigOutput
}

type ServerConfigArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Multiple    pulumi.BoolPtrInput   `pulumi:"multiple"`
	Name        pulumi.StringInput    `pulumi:"name"`
	Required    pulumi.BoolPtrInput   `pulumi:"required"`
	Sensitive   pulumi.BoolPtrInput   `pulumi:"sensitive"`
	Type        pulumi.StringInput    `pulumi:"type"`
	Value       pulumi.StringPtrInput `pulumi:"value"`
}

func (ServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerConfig)(nil)).Elem()
}

func (i ServerConfigArgs) ToServerConfigOutput() ServerConfigOutput {
	return i.ToServerConfigOutputWithContext(context.Background())
}

func (i ServerConfigArgs) ToServerConfigOutputWithContext(ctx context.Context) ServerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerConfigOutput)
}

// ServerConfigArrayInput is an input type that accepts ServerConfigArray and ServerConfigArrayOutput values.
// You can construct a concrete instance of `ServerConfigArrayInput` via:
//
//	ServerConfigArray{ ServerConfigArgs{...} }
type ServerConfigArrayInput interface {
	pulumi.Input

	ToServerConfigArrayOutput() ServerConfigArrayOutput
	ToServerConfigArrayOutputWithContext(context.Context) ServerConfigArrayOutput
}

type ServerConfigArray []ServerConfigInput

func (ServerConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerConfig)(nil)).Elem()
}

func (i ServerConfigArray) ToServerConfigArrayOutput() ServerConfigArrayOutput {
	return i.ToServerConfigArrayOutputWithContext(context.Background())
}

func (i ServerConfigArray) ToServerConfigArrayOutputWithContext(ctx context.Context) ServerConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerConfigArrayOutput)
}

type ServerConfigOutput struct{ *pulumi.OutputState }

func (ServerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerConfig)(nil)).Elem()
}

func (o ServerConfigOutput) ToServerConfigOutput() ServerConfigOutput {
	return o
}

func (o ServerConfigOutput) ToServerConfigOutputWithContext(ctx context.Context) ServerConfigOutput {
	return o
}

func (o ServerConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ServerConfigOutput) Multiple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerConfig) *bool { return v.Multiple }).(pulumi.BoolPtrOutput)
}

func (o ServerConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServerConfig) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServerConfigOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerConfig) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o ServerConfigOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerConfig) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

func (o ServerConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServerConfig) string { return v.Type }).(pulumi.StringOutput)
}

func (o ServerConfigOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerConfig) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServerConfigArrayOutput struct{ *pulumi.OutputState }

func (ServerConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerConfig)(nil)).Elem()
}

func (o ServerConfigArrayOutput) ToServerConfigArrayOutput() ServerConfigArrayOutput {
	return o
}

func (o ServerConfigArrayOutput) ToServerConfigArrayOutputWithContext(ctx context.Context) ServerConfigArrayOutput {
	return o
}

func (o ServerConfigArrayOutput) Index(i pulumi.IntInput) ServerConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerConfig {
		return vs[0].([]ServerConfig)[vs[1].(int)]
	}).(ServerConfigOutput)
}

type ServerEnvVar struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ServerEnvVarInput is an input type that accepts ServerEnvVarArgs and ServerEnvVarOutput values.
// You can construct a concrete instance of `ServerEnvVarInput` via:
//
//	ServerEnvVarArgs{...}
type ServerEnvVarInput interface {
	pulumi.Input

	ToServerEnvVarOutput() ServerEnvVarOutput
	ToServerEnvVarOutputWithContext(context.Context) ServerEnvVarOutput
}

type ServerEnvVarArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServerEnvVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerEnvVar)(nil)).Elem()
}

func (i ServerEnvVarArgs) ToServerEnvVarOutput() ServerEnvVarOutput {
	return i.ToServerEnvVarOutputWithContext(context.Background())
}

func (i ServerEnvVarArgs) ToServerEnvVarOutputWithContext(ctx context.Context) ServerEnvVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerEnvVarOutput)
}

// ServerEnvVarArrayInput is an input type that accepts ServerEnvVarArray and ServerEnvVarArrayOutput values.
// You can construct a concrete instance of `ServerEnvVarArrayInput` via:
//
//	ServerEnvVarArray{ ServerEnvVarArgs{...} }
type ServerEnvVarArrayInput interface {
	pulumi.Input

	ToServerEnvVarArrayOutput() ServerEnvVarArrayOutput
	ToServerEnvVarArrayOutputWithContext(context.Context) ServerEnvVarArrayOutput
}

type ServerEnvVarArray []ServerEnvVarInput

func (ServerEnvVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerEnvVar)(nil)).Elem()
}

func (i ServerEnvVarArray) ToServerEnvVarArrayOutput() ServerEnvVarArrayOutput {
	return i.ToServerEnvVarArrayOutputWithContext(context.Background())
}

func (i ServerEnvVarArray) ToServerEnvVarArrayOutputWithContext(ctx context.Context) ServerEnvVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerEnvVarArrayOutput)
}

type ServerEnvVarOutput struct{ *pulumi.OutputState }

func (ServerEnvVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerEnvVar)(nil)).Elem()
}

func (o ServerEnvVarOutput) ToServerEnvVarOutput() ServerEnvVarOutput {
	return o
}

func (o ServerEnvVarOutput) ToServerEnvVarOutputWithContext(ctx context.Context) ServerEnvVarOutput {
	return o
}

func (o ServerEnvVarOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServerEnvVar) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServerEnvVarOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServerEnvVar) string { return v.Value }).(pulumi.StringOutput)
}

type ServerEnvVarArrayOutput struct{ *pulumi.OutputState }

func (ServerEnvVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerEnvVar)(nil)).Elem()
}

func (o ServerEnvVarArrayOutput) ToServerEnvVarArrayOutput() ServerEnvVarArrayOutput {
	return o
}

func (o ServerEnvVarArrayOutput) ToServerEnvVarArrayOutputWithContext(ctx context.Context) ServerEnvVarArrayOutput {
	return o
}

func (o ServerEnvVarArrayOutput) Index(i pulumi.IntInput) ServerEnvVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerEnvVar {
		return vs[0].([]ServerEnvVar)[vs[1].(int)]
	}).(ServerEnvVarOutput)
}

type ServerPort struct {
	ExposedPort  int    `pulumi:"exposedPort"`
	InternalPort int    `pulumi:"internalPort"`
	Name         string `pulumi:"name"`
	Protocol     string `pulumi:"protocol"`
}

// ServerPortInput is an input type that accepts ServerPortArgs and ServerPortOutput values.
// You can construct a concrete instance of `ServerPortInput` via:
//
//	ServerPortArgs{...}
type ServerPortInput interface {
	pulumi.Input

	ToServerPortOutput() ServerPortOutput
	ToServerPortOutputWithContext(context.Context) ServerPortOutput
}

type ServerPortArgs struct {
	ExposedPort  pulumi.IntInput    `pulumi:"exposedPort"`
	InternalPort pulumi.IntInput    `pulumi:"internalPort"`
	Name         pulumi.StringInput `pulumi:"name"`
	Protocol     pulumi.StringInput `pulumi:"protocol"`
}

func (ServerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPort)(nil)).Elem()
}

func (i ServerPortArgs) ToServerPortOutput() ServerPortOutput {
	return i.ToServerPortOutputWithContext(context.Background())
}

func (i ServerPortArgs) ToServerPortOutputWithContext(ctx context.Context) ServerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPortOutput)
}

// ServerPortArrayInput is an input type that accepts ServerPortArray and ServerPortArrayOutput values.
// You can construct a concrete instance of `ServerPortArrayInput` via:
//
//	ServerPortArray{ ServerPortArgs{...} }
type ServerPortArrayInput interface {
	pulumi.Input

	ToServerPortArrayOutput() ServerPortArrayOutput
	ToServerPortArrayOutputWithContext(context.Context) ServerPortArrayOutput
}

type ServerPortArray []ServerPortInput

func (ServerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerPort)(nil)).Elem()
}

func (i ServerPortArray) ToServerPortArrayOutput() ServerPortArrayOutput {
	return i.ToServerPortArrayOutputWithContext(context.Background())
}

func (i ServerPortArray) ToServerPortArrayOutputWithContext(ctx context.Context) ServerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPortArrayOutput)
}

type ServerPortOutput struct{ *pulumi.OutputState }

func (ServerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPort)(nil)).Elem()
}

func (o ServerPortOutput) ToServerPortOutput() ServerPortOutput {
	return o
}

func (o ServerPortOutput) ToServerPortOutputWithContext(ctx context.Context) ServerPortOutput {
	return o
}

func (o ServerPortOutput) ExposedPort() pulumi.IntOutput {
	return o.ApplyT(func(v ServerPort) int { return v.ExposedPort }).(pulumi.IntOutput)
}

func (o ServerPortOutput) InternalPort() pulumi.IntOutput {
	return o.ApplyT(func(v ServerPort) int { return v.InternalPort }).(pulumi.IntOutput)
}

func (o ServerPortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServerPort) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServerPortOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v ServerPort) string { return v.Protocol }).(pulumi.StringOutput)
}

type ServerPortArrayOutput struct{ *pulumi.OutputState }

func (ServerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerPort)(nil)).Elem()
}

func (o ServerPortArrayOutput) ToServerPortArrayOutput() ServerPortArrayOutput {
	return o
}

func (o ServerPortArrayOutput) ToServerPortArrayOutputWithContext(ctx context.Context) ServerPortArrayOutput {
	return o
}

func (o ServerPortArrayOutput) Index(i pulumi.IntInput) ServerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerPort {
		return vs[0].([]ServerPort)[vs[1].(int)]
	}).(ServerPortOutput)
}

type ServerTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// ServerTagInput is an input type that accepts ServerTagArgs and ServerTagOutput values.
// You can construct a concrete instance of `ServerTagInput` via:
//
//	ServerTagArgs{...}
type ServerTagInput interface {
	pulumi.Input

	ToServerTagOutput() ServerTagOutput
	ToServerTagOutputWithContext(context.Context) ServerTagOutput
}

type ServerTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTag)(nil)).Elem()
}

func (i ServerTagArgs) ToServerTagOutput() ServerTagOutput {
	return i.ToServerTagOutputWithContext(context.Background())
}

func (i ServerTagArgs) ToServerTagOutputWithContext(ctx context.Context) ServerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTagOutput)
}

// ServerTagArrayInput is an input type that accepts ServerTagArray and ServerTagArrayOutput values.
// You can construct a concrete instance of `ServerTagArrayInput` via:
//
//	ServerTagArray{ ServerTagArgs{...} }
type ServerTagArrayInput interface {
	pulumi.Input

	ToServerTagArrayOutput() ServerTagArrayOutput
	ToServerTagArrayOutputWithContext(context.Context) ServerTagArrayOutput
}

type ServerTagArray []ServerTagInput

func (ServerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerTag)(nil)).Elem()
}

func (i ServerTagArray) ToServerTagArrayOutput() ServerTagArrayOutput {
	return i.ToServerTagArrayOutputWithContext(context.Background())
}

func (i ServerTagArray) ToServerTagArrayOutputWithContext(ctx context.Context) ServerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTagArrayOutput)
}

type ServerTagOutput struct{ *pulumi.OutputState }

func (ServerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTag)(nil)).Elem()
}

func (o ServerTagOutput) ToServerTagOutput() ServerTagOutput {
	return o
}

func (o ServerTagOutput) ToServerTagOutputWithContext(ctx context.Context) ServerTagOutput {
	return o
}

// tag id
func (o ServerTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServerTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o ServerTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServerTag) string { return v.Name }).(pulumi.StringOutput)
}

type ServerTagArrayOutput struct{ *pulumi.OutputState }

func (ServerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerTag)(nil)).Elem()
}

func (o ServerTagArrayOutput) ToServerTagArrayOutput() ServerTagArrayOutput {
	return o
}

func (o ServerTagArrayOutput) ToServerTagArrayOutputWithContext(ctx context.Context) ServerTagArrayOutput {
	return o
}

func (o ServerTagArrayOutput) Index(i pulumi.IntInput) ServerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerTag {
		return vs[0].([]ServerTag)[vs[1].(int)]
	}).(ServerTagOutput)
}

type SlackGeneratorKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// SlackGeneratorKindInput is an input type that accepts SlackGeneratorKindArgs and SlackGeneratorKindOutput values.
// You can construct a concrete instance of `SlackGeneratorKindInput` via:
//
//	SlackGeneratorKindArgs{...}
type SlackGeneratorKindInput interface {
	pulumi.Input

	ToSlackGeneratorKindOutput() SlackGeneratorKindOutput
	ToSlackGeneratorKindOutputWithContext(context.Context) SlackGeneratorKindOutput
}

type SlackGeneratorKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (SlackGeneratorKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackGeneratorKind)(nil)).Elem()
}

func (i SlackGeneratorKindArgs) ToSlackGeneratorKindOutput() SlackGeneratorKindOutput {
	return i.ToSlackGeneratorKindOutputWithContext(context.Background())
}

func (i SlackGeneratorKindArgs) ToSlackGeneratorKindOutputWithContext(ctx context.Context) SlackGeneratorKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackGeneratorKindOutput)
}

// SlackGeneratorKindArrayInput is an input type that accepts SlackGeneratorKindArray and SlackGeneratorKindArrayOutput values.
// You can construct a concrete instance of `SlackGeneratorKindArrayInput` via:
//
//	SlackGeneratorKindArray{ SlackGeneratorKindArgs{...} }
type SlackGeneratorKindArrayInput interface {
	pulumi.Input

	ToSlackGeneratorKindArrayOutput() SlackGeneratorKindArrayOutput
	ToSlackGeneratorKindArrayOutputWithContext(context.Context) SlackGeneratorKindArrayOutput
}

type SlackGeneratorKindArray []SlackGeneratorKindInput

func (SlackGeneratorKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackGeneratorKind)(nil)).Elem()
}

func (i SlackGeneratorKindArray) ToSlackGeneratorKindArrayOutput() SlackGeneratorKindArrayOutput {
	return i.ToSlackGeneratorKindArrayOutputWithContext(context.Background())
}

func (i SlackGeneratorKindArray) ToSlackGeneratorKindArrayOutputWithContext(ctx context.Context) SlackGeneratorKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackGeneratorKindArrayOutput)
}

type SlackGeneratorKindOutput struct{ *pulumi.OutputState }

func (SlackGeneratorKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackGeneratorKind)(nil)).Elem()
}

func (o SlackGeneratorKindOutput) ToSlackGeneratorKindOutput() SlackGeneratorKindOutput {
	return o
}

func (o SlackGeneratorKindOutput) ToSlackGeneratorKindOutputWithContext(ctx context.Context) SlackGeneratorKindOutput {
	return o
}

// kind id
func (o SlackGeneratorKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SlackGeneratorKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o SlackGeneratorKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SlackGeneratorKind) string { return v.Name }).(pulumi.StringOutput)
}

type SlackGeneratorKindArrayOutput struct{ *pulumi.OutputState }

func (SlackGeneratorKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackGeneratorKind)(nil)).Elem()
}

func (o SlackGeneratorKindArrayOutput) ToSlackGeneratorKindArrayOutput() SlackGeneratorKindArrayOutput {
	return o
}

func (o SlackGeneratorKindArrayOutput) ToSlackGeneratorKindArrayOutputWithContext(ctx context.Context) SlackGeneratorKindArrayOutput {
	return o
}

func (o SlackGeneratorKindArrayOutput) Index(i pulumi.IntInput) SlackGeneratorKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SlackGeneratorKind {
		return vs[0].([]SlackGeneratorKind)[vs[1].(int)]
	}).(SlackGeneratorKindOutput)
}

type SlackGeneratorTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// SlackGeneratorTagInput is an input type that accepts SlackGeneratorTagArgs and SlackGeneratorTagOutput values.
// You can construct a concrete instance of `SlackGeneratorTagInput` via:
//
//	SlackGeneratorTagArgs{...}
type SlackGeneratorTagInput interface {
	pulumi.Input

	ToSlackGeneratorTagOutput() SlackGeneratorTagOutput
	ToSlackGeneratorTagOutputWithContext(context.Context) SlackGeneratorTagOutput
}

type SlackGeneratorTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (SlackGeneratorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackGeneratorTag)(nil)).Elem()
}

func (i SlackGeneratorTagArgs) ToSlackGeneratorTagOutput() SlackGeneratorTagOutput {
	return i.ToSlackGeneratorTagOutputWithContext(context.Background())
}

func (i SlackGeneratorTagArgs) ToSlackGeneratorTagOutputWithContext(ctx context.Context) SlackGeneratorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackGeneratorTagOutput)
}

// SlackGeneratorTagArrayInput is an input type that accepts SlackGeneratorTagArray and SlackGeneratorTagArrayOutput values.
// You can construct a concrete instance of `SlackGeneratorTagArrayInput` via:
//
//	SlackGeneratorTagArray{ SlackGeneratorTagArgs{...} }
type SlackGeneratorTagArrayInput interface {
	pulumi.Input

	ToSlackGeneratorTagArrayOutput() SlackGeneratorTagArrayOutput
	ToSlackGeneratorTagArrayOutputWithContext(context.Context) SlackGeneratorTagArrayOutput
}

type SlackGeneratorTagArray []SlackGeneratorTagInput

func (SlackGeneratorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackGeneratorTag)(nil)).Elem()
}

func (i SlackGeneratorTagArray) ToSlackGeneratorTagArrayOutput() SlackGeneratorTagArrayOutput {
	return i.ToSlackGeneratorTagArrayOutputWithContext(context.Background())
}

func (i SlackGeneratorTagArray) ToSlackGeneratorTagArrayOutputWithContext(ctx context.Context) SlackGeneratorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackGeneratorTagArrayOutput)
}

type SlackGeneratorTagOutput struct{ *pulumi.OutputState }

func (SlackGeneratorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackGeneratorTag)(nil)).Elem()
}

func (o SlackGeneratorTagOutput) ToSlackGeneratorTagOutput() SlackGeneratorTagOutput {
	return o
}

func (o SlackGeneratorTagOutput) ToSlackGeneratorTagOutputWithContext(ctx context.Context) SlackGeneratorTagOutput {
	return o
}

// tag id
func (o SlackGeneratorTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SlackGeneratorTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o SlackGeneratorTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SlackGeneratorTag) string { return v.Name }).(pulumi.StringOutput)
}

type SlackGeneratorTagArrayOutput struct{ *pulumi.OutputState }

func (SlackGeneratorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackGeneratorTag)(nil)).Elem()
}

func (o SlackGeneratorTagArrayOutput) ToSlackGeneratorTagArrayOutput() SlackGeneratorTagArrayOutput {
	return o
}

func (o SlackGeneratorTagArrayOutput) ToSlackGeneratorTagArrayOutputWithContext(ctx context.Context) SlackGeneratorTagArrayOutput {
	return o
}

func (o SlackGeneratorTagArrayOutput) Index(i pulumi.IntInput) SlackGeneratorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SlackGeneratorTag {
		return vs[0].([]SlackGeneratorTag)[vs[1].(int)]
	}).(SlackGeneratorTagOutput)
}

type SlackLineKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// SlackLineKindInput is an input type that accepts SlackLineKindArgs and SlackLineKindOutput values.
// You can construct a concrete instance of `SlackLineKindInput` via:
//
//	SlackLineKindArgs{...}
type SlackLineKindInput interface {
	pulumi.Input

	ToSlackLineKindOutput() SlackLineKindOutput
	ToSlackLineKindOutputWithContext(context.Context) SlackLineKindOutput
}

type SlackLineKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (SlackLineKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackLineKind)(nil)).Elem()
}

func (i SlackLineKindArgs) ToSlackLineKindOutput() SlackLineKindOutput {
	return i.ToSlackLineKindOutputWithContext(context.Background())
}

func (i SlackLineKindArgs) ToSlackLineKindOutputWithContext(ctx context.Context) SlackLineKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackLineKindOutput)
}

// SlackLineKindArrayInput is an input type that accepts SlackLineKindArray and SlackLineKindArrayOutput values.
// You can construct a concrete instance of `SlackLineKindArrayInput` via:
//
//	SlackLineKindArray{ SlackLineKindArgs{...} }
type SlackLineKindArrayInput interface {
	pulumi.Input

	ToSlackLineKindArrayOutput() SlackLineKindArrayOutput
	ToSlackLineKindArrayOutputWithContext(context.Context) SlackLineKindArrayOutput
}

type SlackLineKindArray []SlackLineKindInput

func (SlackLineKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackLineKind)(nil)).Elem()
}

func (i SlackLineKindArray) ToSlackLineKindArrayOutput() SlackLineKindArrayOutput {
	return i.ToSlackLineKindArrayOutputWithContext(context.Background())
}

func (i SlackLineKindArray) ToSlackLineKindArrayOutputWithContext(ctx context.Context) SlackLineKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackLineKindArrayOutput)
}

type SlackLineKindOutput struct{ *pulumi.OutputState }

func (SlackLineKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackLineKind)(nil)).Elem()
}

func (o SlackLineKindOutput) ToSlackLineKindOutput() SlackLineKindOutput {
	return o
}

func (o SlackLineKindOutput) ToSlackLineKindOutputWithContext(ctx context.Context) SlackLineKindOutput {
	return o
}

// kind id
func (o SlackLineKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SlackLineKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o SlackLineKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SlackLineKind) string { return v.Name }).(pulumi.StringOutput)
}

type SlackLineKindArrayOutput struct{ *pulumi.OutputState }

func (SlackLineKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackLineKind)(nil)).Elem()
}

func (o SlackLineKindArrayOutput) ToSlackLineKindArrayOutput() SlackLineKindArrayOutput {
	return o
}

func (o SlackLineKindArrayOutput) ToSlackLineKindArrayOutputWithContext(ctx context.Context) SlackLineKindArrayOutput {
	return o
}

func (o SlackLineKindArrayOutput) Index(i pulumi.IntInput) SlackLineKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SlackLineKind {
		return vs[0].([]SlackLineKind)[vs[1].(int)]
	}).(SlackLineKindOutput)
}

type SlackLineSwitchStatusEnd struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// SlackLineSwitchStatusEndInput is an input type that accepts SlackLineSwitchStatusEndArgs and SlackLineSwitchStatusEndOutput values.
// You can construct a concrete instance of `SlackLineSwitchStatusEndInput` via:
//
//	SlackLineSwitchStatusEndArgs{...}
type SlackLineSwitchStatusEndInput interface {
	pulumi.Input

	ToSlackLineSwitchStatusEndOutput() SlackLineSwitchStatusEndOutput
	ToSlackLineSwitchStatusEndOutputWithContext(context.Context) SlackLineSwitchStatusEndOutput
}

type SlackLineSwitchStatusEndArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (SlackLineSwitchStatusEndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackLineSwitchStatusEnd)(nil)).Elem()
}

func (i SlackLineSwitchStatusEndArgs) ToSlackLineSwitchStatusEndOutput() SlackLineSwitchStatusEndOutput {
	return i.ToSlackLineSwitchStatusEndOutputWithContext(context.Background())
}

func (i SlackLineSwitchStatusEndArgs) ToSlackLineSwitchStatusEndOutputWithContext(ctx context.Context) SlackLineSwitchStatusEndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackLineSwitchStatusEndOutput)
}

// SlackLineSwitchStatusEndArrayInput is an input type that accepts SlackLineSwitchStatusEndArray and SlackLineSwitchStatusEndArrayOutput values.
// You can construct a concrete instance of `SlackLineSwitchStatusEndArrayInput` via:
//
//	SlackLineSwitchStatusEndArray{ SlackLineSwitchStatusEndArgs{...} }
type SlackLineSwitchStatusEndArrayInput interface {
	pulumi.Input

	ToSlackLineSwitchStatusEndArrayOutput() SlackLineSwitchStatusEndArrayOutput
	ToSlackLineSwitchStatusEndArrayOutputWithContext(context.Context) SlackLineSwitchStatusEndArrayOutput
}

type SlackLineSwitchStatusEndArray []SlackLineSwitchStatusEndInput

func (SlackLineSwitchStatusEndArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackLineSwitchStatusEnd)(nil)).Elem()
}

func (i SlackLineSwitchStatusEndArray) ToSlackLineSwitchStatusEndArrayOutput() SlackLineSwitchStatusEndArrayOutput {
	return i.ToSlackLineSwitchStatusEndArrayOutputWithContext(context.Background())
}

func (i SlackLineSwitchStatusEndArray) ToSlackLineSwitchStatusEndArrayOutputWithContext(ctx context.Context) SlackLineSwitchStatusEndArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackLineSwitchStatusEndArrayOutput)
}

type SlackLineSwitchStatusEndOutput struct{ *pulumi.OutputState }

func (SlackLineSwitchStatusEndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackLineSwitchStatusEnd)(nil)).Elem()
}

func (o SlackLineSwitchStatusEndOutput) ToSlackLineSwitchStatusEndOutput() SlackLineSwitchStatusEndOutput {
	return o
}

func (o SlackLineSwitchStatusEndOutput) ToSlackLineSwitchStatusEndOutputWithContext(ctx context.Context) SlackLineSwitchStatusEndOutput {
	return o
}

// reference to the asset to be linked to
func (o SlackLineSwitchStatusEndOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlackLineSwitchStatusEnd) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SlackLineSwitchStatusEndOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlackLineSwitchStatusEnd) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SlackLineSwitchStatusEndOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlackLineSwitchStatusEnd) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SlackLineSwitchStatusEndOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlackLineSwitchStatusEnd) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SlackLineSwitchStatusEndOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlackLineSwitchStatusEnd) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type SlackLineSwitchStatusEndArrayOutput struct{ *pulumi.OutputState }

func (SlackLineSwitchStatusEndArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackLineSwitchStatusEnd)(nil)).Elem()
}

func (o SlackLineSwitchStatusEndArrayOutput) ToSlackLineSwitchStatusEndArrayOutput() SlackLineSwitchStatusEndArrayOutput {
	return o
}

func (o SlackLineSwitchStatusEndArrayOutput) ToSlackLineSwitchStatusEndArrayOutputWithContext(ctx context.Context) SlackLineSwitchStatusEndArrayOutput {
	return o
}

func (o SlackLineSwitchStatusEndArrayOutput) Index(i pulumi.IntInput) SlackLineSwitchStatusEndOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SlackLineSwitchStatusEnd {
		return vs[0].([]SlackLineSwitchStatusEnd)[vs[1].(int)]
	}).(SlackLineSwitchStatusEndOutput)
}

type SlackLineSwitchStatusStart struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// SlackLineSwitchStatusStartInput is an input type that accepts SlackLineSwitchStatusStartArgs and SlackLineSwitchStatusStartOutput values.
// You can construct a concrete instance of `SlackLineSwitchStatusStartInput` via:
//
//	SlackLineSwitchStatusStartArgs{...}
type SlackLineSwitchStatusStartInput interface {
	pulumi.Input

	ToSlackLineSwitchStatusStartOutput() SlackLineSwitchStatusStartOutput
	ToSlackLineSwitchStatusStartOutputWithContext(context.Context) SlackLineSwitchStatusStartOutput
}

type SlackLineSwitchStatusStartArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (SlackLineSwitchStatusStartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackLineSwitchStatusStart)(nil)).Elem()
}

func (i SlackLineSwitchStatusStartArgs) ToSlackLineSwitchStatusStartOutput() SlackLineSwitchStatusStartOutput {
	return i.ToSlackLineSwitchStatusStartOutputWithContext(context.Background())
}

func (i SlackLineSwitchStatusStartArgs) ToSlackLineSwitchStatusStartOutputWithContext(ctx context.Context) SlackLineSwitchStatusStartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackLineSwitchStatusStartOutput)
}

// SlackLineSwitchStatusStartArrayInput is an input type that accepts SlackLineSwitchStatusStartArray and SlackLineSwitchStatusStartArrayOutput values.
// You can construct a concrete instance of `SlackLineSwitchStatusStartArrayInput` via:
//
//	SlackLineSwitchStatusStartArray{ SlackLineSwitchStatusStartArgs{...} }
type SlackLineSwitchStatusStartArrayInput interface {
	pulumi.Input

	ToSlackLineSwitchStatusStartArrayOutput() SlackLineSwitchStatusStartArrayOutput
	ToSlackLineSwitchStatusStartArrayOutputWithContext(context.Context) SlackLineSwitchStatusStartArrayOutput
}

type SlackLineSwitchStatusStartArray []SlackLineSwitchStatusStartInput

func (SlackLineSwitchStatusStartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackLineSwitchStatusStart)(nil)).Elem()
}

func (i SlackLineSwitchStatusStartArray) ToSlackLineSwitchStatusStartArrayOutput() SlackLineSwitchStatusStartArrayOutput {
	return i.ToSlackLineSwitchStatusStartArrayOutputWithContext(context.Background())
}

func (i SlackLineSwitchStatusStartArray) ToSlackLineSwitchStatusStartArrayOutputWithContext(ctx context.Context) SlackLineSwitchStatusStartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackLineSwitchStatusStartArrayOutput)
}

type SlackLineSwitchStatusStartOutput struct{ *pulumi.OutputState }

func (SlackLineSwitchStatusStartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackLineSwitchStatusStart)(nil)).Elem()
}

func (o SlackLineSwitchStatusStartOutput) ToSlackLineSwitchStatusStartOutput() SlackLineSwitchStatusStartOutput {
	return o
}

func (o SlackLineSwitchStatusStartOutput) ToSlackLineSwitchStatusStartOutputWithContext(ctx context.Context) SlackLineSwitchStatusStartOutput {
	return o
}

// reference to the asset to be linked to
func (o SlackLineSwitchStatusStartOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlackLineSwitchStatusStart) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o SlackLineSwitchStatusStartOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlackLineSwitchStatusStart) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o SlackLineSwitchStatusStartOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlackLineSwitchStatusStart) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o SlackLineSwitchStatusStartOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlackLineSwitchStatusStart) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o SlackLineSwitchStatusStartOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlackLineSwitchStatusStart) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type SlackLineSwitchStatusStartArrayOutput struct{ *pulumi.OutputState }

func (SlackLineSwitchStatusStartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackLineSwitchStatusStart)(nil)).Elem()
}

func (o SlackLineSwitchStatusStartArrayOutput) ToSlackLineSwitchStatusStartArrayOutput() SlackLineSwitchStatusStartArrayOutput {
	return o
}

func (o SlackLineSwitchStatusStartArrayOutput) ToSlackLineSwitchStatusStartArrayOutputWithContext(ctx context.Context) SlackLineSwitchStatusStartArrayOutput {
	return o
}

func (o SlackLineSwitchStatusStartArrayOutput) Index(i pulumi.IntInput) SlackLineSwitchStatusStartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SlackLineSwitchStatusStart {
		return vs[0].([]SlackLineSwitchStatusStart)[vs[1].(int)]
	}).(SlackLineSwitchStatusStartOutput)
}

type SlackLineTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// SlackLineTagInput is an input type that accepts SlackLineTagArgs and SlackLineTagOutput values.
// You can construct a concrete instance of `SlackLineTagInput` via:
//
//	SlackLineTagArgs{...}
type SlackLineTagInput interface {
	pulumi.Input

	ToSlackLineTagOutput() SlackLineTagOutput
	ToSlackLineTagOutputWithContext(context.Context) SlackLineTagOutput
}

type SlackLineTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (SlackLineTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackLineTag)(nil)).Elem()
}

func (i SlackLineTagArgs) ToSlackLineTagOutput() SlackLineTagOutput {
	return i.ToSlackLineTagOutputWithContext(context.Background())
}

func (i SlackLineTagArgs) ToSlackLineTagOutputWithContext(ctx context.Context) SlackLineTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackLineTagOutput)
}

// SlackLineTagArrayInput is an input type that accepts SlackLineTagArray and SlackLineTagArrayOutput values.
// You can construct a concrete instance of `SlackLineTagArrayInput` via:
//
//	SlackLineTagArray{ SlackLineTagArgs{...} }
type SlackLineTagArrayInput interface {
	pulumi.Input

	ToSlackLineTagArrayOutput() SlackLineTagArrayOutput
	ToSlackLineTagArrayOutputWithContext(context.Context) SlackLineTagArrayOutput
}

type SlackLineTagArray []SlackLineTagInput

func (SlackLineTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackLineTag)(nil)).Elem()
}

func (i SlackLineTagArray) ToSlackLineTagArrayOutput() SlackLineTagArrayOutput {
	return i.ToSlackLineTagArrayOutputWithContext(context.Background())
}

func (i SlackLineTagArray) ToSlackLineTagArrayOutputWithContext(ctx context.Context) SlackLineTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackLineTagArrayOutput)
}

type SlackLineTagOutput struct{ *pulumi.OutputState }

func (SlackLineTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackLineTag)(nil)).Elem()
}

func (o SlackLineTagOutput) ToSlackLineTagOutput() SlackLineTagOutput {
	return o
}

func (o SlackLineTagOutput) ToSlackLineTagOutputWithContext(ctx context.Context) SlackLineTagOutput {
	return o
}

// tag id
func (o SlackLineTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SlackLineTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o SlackLineTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SlackLineTag) string { return v.Name }).(pulumi.StringOutput)
}

type SlackLineTagArrayOutput struct{ *pulumi.OutputState }

func (SlackLineTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackLineTag)(nil)).Elem()
}

func (o SlackLineTagArrayOutput) ToSlackLineTagArrayOutput() SlackLineTagArrayOutput {
	return o
}

func (o SlackLineTagArrayOutput) ToSlackLineTagArrayOutputWithContext(ctx context.Context) SlackLineTagArrayOutput {
	return o
}

func (o SlackLineTagArrayOutput) Index(i pulumi.IntInput) SlackLineTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SlackLineTag {
		return vs[0].([]SlackLineTag)[vs[1].(int)]
	}).(SlackLineTagOutput)
}

type TransformerActivePowerHv struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerActivePowerHvInput is an input type that accepts TransformerActivePowerHvArgs and TransformerActivePowerHvOutput values.
// You can construct a concrete instance of `TransformerActivePowerHvInput` via:
//
//	TransformerActivePowerHvArgs{...}
type TransformerActivePowerHvInput interface {
	pulumi.Input

	ToTransformerActivePowerHvOutput() TransformerActivePowerHvOutput
	ToTransformerActivePowerHvOutputWithContext(context.Context) TransformerActivePowerHvOutput
}

type TransformerActivePowerHvArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerActivePowerHvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerActivePowerHv)(nil)).Elem()
}

func (i TransformerActivePowerHvArgs) ToTransformerActivePowerHvOutput() TransformerActivePowerHvOutput {
	return i.ToTransformerActivePowerHvOutputWithContext(context.Background())
}

func (i TransformerActivePowerHvArgs) ToTransformerActivePowerHvOutputWithContext(ctx context.Context) TransformerActivePowerHvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerActivePowerHvOutput)
}

// TransformerActivePowerHvArrayInput is an input type that accepts TransformerActivePowerHvArray and TransformerActivePowerHvArrayOutput values.
// You can construct a concrete instance of `TransformerActivePowerHvArrayInput` via:
//
//	TransformerActivePowerHvArray{ TransformerActivePowerHvArgs{...} }
type TransformerActivePowerHvArrayInput interface {
	pulumi.Input

	ToTransformerActivePowerHvArrayOutput() TransformerActivePowerHvArrayOutput
	ToTransformerActivePowerHvArrayOutputWithContext(context.Context) TransformerActivePowerHvArrayOutput
}

type TransformerActivePowerHvArray []TransformerActivePowerHvInput

func (TransformerActivePowerHvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerActivePowerHv)(nil)).Elem()
}

func (i TransformerActivePowerHvArray) ToTransformerActivePowerHvArrayOutput() TransformerActivePowerHvArrayOutput {
	return i.ToTransformerActivePowerHvArrayOutputWithContext(context.Background())
}

func (i TransformerActivePowerHvArray) ToTransformerActivePowerHvArrayOutputWithContext(ctx context.Context) TransformerActivePowerHvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerActivePowerHvArrayOutput)
}

type TransformerActivePowerHvOutput struct{ *pulumi.OutputState }

func (TransformerActivePowerHvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerActivePowerHv)(nil)).Elem()
}

func (o TransformerActivePowerHvOutput) ToTransformerActivePowerHvOutput() TransformerActivePowerHvOutput {
	return o
}

func (o TransformerActivePowerHvOutput) ToTransformerActivePowerHvOutputWithContext(ctx context.Context) TransformerActivePowerHvOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerActivePowerHvOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerHv) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerActivePowerHvOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerHv) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerActivePowerHvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerHv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerActivePowerHvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerHv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerActivePowerHvOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerHv) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerActivePowerHvArrayOutput struct{ *pulumi.OutputState }

func (TransformerActivePowerHvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerActivePowerHv)(nil)).Elem()
}

func (o TransformerActivePowerHvArrayOutput) ToTransformerActivePowerHvArrayOutput() TransformerActivePowerHvArrayOutput {
	return o
}

func (o TransformerActivePowerHvArrayOutput) ToTransformerActivePowerHvArrayOutputWithContext(ctx context.Context) TransformerActivePowerHvArrayOutput {
	return o
}

func (o TransformerActivePowerHvArrayOutput) Index(i pulumi.IntInput) TransformerActivePowerHvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerActivePowerHv {
		return vs[0].([]TransformerActivePowerHv)[vs[1].(int)]
	}).(TransformerActivePowerHvOutput)
}

type TransformerActivePowerLoss struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerActivePowerLossInput is an input type that accepts TransformerActivePowerLossArgs and TransformerActivePowerLossOutput values.
// You can construct a concrete instance of `TransformerActivePowerLossInput` via:
//
//	TransformerActivePowerLossArgs{...}
type TransformerActivePowerLossInput interface {
	pulumi.Input

	ToTransformerActivePowerLossOutput() TransformerActivePowerLossOutput
	ToTransformerActivePowerLossOutputWithContext(context.Context) TransformerActivePowerLossOutput
}

type TransformerActivePowerLossArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerActivePowerLossArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerActivePowerLoss)(nil)).Elem()
}

func (i TransformerActivePowerLossArgs) ToTransformerActivePowerLossOutput() TransformerActivePowerLossOutput {
	return i.ToTransformerActivePowerLossOutputWithContext(context.Background())
}

func (i TransformerActivePowerLossArgs) ToTransformerActivePowerLossOutputWithContext(ctx context.Context) TransformerActivePowerLossOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerActivePowerLossOutput)
}

// TransformerActivePowerLossArrayInput is an input type that accepts TransformerActivePowerLossArray and TransformerActivePowerLossArrayOutput values.
// You can construct a concrete instance of `TransformerActivePowerLossArrayInput` via:
//
//	TransformerActivePowerLossArray{ TransformerActivePowerLossArgs{...} }
type TransformerActivePowerLossArrayInput interface {
	pulumi.Input

	ToTransformerActivePowerLossArrayOutput() TransformerActivePowerLossArrayOutput
	ToTransformerActivePowerLossArrayOutputWithContext(context.Context) TransformerActivePowerLossArrayOutput
}

type TransformerActivePowerLossArray []TransformerActivePowerLossInput

func (TransformerActivePowerLossArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerActivePowerLoss)(nil)).Elem()
}

func (i TransformerActivePowerLossArray) ToTransformerActivePowerLossArrayOutput() TransformerActivePowerLossArrayOutput {
	return i.ToTransformerActivePowerLossArrayOutputWithContext(context.Background())
}

func (i TransformerActivePowerLossArray) ToTransformerActivePowerLossArrayOutputWithContext(ctx context.Context) TransformerActivePowerLossArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerActivePowerLossArrayOutput)
}

type TransformerActivePowerLossOutput struct{ *pulumi.OutputState }

func (TransformerActivePowerLossOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerActivePowerLoss)(nil)).Elem()
}

func (o TransformerActivePowerLossOutput) ToTransformerActivePowerLossOutput() TransformerActivePowerLossOutput {
	return o
}

func (o TransformerActivePowerLossOutput) ToTransformerActivePowerLossOutputWithContext(ctx context.Context) TransformerActivePowerLossOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerActivePowerLossOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerLoss) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerActivePowerLossOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerLoss) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerActivePowerLossOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerLoss) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerActivePowerLossOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerLoss) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerActivePowerLossOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerLoss) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerActivePowerLossArrayOutput struct{ *pulumi.OutputState }

func (TransformerActivePowerLossArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerActivePowerLoss)(nil)).Elem()
}

func (o TransformerActivePowerLossArrayOutput) ToTransformerActivePowerLossArrayOutput() TransformerActivePowerLossArrayOutput {
	return o
}

func (o TransformerActivePowerLossArrayOutput) ToTransformerActivePowerLossArrayOutputWithContext(ctx context.Context) TransformerActivePowerLossArrayOutput {
	return o
}

func (o TransformerActivePowerLossArrayOutput) Index(i pulumi.IntInput) TransformerActivePowerLossOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerActivePowerLoss {
		return vs[0].([]TransformerActivePowerLoss)[vs[1].(int)]
	}).(TransformerActivePowerLossOutput)
}

type TransformerActivePowerLv struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerActivePowerLvInput is an input type that accepts TransformerActivePowerLvArgs and TransformerActivePowerLvOutput values.
// You can construct a concrete instance of `TransformerActivePowerLvInput` via:
//
//	TransformerActivePowerLvArgs{...}
type TransformerActivePowerLvInput interface {
	pulumi.Input

	ToTransformerActivePowerLvOutput() TransformerActivePowerLvOutput
	ToTransformerActivePowerLvOutputWithContext(context.Context) TransformerActivePowerLvOutput
}

type TransformerActivePowerLvArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerActivePowerLvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerActivePowerLv)(nil)).Elem()
}

func (i TransformerActivePowerLvArgs) ToTransformerActivePowerLvOutput() TransformerActivePowerLvOutput {
	return i.ToTransformerActivePowerLvOutputWithContext(context.Background())
}

func (i TransformerActivePowerLvArgs) ToTransformerActivePowerLvOutputWithContext(ctx context.Context) TransformerActivePowerLvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerActivePowerLvOutput)
}

// TransformerActivePowerLvArrayInput is an input type that accepts TransformerActivePowerLvArray and TransformerActivePowerLvArrayOutput values.
// You can construct a concrete instance of `TransformerActivePowerLvArrayInput` via:
//
//	TransformerActivePowerLvArray{ TransformerActivePowerLvArgs{...} }
type TransformerActivePowerLvArrayInput interface {
	pulumi.Input

	ToTransformerActivePowerLvArrayOutput() TransformerActivePowerLvArrayOutput
	ToTransformerActivePowerLvArrayOutputWithContext(context.Context) TransformerActivePowerLvArrayOutput
}

type TransformerActivePowerLvArray []TransformerActivePowerLvInput

func (TransformerActivePowerLvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerActivePowerLv)(nil)).Elem()
}

func (i TransformerActivePowerLvArray) ToTransformerActivePowerLvArrayOutput() TransformerActivePowerLvArrayOutput {
	return i.ToTransformerActivePowerLvArrayOutputWithContext(context.Background())
}

func (i TransformerActivePowerLvArray) ToTransformerActivePowerLvArrayOutputWithContext(ctx context.Context) TransformerActivePowerLvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerActivePowerLvArrayOutput)
}

type TransformerActivePowerLvOutput struct{ *pulumi.OutputState }

func (TransformerActivePowerLvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerActivePowerLv)(nil)).Elem()
}

func (o TransformerActivePowerLvOutput) ToTransformerActivePowerLvOutput() TransformerActivePowerLvOutput {
	return o
}

func (o TransformerActivePowerLvOutput) ToTransformerActivePowerLvOutputWithContext(ctx context.Context) TransformerActivePowerLvOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerActivePowerLvOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerLv) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerActivePowerLvOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerLv) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerActivePowerLvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerLv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerActivePowerLvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerLv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerActivePowerLvOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerActivePowerLv) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerActivePowerLvArrayOutput struct{ *pulumi.OutputState }

func (TransformerActivePowerLvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerActivePowerLv)(nil)).Elem()
}

func (o TransformerActivePowerLvArrayOutput) ToTransformerActivePowerLvArrayOutput() TransformerActivePowerLvArrayOutput {
	return o
}

func (o TransformerActivePowerLvArrayOutput) ToTransformerActivePowerLvArrayOutputWithContext(ctx context.Context) TransformerActivePowerLvArrayOutput {
	return o
}

func (o TransformerActivePowerLvArrayOutput) Index(i pulumi.IntInput) TransformerActivePowerLvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerActivePowerLv {
		return vs[0].([]TransformerActivePowerLv)[vs[1].(int)]
	}).(TransformerActivePowerLvOutput)
}

type TransformerCapacitance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// TransformerCapacitanceInput is an input type that accepts TransformerCapacitanceArgs and TransformerCapacitanceOutput values.
// You can construct a concrete instance of `TransformerCapacitanceInput` via:
//
//	TransformerCapacitanceArgs{...}
type TransformerCapacitanceInput interface {
	pulumi.Input

	ToTransformerCapacitanceOutput() TransformerCapacitanceOutput
	ToTransformerCapacitanceOutputWithContext(context.Context) TransformerCapacitanceOutput
}

type TransformerCapacitanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TransformerCapacitanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerCapacitance)(nil)).Elem()
}

func (i TransformerCapacitanceArgs) ToTransformerCapacitanceOutput() TransformerCapacitanceOutput {
	return i.ToTransformerCapacitanceOutputWithContext(context.Background())
}

func (i TransformerCapacitanceArgs) ToTransformerCapacitanceOutputWithContext(ctx context.Context) TransformerCapacitanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerCapacitanceOutput)
}

func (i TransformerCapacitanceArgs) ToTransformerCapacitancePtrOutput() TransformerCapacitancePtrOutput {
	return i.ToTransformerCapacitancePtrOutputWithContext(context.Background())
}

func (i TransformerCapacitanceArgs) ToTransformerCapacitancePtrOutputWithContext(ctx context.Context) TransformerCapacitancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerCapacitanceOutput).ToTransformerCapacitancePtrOutputWithContext(ctx)
}

// TransformerCapacitancePtrInput is an input type that accepts TransformerCapacitanceArgs, TransformerCapacitancePtr and TransformerCapacitancePtrOutput values.
// You can construct a concrete instance of `TransformerCapacitancePtrInput` via:
//
//	        TransformerCapacitanceArgs{...}
//
//	or:
//
//	        nil
type TransformerCapacitancePtrInput interface {
	pulumi.Input

	ToTransformerCapacitancePtrOutput() TransformerCapacitancePtrOutput
	ToTransformerCapacitancePtrOutputWithContext(context.Context) TransformerCapacitancePtrOutput
}

type transformerCapacitancePtrType TransformerCapacitanceArgs

func TransformerCapacitancePtr(v *TransformerCapacitanceArgs) TransformerCapacitancePtrInput {
	return (*transformerCapacitancePtrType)(v)
}

func (*transformerCapacitancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerCapacitance)(nil)).Elem()
}

func (i *transformerCapacitancePtrType) ToTransformerCapacitancePtrOutput() TransformerCapacitancePtrOutput {
	return i.ToTransformerCapacitancePtrOutputWithContext(context.Background())
}

func (i *transformerCapacitancePtrType) ToTransformerCapacitancePtrOutputWithContext(ctx context.Context) TransformerCapacitancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerCapacitancePtrOutput)
}

type TransformerCapacitanceOutput struct{ *pulumi.OutputState }

func (TransformerCapacitanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerCapacitance)(nil)).Elem()
}

func (o TransformerCapacitanceOutput) ToTransformerCapacitanceOutput() TransformerCapacitanceOutput {
	return o
}

func (o TransformerCapacitanceOutput) ToTransformerCapacitanceOutputWithContext(ctx context.Context) TransformerCapacitanceOutput {
	return o
}

func (o TransformerCapacitanceOutput) ToTransformerCapacitancePtrOutput() TransformerCapacitancePtrOutput {
	return o.ToTransformerCapacitancePtrOutputWithContext(context.Background())
}

func (o TransformerCapacitanceOutput) ToTransformerCapacitancePtrOutputWithContext(ctx context.Context) TransformerCapacitancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerCapacitance) *TransformerCapacitance {
		return &v
	}).(TransformerCapacitancePtrOutput)
}

// reference to the asset to be linked to
func (o TransformerCapacitanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCapacitance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerCapacitanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCapacitance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerCapacitanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCapacitance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerCapacitanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCapacitance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerCapacitanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCapacitance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerCapacitanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCapacitance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TransformerCapacitancePtrOutput struct{ *pulumi.OutputState }

func (TransformerCapacitancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerCapacitance)(nil)).Elem()
}

func (o TransformerCapacitancePtrOutput) ToTransformerCapacitancePtrOutput() TransformerCapacitancePtrOutput {
	return o
}

func (o TransformerCapacitancePtrOutput) ToTransformerCapacitancePtrOutputWithContext(ctx context.Context) TransformerCapacitancePtrOutput {
	return o
}

func (o TransformerCapacitancePtrOutput) Elem() TransformerCapacitanceOutput {
	return o.ApplyT(func(v *TransformerCapacitance) TransformerCapacitance {
		if v != nil {
			return *v
		}
		var ret TransformerCapacitance
		return ret
	}).(TransformerCapacitanceOutput)
}

// reference to the asset to be linked to
func (o TransformerCapacitancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerCapacitancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerCapacitancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerCapacitancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerCapacitancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerCapacitancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerCapacitance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TransformerConductance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// TransformerConductanceInput is an input type that accepts TransformerConductanceArgs and TransformerConductanceOutput values.
// You can construct a concrete instance of `TransformerConductanceInput` via:
//
//	TransformerConductanceArgs{...}
type TransformerConductanceInput interface {
	pulumi.Input

	ToTransformerConductanceOutput() TransformerConductanceOutput
	ToTransformerConductanceOutputWithContext(context.Context) TransformerConductanceOutput
}

type TransformerConductanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TransformerConductanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerConductance)(nil)).Elem()
}

func (i TransformerConductanceArgs) ToTransformerConductanceOutput() TransformerConductanceOutput {
	return i.ToTransformerConductanceOutputWithContext(context.Background())
}

func (i TransformerConductanceArgs) ToTransformerConductanceOutputWithContext(ctx context.Context) TransformerConductanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerConductanceOutput)
}

func (i TransformerConductanceArgs) ToTransformerConductancePtrOutput() TransformerConductancePtrOutput {
	return i.ToTransformerConductancePtrOutputWithContext(context.Background())
}

func (i TransformerConductanceArgs) ToTransformerConductancePtrOutputWithContext(ctx context.Context) TransformerConductancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerConductanceOutput).ToTransformerConductancePtrOutputWithContext(ctx)
}

// TransformerConductancePtrInput is an input type that accepts TransformerConductanceArgs, TransformerConductancePtr and TransformerConductancePtrOutput values.
// You can construct a concrete instance of `TransformerConductancePtrInput` via:
//
//	        TransformerConductanceArgs{...}
//
//	or:
//
//	        nil
type TransformerConductancePtrInput interface {
	pulumi.Input

	ToTransformerConductancePtrOutput() TransformerConductancePtrOutput
	ToTransformerConductancePtrOutputWithContext(context.Context) TransformerConductancePtrOutput
}

type transformerConductancePtrType TransformerConductanceArgs

func TransformerConductancePtr(v *TransformerConductanceArgs) TransformerConductancePtrInput {
	return (*transformerConductancePtrType)(v)
}

func (*transformerConductancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerConductance)(nil)).Elem()
}

func (i *transformerConductancePtrType) ToTransformerConductancePtrOutput() TransformerConductancePtrOutput {
	return i.ToTransformerConductancePtrOutputWithContext(context.Background())
}

func (i *transformerConductancePtrType) ToTransformerConductancePtrOutputWithContext(ctx context.Context) TransformerConductancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerConductancePtrOutput)
}

type TransformerConductanceOutput struct{ *pulumi.OutputState }

func (TransformerConductanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerConductance)(nil)).Elem()
}

func (o TransformerConductanceOutput) ToTransformerConductanceOutput() TransformerConductanceOutput {
	return o
}

func (o TransformerConductanceOutput) ToTransformerConductanceOutputWithContext(ctx context.Context) TransformerConductanceOutput {
	return o
}

func (o TransformerConductanceOutput) ToTransformerConductancePtrOutput() TransformerConductancePtrOutput {
	return o.ToTransformerConductancePtrOutputWithContext(context.Background())
}

func (o TransformerConductanceOutput) ToTransformerConductancePtrOutputWithContext(ctx context.Context) TransformerConductancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerConductance) *TransformerConductance {
		return &v
	}).(TransformerConductancePtrOutput)
}

// reference to the asset to be linked to
func (o TransformerConductanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerConductance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerConductanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerConductance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerConductanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerConductance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerConductanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerConductance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerConductanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerConductance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerConductanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerConductance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TransformerConductancePtrOutput struct{ *pulumi.OutputState }

func (TransformerConductancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerConductance)(nil)).Elem()
}

func (o TransformerConductancePtrOutput) ToTransformerConductancePtrOutput() TransformerConductancePtrOutput {
	return o
}

func (o TransformerConductancePtrOutput) ToTransformerConductancePtrOutputWithContext(ctx context.Context) TransformerConductancePtrOutput {
	return o
}

func (o TransformerConductancePtrOutput) Elem() TransformerConductanceOutput {
	return o.ApplyT(func(v *TransformerConductance) TransformerConductance {
		if v != nil {
			return *v
		}
		var ret TransformerConductance
		return ret
	}).(TransformerConductanceOutput)
}

// reference to the asset to be linked to
func (o TransformerConductancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerConductance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerConductancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerConductance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerConductancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerConductance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerConductancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerConductance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerConductancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerConductance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerConductancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerConductance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TransformerContingency struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerContingencyInput is an input type that accepts TransformerContingencyArgs and TransformerContingencyOutput values.
// You can construct a concrete instance of `TransformerContingencyInput` via:
//
//	TransformerContingencyArgs{...}
type TransformerContingencyInput interface {
	pulumi.Input

	ToTransformerContingencyOutput() TransformerContingencyOutput
	ToTransformerContingencyOutputWithContext(context.Context) TransformerContingencyOutput
}

type TransformerContingencyArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerContingencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerContingency)(nil)).Elem()
}

func (i TransformerContingencyArgs) ToTransformerContingencyOutput() TransformerContingencyOutput {
	return i.ToTransformerContingencyOutputWithContext(context.Background())
}

func (i TransformerContingencyArgs) ToTransformerContingencyOutputWithContext(ctx context.Context) TransformerContingencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerContingencyOutput)
}

// TransformerContingencyArrayInput is an input type that accepts TransformerContingencyArray and TransformerContingencyArrayOutput values.
// You can construct a concrete instance of `TransformerContingencyArrayInput` via:
//
//	TransformerContingencyArray{ TransformerContingencyArgs{...} }
type TransformerContingencyArrayInput interface {
	pulumi.Input

	ToTransformerContingencyArrayOutput() TransformerContingencyArrayOutput
	ToTransformerContingencyArrayOutputWithContext(context.Context) TransformerContingencyArrayOutput
}

type TransformerContingencyArray []TransformerContingencyInput

func (TransformerContingencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerContingency)(nil)).Elem()
}

func (i TransformerContingencyArray) ToTransformerContingencyArrayOutput() TransformerContingencyArrayOutput {
	return i.ToTransformerContingencyArrayOutputWithContext(context.Background())
}

func (i TransformerContingencyArray) ToTransformerContingencyArrayOutputWithContext(ctx context.Context) TransformerContingencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerContingencyArrayOutput)
}

type TransformerContingencyOutput struct{ *pulumi.OutputState }

func (TransformerContingencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerContingency)(nil)).Elem()
}

func (o TransformerContingencyOutput) ToTransformerContingencyOutput() TransformerContingencyOutput {
	return o
}

func (o TransformerContingencyOutput) ToTransformerContingencyOutputWithContext(ctx context.Context) TransformerContingencyOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerContingencyOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerContingency) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerContingencyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerContingency) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerContingencyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerContingency) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerContingencyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerContingency) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerContingencyOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerContingency) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerContingencyArrayOutput struct{ *pulumi.OutputState }

func (TransformerContingencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerContingency)(nil)).Elem()
}

func (o TransformerContingencyArrayOutput) ToTransformerContingencyArrayOutput() TransformerContingencyArrayOutput {
	return o
}

func (o TransformerContingencyArrayOutput) ToTransformerContingencyArrayOutputWithContext(ctx context.Context) TransformerContingencyArrayOutput {
	return o
}

func (o TransformerContingencyArrayOutput) Index(i pulumi.IntInput) TransformerContingencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerContingency {
		return vs[0].([]TransformerContingency)[vs[1].(int)]
	}).(TransformerContingencyOutput)
}

type TransformerCurrentHv struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerCurrentHvInput is an input type that accepts TransformerCurrentHvArgs and TransformerCurrentHvOutput values.
// You can construct a concrete instance of `TransformerCurrentHvInput` via:
//
//	TransformerCurrentHvArgs{...}
type TransformerCurrentHvInput interface {
	pulumi.Input

	ToTransformerCurrentHvOutput() TransformerCurrentHvOutput
	ToTransformerCurrentHvOutputWithContext(context.Context) TransformerCurrentHvOutput
}

type TransformerCurrentHvArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerCurrentHvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerCurrentHv)(nil)).Elem()
}

func (i TransformerCurrentHvArgs) ToTransformerCurrentHvOutput() TransformerCurrentHvOutput {
	return i.ToTransformerCurrentHvOutputWithContext(context.Background())
}

func (i TransformerCurrentHvArgs) ToTransformerCurrentHvOutputWithContext(ctx context.Context) TransformerCurrentHvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerCurrentHvOutput)
}

// TransformerCurrentHvArrayInput is an input type that accepts TransformerCurrentHvArray and TransformerCurrentHvArrayOutput values.
// You can construct a concrete instance of `TransformerCurrentHvArrayInput` via:
//
//	TransformerCurrentHvArray{ TransformerCurrentHvArgs{...} }
type TransformerCurrentHvArrayInput interface {
	pulumi.Input

	ToTransformerCurrentHvArrayOutput() TransformerCurrentHvArrayOutput
	ToTransformerCurrentHvArrayOutputWithContext(context.Context) TransformerCurrentHvArrayOutput
}

type TransformerCurrentHvArray []TransformerCurrentHvInput

func (TransformerCurrentHvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerCurrentHv)(nil)).Elem()
}

func (i TransformerCurrentHvArray) ToTransformerCurrentHvArrayOutput() TransformerCurrentHvArrayOutput {
	return i.ToTransformerCurrentHvArrayOutputWithContext(context.Background())
}

func (i TransformerCurrentHvArray) ToTransformerCurrentHvArrayOutputWithContext(ctx context.Context) TransformerCurrentHvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerCurrentHvArrayOutput)
}

type TransformerCurrentHvOutput struct{ *pulumi.OutputState }

func (TransformerCurrentHvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerCurrentHv)(nil)).Elem()
}

func (o TransformerCurrentHvOutput) ToTransformerCurrentHvOutput() TransformerCurrentHvOutput {
	return o
}

func (o TransformerCurrentHvOutput) ToTransformerCurrentHvOutputWithContext(ctx context.Context) TransformerCurrentHvOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerCurrentHvOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCurrentHv) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerCurrentHvOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCurrentHv) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerCurrentHvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCurrentHv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerCurrentHvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCurrentHv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerCurrentHvOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCurrentHv) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerCurrentHvArrayOutput struct{ *pulumi.OutputState }

func (TransformerCurrentHvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerCurrentHv)(nil)).Elem()
}

func (o TransformerCurrentHvArrayOutput) ToTransformerCurrentHvArrayOutput() TransformerCurrentHvArrayOutput {
	return o
}

func (o TransformerCurrentHvArrayOutput) ToTransformerCurrentHvArrayOutputWithContext(ctx context.Context) TransformerCurrentHvArrayOutput {
	return o
}

func (o TransformerCurrentHvArrayOutput) Index(i pulumi.IntInput) TransformerCurrentHvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerCurrentHv {
		return vs[0].([]TransformerCurrentHv)[vs[1].(int)]
	}).(TransformerCurrentHvOutput)
}

type TransformerCurrentLv struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerCurrentLvInput is an input type that accepts TransformerCurrentLvArgs and TransformerCurrentLvOutput values.
// You can construct a concrete instance of `TransformerCurrentLvInput` via:
//
//	TransformerCurrentLvArgs{...}
type TransformerCurrentLvInput interface {
	pulumi.Input

	ToTransformerCurrentLvOutput() TransformerCurrentLvOutput
	ToTransformerCurrentLvOutputWithContext(context.Context) TransformerCurrentLvOutput
}

type TransformerCurrentLvArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerCurrentLvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerCurrentLv)(nil)).Elem()
}

func (i TransformerCurrentLvArgs) ToTransformerCurrentLvOutput() TransformerCurrentLvOutput {
	return i.ToTransformerCurrentLvOutputWithContext(context.Background())
}

func (i TransformerCurrentLvArgs) ToTransformerCurrentLvOutputWithContext(ctx context.Context) TransformerCurrentLvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerCurrentLvOutput)
}

// TransformerCurrentLvArrayInput is an input type that accepts TransformerCurrentLvArray and TransformerCurrentLvArrayOutput values.
// You can construct a concrete instance of `TransformerCurrentLvArrayInput` via:
//
//	TransformerCurrentLvArray{ TransformerCurrentLvArgs{...} }
type TransformerCurrentLvArrayInput interface {
	pulumi.Input

	ToTransformerCurrentLvArrayOutput() TransformerCurrentLvArrayOutput
	ToTransformerCurrentLvArrayOutputWithContext(context.Context) TransformerCurrentLvArrayOutput
}

type TransformerCurrentLvArray []TransformerCurrentLvInput

func (TransformerCurrentLvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerCurrentLv)(nil)).Elem()
}

func (i TransformerCurrentLvArray) ToTransformerCurrentLvArrayOutput() TransformerCurrentLvArrayOutput {
	return i.ToTransformerCurrentLvArrayOutputWithContext(context.Background())
}

func (i TransformerCurrentLvArray) ToTransformerCurrentLvArrayOutputWithContext(ctx context.Context) TransformerCurrentLvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerCurrentLvArrayOutput)
}

type TransformerCurrentLvOutput struct{ *pulumi.OutputState }

func (TransformerCurrentLvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerCurrentLv)(nil)).Elem()
}

func (o TransformerCurrentLvOutput) ToTransformerCurrentLvOutput() TransformerCurrentLvOutput {
	return o
}

func (o TransformerCurrentLvOutput) ToTransformerCurrentLvOutputWithContext(ctx context.Context) TransformerCurrentLvOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerCurrentLvOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCurrentLv) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerCurrentLvOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCurrentLv) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerCurrentLvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCurrentLv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerCurrentLvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCurrentLv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerCurrentLvOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerCurrentLv) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerCurrentLvArrayOutput struct{ *pulumi.OutputState }

func (TransformerCurrentLvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerCurrentLv)(nil)).Elem()
}

func (o TransformerCurrentLvArrayOutput) ToTransformerCurrentLvArrayOutput() TransformerCurrentLvArrayOutput {
	return o
}

func (o TransformerCurrentLvArrayOutput) ToTransformerCurrentLvArrayOutputWithContext(ctx context.Context) TransformerCurrentLvArrayOutput {
	return o
}

func (o TransformerCurrentLvArrayOutput) Index(i pulumi.IntInput) TransformerCurrentLvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerCurrentLv {
		return vs[0].([]TransformerCurrentLv)[vs[1].(int)]
	}).(TransformerCurrentLvOutput)
}

type TransformerKind struct {
	// kind id
	Id string `pulumi:"id"`
	// kind name
	Name string `pulumi:"name"`
}

// TransformerKindInput is an input type that accepts TransformerKindArgs and TransformerKindOutput values.
// You can construct a concrete instance of `TransformerKindInput` via:
//
//	TransformerKindArgs{...}
type TransformerKindInput interface {
	pulumi.Input

	ToTransformerKindOutput() TransformerKindOutput
	ToTransformerKindOutputWithContext(context.Context) TransformerKindOutput
}

type TransformerKindArgs struct {
	// kind id
	Id pulumi.StringInput `pulumi:"id"`
	// kind name
	Name pulumi.StringInput `pulumi:"name"`
}

func (TransformerKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerKind)(nil)).Elem()
}

func (i TransformerKindArgs) ToTransformerKindOutput() TransformerKindOutput {
	return i.ToTransformerKindOutputWithContext(context.Background())
}

func (i TransformerKindArgs) ToTransformerKindOutputWithContext(ctx context.Context) TransformerKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerKindOutput)
}

// TransformerKindArrayInput is an input type that accepts TransformerKindArray and TransformerKindArrayOutput values.
// You can construct a concrete instance of `TransformerKindArrayInput` via:
//
//	TransformerKindArray{ TransformerKindArgs{...} }
type TransformerKindArrayInput interface {
	pulumi.Input

	ToTransformerKindArrayOutput() TransformerKindArrayOutput
	ToTransformerKindArrayOutputWithContext(context.Context) TransformerKindArrayOutput
}

type TransformerKindArray []TransformerKindInput

func (TransformerKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerKind)(nil)).Elem()
}

func (i TransformerKindArray) ToTransformerKindArrayOutput() TransformerKindArrayOutput {
	return i.ToTransformerKindArrayOutputWithContext(context.Background())
}

func (i TransformerKindArray) ToTransformerKindArrayOutputWithContext(ctx context.Context) TransformerKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerKindArrayOutput)
}

type TransformerKindOutput struct{ *pulumi.OutputState }

func (TransformerKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerKind)(nil)).Elem()
}

func (o TransformerKindOutput) ToTransformerKindOutput() TransformerKindOutput {
	return o
}

func (o TransformerKindOutput) ToTransformerKindOutputWithContext(ctx context.Context) TransformerKindOutput {
	return o
}

// kind id
func (o TransformerKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerKind) string { return v.Id }).(pulumi.StringOutput)
}

// kind name
func (o TransformerKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerKind) string { return v.Name }).(pulumi.StringOutput)
}

type TransformerKindArrayOutput struct{ *pulumi.OutputState }

func (TransformerKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerKind)(nil)).Elem()
}

func (o TransformerKindArrayOutput) ToTransformerKindArrayOutput() TransformerKindArrayOutput {
	return o
}

func (o TransformerKindArrayOutput) ToTransformerKindArrayOutputWithContext(ctx context.Context) TransformerKindArrayOutput {
	return o
}

func (o TransformerKindArrayOutput) Index(i pulumi.IntInput) TransformerKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerKind {
		return vs[0].([]TransformerKind)[vs[1].(int)]
	}).(TransformerKindOutput)
}

type TransformerMaximumAllowedCurrent struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// TransformerMaximumAllowedCurrentInput is an input type that accepts TransformerMaximumAllowedCurrentArgs and TransformerMaximumAllowedCurrentOutput values.
// You can construct a concrete instance of `TransformerMaximumAllowedCurrentInput` via:
//
//	TransformerMaximumAllowedCurrentArgs{...}
type TransformerMaximumAllowedCurrentInput interface {
	pulumi.Input

	ToTransformerMaximumAllowedCurrentOutput() TransformerMaximumAllowedCurrentOutput
	ToTransformerMaximumAllowedCurrentOutputWithContext(context.Context) TransformerMaximumAllowedCurrentOutput
}

type TransformerMaximumAllowedCurrentArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TransformerMaximumAllowedCurrentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerMaximumAllowedCurrent)(nil)).Elem()
}

func (i TransformerMaximumAllowedCurrentArgs) ToTransformerMaximumAllowedCurrentOutput() TransformerMaximumAllowedCurrentOutput {
	return i.ToTransformerMaximumAllowedCurrentOutputWithContext(context.Background())
}

func (i TransformerMaximumAllowedCurrentArgs) ToTransformerMaximumAllowedCurrentOutputWithContext(ctx context.Context) TransformerMaximumAllowedCurrentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerMaximumAllowedCurrentOutput)
}

func (i TransformerMaximumAllowedCurrentArgs) ToTransformerMaximumAllowedCurrentPtrOutput() TransformerMaximumAllowedCurrentPtrOutput {
	return i.ToTransformerMaximumAllowedCurrentPtrOutputWithContext(context.Background())
}

func (i TransformerMaximumAllowedCurrentArgs) ToTransformerMaximumAllowedCurrentPtrOutputWithContext(ctx context.Context) TransformerMaximumAllowedCurrentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerMaximumAllowedCurrentOutput).ToTransformerMaximumAllowedCurrentPtrOutputWithContext(ctx)
}

// TransformerMaximumAllowedCurrentPtrInput is an input type that accepts TransformerMaximumAllowedCurrentArgs, TransformerMaximumAllowedCurrentPtr and TransformerMaximumAllowedCurrentPtrOutput values.
// You can construct a concrete instance of `TransformerMaximumAllowedCurrentPtrInput` via:
//
//	        TransformerMaximumAllowedCurrentArgs{...}
//
//	or:
//
//	        nil
type TransformerMaximumAllowedCurrentPtrInput interface {
	pulumi.Input

	ToTransformerMaximumAllowedCurrentPtrOutput() TransformerMaximumAllowedCurrentPtrOutput
	ToTransformerMaximumAllowedCurrentPtrOutputWithContext(context.Context) TransformerMaximumAllowedCurrentPtrOutput
}

type transformerMaximumAllowedCurrentPtrType TransformerMaximumAllowedCurrentArgs

func TransformerMaximumAllowedCurrentPtr(v *TransformerMaximumAllowedCurrentArgs) TransformerMaximumAllowedCurrentPtrInput {
	return (*transformerMaximumAllowedCurrentPtrType)(v)
}

func (*transformerMaximumAllowedCurrentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerMaximumAllowedCurrent)(nil)).Elem()
}

func (i *transformerMaximumAllowedCurrentPtrType) ToTransformerMaximumAllowedCurrentPtrOutput() TransformerMaximumAllowedCurrentPtrOutput {
	return i.ToTransformerMaximumAllowedCurrentPtrOutputWithContext(context.Background())
}

func (i *transformerMaximumAllowedCurrentPtrType) ToTransformerMaximumAllowedCurrentPtrOutputWithContext(ctx context.Context) TransformerMaximumAllowedCurrentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerMaximumAllowedCurrentPtrOutput)
}

type TransformerMaximumAllowedCurrentOutput struct{ *pulumi.OutputState }

func (TransformerMaximumAllowedCurrentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerMaximumAllowedCurrent)(nil)).Elem()
}

func (o TransformerMaximumAllowedCurrentOutput) ToTransformerMaximumAllowedCurrentOutput() TransformerMaximumAllowedCurrentOutput {
	return o
}

func (o TransformerMaximumAllowedCurrentOutput) ToTransformerMaximumAllowedCurrentOutputWithContext(ctx context.Context) TransformerMaximumAllowedCurrentOutput {
	return o
}

func (o TransformerMaximumAllowedCurrentOutput) ToTransformerMaximumAllowedCurrentPtrOutput() TransformerMaximumAllowedCurrentPtrOutput {
	return o.ToTransformerMaximumAllowedCurrentPtrOutputWithContext(context.Background())
}

func (o TransformerMaximumAllowedCurrentOutput) ToTransformerMaximumAllowedCurrentPtrOutputWithContext(ctx context.Context) TransformerMaximumAllowedCurrentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerMaximumAllowedCurrent) *TransformerMaximumAllowedCurrent {
		return &v
	}).(TransformerMaximumAllowedCurrentPtrOutput)
}

// reference to the asset to be linked to
func (o TransformerMaximumAllowedCurrentOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedCurrent) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerMaximumAllowedCurrentOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedCurrent) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerMaximumAllowedCurrentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedCurrent) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerMaximumAllowedCurrentOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedCurrent) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerMaximumAllowedCurrentOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedCurrent) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerMaximumAllowedCurrentOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedCurrent) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TransformerMaximumAllowedCurrentPtrOutput struct{ *pulumi.OutputState }

func (TransformerMaximumAllowedCurrentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerMaximumAllowedCurrent)(nil)).Elem()
}

func (o TransformerMaximumAllowedCurrentPtrOutput) ToTransformerMaximumAllowedCurrentPtrOutput() TransformerMaximumAllowedCurrentPtrOutput {
	return o
}

func (o TransformerMaximumAllowedCurrentPtrOutput) ToTransformerMaximumAllowedCurrentPtrOutputWithContext(ctx context.Context) TransformerMaximumAllowedCurrentPtrOutput {
	return o
}

func (o TransformerMaximumAllowedCurrentPtrOutput) Elem() TransformerMaximumAllowedCurrentOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedCurrent) TransformerMaximumAllowedCurrent {
		if v != nil {
			return *v
		}
		var ret TransformerMaximumAllowedCurrent
		return ret
	}).(TransformerMaximumAllowedCurrentOutput)
}

// reference to the asset to be linked to
func (o TransformerMaximumAllowedCurrentPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerMaximumAllowedCurrentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerMaximumAllowedCurrentPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerMaximumAllowedCurrentPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerMaximumAllowedCurrentPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerMaximumAllowedCurrentPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedCurrent) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TransformerMaximumAllowedPower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// TransformerMaximumAllowedPowerInput is an input type that accepts TransformerMaximumAllowedPowerArgs and TransformerMaximumAllowedPowerOutput values.
// You can construct a concrete instance of `TransformerMaximumAllowedPowerInput` via:
//
//	TransformerMaximumAllowedPowerArgs{...}
type TransformerMaximumAllowedPowerInput interface {
	pulumi.Input

	ToTransformerMaximumAllowedPowerOutput() TransformerMaximumAllowedPowerOutput
	ToTransformerMaximumAllowedPowerOutputWithContext(context.Context) TransformerMaximumAllowedPowerOutput
}

type TransformerMaximumAllowedPowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TransformerMaximumAllowedPowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerMaximumAllowedPower)(nil)).Elem()
}

func (i TransformerMaximumAllowedPowerArgs) ToTransformerMaximumAllowedPowerOutput() TransformerMaximumAllowedPowerOutput {
	return i.ToTransformerMaximumAllowedPowerOutputWithContext(context.Background())
}

func (i TransformerMaximumAllowedPowerArgs) ToTransformerMaximumAllowedPowerOutputWithContext(ctx context.Context) TransformerMaximumAllowedPowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerMaximumAllowedPowerOutput)
}

func (i TransformerMaximumAllowedPowerArgs) ToTransformerMaximumAllowedPowerPtrOutput() TransformerMaximumAllowedPowerPtrOutput {
	return i.ToTransformerMaximumAllowedPowerPtrOutputWithContext(context.Background())
}

func (i TransformerMaximumAllowedPowerArgs) ToTransformerMaximumAllowedPowerPtrOutputWithContext(ctx context.Context) TransformerMaximumAllowedPowerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerMaximumAllowedPowerOutput).ToTransformerMaximumAllowedPowerPtrOutputWithContext(ctx)
}

// TransformerMaximumAllowedPowerPtrInput is an input type that accepts TransformerMaximumAllowedPowerArgs, TransformerMaximumAllowedPowerPtr and TransformerMaximumAllowedPowerPtrOutput values.
// You can construct a concrete instance of `TransformerMaximumAllowedPowerPtrInput` via:
//
//	        TransformerMaximumAllowedPowerArgs{...}
//
//	or:
//
//	        nil
type TransformerMaximumAllowedPowerPtrInput interface {
	pulumi.Input

	ToTransformerMaximumAllowedPowerPtrOutput() TransformerMaximumAllowedPowerPtrOutput
	ToTransformerMaximumAllowedPowerPtrOutputWithContext(context.Context) TransformerMaximumAllowedPowerPtrOutput
}

type transformerMaximumAllowedPowerPtrType TransformerMaximumAllowedPowerArgs

func TransformerMaximumAllowedPowerPtr(v *TransformerMaximumAllowedPowerArgs) TransformerMaximumAllowedPowerPtrInput {
	return (*transformerMaximumAllowedPowerPtrType)(v)
}

func (*transformerMaximumAllowedPowerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerMaximumAllowedPower)(nil)).Elem()
}

func (i *transformerMaximumAllowedPowerPtrType) ToTransformerMaximumAllowedPowerPtrOutput() TransformerMaximumAllowedPowerPtrOutput {
	return i.ToTransformerMaximumAllowedPowerPtrOutputWithContext(context.Background())
}

func (i *transformerMaximumAllowedPowerPtrType) ToTransformerMaximumAllowedPowerPtrOutputWithContext(ctx context.Context) TransformerMaximumAllowedPowerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerMaximumAllowedPowerPtrOutput)
}

type TransformerMaximumAllowedPowerOutput struct{ *pulumi.OutputState }

func (TransformerMaximumAllowedPowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerMaximumAllowedPower)(nil)).Elem()
}

func (o TransformerMaximumAllowedPowerOutput) ToTransformerMaximumAllowedPowerOutput() TransformerMaximumAllowedPowerOutput {
	return o
}

func (o TransformerMaximumAllowedPowerOutput) ToTransformerMaximumAllowedPowerOutputWithContext(ctx context.Context) TransformerMaximumAllowedPowerOutput {
	return o
}

func (o TransformerMaximumAllowedPowerOutput) ToTransformerMaximumAllowedPowerPtrOutput() TransformerMaximumAllowedPowerPtrOutput {
	return o.ToTransformerMaximumAllowedPowerPtrOutputWithContext(context.Background())
}

func (o TransformerMaximumAllowedPowerOutput) ToTransformerMaximumAllowedPowerPtrOutputWithContext(ctx context.Context) TransformerMaximumAllowedPowerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerMaximumAllowedPower) *TransformerMaximumAllowedPower {
		return &v
	}).(TransformerMaximumAllowedPowerPtrOutput)
}

// reference to the asset to be linked to
func (o TransformerMaximumAllowedPowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedPower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerMaximumAllowedPowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedPower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerMaximumAllowedPowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedPower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerMaximumAllowedPowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedPower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerMaximumAllowedPowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedPower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerMaximumAllowedPowerOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMaximumAllowedPower) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TransformerMaximumAllowedPowerPtrOutput struct{ *pulumi.OutputState }

func (TransformerMaximumAllowedPowerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerMaximumAllowedPower)(nil)).Elem()
}

func (o TransformerMaximumAllowedPowerPtrOutput) ToTransformerMaximumAllowedPowerPtrOutput() TransformerMaximumAllowedPowerPtrOutput {
	return o
}

func (o TransformerMaximumAllowedPowerPtrOutput) ToTransformerMaximumAllowedPowerPtrOutputWithContext(ctx context.Context) TransformerMaximumAllowedPowerPtrOutput {
	return o
}

func (o TransformerMaximumAllowedPowerPtrOutput) Elem() TransformerMaximumAllowedPowerOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedPower) TransformerMaximumAllowedPower {
		if v != nil {
			return *v
		}
		var ret TransformerMaximumAllowedPower
		return ret
	}).(TransformerMaximumAllowedPowerOutput)
}

// reference to the asset to be linked to
func (o TransformerMaximumAllowedPowerPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerMaximumAllowedPowerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerMaximumAllowedPowerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerMaximumAllowedPowerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerMaximumAllowedPowerPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerMaximumAllowedPowerPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMaximumAllowedPower) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TransformerReactance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// TransformerReactanceInput is an input type that accepts TransformerReactanceArgs and TransformerReactanceOutput values.
// You can construct a concrete instance of `TransformerReactanceInput` via:
//
//	TransformerReactanceArgs{...}
type TransformerReactanceInput interface {
	pulumi.Input

	ToTransformerReactanceOutput() TransformerReactanceOutput
	ToTransformerReactanceOutputWithContext(context.Context) TransformerReactanceOutput
}

type TransformerReactanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TransformerReactanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerReactance)(nil)).Elem()
}

func (i TransformerReactanceArgs) ToTransformerReactanceOutput() TransformerReactanceOutput {
	return i.ToTransformerReactanceOutputWithContext(context.Background())
}

func (i TransformerReactanceArgs) ToTransformerReactanceOutputWithContext(ctx context.Context) TransformerReactanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerReactanceOutput)
}

func (i TransformerReactanceArgs) ToTransformerReactancePtrOutput() TransformerReactancePtrOutput {
	return i.ToTransformerReactancePtrOutputWithContext(context.Background())
}

func (i TransformerReactanceArgs) ToTransformerReactancePtrOutputWithContext(ctx context.Context) TransformerReactancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerReactanceOutput).ToTransformerReactancePtrOutputWithContext(ctx)
}

// TransformerReactancePtrInput is an input type that accepts TransformerReactanceArgs, TransformerReactancePtr and TransformerReactancePtrOutput values.
// You can construct a concrete instance of `TransformerReactancePtrInput` via:
//
//	        TransformerReactanceArgs{...}
//
//	or:
//
//	        nil
type TransformerReactancePtrInput interface {
	pulumi.Input

	ToTransformerReactancePtrOutput() TransformerReactancePtrOutput
	ToTransformerReactancePtrOutputWithContext(context.Context) TransformerReactancePtrOutput
}

type transformerReactancePtrType TransformerReactanceArgs

func TransformerReactancePtr(v *TransformerReactanceArgs) TransformerReactancePtrInput {
	return (*transformerReactancePtrType)(v)
}

func (*transformerReactancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerReactance)(nil)).Elem()
}

func (i *transformerReactancePtrType) ToTransformerReactancePtrOutput() TransformerReactancePtrOutput {
	return i.ToTransformerReactancePtrOutputWithContext(context.Background())
}

func (i *transformerReactancePtrType) ToTransformerReactancePtrOutputWithContext(ctx context.Context) TransformerReactancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerReactancePtrOutput)
}

type TransformerReactanceOutput struct{ *pulumi.OutputState }

func (TransformerReactanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerReactance)(nil)).Elem()
}

func (o TransformerReactanceOutput) ToTransformerReactanceOutput() TransformerReactanceOutput {
	return o
}

func (o TransformerReactanceOutput) ToTransformerReactanceOutputWithContext(ctx context.Context) TransformerReactanceOutput {
	return o
}

func (o TransformerReactanceOutput) ToTransformerReactancePtrOutput() TransformerReactancePtrOutput {
	return o.ToTransformerReactancePtrOutputWithContext(context.Background())
}

func (o TransformerReactanceOutput) ToTransformerReactancePtrOutputWithContext(ctx context.Context) TransformerReactancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerReactance) *TransformerReactance {
		return &v
	}).(TransformerReactancePtrOutput)
}

// reference to the asset to be linked to
func (o TransformerReactanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerReactanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerReactanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerReactanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerReactanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerReactanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TransformerReactancePtrOutput struct{ *pulumi.OutputState }

func (TransformerReactancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerReactance)(nil)).Elem()
}

func (o TransformerReactancePtrOutput) ToTransformerReactancePtrOutput() TransformerReactancePtrOutput {
	return o
}

func (o TransformerReactancePtrOutput) ToTransformerReactancePtrOutputWithContext(ctx context.Context) TransformerReactancePtrOutput {
	return o
}

func (o TransformerReactancePtrOutput) Elem() TransformerReactanceOutput {
	return o.ApplyT(func(v *TransformerReactance) TransformerReactance {
		if v != nil {
			return *v
		}
		var ret TransformerReactance
		return ret
	}).(TransformerReactanceOutput)
}

// reference to the asset to be linked to
func (o TransformerReactancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerReactance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerReactancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerReactance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerReactancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerReactance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerReactancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerReactance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerReactancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerReactance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerReactancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerReactance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TransformerReactivePowerHv struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerReactivePowerHvInput is an input type that accepts TransformerReactivePowerHvArgs and TransformerReactivePowerHvOutput values.
// You can construct a concrete instance of `TransformerReactivePowerHvInput` via:
//
//	TransformerReactivePowerHvArgs{...}
type TransformerReactivePowerHvInput interface {
	pulumi.Input

	ToTransformerReactivePowerHvOutput() TransformerReactivePowerHvOutput
	ToTransformerReactivePowerHvOutputWithContext(context.Context) TransformerReactivePowerHvOutput
}

type TransformerReactivePowerHvArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerReactivePowerHvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerReactivePowerHv)(nil)).Elem()
}

func (i TransformerReactivePowerHvArgs) ToTransformerReactivePowerHvOutput() TransformerReactivePowerHvOutput {
	return i.ToTransformerReactivePowerHvOutputWithContext(context.Background())
}

func (i TransformerReactivePowerHvArgs) ToTransformerReactivePowerHvOutputWithContext(ctx context.Context) TransformerReactivePowerHvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerReactivePowerHvOutput)
}

// TransformerReactivePowerHvArrayInput is an input type that accepts TransformerReactivePowerHvArray and TransformerReactivePowerHvArrayOutput values.
// You can construct a concrete instance of `TransformerReactivePowerHvArrayInput` via:
//
//	TransformerReactivePowerHvArray{ TransformerReactivePowerHvArgs{...} }
type TransformerReactivePowerHvArrayInput interface {
	pulumi.Input

	ToTransformerReactivePowerHvArrayOutput() TransformerReactivePowerHvArrayOutput
	ToTransformerReactivePowerHvArrayOutputWithContext(context.Context) TransformerReactivePowerHvArrayOutput
}

type TransformerReactivePowerHvArray []TransformerReactivePowerHvInput

func (TransformerReactivePowerHvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerReactivePowerHv)(nil)).Elem()
}

func (i TransformerReactivePowerHvArray) ToTransformerReactivePowerHvArrayOutput() TransformerReactivePowerHvArrayOutput {
	return i.ToTransformerReactivePowerHvArrayOutputWithContext(context.Background())
}

func (i TransformerReactivePowerHvArray) ToTransformerReactivePowerHvArrayOutputWithContext(ctx context.Context) TransformerReactivePowerHvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerReactivePowerHvArrayOutput)
}

type TransformerReactivePowerHvOutput struct{ *pulumi.OutputState }

func (TransformerReactivePowerHvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerReactivePowerHv)(nil)).Elem()
}

func (o TransformerReactivePowerHvOutput) ToTransformerReactivePowerHvOutput() TransformerReactivePowerHvOutput {
	return o
}

func (o TransformerReactivePowerHvOutput) ToTransformerReactivePowerHvOutputWithContext(ctx context.Context) TransformerReactivePowerHvOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerReactivePowerHvOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerHv) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerReactivePowerHvOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerHv) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerReactivePowerHvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerHv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerReactivePowerHvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerHv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerReactivePowerHvOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerHv) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerReactivePowerHvArrayOutput struct{ *pulumi.OutputState }

func (TransformerReactivePowerHvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerReactivePowerHv)(nil)).Elem()
}

func (o TransformerReactivePowerHvArrayOutput) ToTransformerReactivePowerHvArrayOutput() TransformerReactivePowerHvArrayOutput {
	return o
}

func (o TransformerReactivePowerHvArrayOutput) ToTransformerReactivePowerHvArrayOutputWithContext(ctx context.Context) TransformerReactivePowerHvArrayOutput {
	return o
}

func (o TransformerReactivePowerHvArrayOutput) Index(i pulumi.IntInput) TransformerReactivePowerHvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerReactivePowerHv {
		return vs[0].([]TransformerReactivePowerHv)[vs[1].(int)]
	}).(TransformerReactivePowerHvOutput)
}

type TransformerReactivePowerLoss struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerReactivePowerLossInput is an input type that accepts TransformerReactivePowerLossArgs and TransformerReactivePowerLossOutput values.
// You can construct a concrete instance of `TransformerReactivePowerLossInput` via:
//
//	TransformerReactivePowerLossArgs{...}
type TransformerReactivePowerLossInput interface {
	pulumi.Input

	ToTransformerReactivePowerLossOutput() TransformerReactivePowerLossOutput
	ToTransformerReactivePowerLossOutputWithContext(context.Context) TransformerReactivePowerLossOutput
}

type TransformerReactivePowerLossArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerReactivePowerLossArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerReactivePowerLoss)(nil)).Elem()
}

func (i TransformerReactivePowerLossArgs) ToTransformerReactivePowerLossOutput() TransformerReactivePowerLossOutput {
	return i.ToTransformerReactivePowerLossOutputWithContext(context.Background())
}

func (i TransformerReactivePowerLossArgs) ToTransformerReactivePowerLossOutputWithContext(ctx context.Context) TransformerReactivePowerLossOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerReactivePowerLossOutput)
}

// TransformerReactivePowerLossArrayInput is an input type that accepts TransformerReactivePowerLossArray and TransformerReactivePowerLossArrayOutput values.
// You can construct a concrete instance of `TransformerReactivePowerLossArrayInput` via:
//
//	TransformerReactivePowerLossArray{ TransformerReactivePowerLossArgs{...} }
type TransformerReactivePowerLossArrayInput interface {
	pulumi.Input

	ToTransformerReactivePowerLossArrayOutput() TransformerReactivePowerLossArrayOutput
	ToTransformerReactivePowerLossArrayOutputWithContext(context.Context) TransformerReactivePowerLossArrayOutput
}

type TransformerReactivePowerLossArray []TransformerReactivePowerLossInput

func (TransformerReactivePowerLossArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerReactivePowerLoss)(nil)).Elem()
}

func (i TransformerReactivePowerLossArray) ToTransformerReactivePowerLossArrayOutput() TransformerReactivePowerLossArrayOutput {
	return i.ToTransformerReactivePowerLossArrayOutputWithContext(context.Background())
}

func (i TransformerReactivePowerLossArray) ToTransformerReactivePowerLossArrayOutputWithContext(ctx context.Context) TransformerReactivePowerLossArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerReactivePowerLossArrayOutput)
}

type TransformerReactivePowerLossOutput struct{ *pulumi.OutputState }

func (TransformerReactivePowerLossOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerReactivePowerLoss)(nil)).Elem()
}

func (o TransformerReactivePowerLossOutput) ToTransformerReactivePowerLossOutput() TransformerReactivePowerLossOutput {
	return o
}

func (o TransformerReactivePowerLossOutput) ToTransformerReactivePowerLossOutputWithContext(ctx context.Context) TransformerReactivePowerLossOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerReactivePowerLossOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerLoss) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerReactivePowerLossOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerLoss) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerReactivePowerLossOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerLoss) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerReactivePowerLossOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerLoss) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerReactivePowerLossOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerLoss) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerReactivePowerLossArrayOutput struct{ *pulumi.OutputState }

func (TransformerReactivePowerLossArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerReactivePowerLoss)(nil)).Elem()
}

func (o TransformerReactivePowerLossArrayOutput) ToTransformerReactivePowerLossArrayOutput() TransformerReactivePowerLossArrayOutput {
	return o
}

func (o TransformerReactivePowerLossArrayOutput) ToTransformerReactivePowerLossArrayOutputWithContext(ctx context.Context) TransformerReactivePowerLossArrayOutput {
	return o
}

func (o TransformerReactivePowerLossArrayOutput) Index(i pulumi.IntInput) TransformerReactivePowerLossOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerReactivePowerLoss {
		return vs[0].([]TransformerReactivePowerLoss)[vs[1].(int)]
	}).(TransformerReactivePowerLossOutput)
}

type TransformerReactivePowerLv struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerReactivePowerLvInput is an input type that accepts TransformerReactivePowerLvArgs and TransformerReactivePowerLvOutput values.
// You can construct a concrete instance of `TransformerReactivePowerLvInput` via:
//
//	TransformerReactivePowerLvArgs{...}
type TransformerReactivePowerLvInput interface {
	pulumi.Input

	ToTransformerReactivePowerLvOutput() TransformerReactivePowerLvOutput
	ToTransformerReactivePowerLvOutputWithContext(context.Context) TransformerReactivePowerLvOutput
}

type TransformerReactivePowerLvArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerReactivePowerLvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerReactivePowerLv)(nil)).Elem()
}

func (i TransformerReactivePowerLvArgs) ToTransformerReactivePowerLvOutput() TransformerReactivePowerLvOutput {
	return i.ToTransformerReactivePowerLvOutputWithContext(context.Background())
}

func (i TransformerReactivePowerLvArgs) ToTransformerReactivePowerLvOutputWithContext(ctx context.Context) TransformerReactivePowerLvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerReactivePowerLvOutput)
}

// TransformerReactivePowerLvArrayInput is an input type that accepts TransformerReactivePowerLvArray and TransformerReactivePowerLvArrayOutput values.
// You can construct a concrete instance of `TransformerReactivePowerLvArrayInput` via:
//
//	TransformerReactivePowerLvArray{ TransformerReactivePowerLvArgs{...} }
type TransformerReactivePowerLvArrayInput interface {
	pulumi.Input

	ToTransformerReactivePowerLvArrayOutput() TransformerReactivePowerLvArrayOutput
	ToTransformerReactivePowerLvArrayOutputWithContext(context.Context) TransformerReactivePowerLvArrayOutput
}

type TransformerReactivePowerLvArray []TransformerReactivePowerLvInput

func (TransformerReactivePowerLvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerReactivePowerLv)(nil)).Elem()
}

func (i TransformerReactivePowerLvArray) ToTransformerReactivePowerLvArrayOutput() TransformerReactivePowerLvArrayOutput {
	return i.ToTransformerReactivePowerLvArrayOutputWithContext(context.Background())
}

func (i TransformerReactivePowerLvArray) ToTransformerReactivePowerLvArrayOutputWithContext(ctx context.Context) TransformerReactivePowerLvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerReactivePowerLvArrayOutput)
}

type TransformerReactivePowerLvOutput struct{ *pulumi.OutputState }

func (TransformerReactivePowerLvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerReactivePowerLv)(nil)).Elem()
}

func (o TransformerReactivePowerLvOutput) ToTransformerReactivePowerLvOutput() TransformerReactivePowerLvOutput {
	return o
}

func (o TransformerReactivePowerLvOutput) ToTransformerReactivePowerLvOutputWithContext(ctx context.Context) TransformerReactivePowerLvOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerReactivePowerLvOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerLv) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerReactivePowerLvOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerLv) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerReactivePowerLvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerLv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerReactivePowerLvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerLv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerReactivePowerLvOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerReactivePowerLv) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerReactivePowerLvArrayOutput struct{ *pulumi.OutputState }

func (TransformerReactivePowerLvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerReactivePowerLv)(nil)).Elem()
}

func (o TransformerReactivePowerLvArrayOutput) ToTransformerReactivePowerLvArrayOutput() TransformerReactivePowerLvArrayOutput {
	return o
}

func (o TransformerReactivePowerLvArrayOutput) ToTransformerReactivePowerLvArrayOutputWithContext(ctx context.Context) TransformerReactivePowerLvArrayOutput {
	return o
}

func (o TransformerReactivePowerLvArrayOutput) Index(i pulumi.IntInput) TransformerReactivePowerLvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerReactivePowerLv {
		return vs[0].([]TransformerReactivePowerLv)[vs[1].(int)]
	}).(TransformerReactivePowerLvOutput)
}

type TransformerResistance struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// TransformerResistanceInput is an input type that accepts TransformerResistanceArgs and TransformerResistanceOutput values.
// You can construct a concrete instance of `TransformerResistanceInput` via:
//
//	TransformerResistanceArgs{...}
type TransformerResistanceInput interface {
	pulumi.Input

	ToTransformerResistanceOutput() TransformerResistanceOutput
	ToTransformerResistanceOutputWithContext(context.Context) TransformerResistanceOutput
}

type TransformerResistanceArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TransformerResistanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerResistance)(nil)).Elem()
}

func (i TransformerResistanceArgs) ToTransformerResistanceOutput() TransformerResistanceOutput {
	return i.ToTransformerResistanceOutputWithContext(context.Background())
}

func (i TransformerResistanceArgs) ToTransformerResistanceOutputWithContext(ctx context.Context) TransformerResistanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerResistanceOutput)
}

func (i TransformerResistanceArgs) ToTransformerResistancePtrOutput() TransformerResistancePtrOutput {
	return i.ToTransformerResistancePtrOutputWithContext(context.Background())
}

func (i TransformerResistanceArgs) ToTransformerResistancePtrOutputWithContext(ctx context.Context) TransformerResistancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerResistanceOutput).ToTransformerResistancePtrOutputWithContext(ctx)
}

// TransformerResistancePtrInput is an input type that accepts TransformerResistanceArgs, TransformerResistancePtr and TransformerResistancePtrOutput values.
// You can construct a concrete instance of `TransformerResistancePtrInput` via:
//
//	        TransformerResistanceArgs{...}
//
//	or:
//
//	        nil
type TransformerResistancePtrInput interface {
	pulumi.Input

	ToTransformerResistancePtrOutput() TransformerResistancePtrOutput
	ToTransformerResistancePtrOutputWithContext(context.Context) TransformerResistancePtrOutput
}

type transformerResistancePtrType TransformerResistanceArgs

func TransformerResistancePtr(v *TransformerResistanceArgs) TransformerResistancePtrInput {
	return (*transformerResistancePtrType)(v)
}

func (*transformerResistancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerResistance)(nil)).Elem()
}

func (i *transformerResistancePtrType) ToTransformerResistancePtrOutput() TransformerResistancePtrOutput {
	return i.ToTransformerResistancePtrOutputWithContext(context.Background())
}

func (i *transformerResistancePtrType) ToTransformerResistancePtrOutputWithContext(ctx context.Context) TransformerResistancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerResistancePtrOutput)
}

type TransformerResistanceOutput struct{ *pulumi.OutputState }

func (TransformerResistanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerResistance)(nil)).Elem()
}

func (o TransformerResistanceOutput) ToTransformerResistanceOutput() TransformerResistanceOutput {
	return o
}

func (o TransformerResistanceOutput) ToTransformerResistanceOutputWithContext(ctx context.Context) TransformerResistanceOutput {
	return o
}

func (o TransformerResistanceOutput) ToTransformerResistancePtrOutput() TransformerResistancePtrOutput {
	return o.ToTransformerResistancePtrOutputWithContext(context.Background())
}

func (o TransformerResistanceOutput) ToTransformerResistancePtrOutputWithContext(ctx context.Context) TransformerResistancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerResistance) *TransformerResistance {
		return &v
	}).(TransformerResistancePtrOutput)
}

// reference to the asset to be linked to
func (o TransformerResistanceOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerResistance) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerResistanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerResistance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerResistanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerResistance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerResistanceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerResistance) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerResistanceOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerResistance) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerResistanceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerResistance) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TransformerResistancePtrOutput struct{ *pulumi.OutputState }

func (TransformerResistancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerResistance)(nil)).Elem()
}

func (o TransformerResistancePtrOutput) ToTransformerResistancePtrOutput() TransformerResistancePtrOutput {
	return o
}

func (o TransformerResistancePtrOutput) ToTransformerResistancePtrOutputWithContext(ctx context.Context) TransformerResistancePtrOutput {
	return o
}

func (o TransformerResistancePtrOutput) Elem() TransformerResistanceOutput {
	return o.ApplyT(func(v *TransformerResistance) TransformerResistance {
		if v != nil {
			return *v
		}
		var ret TransformerResistance
		return ret
	}).(TransformerResistanceOutput)
}

// reference to the asset to be linked to
func (o TransformerResistancePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerResistance) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerResistancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerResistance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerResistancePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerResistance) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerResistancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerResistance) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerResistancePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerResistance) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerResistancePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerResistance) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TransformerSafetyMarginForPower struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// TransformerSafetyMarginForPowerInput is an input type that accepts TransformerSafetyMarginForPowerArgs and TransformerSafetyMarginForPowerOutput values.
// You can construct a concrete instance of `TransformerSafetyMarginForPowerInput` via:
//
//	TransformerSafetyMarginForPowerArgs{...}
type TransformerSafetyMarginForPowerInput interface {
	pulumi.Input

	ToTransformerSafetyMarginForPowerOutput() TransformerSafetyMarginForPowerOutput
	ToTransformerSafetyMarginForPowerOutputWithContext(context.Context) TransformerSafetyMarginForPowerOutput
}

type TransformerSafetyMarginForPowerArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TransformerSafetyMarginForPowerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSafetyMarginForPower)(nil)).Elem()
}

func (i TransformerSafetyMarginForPowerArgs) ToTransformerSafetyMarginForPowerOutput() TransformerSafetyMarginForPowerOutput {
	return i.ToTransformerSafetyMarginForPowerOutputWithContext(context.Background())
}

func (i TransformerSafetyMarginForPowerArgs) ToTransformerSafetyMarginForPowerOutputWithContext(ctx context.Context) TransformerSafetyMarginForPowerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSafetyMarginForPowerOutput)
}

func (i TransformerSafetyMarginForPowerArgs) ToTransformerSafetyMarginForPowerPtrOutput() TransformerSafetyMarginForPowerPtrOutput {
	return i.ToTransformerSafetyMarginForPowerPtrOutputWithContext(context.Background())
}

func (i TransformerSafetyMarginForPowerArgs) ToTransformerSafetyMarginForPowerPtrOutputWithContext(ctx context.Context) TransformerSafetyMarginForPowerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSafetyMarginForPowerOutput).ToTransformerSafetyMarginForPowerPtrOutputWithContext(ctx)
}

// TransformerSafetyMarginForPowerPtrInput is an input type that accepts TransformerSafetyMarginForPowerArgs, TransformerSafetyMarginForPowerPtr and TransformerSafetyMarginForPowerPtrOutput values.
// You can construct a concrete instance of `TransformerSafetyMarginForPowerPtrInput` via:
//
//	        TransformerSafetyMarginForPowerArgs{...}
//
//	or:
//
//	        nil
type TransformerSafetyMarginForPowerPtrInput interface {
	pulumi.Input

	ToTransformerSafetyMarginForPowerPtrOutput() TransformerSafetyMarginForPowerPtrOutput
	ToTransformerSafetyMarginForPowerPtrOutputWithContext(context.Context) TransformerSafetyMarginForPowerPtrOutput
}

type transformerSafetyMarginForPowerPtrType TransformerSafetyMarginForPowerArgs

func TransformerSafetyMarginForPowerPtr(v *TransformerSafetyMarginForPowerArgs) TransformerSafetyMarginForPowerPtrInput {
	return (*transformerSafetyMarginForPowerPtrType)(v)
}

func (*transformerSafetyMarginForPowerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerSafetyMarginForPower)(nil)).Elem()
}

func (i *transformerSafetyMarginForPowerPtrType) ToTransformerSafetyMarginForPowerPtrOutput() TransformerSafetyMarginForPowerPtrOutput {
	return i.ToTransformerSafetyMarginForPowerPtrOutputWithContext(context.Background())
}

func (i *transformerSafetyMarginForPowerPtrType) ToTransformerSafetyMarginForPowerPtrOutputWithContext(ctx context.Context) TransformerSafetyMarginForPowerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSafetyMarginForPowerPtrOutput)
}

type TransformerSafetyMarginForPowerOutput struct{ *pulumi.OutputState }

func (TransformerSafetyMarginForPowerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSafetyMarginForPower)(nil)).Elem()
}

func (o TransformerSafetyMarginForPowerOutput) ToTransformerSafetyMarginForPowerOutput() TransformerSafetyMarginForPowerOutput {
	return o
}

func (o TransformerSafetyMarginForPowerOutput) ToTransformerSafetyMarginForPowerOutputWithContext(ctx context.Context) TransformerSafetyMarginForPowerOutput {
	return o
}

func (o TransformerSafetyMarginForPowerOutput) ToTransformerSafetyMarginForPowerPtrOutput() TransformerSafetyMarginForPowerPtrOutput {
	return o.ToTransformerSafetyMarginForPowerPtrOutputWithContext(context.Background())
}

func (o TransformerSafetyMarginForPowerOutput) ToTransformerSafetyMarginForPowerPtrOutputWithContext(ctx context.Context) TransformerSafetyMarginForPowerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerSafetyMarginForPower) *TransformerSafetyMarginForPower {
		return &v
	}).(TransformerSafetyMarginForPowerPtrOutput)
}

// reference to the asset to be linked to
func (o TransformerSafetyMarginForPowerOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSafetyMarginForPower) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerSafetyMarginForPowerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSafetyMarginForPower) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerSafetyMarginForPowerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSafetyMarginForPower) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerSafetyMarginForPowerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSafetyMarginForPower) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerSafetyMarginForPowerOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSafetyMarginForPower) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerSafetyMarginForPowerOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSafetyMarginForPower) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TransformerSafetyMarginForPowerPtrOutput struct{ *pulumi.OutputState }

func (TransformerSafetyMarginForPowerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerSafetyMarginForPower)(nil)).Elem()
}

func (o TransformerSafetyMarginForPowerPtrOutput) ToTransformerSafetyMarginForPowerPtrOutput() TransformerSafetyMarginForPowerPtrOutput {
	return o
}

func (o TransformerSafetyMarginForPowerPtrOutput) ToTransformerSafetyMarginForPowerPtrOutputWithContext(ctx context.Context) TransformerSafetyMarginForPowerPtrOutput {
	return o
}

func (o TransformerSafetyMarginForPowerPtrOutput) Elem() TransformerSafetyMarginForPowerOutput {
	return o.ApplyT(func(v *TransformerSafetyMarginForPower) TransformerSafetyMarginForPower {
		if v != nil {
			return *v
		}
		var ret TransformerSafetyMarginForPower
		return ret
	}).(TransformerSafetyMarginForPowerOutput)
}

// reference to the asset to be linked to
func (o TransformerSafetyMarginForPowerPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerSafetyMarginForPowerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerSafetyMarginForPowerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerSafetyMarginForPowerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerSafetyMarginForPowerPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerSafetyMarginForPowerPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerSafetyMarginForPower) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TransformerStandardType struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// TransformerStandardTypeInput is an input type that accepts TransformerStandardTypeArgs and TransformerStandardTypeOutput values.
// You can construct a concrete instance of `TransformerStandardTypeInput` via:
//
//	TransformerStandardTypeArgs{...}
type TransformerStandardTypeInput interface {
	pulumi.Input

	ToTransformerStandardTypeOutput() TransformerStandardTypeOutput
	ToTransformerStandardTypeOutputWithContext(context.Context) TransformerStandardTypeOutput
}

type TransformerStandardTypeArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TransformerStandardTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerStandardType)(nil)).Elem()
}

func (i TransformerStandardTypeArgs) ToTransformerStandardTypeOutput() TransformerStandardTypeOutput {
	return i.ToTransformerStandardTypeOutputWithContext(context.Background())
}

func (i TransformerStandardTypeArgs) ToTransformerStandardTypeOutputWithContext(ctx context.Context) TransformerStandardTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerStandardTypeOutput)
}

func (i TransformerStandardTypeArgs) ToTransformerStandardTypePtrOutput() TransformerStandardTypePtrOutput {
	return i.ToTransformerStandardTypePtrOutputWithContext(context.Background())
}

func (i TransformerStandardTypeArgs) ToTransformerStandardTypePtrOutputWithContext(ctx context.Context) TransformerStandardTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerStandardTypeOutput).ToTransformerStandardTypePtrOutputWithContext(ctx)
}

// TransformerStandardTypePtrInput is an input type that accepts TransformerStandardTypeArgs, TransformerStandardTypePtr and TransformerStandardTypePtrOutput values.
// You can construct a concrete instance of `TransformerStandardTypePtrInput` via:
//
//	        TransformerStandardTypeArgs{...}
//
//	or:
//
//	        nil
type TransformerStandardTypePtrInput interface {
	pulumi.Input

	ToTransformerStandardTypePtrOutput() TransformerStandardTypePtrOutput
	ToTransformerStandardTypePtrOutputWithContext(context.Context) TransformerStandardTypePtrOutput
}

type transformerStandardTypePtrType TransformerStandardTypeArgs

func TransformerStandardTypePtr(v *TransformerStandardTypeArgs) TransformerStandardTypePtrInput {
	return (*transformerStandardTypePtrType)(v)
}

func (*transformerStandardTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerStandardType)(nil)).Elem()
}

func (i *transformerStandardTypePtrType) ToTransformerStandardTypePtrOutput() TransformerStandardTypePtrOutput {
	return i.ToTransformerStandardTypePtrOutputWithContext(context.Background())
}

func (i *transformerStandardTypePtrType) ToTransformerStandardTypePtrOutputWithContext(ctx context.Context) TransformerStandardTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerStandardTypePtrOutput)
}

type TransformerStandardTypeOutput struct{ *pulumi.OutputState }

func (TransformerStandardTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerStandardType)(nil)).Elem()
}

func (o TransformerStandardTypeOutput) ToTransformerStandardTypeOutput() TransformerStandardTypeOutput {
	return o
}

func (o TransformerStandardTypeOutput) ToTransformerStandardTypeOutputWithContext(ctx context.Context) TransformerStandardTypeOutput {
	return o
}

func (o TransformerStandardTypeOutput) ToTransformerStandardTypePtrOutput() TransformerStandardTypePtrOutput {
	return o.ToTransformerStandardTypePtrOutputWithContext(context.Background())
}

func (o TransformerStandardTypeOutput) ToTransformerStandardTypePtrOutputWithContext(ctx context.Context) TransformerStandardTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerStandardType) *TransformerStandardType {
		return &v
	}).(TransformerStandardTypePtrOutput)
}

// reference to the asset to be linked to
func (o TransformerStandardTypeOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerStandardType) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerStandardTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerStandardType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerStandardTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerStandardType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerStandardTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerStandardType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerStandardTypeOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerStandardType) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerStandardTypeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerStandardType) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TransformerStandardTypePtrOutput struct{ *pulumi.OutputState }

func (TransformerStandardTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerStandardType)(nil)).Elem()
}

func (o TransformerStandardTypePtrOutput) ToTransformerStandardTypePtrOutput() TransformerStandardTypePtrOutput {
	return o
}

func (o TransformerStandardTypePtrOutput) ToTransformerStandardTypePtrOutputWithContext(ctx context.Context) TransformerStandardTypePtrOutput {
	return o
}

func (o TransformerStandardTypePtrOutput) Elem() TransformerStandardTypeOutput {
	return o.ApplyT(func(v *TransformerStandardType) TransformerStandardType {
		if v != nil {
			return *v
		}
		var ret TransformerStandardType
		return ret
	}).(TransformerStandardTypeOutput)
}

// reference to the asset to be linked to
func (o TransformerStandardTypePtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerStandardType) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerStandardTypePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerStandardType) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerStandardTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerStandardType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerStandardTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerStandardType) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerStandardTypePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerStandardType) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerStandardTypePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerStandardType) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TransformerSwitchStatusHv struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerSwitchStatusHvInput is an input type that accepts TransformerSwitchStatusHvArgs and TransformerSwitchStatusHvOutput values.
// You can construct a concrete instance of `TransformerSwitchStatusHvInput` via:
//
//	TransformerSwitchStatusHvArgs{...}
type TransformerSwitchStatusHvInput interface {
	pulumi.Input

	ToTransformerSwitchStatusHvOutput() TransformerSwitchStatusHvOutput
	ToTransformerSwitchStatusHvOutputWithContext(context.Context) TransformerSwitchStatusHvOutput
}

type TransformerSwitchStatusHvArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerSwitchStatusHvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSwitchStatusHv)(nil)).Elem()
}

func (i TransformerSwitchStatusHvArgs) ToTransformerSwitchStatusHvOutput() TransformerSwitchStatusHvOutput {
	return i.ToTransformerSwitchStatusHvOutputWithContext(context.Background())
}

func (i TransformerSwitchStatusHvArgs) ToTransformerSwitchStatusHvOutputWithContext(ctx context.Context) TransformerSwitchStatusHvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSwitchStatusHvOutput)
}

// TransformerSwitchStatusHvArrayInput is an input type that accepts TransformerSwitchStatusHvArray and TransformerSwitchStatusHvArrayOutput values.
// You can construct a concrete instance of `TransformerSwitchStatusHvArrayInput` via:
//
//	TransformerSwitchStatusHvArray{ TransformerSwitchStatusHvArgs{...} }
type TransformerSwitchStatusHvArrayInput interface {
	pulumi.Input

	ToTransformerSwitchStatusHvArrayOutput() TransformerSwitchStatusHvArrayOutput
	ToTransformerSwitchStatusHvArrayOutputWithContext(context.Context) TransformerSwitchStatusHvArrayOutput
}

type TransformerSwitchStatusHvArray []TransformerSwitchStatusHvInput

func (TransformerSwitchStatusHvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerSwitchStatusHv)(nil)).Elem()
}

func (i TransformerSwitchStatusHvArray) ToTransformerSwitchStatusHvArrayOutput() TransformerSwitchStatusHvArrayOutput {
	return i.ToTransformerSwitchStatusHvArrayOutputWithContext(context.Background())
}

func (i TransformerSwitchStatusHvArray) ToTransformerSwitchStatusHvArrayOutputWithContext(ctx context.Context) TransformerSwitchStatusHvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSwitchStatusHvArrayOutput)
}

type TransformerSwitchStatusHvOutput struct{ *pulumi.OutputState }

func (TransformerSwitchStatusHvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSwitchStatusHv)(nil)).Elem()
}

func (o TransformerSwitchStatusHvOutput) ToTransformerSwitchStatusHvOutput() TransformerSwitchStatusHvOutput {
	return o
}

func (o TransformerSwitchStatusHvOutput) ToTransformerSwitchStatusHvOutputWithContext(ctx context.Context) TransformerSwitchStatusHvOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerSwitchStatusHvOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSwitchStatusHv) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerSwitchStatusHvOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSwitchStatusHv) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerSwitchStatusHvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSwitchStatusHv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerSwitchStatusHvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSwitchStatusHv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerSwitchStatusHvOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSwitchStatusHv) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerSwitchStatusHvArrayOutput struct{ *pulumi.OutputState }

func (TransformerSwitchStatusHvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerSwitchStatusHv)(nil)).Elem()
}

func (o TransformerSwitchStatusHvArrayOutput) ToTransformerSwitchStatusHvArrayOutput() TransformerSwitchStatusHvArrayOutput {
	return o
}

func (o TransformerSwitchStatusHvArrayOutput) ToTransformerSwitchStatusHvArrayOutputWithContext(ctx context.Context) TransformerSwitchStatusHvArrayOutput {
	return o
}

func (o TransformerSwitchStatusHvArrayOutput) Index(i pulumi.IntInput) TransformerSwitchStatusHvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerSwitchStatusHv {
		return vs[0].([]TransformerSwitchStatusHv)[vs[1].(int)]
	}).(TransformerSwitchStatusHvOutput)
}

type TransformerSwitchStatusLv struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerSwitchStatusLvInput is an input type that accepts TransformerSwitchStatusLvArgs and TransformerSwitchStatusLvOutput values.
// You can construct a concrete instance of `TransformerSwitchStatusLvInput` via:
//
//	TransformerSwitchStatusLvArgs{...}
type TransformerSwitchStatusLvInput interface {
	pulumi.Input

	ToTransformerSwitchStatusLvOutput() TransformerSwitchStatusLvOutput
	ToTransformerSwitchStatusLvOutputWithContext(context.Context) TransformerSwitchStatusLvOutput
}

type TransformerSwitchStatusLvArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerSwitchStatusLvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSwitchStatusLv)(nil)).Elem()
}

func (i TransformerSwitchStatusLvArgs) ToTransformerSwitchStatusLvOutput() TransformerSwitchStatusLvOutput {
	return i.ToTransformerSwitchStatusLvOutputWithContext(context.Background())
}

func (i TransformerSwitchStatusLvArgs) ToTransformerSwitchStatusLvOutputWithContext(ctx context.Context) TransformerSwitchStatusLvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSwitchStatusLvOutput)
}

// TransformerSwitchStatusLvArrayInput is an input type that accepts TransformerSwitchStatusLvArray and TransformerSwitchStatusLvArrayOutput values.
// You can construct a concrete instance of `TransformerSwitchStatusLvArrayInput` via:
//
//	TransformerSwitchStatusLvArray{ TransformerSwitchStatusLvArgs{...} }
type TransformerSwitchStatusLvArrayInput interface {
	pulumi.Input

	ToTransformerSwitchStatusLvArrayOutput() TransformerSwitchStatusLvArrayOutput
	ToTransformerSwitchStatusLvArrayOutputWithContext(context.Context) TransformerSwitchStatusLvArrayOutput
}

type TransformerSwitchStatusLvArray []TransformerSwitchStatusLvInput

func (TransformerSwitchStatusLvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerSwitchStatusLv)(nil)).Elem()
}

func (i TransformerSwitchStatusLvArray) ToTransformerSwitchStatusLvArrayOutput() TransformerSwitchStatusLvArrayOutput {
	return i.ToTransformerSwitchStatusLvArrayOutputWithContext(context.Background())
}

func (i TransformerSwitchStatusLvArray) ToTransformerSwitchStatusLvArrayOutputWithContext(ctx context.Context) TransformerSwitchStatusLvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSwitchStatusLvArrayOutput)
}

type TransformerSwitchStatusLvOutput struct{ *pulumi.OutputState }

func (TransformerSwitchStatusLvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSwitchStatusLv)(nil)).Elem()
}

func (o TransformerSwitchStatusLvOutput) ToTransformerSwitchStatusLvOutput() TransformerSwitchStatusLvOutput {
	return o
}

func (o TransformerSwitchStatusLvOutput) ToTransformerSwitchStatusLvOutputWithContext(ctx context.Context) TransformerSwitchStatusLvOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerSwitchStatusLvOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSwitchStatusLv) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerSwitchStatusLvOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSwitchStatusLv) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerSwitchStatusLvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSwitchStatusLv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerSwitchStatusLvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSwitchStatusLv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerSwitchStatusLvOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSwitchStatusLv) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerSwitchStatusLvArrayOutput struct{ *pulumi.OutputState }

func (TransformerSwitchStatusLvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerSwitchStatusLv)(nil)).Elem()
}

func (o TransformerSwitchStatusLvArrayOutput) ToTransformerSwitchStatusLvArrayOutput() TransformerSwitchStatusLvArrayOutput {
	return o
}

func (o TransformerSwitchStatusLvArrayOutput) ToTransformerSwitchStatusLvArrayOutputWithContext(ctx context.Context) TransformerSwitchStatusLvArrayOutput {
	return o
}

func (o TransformerSwitchStatusLvArrayOutput) Index(i pulumi.IntInput) TransformerSwitchStatusLvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerSwitchStatusLv {
		return vs[0].([]TransformerSwitchStatusLv)[vs[1].(int)]
	}).(TransformerSwitchStatusLvOutput)
}

type TransformerTag struct {
	// tag id
	Id string `pulumi:"id"`
	// tag name
	Name string `pulumi:"name"`
}

// TransformerTagInput is an input type that accepts TransformerTagArgs and TransformerTagOutput values.
// You can construct a concrete instance of `TransformerTagInput` via:
//
//	TransformerTagArgs{...}
type TransformerTagInput interface {
	pulumi.Input

	ToTransformerTagOutput() TransformerTagOutput
	ToTransformerTagOutputWithContext(context.Context) TransformerTagOutput
}

type TransformerTagArgs struct {
	// tag id
	Id pulumi.StringInput `pulumi:"id"`
	// tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (TransformerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerTag)(nil)).Elem()
}

func (i TransformerTagArgs) ToTransformerTagOutput() TransformerTagOutput {
	return i.ToTransformerTagOutputWithContext(context.Background())
}

func (i TransformerTagArgs) ToTransformerTagOutputWithContext(ctx context.Context) TransformerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerTagOutput)
}

// TransformerTagArrayInput is an input type that accepts TransformerTagArray and TransformerTagArrayOutput values.
// You can construct a concrete instance of `TransformerTagArrayInput` via:
//
//	TransformerTagArray{ TransformerTagArgs{...} }
type TransformerTagArrayInput interface {
	pulumi.Input

	ToTransformerTagArrayOutput() TransformerTagArrayOutput
	ToTransformerTagArrayOutputWithContext(context.Context) TransformerTagArrayOutput
}

type TransformerTagArray []TransformerTagInput

func (TransformerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerTag)(nil)).Elem()
}

func (i TransformerTagArray) ToTransformerTagArrayOutput() TransformerTagArrayOutput {
	return i.ToTransformerTagArrayOutputWithContext(context.Background())
}

func (i TransformerTagArray) ToTransformerTagArrayOutputWithContext(ctx context.Context) TransformerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerTagArrayOutput)
}

type TransformerTagOutput struct{ *pulumi.OutputState }

func (TransformerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerTag)(nil)).Elem()
}

func (o TransformerTagOutput) ToTransformerTagOutput() TransformerTagOutput {
	return o
}

func (o TransformerTagOutput) ToTransformerTagOutputWithContext(ctx context.Context) TransformerTagOutput {
	return o
}

// tag id
func (o TransformerTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerTag) string { return v.Id }).(pulumi.StringOutput)
}

// tag name
func (o TransformerTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerTag) string { return v.Name }).(pulumi.StringOutput)
}

type TransformerTagArrayOutput struct{ *pulumi.OutputState }

func (TransformerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerTag)(nil)).Elem()
}

func (o TransformerTagArrayOutput) ToTransformerTagArrayOutput() TransformerTagArrayOutput {
	return o
}

func (o TransformerTagArrayOutput) ToTransformerTagArrayOutputWithContext(ctx context.Context) TransformerTagArrayOutput {
	return o
}

func (o TransformerTagArrayOutput) Index(i pulumi.IntInput) TransformerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerTag {
		return vs[0].([]TransformerTag)[vs[1].(int)]
	}).(TransformerTagOutput)
}

type TransformerTapPos struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// TransformerTapPosInput is an input type that accepts TransformerTapPosArgs and TransformerTapPosOutput values.
// You can construct a concrete instance of `TransformerTapPosInput` via:
//
//	TransformerTapPosArgs{...}
type TransformerTapPosInput interface {
	pulumi.Input

	ToTransformerTapPosOutput() TransformerTapPosOutput
	ToTransformerTapPosOutputWithContext(context.Context) TransformerTapPosOutput
}

type TransformerTapPosArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TransformerTapPosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerTapPos)(nil)).Elem()
}

func (i TransformerTapPosArgs) ToTransformerTapPosOutput() TransformerTapPosOutput {
	return i.ToTransformerTapPosOutputWithContext(context.Background())
}

func (i TransformerTapPosArgs) ToTransformerTapPosOutputWithContext(ctx context.Context) TransformerTapPosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerTapPosOutput)
}

func (i TransformerTapPosArgs) ToTransformerTapPosPtrOutput() TransformerTapPosPtrOutput {
	return i.ToTransformerTapPosPtrOutputWithContext(context.Background())
}

func (i TransformerTapPosArgs) ToTransformerTapPosPtrOutputWithContext(ctx context.Context) TransformerTapPosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerTapPosOutput).ToTransformerTapPosPtrOutputWithContext(ctx)
}

// TransformerTapPosPtrInput is an input type that accepts TransformerTapPosArgs, TransformerTapPosPtr and TransformerTapPosPtrOutput values.
// You can construct a concrete instance of `TransformerTapPosPtrInput` via:
//
//	        TransformerTapPosArgs{...}
//
//	or:
//
//	        nil
type TransformerTapPosPtrInput interface {
	pulumi.Input

	ToTransformerTapPosPtrOutput() TransformerTapPosPtrOutput
	ToTransformerTapPosPtrOutputWithContext(context.Context) TransformerTapPosPtrOutput
}

type transformerTapPosPtrType TransformerTapPosArgs

func TransformerTapPosPtr(v *TransformerTapPosArgs) TransformerTapPosPtrInput {
	return (*transformerTapPosPtrType)(v)
}

func (*transformerTapPosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerTapPos)(nil)).Elem()
}

func (i *transformerTapPosPtrType) ToTransformerTapPosPtrOutput() TransformerTapPosPtrOutput {
	return i.ToTransformerTapPosPtrOutputWithContext(context.Background())
}

func (i *transformerTapPosPtrType) ToTransformerTapPosPtrOutputWithContext(ctx context.Context) TransformerTapPosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerTapPosPtrOutput)
}

type TransformerTapPosOutput struct{ *pulumi.OutputState }

func (TransformerTapPosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerTapPos)(nil)).Elem()
}

func (o TransformerTapPosOutput) ToTransformerTapPosOutput() TransformerTapPosOutput {
	return o
}

func (o TransformerTapPosOutput) ToTransformerTapPosOutputWithContext(ctx context.Context) TransformerTapPosOutput {
	return o
}

func (o TransformerTapPosOutput) ToTransformerTapPosPtrOutput() TransformerTapPosPtrOutput {
	return o.ToTransformerTapPosPtrOutputWithContext(context.Background())
}

func (o TransformerTapPosOutput) ToTransformerTapPosPtrOutputWithContext(ctx context.Context) TransformerTapPosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerTapPos) *TransformerTapPos {
		return &v
	}).(TransformerTapPosPtrOutput)
}

// reference to the asset to be linked to
func (o TransformerTapPosOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerTapPos) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerTapPosOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerTapPos) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerTapPosOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerTapPos) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerTapPosOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerTapPos) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerTapPosOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerTapPos) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerTapPosOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerTapPos) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TransformerTapPosPtrOutput struct{ *pulumi.OutputState }

func (TransformerTapPosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerTapPos)(nil)).Elem()
}

func (o TransformerTapPosPtrOutput) ToTransformerTapPosPtrOutput() TransformerTapPosPtrOutput {
	return o
}

func (o TransformerTapPosPtrOutput) ToTransformerTapPosPtrOutputWithContext(ctx context.Context) TransformerTapPosPtrOutput {
	return o
}

func (o TransformerTapPosPtrOutput) Elem() TransformerTapPosOutput {
	return o.ApplyT(func(v *TransformerTapPos) TransformerTapPos {
		if v != nil {
			return *v
		}
		var ret TransformerTapPos
		return ret
	}).(TransformerTapPosOutput)
}

// reference to the asset to be linked to
func (o TransformerTapPosPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerTapPos) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerTapPosPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerTapPos) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerTapPosPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerTapPos) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerTapPosPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerTapPos) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerTapPosPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerTapPos) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerTapPosPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerTapPos) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TransformerVoltageHv struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerVoltageHvInput is an input type that accepts TransformerVoltageHvArgs and TransformerVoltageHvOutput values.
// You can construct a concrete instance of `TransformerVoltageHvInput` via:
//
//	TransformerVoltageHvArgs{...}
type TransformerVoltageHvInput interface {
	pulumi.Input

	ToTransformerVoltageHvOutput() TransformerVoltageHvOutput
	ToTransformerVoltageHvOutputWithContext(context.Context) TransformerVoltageHvOutput
}

type TransformerVoltageHvArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerVoltageHvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerVoltageHv)(nil)).Elem()
}

func (i TransformerVoltageHvArgs) ToTransformerVoltageHvOutput() TransformerVoltageHvOutput {
	return i.ToTransformerVoltageHvOutputWithContext(context.Background())
}

func (i TransformerVoltageHvArgs) ToTransformerVoltageHvOutputWithContext(ctx context.Context) TransformerVoltageHvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerVoltageHvOutput)
}

// TransformerVoltageHvArrayInput is an input type that accepts TransformerVoltageHvArray and TransformerVoltageHvArrayOutput values.
// You can construct a concrete instance of `TransformerVoltageHvArrayInput` via:
//
//	TransformerVoltageHvArray{ TransformerVoltageHvArgs{...} }
type TransformerVoltageHvArrayInput interface {
	pulumi.Input

	ToTransformerVoltageHvArrayOutput() TransformerVoltageHvArrayOutput
	ToTransformerVoltageHvArrayOutputWithContext(context.Context) TransformerVoltageHvArrayOutput
}

type TransformerVoltageHvArray []TransformerVoltageHvInput

func (TransformerVoltageHvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerVoltageHv)(nil)).Elem()
}

func (i TransformerVoltageHvArray) ToTransformerVoltageHvArrayOutput() TransformerVoltageHvArrayOutput {
	return i.ToTransformerVoltageHvArrayOutputWithContext(context.Background())
}

func (i TransformerVoltageHvArray) ToTransformerVoltageHvArrayOutputWithContext(ctx context.Context) TransformerVoltageHvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerVoltageHvArrayOutput)
}

type TransformerVoltageHvOutput struct{ *pulumi.OutputState }

func (TransformerVoltageHvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerVoltageHv)(nil)).Elem()
}

func (o TransformerVoltageHvOutput) ToTransformerVoltageHvOutput() TransformerVoltageHvOutput {
	return o
}

func (o TransformerVoltageHvOutput) ToTransformerVoltageHvOutputWithContext(ctx context.Context) TransformerVoltageHvOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerVoltageHvOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerVoltageHv) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerVoltageHvOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerVoltageHv) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerVoltageHvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerVoltageHv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerVoltageHvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerVoltageHv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerVoltageHvOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerVoltageHv) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerVoltageHvArrayOutput struct{ *pulumi.OutputState }

func (TransformerVoltageHvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerVoltageHv)(nil)).Elem()
}

func (o TransformerVoltageHvArrayOutput) ToTransformerVoltageHvArrayOutput() TransformerVoltageHvArrayOutput {
	return o
}

func (o TransformerVoltageHvArrayOutput) ToTransformerVoltageHvArrayOutputWithContext(ctx context.Context) TransformerVoltageHvArrayOutput {
	return o
}

func (o TransformerVoltageHvArrayOutput) Index(i pulumi.IntInput) TransformerVoltageHvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerVoltageHv {
		return vs[0].([]TransformerVoltageHv)[vs[1].(int)]
	}).(TransformerVoltageHvOutput)
}

type TransformerVoltageLv struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
}

// TransformerVoltageLvInput is an input type that accepts TransformerVoltageLvArgs and TransformerVoltageLvOutput values.
// You can construct a concrete instance of `TransformerVoltageLvInput` via:
//
//	TransformerVoltageLvArgs{...}
type TransformerVoltageLvInput interface {
	pulumi.Input

	ToTransformerVoltageLvOutput() TransformerVoltageLvOutput
	ToTransformerVoltageLvOutputWithContext(context.Context) TransformerVoltageLvOutput
}

type TransformerVoltageLvArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (TransformerVoltageLvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerVoltageLv)(nil)).Elem()
}

func (i TransformerVoltageLvArgs) ToTransformerVoltageLvOutput() TransformerVoltageLvOutput {
	return i.ToTransformerVoltageLvOutputWithContext(context.Background())
}

func (i TransformerVoltageLvArgs) ToTransformerVoltageLvOutputWithContext(ctx context.Context) TransformerVoltageLvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerVoltageLvOutput)
}

// TransformerVoltageLvArrayInput is an input type that accepts TransformerVoltageLvArray and TransformerVoltageLvArrayOutput values.
// You can construct a concrete instance of `TransformerVoltageLvArrayInput` via:
//
//	TransformerVoltageLvArray{ TransformerVoltageLvArgs{...} }
type TransformerVoltageLvArrayInput interface {
	pulumi.Input

	ToTransformerVoltageLvArrayOutput() TransformerVoltageLvArrayOutput
	ToTransformerVoltageLvArrayOutputWithContext(context.Context) TransformerVoltageLvArrayOutput
}

type TransformerVoltageLvArray []TransformerVoltageLvInput

func (TransformerVoltageLvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerVoltageLv)(nil)).Elem()
}

func (i TransformerVoltageLvArray) ToTransformerVoltageLvArrayOutput() TransformerVoltageLvArrayOutput {
	return i.ToTransformerVoltageLvArrayOutputWithContext(context.Background())
}

func (i TransformerVoltageLvArray) ToTransformerVoltageLvArrayOutputWithContext(ctx context.Context) TransformerVoltageLvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerVoltageLvArrayOutput)
}

type TransformerVoltageLvOutput struct{ *pulumi.OutputState }

func (TransformerVoltageLvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerVoltageLv)(nil)).Elem()
}

func (o TransformerVoltageLvOutput) ToTransformerVoltageLvOutput() TransformerVoltageLvOutput {
	return o
}

func (o TransformerVoltageLvOutput) ToTransformerVoltageLvOutputWithContext(ctx context.Context) TransformerVoltageLvOutput {
	return o
}

// reference to the asset to be linked to
func (o TransformerVoltageLvOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerVoltageLv) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerVoltageLvOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerVoltageLv) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerVoltageLvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerVoltageLv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerVoltageLvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerVoltageLv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerVoltageLvOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerVoltageLv) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type TransformerVoltageLvArrayOutput struct{ *pulumi.OutputState }

func (TransformerVoltageLvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerVoltageLv)(nil)).Elem()
}

func (o TransformerVoltageLvArrayOutput) ToTransformerVoltageLvArrayOutput() TransformerVoltageLvArrayOutput {
	return o
}

func (o TransformerVoltageLvArrayOutput) ToTransformerVoltageLvArrayOutputWithContext(ctx context.Context) TransformerVoltageLvArrayOutput {
	return o
}

func (o TransformerVoltageLvArrayOutput) Index(i pulumi.IntInput) TransformerVoltageLvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerVoltageLv {
		return vs[0].([]TransformerVoltageLv)[vs[1].(int)]
	}).(TransformerVoltageLvOutput)
}

type TransformerXnOhm struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// id of the resource
	Id *string `pulumi:"id"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// unit of measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

// TransformerXnOhmInput is an input type that accepts TransformerXnOhmArgs and TransformerXnOhmOutput values.
// You can construct a concrete instance of `TransformerXnOhmInput` via:
//
//	TransformerXnOhmArgs{...}
type TransformerXnOhmInput interface {
	pulumi.Input

	ToTransformerXnOhmOutput() TransformerXnOhmOutput
	ToTransformerXnOhmOutputWithContext(context.Context) TransformerXnOhmOutput
}

type TransformerXnOhmArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput `pulumi:"asset"`
	// id of the resource
	Id pulumi.StringPtrInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput `pulumi:"type"`
	// unit of measure
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TransformerXnOhmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerXnOhm)(nil)).Elem()
}

func (i TransformerXnOhmArgs) ToTransformerXnOhmOutput() TransformerXnOhmOutput {
	return i.ToTransformerXnOhmOutputWithContext(context.Background())
}

func (i TransformerXnOhmArgs) ToTransformerXnOhmOutputWithContext(ctx context.Context) TransformerXnOhmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerXnOhmOutput)
}

func (i TransformerXnOhmArgs) ToTransformerXnOhmPtrOutput() TransformerXnOhmPtrOutput {
	return i.ToTransformerXnOhmPtrOutputWithContext(context.Background())
}

func (i TransformerXnOhmArgs) ToTransformerXnOhmPtrOutputWithContext(ctx context.Context) TransformerXnOhmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerXnOhmOutput).ToTransformerXnOhmPtrOutputWithContext(ctx)
}

// TransformerXnOhmPtrInput is an input type that accepts TransformerXnOhmArgs, TransformerXnOhmPtr and TransformerXnOhmPtrOutput values.
// You can construct a concrete instance of `TransformerXnOhmPtrInput` via:
//
//	        TransformerXnOhmArgs{...}
//
//	or:
//
//	        nil
type TransformerXnOhmPtrInput interface {
	pulumi.Input

	ToTransformerXnOhmPtrOutput() TransformerXnOhmPtrOutput
	ToTransformerXnOhmPtrOutputWithContext(context.Context) TransformerXnOhmPtrOutput
}

type transformerXnOhmPtrType TransformerXnOhmArgs

func TransformerXnOhmPtr(v *TransformerXnOhmArgs) TransformerXnOhmPtrInput {
	return (*transformerXnOhmPtrType)(v)
}

func (*transformerXnOhmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerXnOhm)(nil)).Elem()
}

func (i *transformerXnOhmPtrType) ToTransformerXnOhmPtrOutput() TransformerXnOhmPtrOutput {
	return i.ToTransformerXnOhmPtrOutputWithContext(context.Background())
}

func (i *transformerXnOhmPtrType) ToTransformerXnOhmPtrOutputWithContext(ctx context.Context) TransformerXnOhmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerXnOhmPtrOutput)
}

type TransformerXnOhmOutput struct{ *pulumi.OutputState }

func (TransformerXnOhmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerXnOhm)(nil)).Elem()
}

func (o TransformerXnOhmOutput) ToTransformerXnOhmOutput() TransformerXnOhmOutput {
	return o
}

func (o TransformerXnOhmOutput) ToTransformerXnOhmOutputWithContext(ctx context.Context) TransformerXnOhmOutput {
	return o
}

func (o TransformerXnOhmOutput) ToTransformerXnOhmPtrOutput() TransformerXnOhmPtrOutput {
	return o.ToTransformerXnOhmPtrOutputWithContext(context.Background())
}

func (o TransformerXnOhmOutput) ToTransformerXnOhmPtrOutputWithContext(ctx context.Context) TransformerXnOhmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerXnOhm) *TransformerXnOhm {
		return &v
	}).(TransformerXnOhmPtrOutput)
}

// reference to the asset to be linked to
func (o TransformerXnOhmOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerXnOhm) *string { return v.Asset }).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerXnOhmOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerXnOhm) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerXnOhmOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerXnOhm) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerXnOhmOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerXnOhm) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerXnOhmOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerXnOhm) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerXnOhmOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerXnOhm) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TransformerXnOhmPtrOutput struct{ *pulumi.OutputState }

func (TransformerXnOhmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerXnOhm)(nil)).Elem()
}

func (o TransformerXnOhmPtrOutput) ToTransformerXnOhmPtrOutput() TransformerXnOhmPtrOutput {
	return o
}

func (o TransformerXnOhmPtrOutput) ToTransformerXnOhmPtrOutputWithContext(ctx context.Context) TransformerXnOhmPtrOutput {
	return o
}

func (o TransformerXnOhmPtrOutput) Elem() TransformerXnOhmOutput {
	return o.ApplyT(func(v *TransformerXnOhm) TransformerXnOhm {
		if v != nil {
			return *v
		}
		var ret TransformerXnOhm
		return ret
	}).(TransformerXnOhmOutput)
}

// reference to the asset to be linked to
func (o TransformerXnOhmPtrOutput) Asset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerXnOhm) *string {
		if v == nil {
			return nil
		}
		return v.Asset
	}).(pulumi.StringPtrOutput)
}

// id of the resource
func (o TransformerXnOhmPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerXnOhm) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// name of the resource
func (o TransformerXnOhmPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerXnOhm) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o TransformerXnOhmPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerXnOhm) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// unit of measure
func (o TransformerXnOhmPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerXnOhm) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// metadata value
func (o TransformerXnOhmPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerXnOhm) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type GetAssetKindsKind struct {
	// Id of the resource
	Id string `pulumi:"id"`
	// name of the resource
	Name string `pulumi:"name"`
}

// GetAssetKindsKindInput is an input type that accepts GetAssetKindsKindArgs and GetAssetKindsKindOutput values.
// You can construct a concrete instance of `GetAssetKindsKindInput` via:
//
//	GetAssetKindsKindArgs{...}
type GetAssetKindsKindInput interface {
	pulumi.Input

	ToGetAssetKindsKindOutput() GetAssetKindsKindOutput
	ToGetAssetKindsKindOutputWithContext(context.Context) GetAssetKindsKindOutput
}

type GetAssetKindsKindArgs struct {
	// Id of the resource
	Id pulumi.StringInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAssetKindsKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAssetKindsKind)(nil)).Elem()
}

func (i GetAssetKindsKindArgs) ToGetAssetKindsKindOutput() GetAssetKindsKindOutput {
	return i.ToGetAssetKindsKindOutputWithContext(context.Background())
}

func (i GetAssetKindsKindArgs) ToGetAssetKindsKindOutputWithContext(ctx context.Context) GetAssetKindsKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAssetKindsKindOutput)
}

// GetAssetKindsKindArrayInput is an input type that accepts GetAssetKindsKindArray and GetAssetKindsKindArrayOutput values.
// You can construct a concrete instance of `GetAssetKindsKindArrayInput` via:
//
//	GetAssetKindsKindArray{ GetAssetKindsKindArgs{...} }
type GetAssetKindsKindArrayInput interface {
	pulumi.Input

	ToGetAssetKindsKindArrayOutput() GetAssetKindsKindArrayOutput
	ToGetAssetKindsKindArrayOutputWithContext(context.Context) GetAssetKindsKindArrayOutput
}

type GetAssetKindsKindArray []GetAssetKindsKindInput

func (GetAssetKindsKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAssetKindsKind)(nil)).Elem()
}

func (i GetAssetKindsKindArray) ToGetAssetKindsKindArrayOutput() GetAssetKindsKindArrayOutput {
	return i.ToGetAssetKindsKindArrayOutputWithContext(context.Background())
}

func (i GetAssetKindsKindArray) ToGetAssetKindsKindArrayOutputWithContext(ctx context.Context) GetAssetKindsKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAssetKindsKindArrayOutput)
}

type GetAssetKindsKindOutput struct{ *pulumi.OutputState }

func (GetAssetKindsKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAssetKindsKind)(nil)).Elem()
}

func (o GetAssetKindsKindOutput) ToGetAssetKindsKindOutput() GetAssetKindsKindOutput {
	return o
}

func (o GetAssetKindsKindOutput) ToGetAssetKindsKindOutputWithContext(ctx context.Context) GetAssetKindsKindOutput {
	return o
}

// Id of the resource
func (o GetAssetKindsKindOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAssetKindsKind) string { return v.Id }).(pulumi.StringOutput)
}

// name of the resource
func (o GetAssetKindsKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAssetKindsKind) string { return v.Name }).(pulumi.StringOutput)
}

type GetAssetKindsKindArrayOutput struct{ *pulumi.OutputState }

func (GetAssetKindsKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAssetKindsKind)(nil)).Elem()
}

func (o GetAssetKindsKindArrayOutput) ToGetAssetKindsKindArrayOutput() GetAssetKindsKindArrayOutput {
	return o
}

func (o GetAssetKindsKindArrayOutput) ToGetAssetKindsKindArrayOutputWithContext(ctx context.Context) GetAssetKindsKindArrayOutput {
	return o
}

func (o GetAssetKindsKindArrayOutput) Index(i pulumi.IntInput) GetAssetKindsKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAssetKindsKind {
		return vs[0].([]GetAssetKindsKind)[vs[1].(int)]
	}).(GetAssetKindsKindOutput)
}

type GetBusesTag struct {
	// Id of the resource
	Id string `pulumi:"id"`
	// name of the resource
	Name string `pulumi:"name"`
}

// GetBusesTagInput is an input type that accepts GetBusesTagArgs and GetBusesTagOutput values.
// You can construct a concrete instance of `GetBusesTagInput` via:
//
//	GetBusesTagArgs{...}
type GetBusesTagInput interface {
	pulumi.Input

	ToGetBusesTagOutput() GetBusesTagOutput
	ToGetBusesTagOutputWithContext(context.Context) GetBusesTagOutput
}

type GetBusesTagArgs struct {
	// Id of the resource
	Id pulumi.StringInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetBusesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusesTag)(nil)).Elem()
}

func (i GetBusesTagArgs) ToGetBusesTagOutput() GetBusesTagOutput {
	return i.ToGetBusesTagOutputWithContext(context.Background())
}

func (i GetBusesTagArgs) ToGetBusesTagOutputWithContext(ctx context.Context) GetBusesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusesTagOutput)
}

// GetBusesTagArrayInput is an input type that accepts GetBusesTagArray and GetBusesTagArrayOutput values.
// You can construct a concrete instance of `GetBusesTagArrayInput` via:
//
//	GetBusesTagArray{ GetBusesTagArgs{...} }
type GetBusesTagArrayInput interface {
	pulumi.Input

	ToGetBusesTagArrayOutput() GetBusesTagArrayOutput
	ToGetBusesTagArrayOutputWithContext(context.Context) GetBusesTagArrayOutput
}

type GetBusesTagArray []GetBusesTagInput

func (GetBusesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusesTag)(nil)).Elem()
}

func (i GetBusesTagArray) ToGetBusesTagArrayOutput() GetBusesTagArrayOutput {
	return i.ToGetBusesTagArrayOutputWithContext(context.Background())
}

func (i GetBusesTagArray) ToGetBusesTagArrayOutputWithContext(ctx context.Context) GetBusesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusesTagArrayOutput)
}

type GetBusesTagOutput struct{ *pulumi.OutputState }

func (GetBusesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusesTag)(nil)).Elem()
}

func (o GetBusesTagOutput) ToGetBusesTagOutput() GetBusesTagOutput {
	return o
}

func (o GetBusesTagOutput) ToGetBusesTagOutputWithContext(ctx context.Context) GetBusesTagOutput {
	return o
}

// Id of the resource
func (o GetBusesTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusesTag) string { return v.Id }).(pulumi.StringOutput)
}

// name of the resource
func (o GetBusesTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusesTag) string { return v.Name }).(pulumi.StringOutput)
}

type GetBusesTagArrayOutput struct{ *pulumi.OutputState }

func (GetBusesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusesTag)(nil)).Elem()
}

func (o GetBusesTagArrayOutput) ToGetBusesTagArrayOutput() GetBusesTagArrayOutput {
	return o
}

func (o GetBusesTagArrayOutput) ToGetBusesTagArrayOutputWithContext(ctx context.Context) GetBusesTagArrayOutput {
	return o
}

func (o GetBusesTagArrayOutput) Index(i pulumi.IntInput) GetBusesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBusesTag {
		return vs[0].([]GetBusesTag)[vs[1].(int)]
	}).(GetBusesTagOutput)
}

type GetGeneratorsTag struct {
	// Id of the resource
	Id string `pulumi:"id"`
	// name of the resource
	Name string `pulumi:"name"`
}

// GetGeneratorsTagInput is an input type that accepts GetGeneratorsTagArgs and GetGeneratorsTagOutput values.
// You can construct a concrete instance of `GetGeneratorsTagInput` via:
//
//	GetGeneratorsTagArgs{...}
type GetGeneratorsTagInput interface {
	pulumi.Input

	ToGetGeneratorsTagOutput() GetGeneratorsTagOutput
	ToGetGeneratorsTagOutputWithContext(context.Context) GetGeneratorsTagOutput
}

type GetGeneratorsTagArgs struct {
	// Id of the resource
	Id pulumi.StringInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetGeneratorsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGeneratorsTag)(nil)).Elem()
}

func (i GetGeneratorsTagArgs) ToGetGeneratorsTagOutput() GetGeneratorsTagOutput {
	return i.ToGetGeneratorsTagOutputWithContext(context.Background())
}

func (i GetGeneratorsTagArgs) ToGetGeneratorsTagOutputWithContext(ctx context.Context) GetGeneratorsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGeneratorsTagOutput)
}

// GetGeneratorsTagArrayInput is an input type that accepts GetGeneratorsTagArray and GetGeneratorsTagArrayOutput values.
// You can construct a concrete instance of `GetGeneratorsTagArrayInput` via:
//
//	GetGeneratorsTagArray{ GetGeneratorsTagArgs{...} }
type GetGeneratorsTagArrayInput interface {
	pulumi.Input

	ToGetGeneratorsTagArrayOutput() GetGeneratorsTagArrayOutput
	ToGetGeneratorsTagArrayOutputWithContext(context.Context) GetGeneratorsTagArrayOutput
}

type GetGeneratorsTagArray []GetGeneratorsTagInput

func (GetGeneratorsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGeneratorsTag)(nil)).Elem()
}

func (i GetGeneratorsTagArray) ToGetGeneratorsTagArrayOutput() GetGeneratorsTagArrayOutput {
	return i.ToGetGeneratorsTagArrayOutputWithContext(context.Background())
}

func (i GetGeneratorsTagArray) ToGetGeneratorsTagArrayOutputWithContext(ctx context.Context) GetGeneratorsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGeneratorsTagArrayOutput)
}

type GetGeneratorsTagOutput struct{ *pulumi.OutputState }

func (GetGeneratorsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGeneratorsTag)(nil)).Elem()
}

func (o GetGeneratorsTagOutput) ToGetGeneratorsTagOutput() GetGeneratorsTagOutput {
	return o
}

func (o GetGeneratorsTagOutput) ToGetGeneratorsTagOutputWithContext(ctx context.Context) GetGeneratorsTagOutput {
	return o
}

// Id of the resource
func (o GetGeneratorsTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGeneratorsTag) string { return v.Id }).(pulumi.StringOutput)
}

// name of the resource
func (o GetGeneratorsTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGeneratorsTag) string { return v.Name }).(pulumi.StringOutput)
}

type GetGeneratorsTagArrayOutput struct{ *pulumi.OutputState }

func (GetGeneratorsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGeneratorsTag)(nil)).Elem()
}

func (o GetGeneratorsTagArrayOutput) ToGetGeneratorsTagArrayOutput() GetGeneratorsTagArrayOutput {
	return o
}

func (o GetGeneratorsTagArrayOutput) ToGetGeneratorsTagArrayOutputWithContext(ctx context.Context) GetGeneratorsTagArrayOutput {
	return o
}

func (o GetGeneratorsTagArrayOutput) Index(i pulumi.IntInput) GetGeneratorsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGeneratorsTag {
		return vs[0].([]GetGeneratorsTag)[vs[1].(int)]
	}).(GetGeneratorsTagOutput)
}

type GetGridsTag struct {
	// Id of the resource
	Id string `pulumi:"id"`
	// name of the resource
	Name string `pulumi:"name"`
}

// GetGridsTagInput is an input type that accepts GetGridsTagArgs and GetGridsTagOutput values.
// You can construct a concrete instance of `GetGridsTagInput` via:
//
//	GetGridsTagArgs{...}
type GetGridsTagInput interface {
	pulumi.Input

	ToGetGridsTagOutput() GetGridsTagOutput
	ToGetGridsTagOutputWithContext(context.Context) GetGridsTagOutput
}

type GetGridsTagArgs struct {
	// Id of the resource
	Id pulumi.StringInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetGridsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGridsTag)(nil)).Elem()
}

func (i GetGridsTagArgs) ToGetGridsTagOutput() GetGridsTagOutput {
	return i.ToGetGridsTagOutputWithContext(context.Background())
}

func (i GetGridsTagArgs) ToGetGridsTagOutputWithContext(ctx context.Context) GetGridsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGridsTagOutput)
}

// GetGridsTagArrayInput is an input type that accepts GetGridsTagArray and GetGridsTagArrayOutput values.
// You can construct a concrete instance of `GetGridsTagArrayInput` via:
//
//	GetGridsTagArray{ GetGridsTagArgs{...} }
type GetGridsTagArrayInput interface {
	pulumi.Input

	ToGetGridsTagArrayOutput() GetGridsTagArrayOutput
	ToGetGridsTagArrayOutputWithContext(context.Context) GetGridsTagArrayOutput
}

type GetGridsTagArray []GetGridsTagInput

func (GetGridsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGridsTag)(nil)).Elem()
}

func (i GetGridsTagArray) ToGetGridsTagArrayOutput() GetGridsTagArrayOutput {
	return i.ToGetGridsTagArrayOutputWithContext(context.Background())
}

func (i GetGridsTagArray) ToGetGridsTagArrayOutputWithContext(ctx context.Context) GetGridsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGridsTagArrayOutput)
}

type GetGridsTagOutput struct{ *pulumi.OutputState }

func (GetGridsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGridsTag)(nil)).Elem()
}

func (o GetGridsTagOutput) ToGetGridsTagOutput() GetGridsTagOutput {
	return o
}

func (o GetGridsTagOutput) ToGetGridsTagOutputWithContext(ctx context.Context) GetGridsTagOutput {
	return o
}

// Id of the resource
func (o GetGridsTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGridsTag) string { return v.Id }).(pulumi.StringOutput)
}

// name of the resource
func (o GetGridsTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGridsTag) string { return v.Name }).(pulumi.StringOutput)
}

type GetGridsTagArrayOutput struct{ *pulumi.OutputState }

func (GetGridsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGridsTag)(nil)).Elem()
}

func (o GetGridsTagArrayOutput) ToGetGridsTagArrayOutput() GetGridsTagArrayOutput {
	return o
}

func (o GetGridsTagArrayOutput) ToGetGridsTagArrayOutputWithContext(ctx context.Context) GetGridsTagArrayOutput {
	return o
}

func (o GetGridsTagArrayOutput) Index(i pulumi.IntInput) GetGridsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGridsTag {
		return vs[0].([]GetGridsTag)[vs[1].(int)]
	}).(GetGridsTagOutput)
}

type GetLinesTag struct {
	// Id of the resource
	Id string `pulumi:"id"`
	// name of the resource
	Name string `pulumi:"name"`
}

// GetLinesTagInput is an input type that accepts GetLinesTagArgs and GetLinesTagOutput values.
// You can construct a concrete instance of `GetLinesTagInput` via:
//
//	GetLinesTagArgs{...}
type GetLinesTagInput interface {
	pulumi.Input

	ToGetLinesTagOutput() GetLinesTagOutput
	ToGetLinesTagOutputWithContext(context.Context) GetLinesTagOutput
}

type GetLinesTagArgs struct {
	// Id of the resource
	Id pulumi.StringInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetLinesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLinesTag)(nil)).Elem()
}

func (i GetLinesTagArgs) ToGetLinesTagOutput() GetLinesTagOutput {
	return i.ToGetLinesTagOutputWithContext(context.Background())
}

func (i GetLinesTagArgs) ToGetLinesTagOutputWithContext(ctx context.Context) GetLinesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLinesTagOutput)
}

// GetLinesTagArrayInput is an input type that accepts GetLinesTagArray and GetLinesTagArrayOutput values.
// You can construct a concrete instance of `GetLinesTagArrayInput` via:
//
//	GetLinesTagArray{ GetLinesTagArgs{...} }
type GetLinesTagArrayInput interface {
	pulumi.Input

	ToGetLinesTagArrayOutput() GetLinesTagArrayOutput
	ToGetLinesTagArrayOutputWithContext(context.Context) GetLinesTagArrayOutput
}

type GetLinesTagArray []GetLinesTagInput

func (GetLinesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLinesTag)(nil)).Elem()
}

func (i GetLinesTagArray) ToGetLinesTagArrayOutput() GetLinesTagArrayOutput {
	return i.ToGetLinesTagArrayOutputWithContext(context.Background())
}

func (i GetLinesTagArray) ToGetLinesTagArrayOutputWithContext(ctx context.Context) GetLinesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLinesTagArrayOutput)
}

type GetLinesTagOutput struct{ *pulumi.OutputState }

func (GetLinesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLinesTag)(nil)).Elem()
}

func (o GetLinesTagOutput) ToGetLinesTagOutput() GetLinesTagOutput {
	return o
}

func (o GetLinesTagOutput) ToGetLinesTagOutputWithContext(ctx context.Context) GetLinesTagOutput {
	return o
}

// Id of the resource
func (o GetLinesTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLinesTag) string { return v.Id }).(pulumi.StringOutput)
}

// name of the resource
func (o GetLinesTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLinesTag) string { return v.Name }).(pulumi.StringOutput)
}

type GetLinesTagArrayOutput struct{ *pulumi.OutputState }

func (GetLinesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLinesTag)(nil)).Elem()
}

func (o GetLinesTagArrayOutput) ToGetLinesTagArrayOutput() GetLinesTagArrayOutput {
	return o
}

func (o GetLinesTagArrayOutput) ToGetLinesTagArrayOutputWithContext(ctx context.Context) GetLinesTagArrayOutput {
	return o
}

func (o GetLinesTagArrayOutput) Index(i pulumi.IntInput) GetLinesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLinesTag {
		return vs[0].([]GetLinesTag)[vs[1].(int)]
	}).(GetLinesTagOutput)
}

type GetTagsTag struct {
	// Id of the resource
	Id string `pulumi:"id"`
	// name of the resource
	Name string `pulumi:"name"`
}

// GetTagsTagInput is an input type that accepts GetTagsTagArgs and GetTagsTagOutput values.
// You can construct a concrete instance of `GetTagsTagInput` via:
//
//	GetTagsTagArgs{...}
type GetTagsTagInput interface {
	pulumi.Input

	ToGetTagsTagOutput() GetTagsTagOutput
	ToGetTagsTagOutputWithContext(context.Context) GetTagsTagOutput
}

type GetTagsTagArgs struct {
	// Id of the resource
	Id pulumi.StringInput `pulumi:"id"`
	// name of the resource
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetTagsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTag)(nil)).Elem()
}

func (i GetTagsTagArgs) ToGetTagsTagOutput() GetTagsTagOutput {
	return i.ToGetTagsTagOutputWithContext(context.Background())
}

func (i GetTagsTagArgs) ToGetTagsTagOutputWithContext(ctx context.Context) GetTagsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsTagOutput)
}

// GetTagsTagArrayInput is an input type that accepts GetTagsTagArray and GetTagsTagArrayOutput values.
// You can construct a concrete instance of `GetTagsTagArrayInput` via:
//
//	GetTagsTagArray{ GetTagsTagArgs{...} }
type GetTagsTagArrayInput interface {
	pulumi.Input

	ToGetTagsTagArrayOutput() GetTagsTagArrayOutput
	ToGetTagsTagArrayOutputWithContext(context.Context) GetTagsTagArrayOutput
}

type GetTagsTagArray []GetTagsTagInput

func (GetTagsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsTag)(nil)).Elem()
}

func (i GetTagsTagArray) ToGetTagsTagArrayOutput() GetTagsTagArrayOutput {
	return i.ToGetTagsTagArrayOutputWithContext(context.Background())
}

func (i GetTagsTagArray) ToGetTagsTagArrayOutputWithContext(ctx context.Context) GetTagsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsTagArrayOutput)
}

type GetTagsTagOutput struct{ *pulumi.OutputState }

func (GetTagsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTag)(nil)).Elem()
}

func (o GetTagsTagOutput) ToGetTagsTagOutput() GetTagsTagOutput {
	return o
}

func (o GetTagsTagOutput) ToGetTagsTagOutputWithContext(ctx context.Context) GetTagsTagOutput {
	return o
}

// Id of the resource
func (o GetTagsTagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTag) string { return v.Id }).(pulumi.StringOutput)
}

// name of the resource
func (o GetTagsTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTag) string { return v.Name }).(pulumi.StringOutput)
}

type GetTagsTagArrayOutput struct{ *pulumi.OutputState }

func (GetTagsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsTag)(nil)).Elem()
}

func (o GetTagsTagArrayOutput) ToGetTagsTagArrayOutput() GetTagsTagArrayOutput {
	return o
}

func (o GetTagsTagArrayOutput) ToGetTagsTagArrayOutputWithContext(ctx context.Context) GetTagsTagArrayOutput {
	return o
}

func (o GetTagsTagArrayOutput) Index(i pulumi.IntInput) GetTagsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTagsTag {
		return vs[0].([]GetTagsTag)[vs[1].(int)]
	}).(GetTagsTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionAssetInput)(nil)).Elem(), ActionAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionAssetPtrInput)(nil)).Elem(), ActionAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionSetpointInput)(nil)).Elem(), ActionSetpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionSetpointArrayInput)(nil)).Elem(), ActionSetpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionSetpointAttributeInput)(nil)).Elem(), ActionSetpointAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertAlertItemInput)(nil)).Elem(), AlertAlertItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertAlertItemArrayInput)(nil)).Elem(), AlertAlertItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertAlertItemQueryFilterAssetInput)(nil)).Elem(), AlertAlertItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertAlertItemQueryFilterAttributeInput)(nil)).Elem(), AlertAlertItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertRelatedAssetInput)(nil)).Elem(), AlertRelatedAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertRelatedAssetArrayInput)(nil)).Elem(), AlertRelatedAssetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertTagInput)(nil)).Elem(), AlertTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertTagArrayInput)(nil)).Elem(), AlertTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertThresholdInput)(nil)).Elem(), AlertThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertThresholdArrayInput)(nil)).Elem(), AlertThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlgorithmInputTypeInput)(nil)).Elem(), AlgorithmInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlgorithmInputTypeArrayInput)(nil)).Elem(), AlgorithmInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlgorithmTagInput)(nil)).Elem(), AlgorithmTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlgorithmTagArrayInput)(nil)).Elem(), AlgorithmTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetKindInput)(nil)).Elem(), AssetKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetKindPtrInput)(nil)).Elem(), AssetKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetRelationAssetInput)(nil)).Elem(), AssetRelationAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetRelationAssetPtrInput)(nil)).Elem(), AssetRelationAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetRelationRelatedAssetInput)(nil)).Elem(), AssetRelationRelatedAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetRelationRelatedAssetPtrInput)(nil)).Elem(), AssetRelationRelatedAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetRelationRelatedAssetKindInput)(nil)).Elem(), AssetRelationRelatedAssetKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetRelationRelatedAssetKindPtrInput)(nil)).Elem(), AssetRelationRelatedAssetKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetTagInput)(nil)).Elem(), AssetTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetTagArrayInput)(nil)).Elem(), AssetTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusActivePowerInput)(nil)).Elem(), BusActivePowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusActivePowerArrayInput)(nil)).Elem(), BusActivePowerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusKindInput)(nil)).Elem(), BusKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusKindArrayInput)(nil)).Elem(), BusKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusNominalVoltageKvInput)(nil)).Elem(), BusNominalVoltageKvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusNominalVoltageKvPtrInput)(nil)).Elem(), BusNominalVoltageKvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusReactivePowerInput)(nil)).Elem(), BusReactivePowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusReactivePowerArrayInput)(nil)).Elem(), BusReactivePowerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusTagInput)(nil)).Elem(), BusTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusTagArrayInput)(nil)).Elem(), BusTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandActionInput)(nil)).Elem(), CommandActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandActionArrayInput)(nil)).Elem(), CommandActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandActionAssetInput)(nil)).Elem(), CommandActionAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInputTypeInput)(nil)).Elem(), ComponentInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInputTypeArrayInput)(nil)).Elem(), ComponentInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineConfigInput)(nil)).Elem(), ComponentRoutineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineConfigArrayInput)(nil)).Elem(), ComponentRoutineConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineInputTypeInput)(nil)).Elem(), ComponentRoutineInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineInputTypeArrayInput)(nil)).Elem(), ComponentRoutineInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineInputValueInput)(nil)).Elem(), ComponentRoutineInputValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineInputValueArrayInput)(nil)).Elem(), ComponentRoutineInputValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineOutputTypeInput)(nil)).Elem(), ComponentRoutineOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineOutputTypeArrayInput)(nil)).Elem(), ComponentRoutineOutputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineOutputValueInput)(nil)).Elem(), ComponentRoutineOutputValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineOutputValueArrayInput)(nil)).Elem(), ComponentRoutineOutputValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTagInput)(nil)).Elem(), ComponentTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTagArrayInput)(nil)).Elem(), ComponentTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorInputTypeInput)(nil)).Elem(), ConnectorInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorInputTypeArrayInput)(nil)).Elem(), ConnectorInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorTagInput)(nil)).Elem(), ConnectorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorTagArrayInput)(nil)).Elem(), ConnectorTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardActionlistChartChartItemInput)(nil)).Elem(), DashboardActionlistChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardActionlistChartChartItemArrayInput)(nil)).Elem(), DashboardActionlistChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardActionlistChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardActionlistChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardActionlistChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardActionlistChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardActionlistChartThresholdInput)(nil)).Elem(), DashboardActionlistChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardActionlistChartThresholdArrayInput)(nil)).Elem(), DashboardActionlistChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardActionlistChartValueMappingInput)(nil)).Elem(), DashboardActionlistChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardActionlistChartValueMappingArrayInput)(nil)).Elem(), DashboardActionlistChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlerteventsChartChartItemInput)(nil)).Elem(), DashboardAlerteventsChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlerteventsChartChartItemArrayInput)(nil)).Elem(), DashboardAlerteventsChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlerteventsChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardAlerteventsChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlerteventsChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardAlerteventsChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlerteventsChartThresholdInput)(nil)).Elem(), DashboardAlerteventsChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlerteventsChartThresholdArrayInput)(nil)).Elem(), DashboardAlerteventsChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlerteventsChartValueMappingInput)(nil)).Elem(), DashboardAlerteventsChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlerteventsChartValueMappingArrayInput)(nil)).Elem(), DashboardAlerteventsChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlertlistChartChartItemInput)(nil)).Elem(), DashboardAlertlistChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlertlistChartChartItemArrayInput)(nil)).Elem(), DashboardAlertlistChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlertlistChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardAlertlistChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlertlistChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardAlertlistChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlertlistChartThresholdInput)(nil)).Elem(), DashboardAlertlistChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlertlistChartThresholdArrayInput)(nil)).Elem(), DashboardAlertlistChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlertlistChartValueMappingInput)(nil)).Elem(), DashboardAlertlistChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAlertlistChartValueMappingArrayInput)(nil)).Elem(), DashboardAlertlistChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAssetlistChartChartItemInput)(nil)).Elem(), DashboardAssetlistChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAssetlistChartChartItemArrayInput)(nil)).Elem(), DashboardAssetlistChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAssetlistChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardAssetlistChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAssetlistChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardAssetlistChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAssetlistChartThresholdInput)(nil)).Elem(), DashboardAssetlistChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAssetlistChartThresholdArrayInput)(nil)).Elem(), DashboardAssetlistChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAssetlistChartValueMappingInput)(nil)).Elem(), DashboardAssetlistChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardAssetlistChartValueMappingArrayInput)(nil)).Elem(), DashboardAssetlistChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBarChartChartItemInput)(nil)).Elem(), DashboardBarChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBarChartChartItemArrayInput)(nil)).Elem(), DashboardBarChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBarChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardBarChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBarChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardBarChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBarChartThresholdInput)(nil)).Elem(), DashboardBarChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBarChartThresholdArrayInput)(nil)).Elem(), DashboardBarChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBarChartValueMappingInput)(nil)).Elem(), DashboardBarChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBarChartValueMappingArrayInput)(nil)).Elem(), DashboardBarChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBargaugeChartChartItemInput)(nil)).Elem(), DashboardBargaugeChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBargaugeChartChartItemArrayInput)(nil)).Elem(), DashboardBargaugeChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBargaugeChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardBargaugeChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBargaugeChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardBargaugeChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBargaugeChartThresholdInput)(nil)).Elem(), DashboardBargaugeChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBargaugeChartThresholdArrayInput)(nil)).Elem(), DashboardBargaugeChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBargaugeChartValueMappingInput)(nil)).Elem(), DashboardBargaugeChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardBargaugeChartValueMappingArrayInput)(nil)).Elem(), DashboardBargaugeChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardCommandlistChartChartItemInput)(nil)).Elem(), DashboardCommandlistChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardCommandlistChartChartItemArrayInput)(nil)).Elem(), DashboardCommandlistChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardCommandlistChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardCommandlistChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardCommandlistChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardCommandlistChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardCommandlistChartThresholdInput)(nil)).Elem(), DashboardCommandlistChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardCommandlistChartThresholdArrayInput)(nil)).Elem(), DashboardCommandlistChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardCommandlistChartValueMappingInput)(nil)).Elem(), DashboardCommandlistChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardCommandlistChartValueMappingArrayInput)(nil)).Elem(), DashboardCommandlistChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGaugeChartChartItemInput)(nil)).Elem(), DashboardGaugeChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGaugeChartChartItemArrayInput)(nil)).Elem(), DashboardGaugeChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGaugeChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardGaugeChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGaugeChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardGaugeChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGaugeChartThresholdInput)(nil)).Elem(), DashboardGaugeChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGaugeChartThresholdArrayInput)(nil)).Elem(), DashboardGaugeChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGaugeChartValueMappingInput)(nil)).Elem(), DashboardGaugeChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardGaugeChartValueMappingArrayInput)(nil)).Elem(), DashboardGaugeChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardHistogramChartChartItemInput)(nil)).Elem(), DashboardHistogramChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardHistogramChartChartItemArrayInput)(nil)).Elem(), DashboardHistogramChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardHistogramChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardHistogramChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardHistogramChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardHistogramChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardHistogramChartThresholdInput)(nil)).Elem(), DashboardHistogramChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardHistogramChartThresholdArrayInput)(nil)).Elem(), DashboardHistogramChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardHistogramChartValueMappingInput)(nil)).Elem(), DashboardHistogramChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardHistogramChartValueMappingArrayInput)(nil)).Elem(), DashboardHistogramChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardImageChartChartItemInput)(nil)).Elem(), DashboardImageChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardImageChartChartItemArrayInput)(nil)).Elem(), DashboardImageChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardImageChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardImageChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardImageChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardImageChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardImageChartThresholdInput)(nil)).Elem(), DashboardImageChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardImageChartThresholdArrayInput)(nil)).Elem(), DashboardImageChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardImageChartValueMappingInput)(nil)).Elem(), DashboardImageChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardImageChartValueMappingArrayInput)(nil)).Elem(), DashboardImageChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardRelatedAssetInput)(nil)).Elem(), DashboardRelatedAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardRelatedAssetArrayInput)(nil)).Elem(), DashboardRelatedAssetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStatChartChartItemInput)(nil)).Elem(), DashboardStatChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStatChartChartItemArrayInput)(nil)).Elem(), DashboardStatChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStatChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardStatChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStatChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardStatChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStatChartThresholdInput)(nil)).Elem(), DashboardStatChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStatChartThresholdArrayInput)(nil)).Elem(), DashboardStatChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStatChartValueMappingInput)(nil)).Elem(), DashboardStatChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStatChartValueMappingArrayInput)(nil)).Elem(), DashboardStatChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableChartChartItemInput)(nil)).Elem(), DashboardTableChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableChartChartItemArrayInput)(nil)).Elem(), DashboardTableChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardTableChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardTableChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableChartThresholdInput)(nil)).Elem(), DashboardTableChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableChartThresholdArrayInput)(nil)).Elem(), DashboardTableChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableChartValueMappingInput)(nil)).Elem(), DashboardTableChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableChartValueMappingArrayInput)(nil)).Elem(), DashboardTableChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTagInput)(nil)).Elem(), DashboardTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTagArrayInput)(nil)).Elem(), DashboardTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextChartChartItemInput)(nil)).Elem(), DashboardTextChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextChartChartItemArrayInput)(nil)).Elem(), DashboardTextChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardTextChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardTextChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextChartThresholdInput)(nil)).Elem(), DashboardTextChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextChartThresholdArrayInput)(nil)).Elem(), DashboardTextChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextChartValueMappingInput)(nil)).Elem(), DashboardTextChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextChartValueMappingArrayInput)(nil)).Elem(), DashboardTextChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeseriesChartChartItemInput)(nil)).Elem(), DashboardTimeseriesChartChartItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeseriesChartChartItemArrayInput)(nil)).Elem(), DashboardTimeseriesChartChartItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeseriesChartChartItemQueryFilterAssetInput)(nil)).Elem(), DashboardTimeseriesChartChartItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeseriesChartChartItemQueryFilterAttributeInput)(nil)).Elem(), DashboardTimeseriesChartChartItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeseriesChartThresholdInput)(nil)).Elem(), DashboardTimeseriesChartThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeseriesChartThresholdArrayInput)(nil)).Elem(), DashboardTimeseriesChartThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeseriesChartValueMappingInput)(nil)).Elem(), DashboardTimeseriesChartValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeseriesChartValueMappingArrayInput)(nil)).Elem(), DashboardTimeseriesChartValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalGridKindInput)(nil)).Elem(), ExternalGridKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalGridKindArrayInput)(nil)).Elem(), ExternalGridKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalGridTagInput)(nil)).Elem(), ExternalGridTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalGridTagArrayInput)(nil)).Elem(), ExternalGridTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileRelatedAssetInput)(nil)).Elem(), FileRelatedAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileRelatedAssetArrayInput)(nil)).Elem(), FileRelatedAssetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileTagInput)(nil)).Elem(), FileTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileTagArrayInput)(nil)).Elem(), FileTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionFunctionItemInput)(nil)).Elem(), FunctionFunctionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionFunctionItemArrayInput)(nil)).Elem(), FunctionFunctionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionFunctionItemQueryFilterAssetInput)(nil)).Elem(), FunctionFunctionItemQueryFilterAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionFunctionItemQueryFilterAttributeInput)(nil)).Elem(), FunctionFunctionItemQueryFilterAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTagInput)(nil)).Elem(), FunctionTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTagArrayInput)(nil)).Elem(), FunctionTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTargetAssetInput)(nil)).Elem(), FunctionTargetAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTargetAssetPtrInput)(nil)).Elem(), FunctionTargetAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTargetAttributeInput)(nil)).Elem(), FunctionTargetAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTargetAttributePtrInput)(nil)).Elem(), FunctionTargetAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorActivePowerInput)(nil)).Elem(), GeneratorActivePowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorActivePowerArrayInput)(nil)).Elem(), GeneratorActivePowerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorCo2CoefficientInput)(nil)).Elem(), GeneratorCo2CoefficientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorCo2CoefficientPtrInput)(nil)).Elem(), GeneratorCo2CoefficientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorDailyEmissionAvoidedInput)(nil)).Elem(), GeneratorDailyEmissionAvoidedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorDailyEmissionAvoidedArrayInput)(nil)).Elem(), GeneratorDailyEmissionAvoidedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorDailyEnergyInput)(nil)).Elem(), GeneratorDailyEnergyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorDailyEnergyArrayInput)(nil)).Elem(), GeneratorDailyEnergyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorKindInput)(nil)).Elem(), GeneratorKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorKindArrayInput)(nil)).Elem(), GeneratorKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorMonthlyEnergyInput)(nil)).Elem(), GeneratorMonthlyEnergyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorMonthlyEnergyArrayInput)(nil)).Elem(), GeneratorMonthlyEnergyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorReactivePowerInput)(nil)).Elem(), GeneratorReactivePowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorReactivePowerArrayInput)(nil)).Elem(), GeneratorReactivePowerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorSwitchStatusInput)(nil)).Elem(), GeneratorSwitchStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorSwitchStatusArrayInput)(nil)).Elem(), GeneratorSwitchStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorTagInput)(nil)).Elem(), GeneratorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorTagArrayInput)(nil)).Elem(), GeneratorTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GridKindInput)(nil)).Elem(), GridKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GridKindArrayInput)(nil)).Elem(), GridKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GridTagInput)(nil)).Elem(), GridTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GridTagArrayInput)(nil)).Elem(), GridTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterAccumulatedEnergyInput)(nil)).Elem(), InverterAccumulatedEnergyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterAccumulatedEnergyArrayInput)(nil)).Elem(), InverterAccumulatedEnergyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterActivePowerInput)(nil)).Elem(), InverterActivePowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterActivePowerArrayInput)(nil)).Elem(), InverterActivePowerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterDailyEnergyInput)(nil)).Elem(), InverterDailyEnergyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterDailyEnergyArrayInput)(nil)).Elem(), InverterDailyEnergyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterEnergyMeasurementTypeInput)(nil)).Elem(), InverterEnergyMeasurementTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterEnergyMeasurementTypePtrInput)(nil)).Elem(), InverterEnergyMeasurementTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterKindInput)(nil)).Elem(), InverterKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterKindArrayInput)(nil)).Elem(), InverterKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterMakeInput)(nil)).Elem(), InverterMakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterMakePtrInput)(nil)).Elem(), InverterMakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterMaxActivePowerInput)(nil)).Elem(), InverterMaxActivePowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterMaxActivePowerPtrInput)(nil)).Elem(), InverterMaxActivePowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterModelInput)(nil)).Elem(), InverterModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterModelPtrInput)(nil)).Elem(), InverterModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterRawDailyEnergyInput)(nil)).Elem(), InverterRawDailyEnergyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterRawDailyEnergyArrayInput)(nil)).Elem(), InverterRawDailyEnergyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterSerialNumberInput)(nil)).Elem(), InverterSerialNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterSerialNumberPtrInput)(nil)).Elem(), InverterSerialNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterSwitchStatusInput)(nil)).Elem(), InverterSwitchStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterSwitchStatusArrayInput)(nil)).Elem(), InverterSwitchStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterTagInput)(nil)).Elem(), InverterTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterTagArrayInput)(nil)).Elem(), InverterTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterTemperatureInput)(nil)).Elem(), InverterTemperatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterTemperatureArrayInput)(nil)).Elem(), InverterTemperatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineAbsorptivityInput)(nil)).Elem(), LineAbsorptivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineAbsorptivityPtrInput)(nil)).Elem(), LineAbsorptivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineActivePowerInput)(nil)).Elem(), LineActivePowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineActivePowerArrayInput)(nil)).Elem(), LineActivePowerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineActivePowerEndInput)(nil)).Elem(), LineActivePowerEndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineActivePowerEndArrayInput)(nil)).Elem(), LineActivePowerEndArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineAmpacityInput)(nil)).Elem(), LineAmpacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineAmpacityArrayInput)(nil)).Elem(), LineAmpacityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineAtmosphereInput)(nil)).Elem(), LineAtmosphereArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineAtmospherePtrInput)(nil)).Elem(), LineAtmosphereArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineCapacitanceInput)(nil)).Elem(), LineCapacitanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineCapacitancePtrInput)(nil)).Elem(), LineCapacitanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineConductanceInput)(nil)).Elem(), LineConductanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineConductancePtrInput)(nil)).Elem(), LineConductanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineConductorMassInput)(nil)).Elem(), LineConductorMassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineConductorMassPtrInput)(nil)).Elem(), LineConductorMassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineContingencyInput)(nil)).Elem(), LineContingencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineContingencyArrayInput)(nil)).Elem(), LineContingencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineCurrentInput)(nil)).Elem(), LineCurrentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineCurrentArrayInput)(nil)).Elem(), LineCurrentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineCurrentRInput)(nil)).Elem(), LineCurrentRArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineCurrentRArrayInput)(nil)).Elem(), LineCurrentRArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineCurrentTInput)(nil)).Elem(), LineCurrentTArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineCurrentTArrayInput)(nil)).Elem(), LineCurrentTArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineDiameterInput)(nil)).Elem(), LineDiameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineDiameterPtrInput)(nil)).Elem(), LineDiameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineEmissivityInput)(nil)).Elem(), LineEmissivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineEmissivityPtrInput)(nil)).Elem(), LineEmissivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineEnergyInput)(nil)).Elem(), LineEnergyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineEnergyArrayInput)(nil)).Elem(), LineEnergyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineKindInput)(nil)).Elem(), LineKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineKindArrayInput)(nil)).Elem(), LineKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineLengthInput)(nil)).Elem(), LineLengthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineLengthPtrInput)(nil)).Elem(), LineLengthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaxTemperatureInput)(nil)).Elem(), LineMaxTemperatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaxTemperatureArrayInput)(nil)).Elem(), LineMaxTemperatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaximumAllowedCurrentInput)(nil)).Elem(), LineMaximumAllowedCurrentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaximumAllowedCurrentPtrInput)(nil)).Elem(), LineMaximumAllowedCurrentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaximumAllowedPowerInput)(nil)).Elem(), LineMaximumAllowedPowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaximumAllowedPowerPtrInput)(nil)).Elem(), LineMaximumAllowedPowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaximumAllowedTemperatureInput)(nil)).Elem(), LineMaximumAllowedTemperatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaximumAllowedTemperaturePtrInput)(nil)).Elem(), LineMaximumAllowedTemperatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaximumAllowedTemperatureLteInput)(nil)).Elem(), LineMaximumAllowedTemperatureLteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaximumAllowedTemperatureLtePtrInput)(nil)).Elem(), LineMaximumAllowedTemperatureLteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaximumAllowedTemperatureSteInput)(nil)).Elem(), LineMaximumAllowedTemperatureSteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMaximumAllowedTemperatureStePtrInput)(nil)).Elem(), LineMaximumAllowedTemperatureSteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineNumberOfConductorsInput)(nil)).Elem(), LineNumberOfConductorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineNumberOfConductorsPtrInput)(nil)).Elem(), LineNumberOfConductorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineReactanceInput)(nil)).Elem(), LineReactanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineReactancePtrInput)(nil)).Elem(), LineReactanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineReactivePowerInput)(nil)).Elem(), LineReactivePowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineReactivePowerArrayInput)(nil)).Elem(), LineReactivePowerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineReferenceResistanceInput)(nil)).Elem(), LineReferenceResistanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineReferenceResistancePtrInput)(nil)).Elem(), LineReferenceResistanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineResistanceInput)(nil)).Elem(), LineResistanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineResistancePtrInput)(nil)).Elem(), LineResistanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineSafetyMarginForPowerInput)(nil)).Elem(), LineSafetyMarginForPowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineSafetyMarginForPowerPtrInput)(nil)).Elem(), LineSafetyMarginForPowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineSpecificHeatInput)(nil)).Elem(), LineSpecificHeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineSpecificHeatPtrInput)(nil)).Elem(), LineSpecificHeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineSusceptanceInput)(nil)).Elem(), LineSusceptanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineSusceptancePtrInput)(nil)).Elem(), LineSusceptanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineSwitchStatusEndInput)(nil)).Elem(), LineSwitchStatusEndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineSwitchStatusEndArrayInput)(nil)).Elem(), LineSwitchStatusEndArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineSwitchStatusStartInput)(nil)).Elem(), LineSwitchStatusStartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineSwitchStatusStartArrayInput)(nil)).Elem(), LineSwitchStatusStartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineTagInput)(nil)).Elem(), LineTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineTagArrayInput)(nil)).Elem(), LineTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineTemperatureCoeffResistanceInput)(nil)).Elem(), LineTemperatureCoeffResistanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineTemperatureCoeffResistancePtrInput)(nil)).Elem(), LineTemperatureCoeffResistanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineThermalElongationCoefInput)(nil)).Elem(), LineThermalElongationCoefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineThermalElongationCoefPtrInput)(nil)).Elem(), LineThermalElongationCoefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineVoltageRInput)(nil)).Elem(), LineVoltageRArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineVoltageRArrayInput)(nil)).Elem(), LineVoltageRArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineVoltageStInput)(nil)).Elem(), LineVoltageStArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineVoltageStArrayInput)(nil)).Elem(), LineVoltageStArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineVoltageTrInput)(nil)).Elem(), LineVoltageTrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineVoltageTrArrayInput)(nil)).Elem(), LineVoltageTrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentAltitudeInput)(nil)).Elem(), SegmentAltitudeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentAltitudePtrInput)(nil)).Elem(), SegmentAltitudeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentAzimuthInput)(nil)).Elem(), SegmentAzimuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentAzimuthPtrInput)(nil)).Elem(), SegmentAzimuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentCumulativeDistanceInput)(nil)).Elem(), SegmentCumulativeDistanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentCumulativeDistancePtrInput)(nil)).Elem(), SegmentCumulativeDistanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentKindInput)(nil)).Elem(), SegmentKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentKindArrayInput)(nil)).Elem(), SegmentKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentReferenceSagInput)(nil)).Elem(), SegmentReferenceSagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentReferenceSagPtrInput)(nil)).Elem(), SegmentReferenceSagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentReferenceTemperatureInput)(nil)).Elem(), SegmentReferenceTemperatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentReferenceTemperaturePtrInput)(nil)).Elem(), SegmentReferenceTemperatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentSpanLengthInput)(nil)).Elem(), SegmentSpanLengthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentSpanLengthPtrInput)(nil)).Elem(), SegmentSpanLengthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentTagInput)(nil)).Elem(), SegmentTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentTagArrayInput)(nil)).Elem(), SegmentTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentTemperatureInput)(nil)).Elem(), SegmentTemperatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentTemperatureArrayInput)(nil)).Elem(), SegmentTemperatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentWindDirectionInput)(nil)).Elem(), SegmentWindDirectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentWindDirectionArrayInput)(nil)).Elem(), SegmentWindDirectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentWindSpeedInput)(nil)).Elem(), SegmentWindSpeedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentWindSpeedArrayInput)(nil)).Elem(), SegmentWindSpeedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerConfigInput)(nil)).Elem(), ServerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerConfigArrayInput)(nil)).Elem(), ServerConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerEnvVarInput)(nil)).Elem(), ServerEnvVarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerEnvVarArrayInput)(nil)).Elem(), ServerEnvVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPortInput)(nil)).Elem(), ServerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPortArrayInput)(nil)).Elem(), ServerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTagInput)(nil)).Elem(), ServerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTagArrayInput)(nil)).Elem(), ServerTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackGeneratorKindInput)(nil)).Elem(), SlackGeneratorKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackGeneratorKindArrayInput)(nil)).Elem(), SlackGeneratorKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackGeneratorTagInput)(nil)).Elem(), SlackGeneratorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackGeneratorTagArrayInput)(nil)).Elem(), SlackGeneratorTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackLineKindInput)(nil)).Elem(), SlackLineKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackLineKindArrayInput)(nil)).Elem(), SlackLineKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackLineSwitchStatusEndInput)(nil)).Elem(), SlackLineSwitchStatusEndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackLineSwitchStatusEndArrayInput)(nil)).Elem(), SlackLineSwitchStatusEndArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackLineSwitchStatusStartInput)(nil)).Elem(), SlackLineSwitchStatusStartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackLineSwitchStatusStartArrayInput)(nil)).Elem(), SlackLineSwitchStatusStartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackLineTagInput)(nil)).Elem(), SlackLineTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackLineTagArrayInput)(nil)).Elem(), SlackLineTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerActivePowerHvInput)(nil)).Elem(), TransformerActivePowerHvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerActivePowerHvArrayInput)(nil)).Elem(), TransformerActivePowerHvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerActivePowerLossInput)(nil)).Elem(), TransformerActivePowerLossArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerActivePowerLossArrayInput)(nil)).Elem(), TransformerActivePowerLossArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerActivePowerLvInput)(nil)).Elem(), TransformerActivePowerLvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerActivePowerLvArrayInput)(nil)).Elem(), TransformerActivePowerLvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerCapacitanceInput)(nil)).Elem(), TransformerCapacitanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerCapacitancePtrInput)(nil)).Elem(), TransformerCapacitanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerConductanceInput)(nil)).Elem(), TransformerConductanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerConductancePtrInput)(nil)).Elem(), TransformerConductanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerContingencyInput)(nil)).Elem(), TransformerContingencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerContingencyArrayInput)(nil)).Elem(), TransformerContingencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerCurrentHvInput)(nil)).Elem(), TransformerCurrentHvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerCurrentHvArrayInput)(nil)).Elem(), TransformerCurrentHvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerCurrentLvInput)(nil)).Elem(), TransformerCurrentLvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerCurrentLvArrayInput)(nil)).Elem(), TransformerCurrentLvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerKindInput)(nil)).Elem(), TransformerKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerKindArrayInput)(nil)).Elem(), TransformerKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerMaximumAllowedCurrentInput)(nil)).Elem(), TransformerMaximumAllowedCurrentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerMaximumAllowedCurrentPtrInput)(nil)).Elem(), TransformerMaximumAllowedCurrentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerMaximumAllowedPowerInput)(nil)).Elem(), TransformerMaximumAllowedPowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerMaximumAllowedPowerPtrInput)(nil)).Elem(), TransformerMaximumAllowedPowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerReactanceInput)(nil)).Elem(), TransformerReactanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerReactancePtrInput)(nil)).Elem(), TransformerReactanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerReactivePowerHvInput)(nil)).Elem(), TransformerReactivePowerHvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerReactivePowerHvArrayInput)(nil)).Elem(), TransformerReactivePowerHvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerReactivePowerLossInput)(nil)).Elem(), TransformerReactivePowerLossArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerReactivePowerLossArrayInput)(nil)).Elem(), TransformerReactivePowerLossArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerReactivePowerLvInput)(nil)).Elem(), TransformerReactivePowerLvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerReactivePowerLvArrayInput)(nil)).Elem(), TransformerReactivePowerLvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerResistanceInput)(nil)).Elem(), TransformerResistanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerResistancePtrInput)(nil)).Elem(), TransformerResistanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSafetyMarginForPowerInput)(nil)).Elem(), TransformerSafetyMarginForPowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSafetyMarginForPowerPtrInput)(nil)).Elem(), TransformerSafetyMarginForPowerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerStandardTypeInput)(nil)).Elem(), TransformerStandardTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerStandardTypePtrInput)(nil)).Elem(), TransformerStandardTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSwitchStatusHvInput)(nil)).Elem(), TransformerSwitchStatusHvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSwitchStatusHvArrayInput)(nil)).Elem(), TransformerSwitchStatusHvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSwitchStatusLvInput)(nil)).Elem(), TransformerSwitchStatusLvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSwitchStatusLvArrayInput)(nil)).Elem(), TransformerSwitchStatusLvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerTagInput)(nil)).Elem(), TransformerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerTagArrayInput)(nil)).Elem(), TransformerTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerTapPosInput)(nil)).Elem(), TransformerTapPosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerTapPosPtrInput)(nil)).Elem(), TransformerTapPosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerVoltageHvInput)(nil)).Elem(), TransformerVoltageHvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerVoltageHvArrayInput)(nil)).Elem(), TransformerVoltageHvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerVoltageLvInput)(nil)).Elem(), TransformerVoltageLvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerVoltageLvArrayInput)(nil)).Elem(), TransformerVoltageLvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerXnOhmInput)(nil)).Elem(), TransformerXnOhmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerXnOhmPtrInput)(nil)).Elem(), TransformerXnOhmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAssetKindsKindInput)(nil)).Elem(), GetAssetKindsKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAssetKindsKindArrayInput)(nil)).Elem(), GetAssetKindsKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusesTagInput)(nil)).Elem(), GetBusesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusesTagArrayInput)(nil)).Elem(), GetBusesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGeneratorsTagInput)(nil)).Elem(), GetGeneratorsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGeneratorsTagArrayInput)(nil)).Elem(), GetGeneratorsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGridsTagInput)(nil)).Elem(), GetGridsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGridsTagArrayInput)(nil)).Elem(), GetGridsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLinesTagInput)(nil)).Elem(), GetLinesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLinesTagArrayInput)(nil)).Elem(), GetLinesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsTagInput)(nil)).Elem(), GetTagsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsTagArrayInput)(nil)).Elem(), GetTagsTagArray{})
	pulumi.RegisterOutputType(ActionAssetOutput{})
	pulumi.RegisterOutputType(ActionAssetPtrOutput{})
	pulumi.RegisterOutputType(ActionSetpointOutput{})
	pulumi.RegisterOutputType(ActionSetpointArrayOutput{})
	pulumi.RegisterOutputType(ActionSetpointAttributeOutput{})
	pulumi.RegisterOutputType(AlertAlertItemOutput{})
	pulumi.RegisterOutputType(AlertAlertItemArrayOutput{})
	pulumi.RegisterOutputType(AlertAlertItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(AlertAlertItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(AlertRelatedAssetOutput{})
	pulumi.RegisterOutputType(AlertRelatedAssetArrayOutput{})
	pulumi.RegisterOutputType(AlertTagOutput{})
	pulumi.RegisterOutputType(AlertTagArrayOutput{})
	pulumi.RegisterOutputType(AlertThresholdOutput{})
	pulumi.RegisterOutputType(AlertThresholdArrayOutput{})
	pulumi.RegisterOutputType(AlgorithmInputTypeOutput{})
	pulumi.RegisterOutputType(AlgorithmInputTypeArrayOutput{})
	pulumi.RegisterOutputType(AlgorithmTagOutput{})
	pulumi.RegisterOutputType(AlgorithmTagArrayOutput{})
	pulumi.RegisterOutputType(AssetKindOutput{})
	pulumi.RegisterOutputType(AssetKindPtrOutput{})
	pulumi.RegisterOutputType(AssetRelationAssetOutput{})
	pulumi.RegisterOutputType(AssetRelationAssetPtrOutput{})
	pulumi.RegisterOutputType(AssetRelationRelatedAssetOutput{})
	pulumi.RegisterOutputType(AssetRelationRelatedAssetPtrOutput{})
	pulumi.RegisterOutputType(AssetRelationRelatedAssetKindOutput{})
	pulumi.RegisterOutputType(AssetRelationRelatedAssetKindPtrOutput{})
	pulumi.RegisterOutputType(AssetTagOutput{})
	pulumi.RegisterOutputType(AssetTagArrayOutput{})
	pulumi.RegisterOutputType(BusActivePowerOutput{})
	pulumi.RegisterOutputType(BusActivePowerArrayOutput{})
	pulumi.RegisterOutputType(BusKindOutput{})
	pulumi.RegisterOutputType(BusKindArrayOutput{})
	pulumi.RegisterOutputType(BusNominalVoltageKvOutput{})
	pulumi.RegisterOutputType(BusNominalVoltageKvPtrOutput{})
	pulumi.RegisterOutputType(BusReactivePowerOutput{})
	pulumi.RegisterOutputType(BusReactivePowerArrayOutput{})
	pulumi.RegisterOutputType(BusTagOutput{})
	pulumi.RegisterOutputType(BusTagArrayOutput{})
	pulumi.RegisterOutputType(CommandActionOutput{})
	pulumi.RegisterOutputType(CommandActionArrayOutput{})
	pulumi.RegisterOutputType(CommandActionAssetOutput{})
	pulumi.RegisterOutputType(ComponentInputTypeOutput{})
	pulumi.RegisterOutputType(ComponentInputTypeArrayOutput{})
	pulumi.RegisterOutputType(ComponentRoutineConfigOutput{})
	pulumi.RegisterOutputType(ComponentRoutineConfigArrayOutput{})
	pulumi.RegisterOutputType(ComponentRoutineInputTypeOutput{})
	pulumi.RegisterOutputType(ComponentRoutineInputTypeArrayOutput{})
	pulumi.RegisterOutputType(ComponentRoutineInputValueOutput{})
	pulumi.RegisterOutputType(ComponentRoutineInputValueArrayOutput{})
	pulumi.RegisterOutputType(ComponentRoutineOutputTypeOutput{})
	pulumi.RegisterOutputType(ComponentRoutineOutputTypeArrayOutput{})
	pulumi.RegisterOutputType(ComponentRoutineOutputValueOutput{})
	pulumi.RegisterOutputType(ComponentRoutineOutputValueArrayOutput{})
	pulumi.RegisterOutputType(ComponentTagOutput{})
	pulumi.RegisterOutputType(ComponentTagArrayOutput{})
	pulumi.RegisterOutputType(ConnectorInputTypeOutput{})
	pulumi.RegisterOutputType(ConnectorInputTypeArrayOutput{})
	pulumi.RegisterOutputType(ConnectorTagOutput{})
	pulumi.RegisterOutputType(ConnectorTagArrayOutput{})
	pulumi.RegisterOutputType(DashboardActionlistChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardActionlistChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardActionlistChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardActionlistChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardActionlistChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardActionlistChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardActionlistChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardActionlistChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardAlerteventsChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardAlerteventsChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardAlerteventsChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardAlerteventsChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardAlerteventsChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardAlerteventsChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardAlerteventsChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardAlerteventsChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardAlertlistChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardAlertlistChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardAlertlistChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardAlertlistChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardAlertlistChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardAlertlistChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardAlertlistChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardAlertlistChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardAssetlistChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardAssetlistChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardAssetlistChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardAssetlistChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardAssetlistChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardAssetlistChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardAssetlistChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardAssetlistChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardBarChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardBarChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardBarChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardBarChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardBarChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardBarChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardBarChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardBarChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardBargaugeChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardBargaugeChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardBargaugeChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardBargaugeChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardBargaugeChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardBargaugeChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardBargaugeChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardBargaugeChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardCommandlistChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardCommandlistChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardCommandlistChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardCommandlistChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardCommandlistChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardCommandlistChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardCommandlistChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardCommandlistChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardGaugeChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardGaugeChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardGaugeChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardGaugeChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardGaugeChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardGaugeChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardGaugeChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardGaugeChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardHistogramChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardHistogramChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardHistogramChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardHistogramChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardHistogramChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardHistogramChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardHistogramChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardHistogramChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardImageChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardImageChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardImageChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardImageChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardImageChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardImageChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardImageChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardImageChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardRelatedAssetOutput{})
	pulumi.RegisterOutputType(DashboardRelatedAssetArrayOutput{})
	pulumi.RegisterOutputType(DashboardStatChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardStatChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardStatChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardStatChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardStatChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardStatChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardStatChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardStatChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardTableChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardTableChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardTableChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardTableChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardTableChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardTableChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardTableChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardTableChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardTagOutput{})
	pulumi.RegisterOutputType(DashboardTagArrayOutput{})
	pulumi.RegisterOutputType(DashboardTextChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardTextChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardTextChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardTextChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardTextChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardTextChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardTextChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardTextChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(DashboardTimeseriesChartChartItemOutput{})
	pulumi.RegisterOutputType(DashboardTimeseriesChartChartItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardTimeseriesChartChartItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(DashboardTimeseriesChartChartItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(DashboardTimeseriesChartThresholdOutput{})
	pulumi.RegisterOutputType(DashboardTimeseriesChartThresholdArrayOutput{})
	pulumi.RegisterOutputType(DashboardTimeseriesChartValueMappingOutput{})
	pulumi.RegisterOutputType(DashboardTimeseriesChartValueMappingArrayOutput{})
	pulumi.RegisterOutputType(ExternalGridKindOutput{})
	pulumi.RegisterOutputType(ExternalGridKindArrayOutput{})
	pulumi.RegisterOutputType(ExternalGridTagOutput{})
	pulumi.RegisterOutputType(ExternalGridTagArrayOutput{})
	pulumi.RegisterOutputType(FileRelatedAssetOutput{})
	pulumi.RegisterOutputType(FileRelatedAssetArrayOutput{})
	pulumi.RegisterOutputType(FileTagOutput{})
	pulumi.RegisterOutputType(FileTagArrayOutput{})
	pulumi.RegisterOutputType(FunctionFunctionItemOutput{})
	pulumi.RegisterOutputType(FunctionFunctionItemArrayOutput{})
	pulumi.RegisterOutputType(FunctionFunctionItemQueryFilterAssetOutput{})
	pulumi.RegisterOutputType(FunctionFunctionItemQueryFilterAttributeOutput{})
	pulumi.RegisterOutputType(FunctionTagOutput{})
	pulumi.RegisterOutputType(FunctionTagArrayOutput{})
	pulumi.RegisterOutputType(FunctionTargetAssetOutput{})
	pulumi.RegisterOutputType(FunctionTargetAssetPtrOutput{})
	pulumi.RegisterOutputType(FunctionTargetAttributeOutput{})
	pulumi.RegisterOutputType(FunctionTargetAttributePtrOutput{})
	pulumi.RegisterOutputType(GeneratorActivePowerOutput{})
	pulumi.RegisterOutputType(GeneratorActivePowerArrayOutput{})
	pulumi.RegisterOutputType(GeneratorCo2CoefficientOutput{})
	pulumi.RegisterOutputType(GeneratorCo2CoefficientPtrOutput{})
	pulumi.RegisterOutputType(GeneratorDailyEmissionAvoidedOutput{})
	pulumi.RegisterOutputType(GeneratorDailyEmissionAvoidedArrayOutput{})
	pulumi.RegisterOutputType(GeneratorDailyEnergyOutput{})
	pulumi.RegisterOutputType(GeneratorDailyEnergyArrayOutput{})
	pulumi.RegisterOutputType(GeneratorKindOutput{})
	pulumi.RegisterOutputType(GeneratorKindArrayOutput{})
	pulumi.RegisterOutputType(GeneratorMonthlyEnergyOutput{})
	pulumi.RegisterOutputType(GeneratorMonthlyEnergyArrayOutput{})
	pulumi.RegisterOutputType(GeneratorReactivePowerOutput{})
	pulumi.RegisterOutputType(GeneratorReactivePowerArrayOutput{})
	pulumi.RegisterOutputType(GeneratorSwitchStatusOutput{})
	pulumi.RegisterOutputType(GeneratorSwitchStatusArrayOutput{})
	pulumi.RegisterOutputType(GeneratorTagOutput{})
	pulumi.RegisterOutputType(GeneratorTagArrayOutput{})
	pulumi.RegisterOutputType(GridKindOutput{})
	pulumi.RegisterOutputType(GridKindArrayOutput{})
	pulumi.RegisterOutputType(GridTagOutput{})
	pulumi.RegisterOutputType(GridTagArrayOutput{})
	pulumi.RegisterOutputType(InverterAccumulatedEnergyOutput{})
	pulumi.RegisterOutputType(InverterAccumulatedEnergyArrayOutput{})
	pulumi.RegisterOutputType(InverterActivePowerOutput{})
	pulumi.RegisterOutputType(InverterActivePowerArrayOutput{})
	pulumi.RegisterOutputType(InverterDailyEnergyOutput{})
	pulumi.RegisterOutputType(InverterDailyEnergyArrayOutput{})
	pulumi.RegisterOutputType(InverterEnergyMeasurementTypeOutput{})
	pulumi.RegisterOutputType(InverterEnergyMeasurementTypePtrOutput{})
	pulumi.RegisterOutputType(InverterKindOutput{})
	pulumi.RegisterOutputType(InverterKindArrayOutput{})
	pulumi.RegisterOutputType(InverterMakeOutput{})
	pulumi.RegisterOutputType(InverterMakePtrOutput{})
	pulumi.RegisterOutputType(InverterMaxActivePowerOutput{})
	pulumi.RegisterOutputType(InverterMaxActivePowerPtrOutput{})
	pulumi.RegisterOutputType(InverterModelOutput{})
	pulumi.RegisterOutputType(InverterModelPtrOutput{})
	pulumi.RegisterOutputType(InverterRawDailyEnergyOutput{})
	pulumi.RegisterOutputType(InverterRawDailyEnergyArrayOutput{})
	pulumi.RegisterOutputType(InverterSerialNumberOutput{})
	pulumi.RegisterOutputType(InverterSerialNumberPtrOutput{})
	pulumi.RegisterOutputType(InverterSwitchStatusOutput{})
	pulumi.RegisterOutputType(InverterSwitchStatusArrayOutput{})
	pulumi.RegisterOutputType(InverterTagOutput{})
	pulumi.RegisterOutputType(InverterTagArrayOutput{})
	pulumi.RegisterOutputType(InverterTemperatureOutput{})
	pulumi.RegisterOutputType(InverterTemperatureArrayOutput{})
	pulumi.RegisterOutputType(LineAbsorptivityOutput{})
	pulumi.RegisterOutputType(LineAbsorptivityPtrOutput{})
	pulumi.RegisterOutputType(LineActivePowerOutput{})
	pulumi.RegisterOutputType(LineActivePowerArrayOutput{})
	pulumi.RegisterOutputType(LineActivePowerEndOutput{})
	pulumi.RegisterOutputType(LineActivePowerEndArrayOutput{})
	pulumi.RegisterOutputType(LineAmpacityOutput{})
	pulumi.RegisterOutputType(LineAmpacityArrayOutput{})
	pulumi.RegisterOutputType(LineAtmosphereOutput{})
	pulumi.RegisterOutputType(LineAtmospherePtrOutput{})
	pulumi.RegisterOutputType(LineCapacitanceOutput{})
	pulumi.RegisterOutputType(LineCapacitancePtrOutput{})
	pulumi.RegisterOutputType(LineConductanceOutput{})
	pulumi.RegisterOutputType(LineConductancePtrOutput{})
	pulumi.RegisterOutputType(LineConductorMassOutput{})
	pulumi.RegisterOutputType(LineConductorMassPtrOutput{})
	pulumi.RegisterOutputType(LineContingencyOutput{})
	pulumi.RegisterOutputType(LineContingencyArrayOutput{})
	pulumi.RegisterOutputType(LineCurrentOutput{})
	pulumi.RegisterOutputType(LineCurrentArrayOutput{})
	pulumi.RegisterOutputType(LineCurrentROutput{})
	pulumi.RegisterOutputType(LineCurrentRArrayOutput{})
	pulumi.RegisterOutputType(LineCurrentTOutput{})
	pulumi.RegisterOutputType(LineCurrentTArrayOutput{})
	pulumi.RegisterOutputType(LineDiameterOutput{})
	pulumi.RegisterOutputType(LineDiameterPtrOutput{})
	pulumi.RegisterOutputType(LineEmissivityOutput{})
	pulumi.RegisterOutputType(LineEmissivityPtrOutput{})
	pulumi.RegisterOutputType(LineEnergyOutput{})
	pulumi.RegisterOutputType(LineEnergyArrayOutput{})
	pulumi.RegisterOutputType(LineKindOutput{})
	pulumi.RegisterOutputType(LineKindArrayOutput{})
	pulumi.RegisterOutputType(LineLengthOutput{})
	pulumi.RegisterOutputType(LineLengthPtrOutput{})
	pulumi.RegisterOutputType(LineMaxTemperatureOutput{})
	pulumi.RegisterOutputType(LineMaxTemperatureArrayOutput{})
	pulumi.RegisterOutputType(LineMaximumAllowedCurrentOutput{})
	pulumi.RegisterOutputType(LineMaximumAllowedCurrentPtrOutput{})
	pulumi.RegisterOutputType(LineMaximumAllowedPowerOutput{})
	pulumi.RegisterOutputType(LineMaximumAllowedPowerPtrOutput{})
	pulumi.RegisterOutputType(LineMaximumAllowedTemperatureOutput{})
	pulumi.RegisterOutputType(LineMaximumAllowedTemperaturePtrOutput{})
	pulumi.RegisterOutputType(LineMaximumAllowedTemperatureLteOutput{})
	pulumi.RegisterOutputType(LineMaximumAllowedTemperatureLtePtrOutput{})
	pulumi.RegisterOutputType(LineMaximumAllowedTemperatureSteOutput{})
	pulumi.RegisterOutputType(LineMaximumAllowedTemperatureStePtrOutput{})
	pulumi.RegisterOutputType(LineNumberOfConductorsOutput{})
	pulumi.RegisterOutputType(LineNumberOfConductorsPtrOutput{})
	pulumi.RegisterOutputType(LineReactanceOutput{})
	pulumi.RegisterOutputType(LineReactancePtrOutput{})
	pulumi.RegisterOutputType(LineReactivePowerOutput{})
	pulumi.RegisterOutputType(LineReactivePowerArrayOutput{})
	pulumi.RegisterOutputType(LineReferenceResistanceOutput{})
	pulumi.RegisterOutputType(LineReferenceResistancePtrOutput{})
	pulumi.RegisterOutputType(LineResistanceOutput{})
	pulumi.RegisterOutputType(LineResistancePtrOutput{})
	pulumi.RegisterOutputType(LineSafetyMarginForPowerOutput{})
	pulumi.RegisterOutputType(LineSafetyMarginForPowerPtrOutput{})
	pulumi.RegisterOutputType(LineSpecificHeatOutput{})
	pulumi.RegisterOutputType(LineSpecificHeatPtrOutput{})
	pulumi.RegisterOutputType(LineSusceptanceOutput{})
	pulumi.RegisterOutputType(LineSusceptancePtrOutput{})
	pulumi.RegisterOutputType(LineSwitchStatusEndOutput{})
	pulumi.RegisterOutputType(LineSwitchStatusEndArrayOutput{})
	pulumi.RegisterOutputType(LineSwitchStatusStartOutput{})
	pulumi.RegisterOutputType(LineSwitchStatusStartArrayOutput{})
	pulumi.RegisterOutputType(LineTagOutput{})
	pulumi.RegisterOutputType(LineTagArrayOutput{})
	pulumi.RegisterOutputType(LineTemperatureCoeffResistanceOutput{})
	pulumi.RegisterOutputType(LineTemperatureCoeffResistancePtrOutput{})
	pulumi.RegisterOutputType(LineThermalElongationCoefOutput{})
	pulumi.RegisterOutputType(LineThermalElongationCoefPtrOutput{})
	pulumi.RegisterOutputType(LineVoltageROutput{})
	pulumi.RegisterOutputType(LineVoltageRArrayOutput{})
	pulumi.RegisterOutputType(LineVoltageStOutput{})
	pulumi.RegisterOutputType(LineVoltageStArrayOutput{})
	pulumi.RegisterOutputType(LineVoltageTrOutput{})
	pulumi.RegisterOutputType(LineVoltageTrArrayOutput{})
	pulumi.RegisterOutputType(SegmentAltitudeOutput{})
	pulumi.RegisterOutputType(SegmentAltitudePtrOutput{})
	pulumi.RegisterOutputType(SegmentAzimuthOutput{})
	pulumi.RegisterOutputType(SegmentAzimuthPtrOutput{})
	pulumi.RegisterOutputType(SegmentCumulativeDistanceOutput{})
	pulumi.RegisterOutputType(SegmentCumulativeDistancePtrOutput{})
	pulumi.RegisterOutputType(SegmentKindOutput{})
	pulumi.RegisterOutputType(SegmentKindArrayOutput{})
	pulumi.RegisterOutputType(SegmentReferenceSagOutput{})
	pulumi.RegisterOutputType(SegmentReferenceSagPtrOutput{})
	pulumi.RegisterOutputType(SegmentReferenceTemperatureOutput{})
	pulumi.RegisterOutputType(SegmentReferenceTemperaturePtrOutput{})
	pulumi.RegisterOutputType(SegmentSpanLengthOutput{})
	pulumi.RegisterOutputType(SegmentSpanLengthPtrOutput{})
	pulumi.RegisterOutputType(SegmentTagOutput{})
	pulumi.RegisterOutputType(SegmentTagArrayOutput{})
	pulumi.RegisterOutputType(SegmentTemperatureOutput{})
	pulumi.RegisterOutputType(SegmentTemperatureArrayOutput{})
	pulumi.RegisterOutputType(SegmentWindDirectionOutput{})
	pulumi.RegisterOutputType(SegmentWindDirectionArrayOutput{})
	pulumi.RegisterOutputType(SegmentWindSpeedOutput{})
	pulumi.RegisterOutputType(SegmentWindSpeedArrayOutput{})
	pulumi.RegisterOutputType(ServerConfigOutput{})
	pulumi.RegisterOutputType(ServerConfigArrayOutput{})
	pulumi.RegisterOutputType(ServerEnvVarOutput{})
	pulumi.RegisterOutputType(ServerEnvVarArrayOutput{})
	pulumi.RegisterOutputType(ServerPortOutput{})
	pulumi.RegisterOutputType(ServerPortArrayOutput{})
	pulumi.RegisterOutputType(ServerTagOutput{})
	pulumi.RegisterOutputType(ServerTagArrayOutput{})
	pulumi.RegisterOutputType(SlackGeneratorKindOutput{})
	pulumi.RegisterOutputType(SlackGeneratorKindArrayOutput{})
	pulumi.RegisterOutputType(SlackGeneratorTagOutput{})
	pulumi.RegisterOutputType(SlackGeneratorTagArrayOutput{})
	pulumi.RegisterOutputType(SlackLineKindOutput{})
	pulumi.RegisterOutputType(SlackLineKindArrayOutput{})
	pulumi.RegisterOutputType(SlackLineSwitchStatusEndOutput{})
	pulumi.RegisterOutputType(SlackLineSwitchStatusEndArrayOutput{})
	pulumi.RegisterOutputType(SlackLineSwitchStatusStartOutput{})
	pulumi.RegisterOutputType(SlackLineSwitchStatusStartArrayOutput{})
	pulumi.RegisterOutputType(SlackLineTagOutput{})
	pulumi.RegisterOutputType(SlackLineTagArrayOutput{})
	pulumi.RegisterOutputType(TransformerActivePowerHvOutput{})
	pulumi.RegisterOutputType(TransformerActivePowerHvArrayOutput{})
	pulumi.RegisterOutputType(TransformerActivePowerLossOutput{})
	pulumi.RegisterOutputType(TransformerActivePowerLossArrayOutput{})
	pulumi.RegisterOutputType(TransformerActivePowerLvOutput{})
	pulumi.RegisterOutputType(TransformerActivePowerLvArrayOutput{})
	pulumi.RegisterOutputType(TransformerCapacitanceOutput{})
	pulumi.RegisterOutputType(TransformerCapacitancePtrOutput{})
	pulumi.RegisterOutputType(TransformerConductanceOutput{})
	pulumi.RegisterOutputType(TransformerConductancePtrOutput{})
	pulumi.RegisterOutputType(TransformerContingencyOutput{})
	pulumi.RegisterOutputType(TransformerContingencyArrayOutput{})
	pulumi.RegisterOutputType(TransformerCurrentHvOutput{})
	pulumi.RegisterOutputType(TransformerCurrentHvArrayOutput{})
	pulumi.RegisterOutputType(TransformerCurrentLvOutput{})
	pulumi.RegisterOutputType(TransformerCurrentLvArrayOutput{})
	pulumi.RegisterOutputType(TransformerKindOutput{})
	pulumi.RegisterOutputType(TransformerKindArrayOutput{})
	pulumi.RegisterOutputType(TransformerMaximumAllowedCurrentOutput{})
	pulumi.RegisterOutputType(TransformerMaximumAllowedCurrentPtrOutput{})
	pulumi.RegisterOutputType(TransformerMaximumAllowedPowerOutput{})
	pulumi.RegisterOutputType(TransformerMaximumAllowedPowerPtrOutput{})
	pulumi.RegisterOutputType(TransformerReactanceOutput{})
	pulumi.RegisterOutputType(TransformerReactancePtrOutput{})
	pulumi.RegisterOutputType(TransformerReactivePowerHvOutput{})
	pulumi.RegisterOutputType(TransformerReactivePowerHvArrayOutput{})
	pulumi.RegisterOutputType(TransformerReactivePowerLossOutput{})
	pulumi.RegisterOutputType(TransformerReactivePowerLossArrayOutput{})
	pulumi.RegisterOutputType(TransformerReactivePowerLvOutput{})
	pulumi.RegisterOutputType(TransformerReactivePowerLvArrayOutput{})
	pulumi.RegisterOutputType(TransformerResistanceOutput{})
	pulumi.RegisterOutputType(TransformerResistancePtrOutput{})
	pulumi.RegisterOutputType(TransformerSafetyMarginForPowerOutput{})
	pulumi.RegisterOutputType(TransformerSafetyMarginForPowerPtrOutput{})
	pulumi.RegisterOutputType(TransformerStandardTypeOutput{})
	pulumi.RegisterOutputType(TransformerStandardTypePtrOutput{})
	pulumi.RegisterOutputType(TransformerSwitchStatusHvOutput{})
	pulumi.RegisterOutputType(TransformerSwitchStatusHvArrayOutput{})
	pulumi.RegisterOutputType(TransformerSwitchStatusLvOutput{})
	pulumi.RegisterOutputType(TransformerSwitchStatusLvArrayOutput{})
	pulumi.RegisterOutputType(TransformerTagOutput{})
	pulumi.RegisterOutputType(TransformerTagArrayOutput{})
	pulumi.RegisterOutputType(TransformerTapPosOutput{})
	pulumi.RegisterOutputType(TransformerTapPosPtrOutput{})
	pulumi.RegisterOutputType(TransformerVoltageHvOutput{})
	pulumi.RegisterOutputType(TransformerVoltageHvArrayOutput{})
	pulumi.RegisterOutputType(TransformerVoltageLvOutput{})
	pulumi.RegisterOutputType(TransformerVoltageLvArrayOutput{})
	pulumi.RegisterOutputType(TransformerXnOhmOutput{})
	pulumi.RegisterOutputType(TransformerXnOhmPtrOutput{})
	pulumi.RegisterOutputType(GetAssetKindsKindOutput{})
	pulumi.RegisterOutputType(GetAssetKindsKindArrayOutput{})
	pulumi.RegisterOutputType(GetBusesTagOutput{})
	pulumi.RegisterOutputType(GetBusesTagArrayOutput{})
	pulumi.RegisterOutputType(GetGeneratorsTagOutput{})
	pulumi.RegisterOutputType(GetGeneratorsTagArrayOutput{})
	pulumi.RegisterOutputType(GetGridsTagOutput{})
	pulumi.RegisterOutputType(GetGridsTagArrayOutput{})
	pulumi.RegisterOutputType(GetLinesTagOutput{})
	pulumi.RegisterOutputType(GetLinesTagArrayOutput{})
	pulumi.RegisterOutputType(GetTagsTagOutput{})
	pulumi.RegisterOutputType(GetTagsTagArrayOutput{})
}
