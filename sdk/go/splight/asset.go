// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/asset:Asset [options] splight_asset.<name> <asset_id>
// ```
type Asset struct {
	pulumi.CustomResourceState

	// timezone that overrides location-based timezone of the resource
	CustomTimezone pulumi.StringPtrOutput `pulumi:"customTimezone"`
	// description of the resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// GeoJSON GeomtryCollection
	Geometry pulumi.StringOutput `pulumi:"geometry"`
	// kind of the resource
	Kind AssetKindPtrOutput `pulumi:"kind"`
	// name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// tags of the resource
	Tags AssetTagArrayOutput `pulumi:"tags"`
}

// NewAsset registers a new resource with the given unique name, arguments, and options.
func NewAsset(ctx *pulumi.Context,
	name string, args *AssetArgs, opts ...pulumi.ResourceOption) (*Asset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Geometry == nil {
		return nil, errors.New("invalid value for required argument 'Geometry'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Asset
	err := ctx.RegisterResource("splight:index/asset:Asset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAsset gets an existing Asset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAsset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssetState, opts ...pulumi.ResourceOption) (*Asset, error) {
	var resource Asset
	err := ctx.ReadResource("splight:index/asset:Asset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Asset resources.
type assetState struct {
	// timezone that overrides location-based timezone of the resource
	CustomTimezone *string `pulumi:"customTimezone"`
	// description of the resource
	Description *string `pulumi:"description"`
	// GeoJSON GeomtryCollection
	Geometry *string `pulumi:"geometry"`
	// kind of the resource
	Kind *AssetKind `pulumi:"kind"`
	// name of the resource
	Name *string `pulumi:"name"`
	// tags of the resource
	Tags []AssetTag `pulumi:"tags"`
}

type AssetState struct {
	// timezone that overrides location-based timezone of the resource
	CustomTimezone pulumi.StringPtrInput
	// description of the resource
	Description pulumi.StringPtrInput
	// GeoJSON GeomtryCollection
	Geometry pulumi.StringPtrInput
	// kind of the resource
	Kind AssetKindPtrInput
	// name of the resource
	Name pulumi.StringPtrInput
	// tags of the resource
	Tags AssetTagArrayInput
}

func (AssetState) ElementType() reflect.Type {
	return reflect.TypeOf((*assetState)(nil)).Elem()
}

type assetArgs struct {
	// timezone that overrides location-based timezone of the resource
	CustomTimezone *string `pulumi:"customTimezone"`
	// description of the resource
	Description *string `pulumi:"description"`
	// GeoJSON GeomtryCollection
	Geometry string `pulumi:"geometry"`
	// kind of the resource
	Kind *AssetKind `pulumi:"kind"`
	// name of the resource
	Name *string `pulumi:"name"`
	// tags of the resource
	Tags []AssetTag `pulumi:"tags"`
}

// The set of arguments for constructing a Asset resource.
type AssetArgs struct {
	// timezone that overrides location-based timezone of the resource
	CustomTimezone pulumi.StringPtrInput
	// description of the resource
	Description pulumi.StringPtrInput
	// GeoJSON GeomtryCollection
	Geometry pulumi.StringInput
	// kind of the resource
	Kind AssetKindPtrInput
	// name of the resource
	Name pulumi.StringPtrInput
	// tags of the resource
	Tags AssetTagArrayInput
}

func (AssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assetArgs)(nil)).Elem()
}

type AssetInput interface {
	pulumi.Input

	ToAssetOutput() AssetOutput
	ToAssetOutputWithContext(ctx context.Context) AssetOutput
}

func (*Asset) ElementType() reflect.Type {
	return reflect.TypeOf((**Asset)(nil)).Elem()
}

func (i *Asset) ToAssetOutput() AssetOutput {
	return i.ToAssetOutputWithContext(context.Background())
}

func (i *Asset) ToAssetOutputWithContext(ctx context.Context) AssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetOutput)
}

// AssetArrayInput is an input type that accepts AssetArray and AssetArrayOutput values.
// You can construct a concrete instance of `AssetArrayInput` via:
//
//	AssetArray{ AssetArgs{...} }
type AssetArrayInput interface {
	pulumi.Input

	ToAssetArrayOutput() AssetArrayOutput
	ToAssetArrayOutputWithContext(context.Context) AssetArrayOutput
}

type AssetArray []AssetInput

func (AssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Asset)(nil)).Elem()
}

func (i AssetArray) ToAssetArrayOutput() AssetArrayOutput {
	return i.ToAssetArrayOutputWithContext(context.Background())
}

func (i AssetArray) ToAssetArrayOutputWithContext(ctx context.Context) AssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetArrayOutput)
}

// AssetMapInput is an input type that accepts AssetMap and AssetMapOutput values.
// You can construct a concrete instance of `AssetMapInput` via:
//
//	AssetMap{ "key": AssetArgs{...} }
type AssetMapInput interface {
	pulumi.Input

	ToAssetMapOutput() AssetMapOutput
	ToAssetMapOutputWithContext(context.Context) AssetMapOutput
}

type AssetMap map[string]AssetInput

func (AssetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Asset)(nil)).Elem()
}

func (i AssetMap) ToAssetMapOutput() AssetMapOutput {
	return i.ToAssetMapOutputWithContext(context.Background())
}

func (i AssetMap) ToAssetMapOutputWithContext(ctx context.Context) AssetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetMapOutput)
}

type AssetOutput struct{ *pulumi.OutputState }

func (AssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Asset)(nil)).Elem()
}

func (o AssetOutput) ToAssetOutput() AssetOutput {
	return o
}

func (o AssetOutput) ToAssetOutputWithContext(ctx context.Context) AssetOutput {
	return o
}

// timezone that overrides location-based timezone of the resource
func (o AssetOutput) CustomTimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringPtrOutput { return v.CustomTimezone }).(pulumi.StringPtrOutput)
}

// description of the resource
func (o AssetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// GeoJSON GeomtryCollection
func (o AssetOutput) Geometry() pulumi.StringOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringOutput { return v.Geometry }).(pulumi.StringOutput)
}

// kind of the resource
func (o AssetOutput) Kind() AssetKindPtrOutput {
	return o.ApplyT(func(v *Asset) AssetKindPtrOutput { return v.Kind }).(AssetKindPtrOutput)
}

// name of the resource
func (o AssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// tags of the resource
func (o AssetOutput) Tags() AssetTagArrayOutput {
	return o.ApplyT(func(v *Asset) AssetTagArrayOutput { return v.Tags }).(AssetTagArrayOutput)
}

type AssetArrayOutput struct{ *pulumi.OutputState }

func (AssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Asset)(nil)).Elem()
}

func (o AssetArrayOutput) ToAssetArrayOutput() AssetArrayOutput {
	return o
}

func (o AssetArrayOutput) ToAssetArrayOutputWithContext(ctx context.Context) AssetArrayOutput {
	return o
}

func (o AssetArrayOutput) Index(i pulumi.IntInput) AssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Asset {
		return vs[0].([]*Asset)[vs[1].(int)]
	}).(AssetOutput)
}

type AssetMapOutput struct{ *pulumi.OutputState }

func (AssetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Asset)(nil)).Elem()
}

func (o AssetMapOutput) ToAssetMapOutput() AssetMapOutput {
	return o
}

func (o AssetMapOutput) ToAssetMapOutputWithContext(ctx context.Context) AssetMapOutput {
	return o
}

func (o AssetMapOutput) MapIndex(k pulumi.StringInput) AssetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Asset {
		return vs[0].(map[string]*Asset)[vs[1].(string)]
	}).(AssetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssetInput)(nil)).Elem(), &Asset{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetArrayInput)(nil)).Elem(), AssetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetMapInput)(nil)).Elem(), AssetMap{})
	pulumi.RegisterOutputType(AssetOutput{})
	pulumi.RegisterOutputType(AssetArrayOutput{})
	pulumi.RegisterOutputType(AssetMapOutput{})
}
