// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/splightplatform/pulumi-splight/sdk/go/splight"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"type": "GeometryCollection",
//				"geometries": []map[string]interface{}{
//					map[string]interface{}{
//						"type": "Point",
//						"coordinates": []float64{
//							0,
//							0,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			myAsset, err := splight.NewAsset(ctx, "myAsset", &splight.AssetArgs{
//				Description: pulumi.String("My Asset Description"),
//				Geometry:    pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = splight.NewAssetAttribute(ctx, "myAttribute", &splight.AssetAttributeArgs{
//				Type:  pulumi.String("Number"),
//				Unit:  pulumi.String("meters"),
//				Asset: myAsset.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/assetAttribute:AssetAttribute [options] splight_asset_attribute.<name> <asset_attribute_id>
// ```
type AssetAttribute struct {
	pulumi.CustomResourceState

	// reference to the asset to be linked to
	Asset pulumi.StringOutput `pulumi:"asset"`
	// name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringOutput `pulumi:"type"`
	// optional reference to the unit of the measure
	Unit pulumi.StringPtrOutput `pulumi:"unit"`
}

// NewAssetAttribute registers a new resource with the given unique name, arguments, and options.
func NewAssetAttribute(ctx *pulumi.Context,
	name string, args *AssetAttributeArgs, opts ...pulumi.ResourceOption) (*AssetAttribute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Asset == nil {
		return nil, errors.New("invalid value for required argument 'Asset'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssetAttribute
	err := ctx.RegisterResource("splight:index/assetAttribute:AssetAttribute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssetAttribute gets an existing AssetAttribute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssetAttribute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssetAttributeState, opts ...pulumi.ResourceOption) (*AssetAttribute, error) {
	var resource AssetAttribute
	err := ctx.ReadResource("splight:index/assetAttribute:AssetAttribute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssetAttribute resources.
type assetAttributeState struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// optional reference to the unit of the measure
	Unit *string `pulumi:"unit"`
}

type AssetAttributeState struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput
	// name of the resource
	Name pulumi.StringPtrInput
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput
	// optional reference to the unit of the measure
	Unit pulumi.StringPtrInput
}

func (AssetAttributeState) ElementType() reflect.Type {
	return reflect.TypeOf((*assetAttributeState)(nil)).Elem()
}

type assetAttributeArgs struct {
	// reference to the asset to be linked to
	Asset string `pulumi:"asset"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type string `pulumi:"type"`
	// optional reference to the unit of the measure
	Unit *string `pulumi:"unit"`
}

// The set of arguments for constructing a AssetAttribute resource.
type AssetAttributeArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringInput
	// name of the resource
	Name pulumi.StringPtrInput
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringInput
	// optional reference to the unit of the measure
	Unit pulumi.StringPtrInput
}

func (AssetAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assetAttributeArgs)(nil)).Elem()
}

type AssetAttributeInput interface {
	pulumi.Input

	ToAssetAttributeOutput() AssetAttributeOutput
	ToAssetAttributeOutputWithContext(ctx context.Context) AssetAttributeOutput
}

func (*AssetAttribute) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetAttribute)(nil)).Elem()
}

func (i *AssetAttribute) ToAssetAttributeOutput() AssetAttributeOutput {
	return i.ToAssetAttributeOutputWithContext(context.Background())
}

func (i *AssetAttribute) ToAssetAttributeOutputWithContext(ctx context.Context) AssetAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetAttributeOutput)
}

// AssetAttributeArrayInput is an input type that accepts AssetAttributeArray and AssetAttributeArrayOutput values.
// You can construct a concrete instance of `AssetAttributeArrayInput` via:
//
//	AssetAttributeArray{ AssetAttributeArgs{...} }
type AssetAttributeArrayInput interface {
	pulumi.Input

	ToAssetAttributeArrayOutput() AssetAttributeArrayOutput
	ToAssetAttributeArrayOutputWithContext(context.Context) AssetAttributeArrayOutput
}

type AssetAttributeArray []AssetAttributeInput

func (AssetAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetAttribute)(nil)).Elem()
}

func (i AssetAttributeArray) ToAssetAttributeArrayOutput() AssetAttributeArrayOutput {
	return i.ToAssetAttributeArrayOutputWithContext(context.Background())
}

func (i AssetAttributeArray) ToAssetAttributeArrayOutputWithContext(ctx context.Context) AssetAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetAttributeArrayOutput)
}

// AssetAttributeMapInput is an input type that accepts AssetAttributeMap and AssetAttributeMapOutput values.
// You can construct a concrete instance of `AssetAttributeMapInput` via:
//
//	AssetAttributeMap{ "key": AssetAttributeArgs{...} }
type AssetAttributeMapInput interface {
	pulumi.Input

	ToAssetAttributeMapOutput() AssetAttributeMapOutput
	ToAssetAttributeMapOutputWithContext(context.Context) AssetAttributeMapOutput
}

type AssetAttributeMap map[string]AssetAttributeInput

func (AssetAttributeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetAttribute)(nil)).Elem()
}

func (i AssetAttributeMap) ToAssetAttributeMapOutput() AssetAttributeMapOutput {
	return i.ToAssetAttributeMapOutputWithContext(context.Background())
}

func (i AssetAttributeMap) ToAssetAttributeMapOutputWithContext(ctx context.Context) AssetAttributeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetAttributeMapOutput)
}

type AssetAttributeOutput struct{ *pulumi.OutputState }

func (AssetAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetAttribute)(nil)).Elem()
}

func (o AssetAttributeOutput) ToAssetAttributeOutput() AssetAttributeOutput {
	return o
}

func (o AssetAttributeOutput) ToAssetAttributeOutputWithContext(ctx context.Context) AssetAttributeOutput {
	return o
}

// reference to the asset to be linked to
func (o AssetAttributeOutput) Asset() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetAttribute) pulumi.StringOutput { return v.Asset }).(pulumi.StringOutput)
}

// name of the resource
func (o AssetAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetAttribute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o AssetAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetAttribute) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// optional reference to the unit of the measure
func (o AssetAttributeOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetAttribute) pulumi.StringPtrOutput { return v.Unit }).(pulumi.StringPtrOutput)
}

type AssetAttributeArrayOutput struct{ *pulumi.OutputState }

func (AssetAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetAttribute)(nil)).Elem()
}

func (o AssetAttributeArrayOutput) ToAssetAttributeArrayOutput() AssetAttributeArrayOutput {
	return o
}

func (o AssetAttributeArrayOutput) ToAssetAttributeArrayOutputWithContext(ctx context.Context) AssetAttributeArrayOutput {
	return o
}

func (o AssetAttributeArrayOutput) Index(i pulumi.IntInput) AssetAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssetAttribute {
		return vs[0].([]*AssetAttribute)[vs[1].(int)]
	}).(AssetAttributeOutput)
}

type AssetAttributeMapOutput struct{ *pulumi.OutputState }

func (AssetAttributeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetAttribute)(nil)).Elem()
}

func (o AssetAttributeMapOutput) ToAssetAttributeMapOutput() AssetAttributeMapOutput {
	return o
}

func (o AssetAttributeMapOutput) ToAssetAttributeMapOutputWithContext(ctx context.Context) AssetAttributeMapOutput {
	return o
}

func (o AssetAttributeMapOutput) MapIndex(k pulumi.StringInput) AssetAttributeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssetAttribute {
		return vs[0].(map[string]*AssetAttribute)[vs[1].(string)]
	}).(AssetAttributeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssetAttributeInput)(nil)).Elem(), &AssetAttribute{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetAttributeArrayInput)(nil)).Elem(), AssetAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetAttributeMapInput)(nil)).Elem(), AssetAttributeMap{})
	pulumi.RegisterOutputType(AssetAttributeOutput{})
	pulumi.RegisterOutputType(AssetAttributeArrayOutput{})
	pulumi.RegisterOutputType(AssetAttributeMapOutput{})
}
