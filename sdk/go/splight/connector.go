// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/connector:Connector [options] splight_connector.<name> <connector_id>
// ```
type Connector struct {
	pulumi.CustomResourceState

	// optional description to add details of the resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// static config parameters of the routine
	Inputs ConnectorInputTypeArrayOutput `pulumi:"inputs"`
	// log level of the connector
	LogLevel pulumi.StringPtrOutput `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize pulumi.StringPtrOutput `pulumi:"machineInstanceSize"`
	// the name of the connector to be created
	Name pulumi.StringOutput `pulumi:"name"`
	// id of the compute node where the connector runs
	Node pulumi.StringPtrOutput `pulumi:"node"`
	// restart policy of the connector
	RestartPolicy pulumi.StringPtrOutput `pulumi:"restartPolicy"`
	// tags of the resource
	Tags ConnectorTagArrayOutput `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub connector
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOption) (*Connector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connector
	err := ctx.RegisterResource("splight:index/connector:Connector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorState, opts ...pulumi.ResourceOption) (*Connector, error) {
	var resource Connector
	err := ctx.ReadResource("splight:index/connector:Connector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connector resources.
type connectorState struct {
	// optional description to add details of the resource
	Description *string `pulumi:"description"`
	// static config parameters of the routine
	Inputs []ConnectorInputType `pulumi:"inputs"`
	// log level of the connector
	LogLevel *string `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize *string `pulumi:"machineInstanceSize"`
	// the name of the connector to be created
	Name *string `pulumi:"name"`
	// id of the compute node where the connector runs
	Node *string `pulumi:"node"`
	// restart policy of the connector
	RestartPolicy *string `pulumi:"restartPolicy"`
	// tags of the resource
	Tags []ConnectorTag `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub connector
	Version *string `pulumi:"version"`
}

type ConnectorState struct {
	// optional description to add details of the resource
	Description pulumi.StringPtrInput
	// static config parameters of the routine
	Inputs ConnectorInputTypeArrayInput
	// log level of the connector
	LogLevel pulumi.StringPtrInput
	// instance size
	MachineInstanceSize pulumi.StringPtrInput
	// the name of the connector to be created
	Name pulumi.StringPtrInput
	// id of the compute node where the connector runs
	Node pulumi.StringPtrInput
	// restart policy of the connector
	RestartPolicy pulumi.StringPtrInput
	// tags of the resource
	Tags ConnectorTagArrayInput
	// [NAME-VERSION] the version of the hub connector
	Version pulumi.StringPtrInput
}

func (ConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorState)(nil)).Elem()
}

type connectorArgs struct {
	// optional description to add details of the resource
	Description *string `pulumi:"description"`
	// static config parameters of the routine
	Inputs []ConnectorInputType `pulumi:"inputs"`
	// log level of the connector
	LogLevel *string `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize *string `pulumi:"machineInstanceSize"`
	// the name of the connector to be created
	Name *string `pulumi:"name"`
	// id of the compute node where the connector runs
	Node *string `pulumi:"node"`
	// restart policy of the connector
	RestartPolicy *string `pulumi:"restartPolicy"`
	// tags of the resource
	Tags []ConnectorTag `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub connector
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	// optional description to add details of the resource
	Description pulumi.StringPtrInput
	// static config parameters of the routine
	Inputs ConnectorInputTypeArrayInput
	// log level of the connector
	LogLevel pulumi.StringPtrInput
	// instance size
	MachineInstanceSize pulumi.StringPtrInput
	// the name of the connector to be created
	Name pulumi.StringPtrInput
	// id of the compute node where the connector runs
	Node pulumi.StringPtrInput
	// restart policy of the connector
	RestartPolicy pulumi.StringPtrInput
	// tags of the resource
	Tags ConnectorTagArrayInput
	// [NAME-VERSION] the version of the hub connector
	Version pulumi.StringInput
}

func (ConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorArgs)(nil)).Elem()
}

type ConnectorInput interface {
	pulumi.Input

	ToConnectorOutput() ConnectorOutput
	ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput
}

func (*Connector) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (i *Connector) ToConnectorOutput() ConnectorOutput {
	return i.ToConnectorOutputWithContext(context.Background())
}

func (i *Connector) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOutput)
}

// ConnectorArrayInput is an input type that accepts ConnectorArray and ConnectorArrayOutput values.
// You can construct a concrete instance of `ConnectorArrayInput` via:
//
//	ConnectorArray{ ConnectorArgs{...} }
type ConnectorArrayInput interface {
	pulumi.Input

	ToConnectorArrayOutput() ConnectorArrayOutput
	ToConnectorArrayOutputWithContext(context.Context) ConnectorArrayOutput
}

type ConnectorArray []ConnectorInput

func (ConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connector)(nil)).Elem()
}

func (i ConnectorArray) ToConnectorArrayOutput() ConnectorArrayOutput {
	return i.ToConnectorArrayOutputWithContext(context.Background())
}

func (i ConnectorArray) ToConnectorArrayOutputWithContext(ctx context.Context) ConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorArrayOutput)
}

// ConnectorMapInput is an input type that accepts ConnectorMap and ConnectorMapOutput values.
// You can construct a concrete instance of `ConnectorMapInput` via:
//
//	ConnectorMap{ "key": ConnectorArgs{...} }
type ConnectorMapInput interface {
	pulumi.Input

	ToConnectorMapOutput() ConnectorMapOutput
	ToConnectorMapOutputWithContext(context.Context) ConnectorMapOutput
}

type ConnectorMap map[string]ConnectorInput

func (ConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connector)(nil)).Elem()
}

func (i ConnectorMap) ToConnectorMapOutput() ConnectorMapOutput {
	return i.ToConnectorMapOutputWithContext(context.Background())
}

func (i ConnectorMap) ToConnectorMapOutputWithContext(ctx context.Context) ConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMapOutput)
}

type ConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (o ConnectorOutput) ToConnectorOutput() ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return o
}

// optional description to add details of the resource
func (o ConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// static config parameters of the routine
func (o ConnectorOutput) Inputs() ConnectorInputTypeArrayOutput {
	return o.ApplyT(func(v *Connector) ConnectorInputTypeArrayOutput { return v.Inputs }).(ConnectorInputTypeArrayOutput)
}

// log level of the connector
func (o ConnectorOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// instance size
func (o ConnectorOutput) MachineInstanceSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.MachineInstanceSize }).(pulumi.StringPtrOutput)
}

// the name of the connector to be created
func (o ConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// id of the compute node where the connector runs
func (o ConnectorOutput) Node() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.Node }).(pulumi.StringPtrOutput)
}

// restart policy of the connector
func (o ConnectorOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.RestartPolicy }).(pulumi.StringPtrOutput)
}

// tags of the resource
func (o ConnectorOutput) Tags() ConnectorTagArrayOutput {
	return o.ApplyT(func(v *Connector) ConnectorTagArrayOutput { return v.Tags }).(ConnectorTagArrayOutput)
}

// [NAME-VERSION] the version of the hub connector
func (o ConnectorOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ConnectorArrayOutput struct{ *pulumi.OutputState }

func (ConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connector)(nil)).Elem()
}

func (o ConnectorArrayOutput) ToConnectorArrayOutput() ConnectorArrayOutput {
	return o
}

func (o ConnectorArrayOutput) ToConnectorArrayOutputWithContext(ctx context.Context) ConnectorArrayOutput {
	return o
}

func (o ConnectorArrayOutput) Index(i pulumi.IntInput) ConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connector {
		return vs[0].([]*Connector)[vs[1].(int)]
	}).(ConnectorOutput)
}

type ConnectorMapOutput struct{ *pulumi.OutputState }

func (ConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connector)(nil)).Elem()
}

func (o ConnectorMapOutput) ToConnectorMapOutput() ConnectorMapOutput {
	return o
}

func (o ConnectorMapOutput) ToConnectorMapOutputWithContext(ctx context.Context) ConnectorMapOutput {
	return o
}

func (o ConnectorMapOutput) MapIndex(k pulumi.StringInput) ConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connector {
		return vs[0].(map[string]*Connector)[vs[1].(string)]
	}).(ConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorInput)(nil)).Elem(), &Connector{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorArrayInput)(nil)).Elem(), ConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorMapInput)(nil)).Elem(), ConnectorMap{})
	pulumi.RegisterOutputType(ConnectorOutput{})
	pulumi.RegisterOutputType(ConnectorArrayOutput{})
	pulumi.RegisterOutputType(ConnectorMapOutput{})
}
