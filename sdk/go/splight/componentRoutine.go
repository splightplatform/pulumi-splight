// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import splight:index/componentRoutine:ComponentRoutine [options] splight_component_routine.<name> <component_routine_id>
// ```
type ComponentRoutine struct {
	pulumi.CustomResourceState

	// reference to component to be attached
	ComponentId pulumi.StringOutput `pulumi:"componentId"`
	// static config parameters of the routine
	Configs ComponentRoutineConfigArrayOutput `pulumi:"configs"`
	// optional complementary information about the routine
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// asset attribute where to ingest data. Only valid for IncomingRoutine
	Inputs ComponentRoutineInputTypeArrayOutput `pulumi:"inputs"`
	// name of the routine
	Name pulumi.StringOutput `pulumi:"name"`
	// asset attribute where to ingest data. Only valid for IncomingRoutine
	Outputs ComponentRoutineOutputTypeArrayOutput `pulumi:"outputs"`
	// [IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewComponentRoutine registers a new resource with the given unique name, arguments, and options.
func NewComponentRoutine(ctx *pulumi.Context,
	name string, args *ComponentRoutineArgs, opts ...pulumi.ResourceOption) (*ComponentRoutine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComponentId == nil {
		return nil, errors.New("invalid value for required argument 'ComponentId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComponentRoutine
	err := ctx.RegisterResource("splight:index/componentRoutine:ComponentRoutine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComponentRoutine gets an existing ComponentRoutine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComponentRoutine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComponentRoutineState, opts ...pulumi.ResourceOption) (*ComponentRoutine, error) {
	var resource ComponentRoutine
	err := ctx.ReadResource("splight:index/componentRoutine:ComponentRoutine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComponentRoutine resources.
type componentRoutineState struct {
	// reference to component to be attached
	ComponentId *string `pulumi:"componentId"`
	// static config parameters of the routine
	Configs []ComponentRoutineConfig `pulumi:"configs"`
	// optional complementary information about the routine
	Description *string `pulumi:"description"`
	// asset attribute where to ingest data. Only valid for IncomingRoutine
	Inputs []ComponentRoutineInputType `pulumi:"inputs"`
	// name of the routine
	Name *string `pulumi:"name"`
	// asset attribute where to ingest data. Only valid for IncomingRoutine
	Outputs []ComponentRoutineOutputType `pulumi:"outputs"`
	// [IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)
	Type *string `pulumi:"type"`
}

type ComponentRoutineState struct {
	// reference to component to be attached
	ComponentId pulumi.StringPtrInput
	// static config parameters of the routine
	Configs ComponentRoutineConfigArrayInput
	// optional complementary information about the routine
	Description pulumi.StringPtrInput
	// asset attribute where to ingest data. Only valid for IncomingRoutine
	Inputs ComponentRoutineInputTypeArrayInput
	// name of the routine
	Name pulumi.StringPtrInput
	// asset attribute where to ingest data. Only valid for IncomingRoutine
	Outputs ComponentRoutineOutputTypeArrayInput
	// [IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)
	Type pulumi.StringPtrInput
}

func (ComponentRoutineState) ElementType() reflect.Type {
	return reflect.TypeOf((*componentRoutineState)(nil)).Elem()
}

type componentRoutineArgs struct {
	// reference to component to be attached
	ComponentId string `pulumi:"componentId"`
	// static config parameters of the routine
	Configs []ComponentRoutineConfig `pulumi:"configs"`
	// optional complementary information about the routine
	Description *string `pulumi:"description"`
	// asset attribute where to ingest data. Only valid for IncomingRoutine
	Inputs []ComponentRoutineInputType `pulumi:"inputs"`
	// name of the routine
	Name *string `pulumi:"name"`
	// asset attribute where to ingest data. Only valid for IncomingRoutine
	Outputs []ComponentRoutineOutputType `pulumi:"outputs"`
	// [IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ComponentRoutine resource.
type ComponentRoutineArgs struct {
	// reference to component to be attached
	ComponentId pulumi.StringInput
	// static config parameters of the routine
	Configs ComponentRoutineConfigArrayInput
	// optional complementary information about the routine
	Description pulumi.StringPtrInput
	// asset attribute where to ingest data. Only valid for IncomingRoutine
	Inputs ComponentRoutineInputTypeArrayInput
	// name of the routine
	Name pulumi.StringPtrInput
	// asset attribute where to ingest data. Only valid for IncomingRoutine
	Outputs ComponentRoutineOutputTypeArrayInput
	// [IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)
	Type pulumi.StringInput
}

func (ComponentRoutineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentRoutineArgs)(nil)).Elem()
}

type ComponentRoutineInput interface {
	pulumi.Input

	ToComponentRoutineOutput() ComponentRoutineOutput
	ToComponentRoutineOutputWithContext(ctx context.Context) ComponentRoutineOutput
}

func (*ComponentRoutine) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentRoutine)(nil)).Elem()
}

func (i *ComponentRoutine) ToComponentRoutineOutput() ComponentRoutineOutput {
	return i.ToComponentRoutineOutputWithContext(context.Background())
}

func (i *ComponentRoutine) ToComponentRoutineOutputWithContext(ctx context.Context) ComponentRoutineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineOutput)
}

// ComponentRoutineArrayInput is an input type that accepts ComponentRoutineArray and ComponentRoutineArrayOutput values.
// You can construct a concrete instance of `ComponentRoutineArrayInput` via:
//
//	ComponentRoutineArray{ ComponentRoutineArgs{...} }
type ComponentRoutineArrayInput interface {
	pulumi.Input

	ToComponentRoutineArrayOutput() ComponentRoutineArrayOutput
	ToComponentRoutineArrayOutputWithContext(context.Context) ComponentRoutineArrayOutput
}

type ComponentRoutineArray []ComponentRoutineInput

func (ComponentRoutineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComponentRoutine)(nil)).Elem()
}

func (i ComponentRoutineArray) ToComponentRoutineArrayOutput() ComponentRoutineArrayOutput {
	return i.ToComponentRoutineArrayOutputWithContext(context.Background())
}

func (i ComponentRoutineArray) ToComponentRoutineArrayOutputWithContext(ctx context.Context) ComponentRoutineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineArrayOutput)
}

// ComponentRoutineMapInput is an input type that accepts ComponentRoutineMap and ComponentRoutineMapOutput values.
// You can construct a concrete instance of `ComponentRoutineMapInput` via:
//
//	ComponentRoutineMap{ "key": ComponentRoutineArgs{...} }
type ComponentRoutineMapInput interface {
	pulumi.Input

	ToComponentRoutineMapOutput() ComponentRoutineMapOutput
	ToComponentRoutineMapOutputWithContext(context.Context) ComponentRoutineMapOutput
}

type ComponentRoutineMap map[string]ComponentRoutineInput

func (ComponentRoutineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComponentRoutine)(nil)).Elem()
}

func (i ComponentRoutineMap) ToComponentRoutineMapOutput() ComponentRoutineMapOutput {
	return i.ToComponentRoutineMapOutputWithContext(context.Background())
}

func (i ComponentRoutineMap) ToComponentRoutineMapOutputWithContext(ctx context.Context) ComponentRoutineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentRoutineMapOutput)
}

type ComponentRoutineOutput struct{ *pulumi.OutputState }

func (ComponentRoutineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentRoutine)(nil)).Elem()
}

func (o ComponentRoutineOutput) ToComponentRoutineOutput() ComponentRoutineOutput {
	return o
}

func (o ComponentRoutineOutput) ToComponentRoutineOutputWithContext(ctx context.Context) ComponentRoutineOutput {
	return o
}

// reference to component to be attached
func (o ComponentRoutineOutput) ComponentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComponentRoutine) pulumi.StringOutput { return v.ComponentId }).(pulumi.StringOutput)
}

// static config parameters of the routine
func (o ComponentRoutineOutput) Configs() ComponentRoutineConfigArrayOutput {
	return o.ApplyT(func(v *ComponentRoutine) ComponentRoutineConfigArrayOutput { return v.Configs }).(ComponentRoutineConfigArrayOutput)
}

// optional complementary information about the routine
func (o ComponentRoutineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentRoutine) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// asset attribute where to ingest data. Only valid for IncomingRoutine
func (o ComponentRoutineOutput) Inputs() ComponentRoutineInputTypeArrayOutput {
	return o.ApplyT(func(v *ComponentRoutine) ComponentRoutineInputTypeArrayOutput { return v.Inputs }).(ComponentRoutineInputTypeArrayOutput)
}

// name of the routine
func (o ComponentRoutineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComponentRoutine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// asset attribute where to ingest data. Only valid for IncomingRoutine
func (o ComponentRoutineOutput) Outputs() ComponentRoutineOutputTypeArrayOutput {
	return o.ApplyT(func(v *ComponentRoutine) ComponentRoutineOutputTypeArrayOutput { return v.Outputs }).(ComponentRoutineOutputTypeArrayOutput)
}

// [IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)
func (o ComponentRoutineOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ComponentRoutine) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ComponentRoutineArrayOutput struct{ *pulumi.OutputState }

func (ComponentRoutineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComponentRoutine)(nil)).Elem()
}

func (o ComponentRoutineArrayOutput) ToComponentRoutineArrayOutput() ComponentRoutineArrayOutput {
	return o
}

func (o ComponentRoutineArrayOutput) ToComponentRoutineArrayOutputWithContext(ctx context.Context) ComponentRoutineArrayOutput {
	return o
}

func (o ComponentRoutineArrayOutput) Index(i pulumi.IntInput) ComponentRoutineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComponentRoutine {
		return vs[0].([]*ComponentRoutine)[vs[1].(int)]
	}).(ComponentRoutineOutput)
}

type ComponentRoutineMapOutput struct{ *pulumi.OutputState }

func (ComponentRoutineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComponentRoutine)(nil)).Elem()
}

func (o ComponentRoutineMapOutput) ToComponentRoutineMapOutput() ComponentRoutineMapOutput {
	return o
}

func (o ComponentRoutineMapOutput) ToComponentRoutineMapOutputWithContext(ctx context.Context) ComponentRoutineMapOutput {
	return o
}

func (o ComponentRoutineMapOutput) MapIndex(k pulumi.StringInput) ComponentRoutineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComponentRoutine {
		return vs[0].(map[string]*ComponentRoutine)[vs[1].(string)]
	}).(ComponentRoutineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineInput)(nil)).Elem(), &ComponentRoutine{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineArrayInput)(nil)).Elem(), ComponentRoutineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentRoutineMapInput)(nil)).Elem(), ComponentRoutineMap{})
	pulumi.RegisterOutputType(ComponentRoutineOutput{})
	pulumi.RegisterOutputType(ComponentRoutineArrayOutput{})
	pulumi.RegisterOutputType(ComponentRoutineMapOutput{})
}
