// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/server:Server [options] splight_server.<name> <server_id>
// ```
type Server struct {
	pulumi.CustomResourceState

	// static config parameters of the routine
	Configs ServerConfigArrayOutput `pulumi:"configs"`
	// optional description to add details of the resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// environment variables for the server
	EnvVars ServerEnvVarArrayOutput `pulumi:"envVars"`
	// log level of the server
	LogLevel pulumi.StringPtrOutput `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize pulumi.StringPtrOutput `pulumi:"machineInstanceSize"`
	// the name of the server to be created
	Name pulumi.StringOutput `pulumi:"name"`
	// id of the compute node where the server runs
	Node pulumi.StringPtrOutput `pulumi:"node"`
	// ports of the server
	Ports ServerPortArrayOutput `pulumi:"ports"`
	// restart policy of the server
	RestartPolicy pulumi.StringPtrOutput `pulumi:"restartPolicy"`
	// tags of the resource
	Tags ServerTagArrayOutput `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub server
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("splight:index/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("splight:index/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// static config parameters of the routine
	Configs []ServerConfig `pulumi:"configs"`
	// optional description to add details of the resource
	Description *string `pulumi:"description"`
	// environment variables for the server
	EnvVars []ServerEnvVar `pulumi:"envVars"`
	// log level of the server
	LogLevel *string `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize *string `pulumi:"machineInstanceSize"`
	// the name of the server to be created
	Name *string `pulumi:"name"`
	// id of the compute node where the server runs
	Node *string `pulumi:"node"`
	// ports of the server
	Ports []ServerPort `pulumi:"ports"`
	// restart policy of the server
	RestartPolicy *string `pulumi:"restartPolicy"`
	// tags of the resource
	Tags []ServerTag `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub server
	Version *string `pulumi:"version"`
}

type ServerState struct {
	// static config parameters of the routine
	Configs ServerConfigArrayInput
	// optional description to add details of the resource
	Description pulumi.StringPtrInput
	// environment variables for the server
	EnvVars ServerEnvVarArrayInput
	// log level of the server
	LogLevel pulumi.StringPtrInput
	// instance size
	MachineInstanceSize pulumi.StringPtrInput
	// the name of the server to be created
	Name pulumi.StringPtrInput
	// id of the compute node where the server runs
	Node pulumi.StringPtrInput
	// ports of the server
	Ports ServerPortArrayInput
	// restart policy of the server
	RestartPolicy pulumi.StringPtrInput
	// tags of the resource
	Tags ServerTagArrayInput
	// [NAME-VERSION] the version of the hub server
	Version pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// static config parameters of the routine
	Configs []ServerConfig `pulumi:"configs"`
	// optional description to add details of the resource
	Description *string `pulumi:"description"`
	// environment variables for the server
	EnvVars []ServerEnvVar `pulumi:"envVars"`
	// log level of the server
	LogLevel *string `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize *string `pulumi:"machineInstanceSize"`
	// the name of the server to be created
	Name *string `pulumi:"name"`
	// id of the compute node where the server runs
	Node *string `pulumi:"node"`
	// ports of the server
	Ports []ServerPort `pulumi:"ports"`
	// restart policy of the server
	RestartPolicy *string `pulumi:"restartPolicy"`
	// tags of the resource
	Tags []ServerTag `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub server
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// static config parameters of the routine
	Configs ServerConfigArrayInput
	// optional description to add details of the resource
	Description pulumi.StringPtrInput
	// environment variables for the server
	EnvVars ServerEnvVarArrayInput
	// log level of the server
	LogLevel pulumi.StringPtrInput
	// instance size
	MachineInstanceSize pulumi.StringPtrInput
	// the name of the server to be created
	Name pulumi.StringPtrInput
	// id of the compute node where the server runs
	Node pulumi.StringPtrInput
	// ports of the server
	Ports ServerPortArrayInput
	// restart policy of the server
	RestartPolicy pulumi.StringPtrInput
	// tags of the resource
	Tags ServerTagArrayInput
	// [NAME-VERSION] the version of the hub server
	Version pulumi.StringInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// static config parameters of the routine
func (o ServerOutput) Configs() ServerConfigArrayOutput {
	return o.ApplyT(func(v *Server) ServerConfigArrayOutput { return v.Configs }).(ServerConfigArrayOutput)
}

// optional description to add details of the resource
func (o ServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// environment variables for the server
func (o ServerOutput) EnvVars() ServerEnvVarArrayOutput {
	return o.ApplyT(func(v *Server) ServerEnvVarArrayOutput { return v.EnvVars }).(ServerEnvVarArrayOutput)
}

// log level of the server
func (o ServerOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// instance size
func (o ServerOutput) MachineInstanceSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.MachineInstanceSize }).(pulumi.StringPtrOutput)
}

// the name of the server to be created
func (o ServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// id of the compute node where the server runs
func (o ServerOutput) Node() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Node }).(pulumi.StringPtrOutput)
}

// ports of the server
func (o ServerOutput) Ports() ServerPortArrayOutput {
	return o.ApplyT(func(v *Server) ServerPortArrayOutput { return v.Ports }).(ServerPortArrayOutput)
}

// restart policy of the server
func (o ServerOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.RestartPolicy }).(pulumi.StringPtrOutput)
}

// tags of the resource
func (o ServerOutput) Tags() ServerTagArrayOutput {
	return o.ApplyT(func(v *Server) ServerTagArrayOutput { return v.Tags }).(ServerTagArrayOutput)
}

// [NAME-VERSION] the version of the hub server
func (o ServerOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
