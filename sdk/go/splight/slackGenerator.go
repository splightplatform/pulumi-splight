// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/slackGenerator:SlackGenerator [options] splight_slack_generator.<name> <slack_generator_id>
// ```
type SlackGenerator struct {
	pulumi.CustomResourceState

	// description of the resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// geo position and shape of the resource
	Geometry pulumi.StringPtrOutput `pulumi:"geometry"`
	// kind of the resource
	Kinds SlackGeneratorKindArrayOutput `pulumi:"kinds"`
	// name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// tags of the resource
	Tags SlackGeneratorTagArrayOutput `pulumi:"tags"`
	// timezone that overrides location-based timezone of the resource
	Timezone pulumi.StringOutput `pulumi:"timezone"`
}

// NewSlackGenerator registers a new resource with the given unique name, arguments, and options.
func NewSlackGenerator(ctx *pulumi.Context,
	name string, args *SlackGeneratorArgs, opts ...pulumi.ResourceOption) (*SlackGenerator, error) {
	if args == nil {
		args = &SlackGeneratorArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SlackGenerator
	err := ctx.RegisterResource("splight:index/slackGenerator:SlackGenerator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlackGenerator gets an existing SlackGenerator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlackGenerator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SlackGeneratorState, opts ...pulumi.ResourceOption) (*SlackGenerator, error) {
	var resource SlackGenerator
	err := ctx.ReadResource("splight:index/slackGenerator:SlackGenerator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SlackGenerator resources.
type slackGeneratorState struct {
	// description of the resource
	Description *string `pulumi:"description"`
	// geo position and shape of the resource
	Geometry *string `pulumi:"geometry"`
	// kind of the resource
	Kinds []SlackGeneratorKind `pulumi:"kinds"`
	// name of the resource
	Name *string `pulumi:"name"`
	// tags of the resource
	Tags []SlackGeneratorTag `pulumi:"tags"`
	// timezone that overrides location-based timezone of the resource
	Timezone *string `pulumi:"timezone"`
}

type SlackGeneratorState struct {
	// description of the resource
	Description pulumi.StringPtrInput
	// geo position and shape of the resource
	Geometry pulumi.StringPtrInput
	// kind of the resource
	Kinds SlackGeneratorKindArrayInput
	// name of the resource
	Name pulumi.StringPtrInput
	// tags of the resource
	Tags SlackGeneratorTagArrayInput
	// timezone that overrides location-based timezone of the resource
	Timezone pulumi.StringPtrInput
}

func (SlackGeneratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*slackGeneratorState)(nil)).Elem()
}

type slackGeneratorArgs struct {
	// description of the resource
	Description *string `pulumi:"description"`
	// geo position and shape of the resource
	Geometry *string `pulumi:"geometry"`
	// name of the resource
	Name *string `pulumi:"name"`
	// tags of the resource
	Tags []SlackGeneratorTag `pulumi:"tags"`
	// timezone that overrides location-based timezone of the resource
	Timezone *string `pulumi:"timezone"`
}

// The set of arguments for constructing a SlackGenerator resource.
type SlackGeneratorArgs struct {
	// description of the resource
	Description pulumi.StringPtrInput
	// geo position and shape of the resource
	Geometry pulumi.StringPtrInput
	// name of the resource
	Name pulumi.StringPtrInput
	// tags of the resource
	Tags SlackGeneratorTagArrayInput
	// timezone that overrides location-based timezone of the resource
	Timezone pulumi.StringPtrInput
}

func (SlackGeneratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*slackGeneratorArgs)(nil)).Elem()
}

type SlackGeneratorInput interface {
	pulumi.Input

	ToSlackGeneratorOutput() SlackGeneratorOutput
	ToSlackGeneratorOutputWithContext(ctx context.Context) SlackGeneratorOutput
}

func (*SlackGenerator) ElementType() reflect.Type {
	return reflect.TypeOf((**SlackGenerator)(nil)).Elem()
}

func (i *SlackGenerator) ToSlackGeneratorOutput() SlackGeneratorOutput {
	return i.ToSlackGeneratorOutputWithContext(context.Background())
}

func (i *SlackGenerator) ToSlackGeneratorOutputWithContext(ctx context.Context) SlackGeneratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackGeneratorOutput)
}

// SlackGeneratorArrayInput is an input type that accepts SlackGeneratorArray and SlackGeneratorArrayOutput values.
// You can construct a concrete instance of `SlackGeneratorArrayInput` via:
//
//	SlackGeneratorArray{ SlackGeneratorArgs{...} }
type SlackGeneratorArrayInput interface {
	pulumi.Input

	ToSlackGeneratorArrayOutput() SlackGeneratorArrayOutput
	ToSlackGeneratorArrayOutputWithContext(context.Context) SlackGeneratorArrayOutput
}

type SlackGeneratorArray []SlackGeneratorInput

func (SlackGeneratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlackGenerator)(nil)).Elem()
}

func (i SlackGeneratorArray) ToSlackGeneratorArrayOutput() SlackGeneratorArrayOutput {
	return i.ToSlackGeneratorArrayOutputWithContext(context.Background())
}

func (i SlackGeneratorArray) ToSlackGeneratorArrayOutputWithContext(ctx context.Context) SlackGeneratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackGeneratorArrayOutput)
}

// SlackGeneratorMapInput is an input type that accepts SlackGeneratorMap and SlackGeneratorMapOutput values.
// You can construct a concrete instance of `SlackGeneratorMapInput` via:
//
//	SlackGeneratorMap{ "key": SlackGeneratorArgs{...} }
type SlackGeneratorMapInput interface {
	pulumi.Input

	ToSlackGeneratorMapOutput() SlackGeneratorMapOutput
	ToSlackGeneratorMapOutputWithContext(context.Context) SlackGeneratorMapOutput
}

type SlackGeneratorMap map[string]SlackGeneratorInput

func (SlackGeneratorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlackGenerator)(nil)).Elem()
}

func (i SlackGeneratorMap) ToSlackGeneratorMapOutput() SlackGeneratorMapOutput {
	return i.ToSlackGeneratorMapOutputWithContext(context.Background())
}

func (i SlackGeneratorMap) ToSlackGeneratorMapOutputWithContext(ctx context.Context) SlackGeneratorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackGeneratorMapOutput)
}

type SlackGeneratorOutput struct{ *pulumi.OutputState }

func (SlackGeneratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlackGenerator)(nil)).Elem()
}

func (o SlackGeneratorOutput) ToSlackGeneratorOutput() SlackGeneratorOutput {
	return o
}

func (o SlackGeneratorOutput) ToSlackGeneratorOutputWithContext(ctx context.Context) SlackGeneratorOutput {
	return o
}

// description of the resource
func (o SlackGeneratorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlackGenerator) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// geo position and shape of the resource
func (o SlackGeneratorOutput) Geometry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlackGenerator) pulumi.StringPtrOutput { return v.Geometry }).(pulumi.StringPtrOutput)
}

// kind of the resource
func (o SlackGeneratorOutput) Kinds() SlackGeneratorKindArrayOutput {
	return o.ApplyT(func(v *SlackGenerator) SlackGeneratorKindArrayOutput { return v.Kinds }).(SlackGeneratorKindArrayOutput)
}

// name of the resource
func (o SlackGeneratorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackGenerator) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// tags of the resource
func (o SlackGeneratorOutput) Tags() SlackGeneratorTagArrayOutput {
	return o.ApplyT(func(v *SlackGenerator) SlackGeneratorTagArrayOutput { return v.Tags }).(SlackGeneratorTagArrayOutput)
}

// timezone that overrides location-based timezone of the resource
func (o SlackGeneratorOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackGenerator) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

type SlackGeneratorArrayOutput struct{ *pulumi.OutputState }

func (SlackGeneratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlackGenerator)(nil)).Elem()
}

func (o SlackGeneratorArrayOutput) ToSlackGeneratorArrayOutput() SlackGeneratorArrayOutput {
	return o
}

func (o SlackGeneratorArrayOutput) ToSlackGeneratorArrayOutputWithContext(ctx context.Context) SlackGeneratorArrayOutput {
	return o
}

func (o SlackGeneratorArrayOutput) Index(i pulumi.IntInput) SlackGeneratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SlackGenerator {
		return vs[0].([]*SlackGenerator)[vs[1].(int)]
	}).(SlackGeneratorOutput)
}

type SlackGeneratorMapOutput struct{ *pulumi.OutputState }

func (SlackGeneratorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlackGenerator)(nil)).Elem()
}

func (o SlackGeneratorMapOutput) ToSlackGeneratorMapOutput() SlackGeneratorMapOutput {
	return o
}

func (o SlackGeneratorMapOutput) ToSlackGeneratorMapOutputWithContext(ctx context.Context) SlackGeneratorMapOutput {
	return o
}

func (o SlackGeneratorMapOutput) MapIndex(k pulumi.StringInput) SlackGeneratorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SlackGenerator {
		return vs[0].(map[string]*SlackGenerator)[vs[1].(string)]
	}).(SlackGeneratorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SlackGeneratorInput)(nil)).Elem(), &SlackGenerator{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackGeneratorArrayInput)(nil)).Elem(), SlackGeneratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackGeneratorMapInput)(nil)).Elem(), SlackGeneratorMap{})
	pulumi.RegisterOutputType(SlackGeneratorOutput{})
	pulumi.RegisterOutputType(SlackGeneratorArrayOutput{})
	pulumi.RegisterOutputType(SlackGeneratorMapOutput{})
}
