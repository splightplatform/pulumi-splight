// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/component:Component [options] splight_component.<name> <component_id>
// ```
type Component struct {
	pulumi.CustomResourceState

	// optional description to add details of the resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// static config parameters of the routine
	Inputs ComponentInputTypeArrayOutput `pulumi:"inputs"`
	// log level of the component
	LogLevel pulumi.StringPtrOutput `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize pulumi.StringPtrOutput `pulumi:"machineInstanceSize"`
	// the name of the component to be created
	Name pulumi.StringOutput `pulumi:"name"`
	// id of the compute node where the component runs
	Node pulumi.StringPtrOutput `pulumi:"node"`
	// restart policy of the component
	RestartPolicy pulumi.StringPtrOutput `pulumi:"restartPolicy"`
	// tags of the resource
	Tags ComponentTagArrayOutput `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub component
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewComponent registers a new resource with the given unique name, arguments, and options.
func NewComponent(ctx *pulumi.Context,
	name string, args *ComponentArgs, opts ...pulumi.ResourceOption) (*Component, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Component
	err := ctx.RegisterResource("splight:index/component:Component", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComponent gets an existing Component resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComponent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComponentState, opts ...pulumi.ResourceOption) (*Component, error) {
	var resource Component
	err := ctx.ReadResource("splight:index/component:Component", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Component resources.
type componentState struct {
	// optional description to add details of the resource
	Description *string `pulumi:"description"`
	// static config parameters of the routine
	Inputs []ComponentInputType `pulumi:"inputs"`
	// log level of the component
	LogLevel *string `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize *string `pulumi:"machineInstanceSize"`
	// the name of the component to be created
	Name *string `pulumi:"name"`
	// id of the compute node where the component runs
	Node *string `pulumi:"node"`
	// restart policy of the component
	RestartPolicy *string `pulumi:"restartPolicy"`
	// tags of the resource
	Tags []ComponentTag `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub component
	Version *string `pulumi:"version"`
}

type ComponentState struct {
	// optional description to add details of the resource
	Description pulumi.StringPtrInput
	// static config parameters of the routine
	Inputs ComponentInputTypeArrayInput
	// log level of the component
	LogLevel pulumi.StringPtrInput
	// instance size
	MachineInstanceSize pulumi.StringPtrInput
	// the name of the component to be created
	Name pulumi.StringPtrInput
	// id of the compute node where the component runs
	Node pulumi.StringPtrInput
	// restart policy of the component
	RestartPolicy pulumi.StringPtrInput
	// tags of the resource
	Tags ComponentTagArrayInput
	// [NAME-VERSION] the version of the hub component
	Version pulumi.StringPtrInput
}

func (ComponentState) ElementType() reflect.Type {
	return reflect.TypeOf((*componentState)(nil)).Elem()
}

type componentArgs struct {
	// optional description to add details of the resource
	Description *string `pulumi:"description"`
	// static config parameters of the routine
	Inputs []ComponentInputType `pulumi:"inputs"`
	// log level of the component
	LogLevel *string `pulumi:"logLevel"`
	// instance size
	MachineInstanceSize *string `pulumi:"machineInstanceSize"`
	// the name of the component to be created
	Name *string `pulumi:"name"`
	// id of the compute node where the component runs
	Node *string `pulumi:"node"`
	// restart policy of the component
	RestartPolicy *string `pulumi:"restartPolicy"`
	// tags of the resource
	Tags []ComponentTag `pulumi:"tags"`
	// [NAME-VERSION] the version of the hub component
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Component resource.
type ComponentArgs struct {
	// optional description to add details of the resource
	Description pulumi.StringPtrInput
	// static config parameters of the routine
	Inputs ComponentInputTypeArrayInput
	// log level of the component
	LogLevel pulumi.StringPtrInput
	// instance size
	MachineInstanceSize pulumi.StringPtrInput
	// the name of the component to be created
	Name pulumi.StringPtrInput
	// id of the compute node where the component runs
	Node pulumi.StringPtrInput
	// restart policy of the component
	RestartPolicy pulumi.StringPtrInput
	// tags of the resource
	Tags ComponentTagArrayInput
	// [NAME-VERSION] the version of the hub component
	Version pulumi.StringInput
}

func (ComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentArgs)(nil)).Elem()
}

type ComponentInput interface {
	pulumi.Input

	ToComponentOutput() ComponentOutput
	ToComponentOutputWithContext(ctx context.Context) ComponentOutput
}

func (*Component) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (i *Component) ToComponentOutput() ComponentOutput {
	return i.ToComponentOutputWithContext(context.Background())
}

func (i *Component) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOutput)
}

// ComponentArrayInput is an input type that accepts ComponentArray and ComponentArrayOutput values.
// You can construct a concrete instance of `ComponentArrayInput` via:
//
//	ComponentArray{ ComponentArgs{...} }
type ComponentArrayInput interface {
	pulumi.Input

	ToComponentArrayOutput() ComponentArrayOutput
	ToComponentArrayOutputWithContext(context.Context) ComponentArrayOutput
}

type ComponentArray []ComponentInput

func (ComponentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Component)(nil)).Elem()
}

func (i ComponentArray) ToComponentArrayOutput() ComponentArrayOutput {
	return i.ToComponentArrayOutputWithContext(context.Background())
}

func (i ComponentArray) ToComponentArrayOutputWithContext(ctx context.Context) ComponentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentArrayOutput)
}

// ComponentMapInput is an input type that accepts ComponentMap and ComponentMapOutput values.
// You can construct a concrete instance of `ComponentMapInput` via:
//
//	ComponentMap{ "key": ComponentArgs{...} }
type ComponentMapInput interface {
	pulumi.Input

	ToComponentMapOutput() ComponentMapOutput
	ToComponentMapOutputWithContext(context.Context) ComponentMapOutput
}

type ComponentMap map[string]ComponentInput

func (ComponentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Component)(nil)).Elem()
}

func (i ComponentMap) ToComponentMapOutput() ComponentMapOutput {
	return i.ToComponentMapOutputWithContext(context.Background())
}

func (i ComponentMap) ToComponentMapOutputWithContext(ctx context.Context) ComponentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentMapOutput)
}

type ComponentOutput struct{ *pulumi.OutputState }

func (ComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (o ComponentOutput) ToComponentOutput() ComponentOutput {
	return o
}

func (o ComponentOutput) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return o
}

// optional description to add details of the resource
func (o ComponentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// static config parameters of the routine
func (o ComponentOutput) Inputs() ComponentInputTypeArrayOutput {
	return o.ApplyT(func(v *Component) ComponentInputTypeArrayOutput { return v.Inputs }).(ComponentInputTypeArrayOutput)
}

// log level of the component
func (o ComponentOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// instance size
func (o ComponentOutput) MachineInstanceSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.MachineInstanceSize }).(pulumi.StringPtrOutput)
}

// the name of the component to be created
func (o ComponentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// id of the compute node where the component runs
func (o ComponentOutput) Node() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.Node }).(pulumi.StringPtrOutput)
}

// restart policy of the component
func (o ComponentOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.RestartPolicy }).(pulumi.StringPtrOutput)
}

// tags of the resource
func (o ComponentOutput) Tags() ComponentTagArrayOutput {
	return o.ApplyT(func(v *Component) ComponentTagArrayOutput { return v.Tags }).(ComponentTagArrayOutput)
}

// [NAME-VERSION] the version of the hub component
func (o ComponentOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ComponentArrayOutput struct{ *pulumi.OutputState }

func (ComponentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Component)(nil)).Elem()
}

func (o ComponentArrayOutput) ToComponentArrayOutput() ComponentArrayOutput {
	return o
}

func (o ComponentArrayOutput) ToComponentArrayOutputWithContext(ctx context.Context) ComponentArrayOutput {
	return o
}

func (o ComponentArrayOutput) Index(i pulumi.IntInput) ComponentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Component {
		return vs[0].([]*Component)[vs[1].(int)]
	}).(ComponentOutput)
}

type ComponentMapOutput struct{ *pulumi.OutputState }

func (ComponentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Component)(nil)).Elem()
}

func (o ComponentMapOutput) ToComponentMapOutput() ComponentMapOutput {
	return o
}

func (o ComponentMapOutput) ToComponentMapOutputWithContext(ctx context.Context) ComponentMapOutput {
	return o
}

func (o ComponentMapOutput) MapIndex(k pulumi.StringInput) ComponentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Component {
		return vs[0].(map[string]*Component)[vs[1].(string)]
	}).(ComponentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInput)(nil)).Elem(), &Component{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentArrayInput)(nil)).Elem(), ComponentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentMapInput)(nil)).Elem(), ComponentMap{})
	pulumi.RegisterOutputType(ComponentOutput{})
	pulumi.RegisterOutputType(ComponentArrayOutput{})
	pulumi.RegisterOutputType(ComponentMapOutput{})
}
