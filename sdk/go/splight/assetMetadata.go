// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/splightplatform/pulumi-splight/sdk/go/splight"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"type": "GeometryCollection",
//				"geometries": []map[string]interface{}{
//					map[string]interface{}{
//						"type": "Point",
//						"coordinates": []float64{
//							0,
//							0,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			myAsset, err := splight.NewAsset(ctx, "myAsset", &splight.AssetArgs{
//				Description: pulumi.String("My Asset Description"),
//				Timezone:    pulumi.String("America/Los_Angeles"),
//				Geometry:    pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON1, err := json.Marshal(10)
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_, err = splight.NewAssetMetadata(ctx, "myAssetMetadata", &splight.AssetMetadataArgs{
//				Type:  pulumi.String("Number"),
//				Unit:  pulumi.String("meters"),
//				Value: pulumi.String(json1),
//				Asset: myAsset.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/assetMetadata:AssetMetadata [options] splight_asset_metadata.<name> <asset_metadata_id>
// ```
type AssetMetadata struct {
	pulumi.CustomResourceState

	// reference to the asset to be linked to
	Asset pulumi.StringOutput `pulumi:"asset"`
	// name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringOutput `pulumi:"type"`
	// optional reference to the unit of the measure
	Unit pulumi.StringPtrOutput `pulumi:"unit"`
	// metadata value
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewAssetMetadata registers a new resource with the given unique name, arguments, and options.
func NewAssetMetadata(ctx *pulumi.Context,
	name string, args *AssetMetadataArgs, opts ...pulumi.ResourceOption) (*AssetMetadata, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Asset == nil {
		return nil, errors.New("invalid value for required argument 'Asset'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssetMetadata
	err := ctx.RegisterResource("splight:index/assetMetadata:AssetMetadata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssetMetadata gets an existing AssetMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssetMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssetMetadataState, opts ...pulumi.ResourceOption) (*AssetMetadata, error) {
	var resource AssetMetadata
	err := ctx.ReadResource("splight:index/assetMetadata:AssetMetadata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssetMetadata resources.
type assetMetadataState struct {
	// reference to the asset to be linked to
	Asset *string `pulumi:"asset"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type *string `pulumi:"type"`
	// optional reference to the unit of the measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value *string `pulumi:"value"`
}

type AssetMetadataState struct {
	// reference to the asset to be linked to
	Asset pulumi.StringPtrInput
	// name of the resource
	Name pulumi.StringPtrInput
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringPtrInput
	// optional reference to the unit of the measure
	Unit pulumi.StringPtrInput
	// metadata value
	Value pulumi.StringPtrInput
}

func (AssetMetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*assetMetadataState)(nil)).Elem()
}

type assetMetadataArgs struct {
	// reference to the asset to be linked to
	Asset string `pulumi:"asset"`
	// name of the resource
	Name *string `pulumi:"name"`
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type string `pulumi:"type"`
	// optional reference to the unit of the measure
	Unit *string `pulumi:"unit"`
	// metadata value
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a AssetMetadata resource.
type AssetMetadataArgs struct {
	// reference to the asset to be linked to
	Asset pulumi.StringInput
	// name of the resource
	Name pulumi.StringPtrInput
	// [String|Boolean|Number] type of the data to be ingested in this attribute
	Type pulumi.StringInput
	// optional reference to the unit of the measure
	Unit pulumi.StringPtrInput
	// metadata value
	Value pulumi.StringInput
}

func (AssetMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assetMetadataArgs)(nil)).Elem()
}

type AssetMetadataInput interface {
	pulumi.Input

	ToAssetMetadataOutput() AssetMetadataOutput
	ToAssetMetadataOutputWithContext(ctx context.Context) AssetMetadataOutput
}

func (*AssetMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetMetadata)(nil)).Elem()
}

func (i *AssetMetadata) ToAssetMetadataOutput() AssetMetadataOutput {
	return i.ToAssetMetadataOutputWithContext(context.Background())
}

func (i *AssetMetadata) ToAssetMetadataOutputWithContext(ctx context.Context) AssetMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetMetadataOutput)
}

// AssetMetadataArrayInput is an input type that accepts AssetMetadataArray and AssetMetadataArrayOutput values.
// You can construct a concrete instance of `AssetMetadataArrayInput` via:
//
//	AssetMetadataArray{ AssetMetadataArgs{...} }
type AssetMetadataArrayInput interface {
	pulumi.Input

	ToAssetMetadataArrayOutput() AssetMetadataArrayOutput
	ToAssetMetadataArrayOutputWithContext(context.Context) AssetMetadataArrayOutput
}

type AssetMetadataArray []AssetMetadataInput

func (AssetMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetMetadata)(nil)).Elem()
}

func (i AssetMetadataArray) ToAssetMetadataArrayOutput() AssetMetadataArrayOutput {
	return i.ToAssetMetadataArrayOutputWithContext(context.Background())
}

func (i AssetMetadataArray) ToAssetMetadataArrayOutputWithContext(ctx context.Context) AssetMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetMetadataArrayOutput)
}

// AssetMetadataMapInput is an input type that accepts AssetMetadataMap and AssetMetadataMapOutput values.
// You can construct a concrete instance of `AssetMetadataMapInput` via:
//
//	AssetMetadataMap{ "key": AssetMetadataArgs{...} }
type AssetMetadataMapInput interface {
	pulumi.Input

	ToAssetMetadataMapOutput() AssetMetadataMapOutput
	ToAssetMetadataMapOutputWithContext(context.Context) AssetMetadataMapOutput
}

type AssetMetadataMap map[string]AssetMetadataInput

func (AssetMetadataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetMetadata)(nil)).Elem()
}

func (i AssetMetadataMap) ToAssetMetadataMapOutput() AssetMetadataMapOutput {
	return i.ToAssetMetadataMapOutputWithContext(context.Background())
}

func (i AssetMetadataMap) ToAssetMetadataMapOutputWithContext(ctx context.Context) AssetMetadataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetMetadataMapOutput)
}

type AssetMetadataOutput struct{ *pulumi.OutputState }

func (AssetMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetMetadata)(nil)).Elem()
}

func (o AssetMetadataOutput) ToAssetMetadataOutput() AssetMetadataOutput {
	return o
}

func (o AssetMetadataOutput) ToAssetMetadataOutputWithContext(ctx context.Context) AssetMetadataOutput {
	return o
}

// reference to the asset to be linked to
func (o AssetMetadataOutput) Asset() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetMetadata) pulumi.StringOutput { return v.Asset }).(pulumi.StringOutput)
}

// name of the resource
func (o AssetMetadataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetMetadata) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [String|Boolean|Number] type of the data to be ingested in this attribute
func (o AssetMetadataOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetMetadata) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// optional reference to the unit of the measure
func (o AssetMetadataOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetMetadata) pulumi.StringPtrOutput { return v.Unit }).(pulumi.StringPtrOutput)
}

// metadata value
func (o AssetMetadataOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetMetadata) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type AssetMetadataArrayOutput struct{ *pulumi.OutputState }

func (AssetMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetMetadata)(nil)).Elem()
}

func (o AssetMetadataArrayOutput) ToAssetMetadataArrayOutput() AssetMetadataArrayOutput {
	return o
}

func (o AssetMetadataArrayOutput) ToAssetMetadataArrayOutputWithContext(ctx context.Context) AssetMetadataArrayOutput {
	return o
}

func (o AssetMetadataArrayOutput) Index(i pulumi.IntInput) AssetMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssetMetadata {
		return vs[0].([]*AssetMetadata)[vs[1].(int)]
	}).(AssetMetadataOutput)
}

type AssetMetadataMapOutput struct{ *pulumi.OutputState }

func (AssetMetadataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetMetadata)(nil)).Elem()
}

func (o AssetMetadataMapOutput) ToAssetMetadataMapOutput() AssetMetadataMapOutput {
	return o
}

func (o AssetMetadataMapOutput) ToAssetMetadataMapOutputWithContext(ctx context.Context) AssetMetadataMapOutput {
	return o
}

func (o AssetMetadataMapOutput) MapIndex(k pulumi.StringInput) AssetMetadataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssetMetadata {
		return vs[0].(map[string]*AssetMetadata)[vs[1].(string)]
	}).(AssetMetadataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssetMetadataInput)(nil)).Elem(), &AssetMetadata{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetMetadataArrayInput)(nil)).Elem(), AssetMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetMetadataMapInput)(nil)).Elem(), AssetMetadataMap{})
	pulumi.RegisterOutputType(AssetMetadataOutput{})
	pulumi.RegisterOutputType(AssetMetadataArrayOutput{})
	pulumi.RegisterOutputType(AssetMetadataMapOutput{})
}
