// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/line:Line [options] splight_line.<name> <line_id>
// ```
type Line struct {
	pulumi.CustomResourceState

	// attribute of the resource
	Absorptivity LineAbsorptivityOutput `pulumi:"absorptivity"`
	// attribute of the resource
	ActivePowerEnds LineActivePowerEndArrayOutput `pulumi:"activePowerEnds"`
	// attribute of the resource
	ActivePowers LineActivePowerArrayOutput `pulumi:"activePowers"`
	// attribute of the resource
	Ampacities LineAmpacityArrayOutput `pulumi:"ampacities"`
	// attribute of the resource
	Atmosphere LineAtmosphereOutput `pulumi:"atmosphere"`
	// attribute of the resource
	Capacitance LineCapacitanceOutput `pulumi:"capacitance"`
	// attribute of the resource
	Conductance LineConductanceOutput `pulumi:"conductance"`
	// attribute of the resource
	CurrentRs LineCurrentRArrayOutput `pulumi:"currentRs"`
	// attribute of the resource
	CurrentS LineCurrentArrayOutput `pulumi:"currentS"`
	// attribute of the resource
	CurrentTs LineCurrentTArrayOutput `pulumi:"currentTs"`
	// attribute of the resource
	Currents LineCurrentArrayOutput `pulumi:"currents"`
	// description of the resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// attribute of the resource
	Diameter LineDiameterOutput `pulumi:"diameter"`
	// attribute of the resource
	Emissivity LineEmissivityOutput `pulumi:"emissivity"`
	// attribute of the resource
	Energies LineEnergyArrayOutput `pulumi:"energies"`
	// geo position and shape of the resource
	Geometry pulumi.StringPtrOutput `pulumi:"geometry"`
	// kind of the resource
	Kinds LineKindArrayOutput `pulumi:"kinds"`
	// attribute of the resource
	Length LineLengthOutput `pulumi:"length"`
	// attribute of the resource
	MaxTemperatures LineMaxTemperatureArrayOutput `pulumi:"maxTemperatures"`
	// attribute of the resource
	MaximumAllowedCurrent LineMaximumAllowedCurrentOutput `pulumi:"maximumAllowedCurrent"`
	// attribute of the resource
	MaximumAllowedPower LineMaximumAllowedPowerOutput `pulumi:"maximumAllowedPower"`
	// attribute of the resource
	MaximumAllowedTemperature LineMaximumAllowedTemperatureOutput `pulumi:"maximumAllowedTemperature"`
	// attribute of the resource
	MaximumAllowedTemperatureLte LineMaximumAllowedTemperatureLteOutput `pulumi:"maximumAllowedTemperatureLte"`
	// attribute of the resource
	MaximumAllowedTemperatureSte LineMaximumAllowedTemperatureSteOutput `pulumi:"maximumAllowedTemperatureSte"`
	// name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// attribute of the resource
	NumberOfConductors LineNumberOfConductorsOutput `pulumi:"numberOfConductors"`
	// attribute of the resource
	Reactance LineReactanceOutput `pulumi:"reactance"`
	// attribute of the resource
	ReactivePowers LineReactivePowerArrayOutput `pulumi:"reactivePowers"`
	// attribute of the resource
	ReferenceResistance LineReferenceResistanceOutput `pulumi:"referenceResistance"`
	// related assets of the resource
	RelatedAssets LineRelatedAssetArrayOutput `pulumi:"relatedAssets"`
	// attribute of the resource
	Resistance LineResistanceOutput `pulumi:"resistance"`
	// attribute of the resource
	SafetyMarginForPower LineSafetyMarginForPowerOutput `pulumi:"safetyMarginForPower"`
	// attribute of the resource
	Susceptance LineSusceptanceOutput `pulumi:"susceptance"`
	// tags of the resource
	Tags LineTagArrayOutput `pulumi:"tags"`
	// attribute of the resource
	TemperatureCoeffResistance LineTemperatureCoeffResistanceOutput `pulumi:"temperatureCoeffResistance"`
	// attribute of the resource
	VoltageRs LineVoltageRArrayOutput `pulumi:"voltageRs"`
	// attribute of the resource
	VoltageSts LineVoltageStArrayOutput `pulumi:"voltageSts"`
	// attribute of the resource
	VoltageTrs LineVoltageTrArrayOutput `pulumi:"voltageTrs"`
}

// NewLine registers a new resource with the given unique name, arguments, and options.
func NewLine(ctx *pulumi.Context,
	name string, args *LineArgs, opts ...pulumi.ResourceOption) (*Line, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Absorptivity == nil {
		return nil, errors.New("invalid value for required argument 'Absorptivity'")
	}
	if args.Atmosphere == nil {
		return nil, errors.New("invalid value for required argument 'Atmosphere'")
	}
	if args.Capacitance == nil {
		return nil, errors.New("invalid value for required argument 'Capacitance'")
	}
	if args.Conductance == nil {
		return nil, errors.New("invalid value for required argument 'Conductance'")
	}
	if args.Diameter == nil {
		return nil, errors.New("invalid value for required argument 'Diameter'")
	}
	if args.Emissivity == nil {
		return nil, errors.New("invalid value for required argument 'Emissivity'")
	}
	if args.Length == nil {
		return nil, errors.New("invalid value for required argument 'Length'")
	}
	if args.MaximumAllowedCurrent == nil {
		return nil, errors.New("invalid value for required argument 'MaximumAllowedCurrent'")
	}
	if args.MaximumAllowedPower == nil {
		return nil, errors.New("invalid value for required argument 'MaximumAllowedPower'")
	}
	if args.MaximumAllowedTemperature == nil {
		return nil, errors.New("invalid value for required argument 'MaximumAllowedTemperature'")
	}
	if args.MaximumAllowedTemperatureLte == nil {
		return nil, errors.New("invalid value for required argument 'MaximumAllowedTemperatureLte'")
	}
	if args.MaximumAllowedTemperatureSte == nil {
		return nil, errors.New("invalid value for required argument 'MaximumAllowedTemperatureSte'")
	}
	if args.NumberOfConductors == nil {
		return nil, errors.New("invalid value for required argument 'NumberOfConductors'")
	}
	if args.Reactance == nil {
		return nil, errors.New("invalid value for required argument 'Reactance'")
	}
	if args.ReferenceResistance == nil {
		return nil, errors.New("invalid value for required argument 'ReferenceResistance'")
	}
	if args.Resistance == nil {
		return nil, errors.New("invalid value for required argument 'Resistance'")
	}
	if args.SafetyMarginForPower == nil {
		return nil, errors.New("invalid value for required argument 'SafetyMarginForPower'")
	}
	if args.Susceptance == nil {
		return nil, errors.New("invalid value for required argument 'Susceptance'")
	}
	if args.TemperatureCoeffResistance == nil {
		return nil, errors.New("invalid value for required argument 'TemperatureCoeffResistance'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Line
	err := ctx.RegisterResource("splight:index/line:Line", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLine gets an existing Line resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LineState, opts ...pulumi.ResourceOption) (*Line, error) {
	var resource Line
	err := ctx.ReadResource("splight:index/line:Line", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Line resources.
type lineState struct {
	// attribute of the resource
	Absorptivity *LineAbsorptivity `pulumi:"absorptivity"`
	// attribute of the resource
	ActivePowerEnds []LineActivePowerEnd `pulumi:"activePowerEnds"`
	// attribute of the resource
	ActivePowers []LineActivePower `pulumi:"activePowers"`
	// attribute of the resource
	Ampacities []LineAmpacity `pulumi:"ampacities"`
	// attribute of the resource
	Atmosphere *LineAtmosphere `pulumi:"atmosphere"`
	// attribute of the resource
	Capacitance *LineCapacitance `pulumi:"capacitance"`
	// attribute of the resource
	Conductance *LineConductance `pulumi:"conductance"`
	// attribute of the resource
	CurrentRs []LineCurrentR `pulumi:"currentRs"`
	// attribute of the resource
	CurrentS []LineCurrent `pulumi:"currentS"`
	// attribute of the resource
	CurrentTs []LineCurrentT `pulumi:"currentTs"`
	// attribute of the resource
	Currents []LineCurrent `pulumi:"currents"`
	// description of the resource
	Description *string `pulumi:"description"`
	// attribute of the resource
	Diameter *LineDiameter `pulumi:"diameter"`
	// attribute of the resource
	Emissivity *LineEmissivity `pulumi:"emissivity"`
	// attribute of the resource
	Energies []LineEnergy `pulumi:"energies"`
	// geo position and shape of the resource
	Geometry *string `pulumi:"geometry"`
	// kind of the resource
	Kinds []LineKind `pulumi:"kinds"`
	// attribute of the resource
	Length *LineLength `pulumi:"length"`
	// attribute of the resource
	MaxTemperatures []LineMaxTemperature `pulumi:"maxTemperatures"`
	// attribute of the resource
	MaximumAllowedCurrent *LineMaximumAllowedCurrent `pulumi:"maximumAllowedCurrent"`
	// attribute of the resource
	MaximumAllowedPower *LineMaximumAllowedPower `pulumi:"maximumAllowedPower"`
	// attribute of the resource
	MaximumAllowedTemperature *LineMaximumAllowedTemperature `pulumi:"maximumAllowedTemperature"`
	// attribute of the resource
	MaximumAllowedTemperatureLte *LineMaximumAllowedTemperatureLte `pulumi:"maximumAllowedTemperatureLte"`
	// attribute of the resource
	MaximumAllowedTemperatureSte *LineMaximumAllowedTemperatureSte `pulumi:"maximumAllowedTemperatureSte"`
	// name of the resource
	Name *string `pulumi:"name"`
	// attribute of the resource
	NumberOfConductors *LineNumberOfConductors `pulumi:"numberOfConductors"`
	// attribute of the resource
	Reactance *LineReactance `pulumi:"reactance"`
	// attribute of the resource
	ReactivePowers []LineReactivePower `pulumi:"reactivePowers"`
	// attribute of the resource
	ReferenceResistance *LineReferenceResistance `pulumi:"referenceResistance"`
	// related assets of the resource
	RelatedAssets []LineRelatedAsset `pulumi:"relatedAssets"`
	// attribute of the resource
	Resistance *LineResistance `pulumi:"resistance"`
	// attribute of the resource
	SafetyMarginForPower *LineSafetyMarginForPower `pulumi:"safetyMarginForPower"`
	// attribute of the resource
	Susceptance *LineSusceptance `pulumi:"susceptance"`
	// tags of the resource
	Tags []LineTag `pulumi:"tags"`
	// attribute of the resource
	TemperatureCoeffResistance *LineTemperatureCoeffResistance `pulumi:"temperatureCoeffResistance"`
	// attribute of the resource
	VoltageRs []LineVoltageR `pulumi:"voltageRs"`
	// attribute of the resource
	VoltageSts []LineVoltageSt `pulumi:"voltageSts"`
	// attribute of the resource
	VoltageTrs []LineVoltageTr `pulumi:"voltageTrs"`
}

type LineState struct {
	// attribute of the resource
	Absorptivity LineAbsorptivityPtrInput
	// attribute of the resource
	ActivePowerEnds LineActivePowerEndArrayInput
	// attribute of the resource
	ActivePowers LineActivePowerArrayInput
	// attribute of the resource
	Ampacities LineAmpacityArrayInput
	// attribute of the resource
	Atmosphere LineAtmospherePtrInput
	// attribute of the resource
	Capacitance LineCapacitancePtrInput
	// attribute of the resource
	Conductance LineConductancePtrInput
	// attribute of the resource
	CurrentRs LineCurrentRArrayInput
	// attribute of the resource
	CurrentS LineCurrentArrayInput
	// attribute of the resource
	CurrentTs LineCurrentTArrayInput
	// attribute of the resource
	Currents LineCurrentArrayInput
	// description of the resource
	Description pulumi.StringPtrInput
	// attribute of the resource
	Diameter LineDiameterPtrInput
	// attribute of the resource
	Emissivity LineEmissivityPtrInput
	// attribute of the resource
	Energies LineEnergyArrayInput
	// geo position and shape of the resource
	Geometry pulumi.StringPtrInput
	// kind of the resource
	Kinds LineKindArrayInput
	// attribute of the resource
	Length LineLengthPtrInput
	// attribute of the resource
	MaxTemperatures LineMaxTemperatureArrayInput
	// attribute of the resource
	MaximumAllowedCurrent LineMaximumAllowedCurrentPtrInput
	// attribute of the resource
	MaximumAllowedPower LineMaximumAllowedPowerPtrInput
	// attribute of the resource
	MaximumAllowedTemperature LineMaximumAllowedTemperaturePtrInput
	// attribute of the resource
	MaximumAllowedTemperatureLte LineMaximumAllowedTemperatureLtePtrInput
	// attribute of the resource
	MaximumAllowedTemperatureSte LineMaximumAllowedTemperatureStePtrInput
	// name of the resource
	Name pulumi.StringPtrInput
	// attribute of the resource
	NumberOfConductors LineNumberOfConductorsPtrInput
	// attribute of the resource
	Reactance LineReactancePtrInput
	// attribute of the resource
	ReactivePowers LineReactivePowerArrayInput
	// attribute of the resource
	ReferenceResistance LineReferenceResistancePtrInput
	// related assets of the resource
	RelatedAssets LineRelatedAssetArrayInput
	// attribute of the resource
	Resistance LineResistancePtrInput
	// attribute of the resource
	SafetyMarginForPower LineSafetyMarginForPowerPtrInput
	// attribute of the resource
	Susceptance LineSusceptancePtrInput
	// tags of the resource
	Tags LineTagArrayInput
	// attribute of the resource
	TemperatureCoeffResistance LineTemperatureCoeffResistancePtrInput
	// attribute of the resource
	VoltageRs LineVoltageRArrayInput
	// attribute of the resource
	VoltageSts LineVoltageStArrayInput
	// attribute of the resource
	VoltageTrs LineVoltageTrArrayInput
}

func (LineState) ElementType() reflect.Type {
	return reflect.TypeOf((*lineState)(nil)).Elem()
}

type lineArgs struct {
	// attribute of the resource
	Absorptivity LineAbsorptivity `pulumi:"absorptivity"`
	// attribute of the resource
	Atmosphere LineAtmosphere `pulumi:"atmosphere"`
	// attribute of the resource
	Capacitance LineCapacitance `pulumi:"capacitance"`
	// attribute of the resource
	Conductance LineConductance `pulumi:"conductance"`
	// description of the resource
	Description *string `pulumi:"description"`
	// attribute of the resource
	Diameter LineDiameter `pulumi:"diameter"`
	// attribute of the resource
	Emissivity LineEmissivity `pulumi:"emissivity"`
	// geo position and shape of the resource
	Geometry *string `pulumi:"geometry"`
	// attribute of the resource
	Length LineLength `pulumi:"length"`
	// attribute of the resource
	MaximumAllowedCurrent LineMaximumAllowedCurrent `pulumi:"maximumAllowedCurrent"`
	// attribute of the resource
	MaximumAllowedPower LineMaximumAllowedPower `pulumi:"maximumAllowedPower"`
	// attribute of the resource
	MaximumAllowedTemperature LineMaximumAllowedTemperature `pulumi:"maximumAllowedTemperature"`
	// attribute of the resource
	MaximumAllowedTemperatureLte LineMaximumAllowedTemperatureLte `pulumi:"maximumAllowedTemperatureLte"`
	// attribute of the resource
	MaximumAllowedTemperatureSte LineMaximumAllowedTemperatureSte `pulumi:"maximumAllowedTemperatureSte"`
	// name of the resource
	Name *string `pulumi:"name"`
	// attribute of the resource
	NumberOfConductors LineNumberOfConductors `pulumi:"numberOfConductors"`
	// attribute of the resource
	Reactance LineReactance `pulumi:"reactance"`
	// attribute of the resource
	ReferenceResistance LineReferenceResistance `pulumi:"referenceResistance"`
	// related assets of the resource
	RelatedAssets []LineRelatedAsset `pulumi:"relatedAssets"`
	// attribute of the resource
	Resistance LineResistance `pulumi:"resistance"`
	// attribute of the resource
	SafetyMarginForPower LineSafetyMarginForPower `pulumi:"safetyMarginForPower"`
	// attribute of the resource
	Susceptance LineSusceptance `pulumi:"susceptance"`
	// tags of the resource
	Tags []LineTag `pulumi:"tags"`
	// attribute of the resource
	TemperatureCoeffResistance LineTemperatureCoeffResistance `pulumi:"temperatureCoeffResistance"`
}

// The set of arguments for constructing a Line resource.
type LineArgs struct {
	// attribute of the resource
	Absorptivity LineAbsorptivityInput
	// attribute of the resource
	Atmosphere LineAtmosphereInput
	// attribute of the resource
	Capacitance LineCapacitanceInput
	// attribute of the resource
	Conductance LineConductanceInput
	// description of the resource
	Description pulumi.StringPtrInput
	// attribute of the resource
	Diameter LineDiameterInput
	// attribute of the resource
	Emissivity LineEmissivityInput
	// geo position and shape of the resource
	Geometry pulumi.StringPtrInput
	// attribute of the resource
	Length LineLengthInput
	// attribute of the resource
	MaximumAllowedCurrent LineMaximumAllowedCurrentInput
	// attribute of the resource
	MaximumAllowedPower LineMaximumAllowedPowerInput
	// attribute of the resource
	MaximumAllowedTemperature LineMaximumAllowedTemperatureInput
	// attribute of the resource
	MaximumAllowedTemperatureLte LineMaximumAllowedTemperatureLteInput
	// attribute of the resource
	MaximumAllowedTemperatureSte LineMaximumAllowedTemperatureSteInput
	// name of the resource
	Name pulumi.StringPtrInput
	// attribute of the resource
	NumberOfConductors LineNumberOfConductorsInput
	// attribute of the resource
	Reactance LineReactanceInput
	// attribute of the resource
	ReferenceResistance LineReferenceResistanceInput
	// related assets of the resource
	RelatedAssets LineRelatedAssetArrayInput
	// attribute of the resource
	Resistance LineResistanceInput
	// attribute of the resource
	SafetyMarginForPower LineSafetyMarginForPowerInput
	// attribute of the resource
	Susceptance LineSusceptanceInput
	// tags of the resource
	Tags LineTagArrayInput
	// attribute of the resource
	TemperatureCoeffResistance LineTemperatureCoeffResistanceInput
}

func (LineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lineArgs)(nil)).Elem()
}

type LineInput interface {
	pulumi.Input

	ToLineOutput() LineOutput
	ToLineOutputWithContext(ctx context.Context) LineOutput
}

func (*Line) ElementType() reflect.Type {
	return reflect.TypeOf((**Line)(nil)).Elem()
}

func (i *Line) ToLineOutput() LineOutput {
	return i.ToLineOutputWithContext(context.Background())
}

func (i *Line) ToLineOutputWithContext(ctx context.Context) LineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineOutput)
}

// LineArrayInput is an input type that accepts LineArray and LineArrayOutput values.
// You can construct a concrete instance of `LineArrayInput` via:
//
//	LineArray{ LineArgs{...} }
type LineArrayInput interface {
	pulumi.Input

	ToLineArrayOutput() LineArrayOutput
	ToLineArrayOutputWithContext(context.Context) LineArrayOutput
}

type LineArray []LineInput

func (LineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Line)(nil)).Elem()
}

func (i LineArray) ToLineArrayOutput() LineArrayOutput {
	return i.ToLineArrayOutputWithContext(context.Background())
}

func (i LineArray) ToLineArrayOutputWithContext(ctx context.Context) LineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineArrayOutput)
}

// LineMapInput is an input type that accepts LineMap and LineMapOutput values.
// You can construct a concrete instance of `LineMapInput` via:
//
//	LineMap{ "key": LineArgs{...} }
type LineMapInput interface {
	pulumi.Input

	ToLineMapOutput() LineMapOutput
	ToLineMapOutputWithContext(context.Context) LineMapOutput
}

type LineMap map[string]LineInput

func (LineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Line)(nil)).Elem()
}

func (i LineMap) ToLineMapOutput() LineMapOutput {
	return i.ToLineMapOutputWithContext(context.Background())
}

func (i LineMap) ToLineMapOutputWithContext(ctx context.Context) LineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMapOutput)
}

type LineOutput struct{ *pulumi.OutputState }

func (LineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Line)(nil)).Elem()
}

func (o LineOutput) ToLineOutput() LineOutput {
	return o
}

func (o LineOutput) ToLineOutputWithContext(ctx context.Context) LineOutput {
	return o
}

// attribute of the resource
func (o LineOutput) Absorptivity() LineAbsorptivityOutput {
	return o.ApplyT(func(v *Line) LineAbsorptivityOutput { return v.Absorptivity }).(LineAbsorptivityOutput)
}

// attribute of the resource
func (o LineOutput) ActivePowerEnds() LineActivePowerEndArrayOutput {
	return o.ApplyT(func(v *Line) LineActivePowerEndArrayOutput { return v.ActivePowerEnds }).(LineActivePowerEndArrayOutput)
}

// attribute of the resource
func (o LineOutput) ActivePowers() LineActivePowerArrayOutput {
	return o.ApplyT(func(v *Line) LineActivePowerArrayOutput { return v.ActivePowers }).(LineActivePowerArrayOutput)
}

// attribute of the resource
func (o LineOutput) Ampacities() LineAmpacityArrayOutput {
	return o.ApplyT(func(v *Line) LineAmpacityArrayOutput { return v.Ampacities }).(LineAmpacityArrayOutput)
}

// attribute of the resource
func (o LineOutput) Atmosphere() LineAtmosphereOutput {
	return o.ApplyT(func(v *Line) LineAtmosphereOutput { return v.Atmosphere }).(LineAtmosphereOutput)
}

// attribute of the resource
func (o LineOutput) Capacitance() LineCapacitanceOutput {
	return o.ApplyT(func(v *Line) LineCapacitanceOutput { return v.Capacitance }).(LineCapacitanceOutput)
}

// attribute of the resource
func (o LineOutput) Conductance() LineConductanceOutput {
	return o.ApplyT(func(v *Line) LineConductanceOutput { return v.Conductance }).(LineConductanceOutput)
}

// attribute of the resource
func (o LineOutput) CurrentRs() LineCurrentRArrayOutput {
	return o.ApplyT(func(v *Line) LineCurrentRArrayOutput { return v.CurrentRs }).(LineCurrentRArrayOutput)
}

// attribute of the resource
func (o LineOutput) CurrentS() LineCurrentArrayOutput {
	return o.ApplyT(func(v *Line) LineCurrentArrayOutput { return v.CurrentS }).(LineCurrentArrayOutput)
}

// attribute of the resource
func (o LineOutput) CurrentTs() LineCurrentTArrayOutput {
	return o.ApplyT(func(v *Line) LineCurrentTArrayOutput { return v.CurrentTs }).(LineCurrentTArrayOutput)
}

// attribute of the resource
func (o LineOutput) Currents() LineCurrentArrayOutput {
	return o.ApplyT(func(v *Line) LineCurrentArrayOutput { return v.Currents }).(LineCurrentArrayOutput)
}

// description of the resource
func (o LineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Line) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// attribute of the resource
func (o LineOutput) Diameter() LineDiameterOutput {
	return o.ApplyT(func(v *Line) LineDiameterOutput { return v.Diameter }).(LineDiameterOutput)
}

// attribute of the resource
func (o LineOutput) Emissivity() LineEmissivityOutput {
	return o.ApplyT(func(v *Line) LineEmissivityOutput { return v.Emissivity }).(LineEmissivityOutput)
}

// attribute of the resource
func (o LineOutput) Energies() LineEnergyArrayOutput {
	return o.ApplyT(func(v *Line) LineEnergyArrayOutput { return v.Energies }).(LineEnergyArrayOutput)
}

// geo position and shape of the resource
func (o LineOutput) Geometry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Line) pulumi.StringPtrOutput { return v.Geometry }).(pulumi.StringPtrOutput)
}

// kind of the resource
func (o LineOutput) Kinds() LineKindArrayOutput {
	return o.ApplyT(func(v *Line) LineKindArrayOutput { return v.Kinds }).(LineKindArrayOutput)
}

// attribute of the resource
func (o LineOutput) Length() LineLengthOutput {
	return o.ApplyT(func(v *Line) LineLengthOutput { return v.Length }).(LineLengthOutput)
}

// attribute of the resource
func (o LineOutput) MaxTemperatures() LineMaxTemperatureArrayOutput {
	return o.ApplyT(func(v *Line) LineMaxTemperatureArrayOutput { return v.MaxTemperatures }).(LineMaxTemperatureArrayOutput)
}

// attribute of the resource
func (o LineOutput) MaximumAllowedCurrent() LineMaximumAllowedCurrentOutput {
	return o.ApplyT(func(v *Line) LineMaximumAllowedCurrentOutput { return v.MaximumAllowedCurrent }).(LineMaximumAllowedCurrentOutput)
}

// attribute of the resource
func (o LineOutput) MaximumAllowedPower() LineMaximumAllowedPowerOutput {
	return o.ApplyT(func(v *Line) LineMaximumAllowedPowerOutput { return v.MaximumAllowedPower }).(LineMaximumAllowedPowerOutput)
}

// attribute of the resource
func (o LineOutput) MaximumAllowedTemperature() LineMaximumAllowedTemperatureOutput {
	return o.ApplyT(func(v *Line) LineMaximumAllowedTemperatureOutput { return v.MaximumAllowedTemperature }).(LineMaximumAllowedTemperatureOutput)
}

// attribute of the resource
func (o LineOutput) MaximumAllowedTemperatureLte() LineMaximumAllowedTemperatureLteOutput {
	return o.ApplyT(func(v *Line) LineMaximumAllowedTemperatureLteOutput { return v.MaximumAllowedTemperatureLte }).(LineMaximumAllowedTemperatureLteOutput)
}

// attribute of the resource
func (o LineOutput) MaximumAllowedTemperatureSte() LineMaximumAllowedTemperatureSteOutput {
	return o.ApplyT(func(v *Line) LineMaximumAllowedTemperatureSteOutput { return v.MaximumAllowedTemperatureSte }).(LineMaximumAllowedTemperatureSteOutput)
}

// name of the resource
func (o LineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Line) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// attribute of the resource
func (o LineOutput) NumberOfConductors() LineNumberOfConductorsOutput {
	return o.ApplyT(func(v *Line) LineNumberOfConductorsOutput { return v.NumberOfConductors }).(LineNumberOfConductorsOutput)
}

// attribute of the resource
func (o LineOutput) Reactance() LineReactanceOutput {
	return o.ApplyT(func(v *Line) LineReactanceOutput { return v.Reactance }).(LineReactanceOutput)
}

// attribute of the resource
func (o LineOutput) ReactivePowers() LineReactivePowerArrayOutput {
	return o.ApplyT(func(v *Line) LineReactivePowerArrayOutput { return v.ReactivePowers }).(LineReactivePowerArrayOutput)
}

// attribute of the resource
func (o LineOutput) ReferenceResistance() LineReferenceResistanceOutput {
	return o.ApplyT(func(v *Line) LineReferenceResistanceOutput { return v.ReferenceResistance }).(LineReferenceResistanceOutput)
}

// related assets of the resource
func (o LineOutput) RelatedAssets() LineRelatedAssetArrayOutput {
	return o.ApplyT(func(v *Line) LineRelatedAssetArrayOutput { return v.RelatedAssets }).(LineRelatedAssetArrayOutput)
}

// attribute of the resource
func (o LineOutput) Resistance() LineResistanceOutput {
	return o.ApplyT(func(v *Line) LineResistanceOutput { return v.Resistance }).(LineResistanceOutput)
}

// attribute of the resource
func (o LineOutput) SafetyMarginForPower() LineSafetyMarginForPowerOutput {
	return o.ApplyT(func(v *Line) LineSafetyMarginForPowerOutput { return v.SafetyMarginForPower }).(LineSafetyMarginForPowerOutput)
}

// attribute of the resource
func (o LineOutput) Susceptance() LineSusceptanceOutput {
	return o.ApplyT(func(v *Line) LineSusceptanceOutput { return v.Susceptance }).(LineSusceptanceOutput)
}

// tags of the resource
func (o LineOutput) Tags() LineTagArrayOutput {
	return o.ApplyT(func(v *Line) LineTagArrayOutput { return v.Tags }).(LineTagArrayOutput)
}

// attribute of the resource
func (o LineOutput) TemperatureCoeffResistance() LineTemperatureCoeffResistanceOutput {
	return o.ApplyT(func(v *Line) LineTemperatureCoeffResistanceOutput { return v.TemperatureCoeffResistance }).(LineTemperatureCoeffResistanceOutput)
}

// attribute of the resource
func (o LineOutput) VoltageRs() LineVoltageRArrayOutput {
	return o.ApplyT(func(v *Line) LineVoltageRArrayOutput { return v.VoltageRs }).(LineVoltageRArrayOutput)
}

// attribute of the resource
func (o LineOutput) VoltageSts() LineVoltageStArrayOutput {
	return o.ApplyT(func(v *Line) LineVoltageStArrayOutput { return v.VoltageSts }).(LineVoltageStArrayOutput)
}

// attribute of the resource
func (o LineOutput) VoltageTrs() LineVoltageTrArrayOutput {
	return o.ApplyT(func(v *Line) LineVoltageTrArrayOutput { return v.VoltageTrs }).(LineVoltageTrArrayOutput)
}

type LineArrayOutput struct{ *pulumi.OutputState }

func (LineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Line)(nil)).Elem()
}

func (o LineArrayOutput) ToLineArrayOutput() LineArrayOutput {
	return o
}

func (o LineArrayOutput) ToLineArrayOutputWithContext(ctx context.Context) LineArrayOutput {
	return o
}

func (o LineArrayOutput) Index(i pulumi.IntInput) LineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Line {
		return vs[0].([]*Line)[vs[1].(int)]
	}).(LineOutput)
}

type LineMapOutput struct{ *pulumi.OutputState }

func (LineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Line)(nil)).Elem()
}

func (o LineMapOutput) ToLineMapOutput() LineMapOutput {
	return o
}

func (o LineMapOutput) ToLineMapOutputWithContext(ctx context.Context) LineMapOutput {
	return o
}

func (o LineMapOutput) MapIndex(k pulumi.StringInput) LineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Line {
		return vs[0].(map[string]*Line)[vs[1].(string)]
	}).(LineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LineInput)(nil)).Elem(), &Line{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineArrayInput)(nil)).Elem(), LineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMapInput)(nil)).Elem(), LineMap{})
	pulumi.RegisterOutputType(LineOutput{})
	pulumi.RegisterOutputType(LineArrayOutput{})
	pulumi.RegisterOutputType(LineMapOutput{})
}
