// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/splightplatform/pulumi-splight/sdk/go/splight"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myFileParentFolder, err := splight.NewFileFolder(ctx, "myFileParentFolder", nil)
//			if err != nil {
//				return err
//			}
//			_, err = splight.NewFileFolder(ctx, "myFileFolder", &splight.FileFolderArgs{
//				Parent: myFileParentFolder.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/fileFolder:FileFolder [options] splight_file_folder.<name> <file_folder_id>
// ```
type FileFolder struct {
	pulumi.CustomResourceState

	// folder name
	Name pulumi.StringOutput `pulumi:"name"`
	// optional folder id where to place this folder
	Parent pulumi.StringPtrOutput `pulumi:"parent"`
}

// NewFileFolder registers a new resource with the given unique name, arguments, and options.
func NewFileFolder(ctx *pulumi.Context,
	name string, args *FileFolderArgs, opts ...pulumi.ResourceOption) (*FileFolder, error) {
	if args == nil {
		args = &FileFolderArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileFolder
	err := ctx.RegisterResource("splight:index/fileFolder:FileFolder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileFolder gets an existing FileFolder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileFolderState, opts ...pulumi.ResourceOption) (*FileFolder, error) {
	var resource FileFolder
	err := ctx.ReadResource("splight:index/fileFolder:FileFolder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileFolder resources.
type fileFolderState struct {
	// folder name
	Name *string `pulumi:"name"`
	// optional folder id where to place this folder
	Parent *string `pulumi:"parent"`
}

type FileFolderState struct {
	// folder name
	Name pulumi.StringPtrInput
	// optional folder id where to place this folder
	Parent pulumi.StringPtrInput
}

func (FileFolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileFolderState)(nil)).Elem()
}

type fileFolderArgs struct {
	// folder name
	Name *string `pulumi:"name"`
	// optional folder id where to place this folder
	Parent *string `pulumi:"parent"`
}

// The set of arguments for constructing a FileFolder resource.
type FileFolderArgs struct {
	// folder name
	Name pulumi.StringPtrInput
	// optional folder id where to place this folder
	Parent pulumi.StringPtrInput
}

func (FileFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileFolderArgs)(nil)).Elem()
}

type FileFolderInput interface {
	pulumi.Input

	ToFileFolderOutput() FileFolderOutput
	ToFileFolderOutputWithContext(ctx context.Context) FileFolderOutput
}

func (*FileFolder) ElementType() reflect.Type {
	return reflect.TypeOf((**FileFolder)(nil)).Elem()
}

func (i *FileFolder) ToFileFolderOutput() FileFolderOutput {
	return i.ToFileFolderOutputWithContext(context.Background())
}

func (i *FileFolder) ToFileFolderOutputWithContext(ctx context.Context) FileFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFolderOutput)
}

// FileFolderArrayInput is an input type that accepts FileFolderArray and FileFolderArrayOutput values.
// You can construct a concrete instance of `FileFolderArrayInput` via:
//
//	FileFolderArray{ FileFolderArgs{...} }
type FileFolderArrayInput interface {
	pulumi.Input

	ToFileFolderArrayOutput() FileFolderArrayOutput
	ToFileFolderArrayOutputWithContext(context.Context) FileFolderArrayOutput
}

type FileFolderArray []FileFolderInput

func (FileFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileFolder)(nil)).Elem()
}

func (i FileFolderArray) ToFileFolderArrayOutput() FileFolderArrayOutput {
	return i.ToFileFolderArrayOutputWithContext(context.Background())
}

func (i FileFolderArray) ToFileFolderArrayOutputWithContext(ctx context.Context) FileFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFolderArrayOutput)
}

// FileFolderMapInput is an input type that accepts FileFolderMap and FileFolderMapOutput values.
// You can construct a concrete instance of `FileFolderMapInput` via:
//
//	FileFolderMap{ "key": FileFolderArgs{...} }
type FileFolderMapInput interface {
	pulumi.Input

	ToFileFolderMapOutput() FileFolderMapOutput
	ToFileFolderMapOutputWithContext(context.Context) FileFolderMapOutput
}

type FileFolderMap map[string]FileFolderInput

func (FileFolderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileFolder)(nil)).Elem()
}

func (i FileFolderMap) ToFileFolderMapOutput() FileFolderMapOutput {
	return i.ToFileFolderMapOutputWithContext(context.Background())
}

func (i FileFolderMap) ToFileFolderMapOutputWithContext(ctx context.Context) FileFolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFolderMapOutput)
}

type FileFolderOutput struct{ *pulumi.OutputState }

func (FileFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileFolder)(nil)).Elem()
}

func (o FileFolderOutput) ToFileFolderOutput() FileFolderOutput {
	return o
}

func (o FileFolderOutput) ToFileFolderOutputWithContext(ctx context.Context) FileFolderOutput {
	return o
}

// folder name
func (o FileFolderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFolder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// optional folder id where to place this folder
func (o FileFolderOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileFolder) pulumi.StringPtrOutput { return v.Parent }).(pulumi.StringPtrOutput)
}

type FileFolderArrayOutput struct{ *pulumi.OutputState }

func (FileFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileFolder)(nil)).Elem()
}

func (o FileFolderArrayOutput) ToFileFolderArrayOutput() FileFolderArrayOutput {
	return o
}

func (o FileFolderArrayOutput) ToFileFolderArrayOutputWithContext(ctx context.Context) FileFolderArrayOutput {
	return o
}

func (o FileFolderArrayOutput) Index(i pulumi.IntInput) FileFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileFolder {
		return vs[0].([]*FileFolder)[vs[1].(int)]
	}).(FileFolderOutput)
}

type FileFolderMapOutput struct{ *pulumi.OutputState }

func (FileFolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileFolder)(nil)).Elem()
}

func (o FileFolderMapOutput) ToFileFolderMapOutput() FileFolderMapOutput {
	return o
}

func (o FileFolderMapOutput) ToFileFolderMapOutputWithContext(ctx context.Context) FileFolderMapOutput {
	return o
}

func (o FileFolderMapOutput) MapIndex(k pulumi.StringInput) FileFolderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileFolder {
		return vs[0].(map[string]*FileFolder)[vs[1].(string)]
	}).(FileFolderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileFolderInput)(nil)).Elem(), &FileFolder{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileFolderArrayInput)(nil)).Elem(), FileFolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileFolderMapInput)(nil)).Elem(), FileFolderMap{})
	pulumi.RegisterOutputType(FileFolderOutput{})
	pulumi.RegisterOutputType(FileFolderArrayOutput{})
	pulumi.RegisterOutputType(FileFolderMapOutput{})
}
