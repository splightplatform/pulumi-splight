// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/grid:Grid [options] splight_grid.<name> <grid_id>
// ```
type Grid struct {
	pulumi.CustomResourceState

	// description of the resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// geo position and shape of the resource
	Geometry pulumi.StringPtrOutput `pulumi:"geometry"`
	// kind of the resource
	Kinds GridKindArrayOutput `pulumi:"kinds"`
	// name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// tags of the resource
	Tags GridTagArrayOutput `pulumi:"tags"`
}

// NewGrid registers a new resource with the given unique name, arguments, and options.
func NewGrid(ctx *pulumi.Context,
	name string, args *GridArgs, opts ...pulumi.ResourceOption) (*Grid, error) {
	if args == nil {
		args = &GridArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Grid
	err := ctx.RegisterResource("splight:index/grid:Grid", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrid gets an existing Grid resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrid(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GridState, opts ...pulumi.ResourceOption) (*Grid, error) {
	var resource Grid
	err := ctx.ReadResource("splight:index/grid:Grid", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Grid resources.
type gridState struct {
	// description of the resource
	Description *string `pulumi:"description"`
	// geo position and shape of the resource
	Geometry *string `pulumi:"geometry"`
	// kind of the resource
	Kinds []GridKind `pulumi:"kinds"`
	// name of the resource
	Name *string `pulumi:"name"`
	// tags of the resource
	Tags []GridTag `pulumi:"tags"`
}

type GridState struct {
	// description of the resource
	Description pulumi.StringPtrInput
	// geo position and shape of the resource
	Geometry pulumi.StringPtrInput
	// kind of the resource
	Kinds GridKindArrayInput
	// name of the resource
	Name pulumi.StringPtrInput
	// tags of the resource
	Tags GridTagArrayInput
}

func (GridState) ElementType() reflect.Type {
	return reflect.TypeOf((*gridState)(nil)).Elem()
}

type gridArgs struct {
	// description of the resource
	Description *string `pulumi:"description"`
	// geo position and shape of the resource
	Geometry *string `pulumi:"geometry"`
	// name of the resource
	Name *string `pulumi:"name"`
	// tags of the resource
	Tags []GridTag `pulumi:"tags"`
}

// The set of arguments for constructing a Grid resource.
type GridArgs struct {
	// description of the resource
	Description pulumi.StringPtrInput
	// geo position and shape of the resource
	Geometry pulumi.StringPtrInput
	// name of the resource
	Name pulumi.StringPtrInput
	// tags of the resource
	Tags GridTagArrayInput
}

func (GridArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gridArgs)(nil)).Elem()
}

type GridInput interface {
	pulumi.Input

	ToGridOutput() GridOutput
	ToGridOutputWithContext(ctx context.Context) GridOutput
}

func (*Grid) ElementType() reflect.Type {
	return reflect.TypeOf((**Grid)(nil)).Elem()
}

func (i *Grid) ToGridOutput() GridOutput {
	return i.ToGridOutputWithContext(context.Background())
}

func (i *Grid) ToGridOutputWithContext(ctx context.Context) GridOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GridOutput)
}

// GridArrayInput is an input type that accepts GridArray and GridArrayOutput values.
// You can construct a concrete instance of `GridArrayInput` via:
//
//	GridArray{ GridArgs{...} }
type GridArrayInput interface {
	pulumi.Input

	ToGridArrayOutput() GridArrayOutput
	ToGridArrayOutputWithContext(context.Context) GridArrayOutput
}

type GridArray []GridInput

func (GridArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Grid)(nil)).Elem()
}

func (i GridArray) ToGridArrayOutput() GridArrayOutput {
	return i.ToGridArrayOutputWithContext(context.Background())
}

func (i GridArray) ToGridArrayOutputWithContext(ctx context.Context) GridArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GridArrayOutput)
}

// GridMapInput is an input type that accepts GridMap and GridMapOutput values.
// You can construct a concrete instance of `GridMapInput` via:
//
//	GridMap{ "key": GridArgs{...} }
type GridMapInput interface {
	pulumi.Input

	ToGridMapOutput() GridMapOutput
	ToGridMapOutputWithContext(context.Context) GridMapOutput
}

type GridMap map[string]GridInput

func (GridMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Grid)(nil)).Elem()
}

func (i GridMap) ToGridMapOutput() GridMapOutput {
	return i.ToGridMapOutputWithContext(context.Background())
}

func (i GridMap) ToGridMapOutputWithContext(ctx context.Context) GridMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GridMapOutput)
}

type GridOutput struct{ *pulumi.OutputState }

func (GridOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Grid)(nil)).Elem()
}

func (o GridOutput) ToGridOutput() GridOutput {
	return o
}

func (o GridOutput) ToGridOutputWithContext(ctx context.Context) GridOutput {
	return o
}

// description of the resource
func (o GridOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grid) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// geo position and shape of the resource
func (o GridOutput) Geometry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grid) pulumi.StringPtrOutput { return v.Geometry }).(pulumi.StringPtrOutput)
}

// kind of the resource
func (o GridOutput) Kinds() GridKindArrayOutput {
	return o.ApplyT(func(v *Grid) GridKindArrayOutput { return v.Kinds }).(GridKindArrayOutput)
}

// name of the resource
func (o GridOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Grid) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// tags of the resource
func (o GridOutput) Tags() GridTagArrayOutput {
	return o.ApplyT(func(v *Grid) GridTagArrayOutput { return v.Tags }).(GridTagArrayOutput)
}

type GridArrayOutput struct{ *pulumi.OutputState }

func (GridArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Grid)(nil)).Elem()
}

func (o GridArrayOutput) ToGridArrayOutput() GridArrayOutput {
	return o
}

func (o GridArrayOutput) ToGridArrayOutputWithContext(ctx context.Context) GridArrayOutput {
	return o
}

func (o GridArrayOutput) Index(i pulumi.IntInput) GridOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Grid {
		return vs[0].([]*Grid)[vs[1].(int)]
	}).(GridOutput)
}

type GridMapOutput struct{ *pulumi.OutputState }

func (GridMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Grid)(nil)).Elem()
}

func (o GridMapOutput) ToGridMapOutput() GridMapOutput {
	return o
}

func (o GridMapOutput) ToGridMapOutputWithContext(ctx context.Context) GridMapOutput {
	return o
}

func (o GridMapOutput) MapIndex(k pulumi.StringInput) GridOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Grid {
		return vs[0].(map[string]*Grid)[vs[1].(string)]
	}).(GridOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GridInput)(nil)).Elem(), &Grid{})
	pulumi.RegisterInputType(reflect.TypeOf((*GridArrayInput)(nil)).Elem(), GridArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GridMapInput)(nil)).Elem(), GridMap{})
	pulumi.RegisterOutputType(GridOutput{})
	pulumi.RegisterOutputType(GridArrayOutput{})
	pulumi.RegisterOutputType(GridMapOutput{})
}
