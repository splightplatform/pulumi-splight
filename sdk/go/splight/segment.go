// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import splight:index/segment:Segment [options] splight_segment.<name> <segment_id>
// ```
type Segment struct {
	pulumi.CustomResourceState

	// attribute of the resource
	Altitude SegmentAltitudePtrOutput `pulumi:"altitude"`
	// attribute of the resource
	Azimuth SegmentAzimuthPtrOutput `pulumi:"azimuth"`
	// attribute of the resource
	CumulativeDistance SegmentCumulativeDistancePtrOutput `pulumi:"cumulativeDistance"`
	// custom timezone to use instead of the one computed from the geo-location
	CustomTimezone pulumi.StringPtrOutput `pulumi:"customTimezone"`
	// description of the resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// geo position and shape of the resource
	Geometry pulumi.StringPtrOutput `pulumi:"geometry"`
	// kind of the resource
	Kinds SegmentKindArrayOutput `pulumi:"kinds"`
	// name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// attribute of the resource
	ReferenceSag SegmentReferenceSagPtrOutput `pulumi:"referenceSag"`
	// attribute of the resource
	ReferenceTemperature SegmentReferenceTemperaturePtrOutput `pulumi:"referenceTemperature"`
	// attribute of the resource
	SpanLength SegmentSpanLengthPtrOutput `pulumi:"spanLength"`
	// tags of the resource
	Tags SegmentTagArrayOutput `pulumi:"tags"`
	// attribute of the resource
	Temperatures SegmentTemperatureArrayOutput `pulumi:"temperatures"`
	// timezone of the resource (set by the geo-location)
	Timezone pulumi.StringOutput `pulumi:"timezone"`
	// attribute of the resource
	WindDirections SegmentWindDirectionArrayOutput `pulumi:"windDirections"`
	// attribute of the resource
	WindSpeeds SegmentWindSpeedArrayOutput `pulumi:"windSpeeds"`
}

// NewSegment registers a new resource with the given unique name, arguments, and options.
func NewSegment(ctx *pulumi.Context,
	name string, args *SegmentArgs, opts ...pulumi.ResourceOption) (*Segment, error) {
	if args == nil {
		args = &SegmentArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Segment
	err := ctx.RegisterResource("splight:index/segment:Segment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSegment gets an existing Segment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSegment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SegmentState, opts ...pulumi.ResourceOption) (*Segment, error) {
	var resource Segment
	err := ctx.ReadResource("splight:index/segment:Segment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Segment resources.
type segmentState struct {
	// attribute of the resource
	Altitude *SegmentAltitude `pulumi:"altitude"`
	// attribute of the resource
	Azimuth *SegmentAzimuth `pulumi:"azimuth"`
	// attribute of the resource
	CumulativeDistance *SegmentCumulativeDistance `pulumi:"cumulativeDistance"`
	// custom timezone to use instead of the one computed from the geo-location
	CustomTimezone *string `pulumi:"customTimezone"`
	// description of the resource
	Description *string `pulumi:"description"`
	// geo position and shape of the resource
	Geometry *string `pulumi:"geometry"`
	// kind of the resource
	Kinds []SegmentKind `pulumi:"kinds"`
	// name of the resource
	Name *string `pulumi:"name"`
	// attribute of the resource
	ReferenceSag *SegmentReferenceSag `pulumi:"referenceSag"`
	// attribute of the resource
	ReferenceTemperature *SegmentReferenceTemperature `pulumi:"referenceTemperature"`
	// attribute of the resource
	SpanLength *SegmentSpanLength `pulumi:"spanLength"`
	// tags of the resource
	Tags []SegmentTag `pulumi:"tags"`
	// attribute of the resource
	Temperatures []SegmentTemperature `pulumi:"temperatures"`
	// timezone of the resource (set by the geo-location)
	Timezone *string `pulumi:"timezone"`
	// attribute of the resource
	WindDirections []SegmentWindDirection `pulumi:"windDirections"`
	// attribute of the resource
	WindSpeeds []SegmentWindSpeed `pulumi:"windSpeeds"`
}

type SegmentState struct {
	// attribute of the resource
	Altitude SegmentAltitudePtrInput
	// attribute of the resource
	Azimuth SegmentAzimuthPtrInput
	// attribute of the resource
	CumulativeDistance SegmentCumulativeDistancePtrInput
	// custom timezone to use instead of the one computed from the geo-location
	CustomTimezone pulumi.StringPtrInput
	// description of the resource
	Description pulumi.StringPtrInput
	// geo position and shape of the resource
	Geometry pulumi.StringPtrInput
	// kind of the resource
	Kinds SegmentKindArrayInput
	// name of the resource
	Name pulumi.StringPtrInput
	// attribute of the resource
	ReferenceSag SegmentReferenceSagPtrInput
	// attribute of the resource
	ReferenceTemperature SegmentReferenceTemperaturePtrInput
	// attribute of the resource
	SpanLength SegmentSpanLengthPtrInput
	// tags of the resource
	Tags SegmentTagArrayInput
	// attribute of the resource
	Temperatures SegmentTemperatureArrayInput
	// timezone of the resource (set by the geo-location)
	Timezone pulumi.StringPtrInput
	// attribute of the resource
	WindDirections SegmentWindDirectionArrayInput
	// attribute of the resource
	WindSpeeds SegmentWindSpeedArrayInput
}

func (SegmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentState)(nil)).Elem()
}

type segmentArgs struct {
	// attribute of the resource
	Altitude *SegmentAltitude `pulumi:"altitude"`
	// attribute of the resource
	Azimuth *SegmentAzimuth `pulumi:"azimuth"`
	// attribute of the resource
	CumulativeDistance *SegmentCumulativeDistance `pulumi:"cumulativeDistance"`
	// custom timezone to use instead of the one computed from the geo-location
	CustomTimezone *string `pulumi:"customTimezone"`
	// description of the resource
	Description *string `pulumi:"description"`
	// geo position and shape of the resource
	Geometry *string `pulumi:"geometry"`
	// name of the resource
	Name *string `pulumi:"name"`
	// attribute of the resource
	ReferenceSag *SegmentReferenceSag `pulumi:"referenceSag"`
	// attribute of the resource
	ReferenceTemperature *SegmentReferenceTemperature `pulumi:"referenceTemperature"`
	// attribute of the resource
	SpanLength *SegmentSpanLength `pulumi:"spanLength"`
	// tags of the resource
	Tags []SegmentTag `pulumi:"tags"`
}

// The set of arguments for constructing a Segment resource.
type SegmentArgs struct {
	// attribute of the resource
	Altitude SegmentAltitudePtrInput
	// attribute of the resource
	Azimuth SegmentAzimuthPtrInput
	// attribute of the resource
	CumulativeDistance SegmentCumulativeDistancePtrInput
	// custom timezone to use instead of the one computed from the geo-location
	CustomTimezone pulumi.StringPtrInput
	// description of the resource
	Description pulumi.StringPtrInput
	// geo position and shape of the resource
	Geometry pulumi.StringPtrInput
	// name of the resource
	Name pulumi.StringPtrInput
	// attribute of the resource
	ReferenceSag SegmentReferenceSagPtrInput
	// attribute of the resource
	ReferenceTemperature SegmentReferenceTemperaturePtrInput
	// attribute of the resource
	SpanLength SegmentSpanLengthPtrInput
	// tags of the resource
	Tags SegmentTagArrayInput
}

func (SegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentArgs)(nil)).Elem()
}

type SegmentInput interface {
	pulumi.Input

	ToSegmentOutput() SegmentOutput
	ToSegmentOutputWithContext(ctx context.Context) SegmentOutput
}

func (*Segment) ElementType() reflect.Type {
	return reflect.TypeOf((**Segment)(nil)).Elem()
}

func (i *Segment) ToSegmentOutput() SegmentOutput {
	return i.ToSegmentOutputWithContext(context.Background())
}

func (i *Segment) ToSegmentOutputWithContext(ctx context.Context) SegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentOutput)
}

// SegmentArrayInput is an input type that accepts SegmentArray and SegmentArrayOutput values.
// You can construct a concrete instance of `SegmentArrayInput` via:
//
//	SegmentArray{ SegmentArgs{...} }
type SegmentArrayInput interface {
	pulumi.Input

	ToSegmentArrayOutput() SegmentArrayOutput
	ToSegmentArrayOutputWithContext(context.Context) SegmentArrayOutput
}

type SegmentArray []SegmentInput

func (SegmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Segment)(nil)).Elem()
}

func (i SegmentArray) ToSegmentArrayOutput() SegmentArrayOutput {
	return i.ToSegmentArrayOutputWithContext(context.Background())
}

func (i SegmentArray) ToSegmentArrayOutputWithContext(ctx context.Context) SegmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentArrayOutput)
}

// SegmentMapInput is an input type that accepts SegmentMap and SegmentMapOutput values.
// You can construct a concrete instance of `SegmentMapInput` via:
//
//	SegmentMap{ "key": SegmentArgs{...} }
type SegmentMapInput interface {
	pulumi.Input

	ToSegmentMapOutput() SegmentMapOutput
	ToSegmentMapOutputWithContext(context.Context) SegmentMapOutput
}

type SegmentMap map[string]SegmentInput

func (SegmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Segment)(nil)).Elem()
}

func (i SegmentMap) ToSegmentMapOutput() SegmentMapOutput {
	return i.ToSegmentMapOutputWithContext(context.Background())
}

func (i SegmentMap) ToSegmentMapOutputWithContext(ctx context.Context) SegmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentMapOutput)
}

type SegmentOutput struct{ *pulumi.OutputState }

func (SegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Segment)(nil)).Elem()
}

func (o SegmentOutput) ToSegmentOutput() SegmentOutput {
	return o
}

func (o SegmentOutput) ToSegmentOutputWithContext(ctx context.Context) SegmentOutput {
	return o
}

// attribute of the resource
func (o SegmentOutput) Altitude() SegmentAltitudePtrOutput {
	return o.ApplyT(func(v *Segment) SegmentAltitudePtrOutput { return v.Altitude }).(SegmentAltitudePtrOutput)
}

// attribute of the resource
func (o SegmentOutput) Azimuth() SegmentAzimuthPtrOutput {
	return o.ApplyT(func(v *Segment) SegmentAzimuthPtrOutput { return v.Azimuth }).(SegmentAzimuthPtrOutput)
}

// attribute of the resource
func (o SegmentOutput) CumulativeDistance() SegmentCumulativeDistancePtrOutput {
	return o.ApplyT(func(v *Segment) SegmentCumulativeDistancePtrOutput { return v.CumulativeDistance }).(SegmentCumulativeDistancePtrOutput)
}

// custom timezone to use instead of the one computed from the geo-location
func (o SegmentOutput) CustomTimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringPtrOutput { return v.CustomTimezone }).(pulumi.StringPtrOutput)
}

// description of the resource
func (o SegmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// geo position and shape of the resource
func (o SegmentOutput) Geometry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringPtrOutput { return v.Geometry }).(pulumi.StringPtrOutput)
}

// kind of the resource
func (o SegmentOutput) Kinds() SegmentKindArrayOutput {
	return o.ApplyT(func(v *Segment) SegmentKindArrayOutput { return v.Kinds }).(SegmentKindArrayOutput)
}

// name of the resource
func (o SegmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// attribute of the resource
func (o SegmentOutput) ReferenceSag() SegmentReferenceSagPtrOutput {
	return o.ApplyT(func(v *Segment) SegmentReferenceSagPtrOutput { return v.ReferenceSag }).(SegmentReferenceSagPtrOutput)
}

// attribute of the resource
func (o SegmentOutput) ReferenceTemperature() SegmentReferenceTemperaturePtrOutput {
	return o.ApplyT(func(v *Segment) SegmentReferenceTemperaturePtrOutput { return v.ReferenceTemperature }).(SegmentReferenceTemperaturePtrOutput)
}

// attribute of the resource
func (o SegmentOutput) SpanLength() SegmentSpanLengthPtrOutput {
	return o.ApplyT(func(v *Segment) SegmentSpanLengthPtrOutput { return v.SpanLength }).(SegmentSpanLengthPtrOutput)
}

// tags of the resource
func (o SegmentOutput) Tags() SegmentTagArrayOutput {
	return o.ApplyT(func(v *Segment) SegmentTagArrayOutput { return v.Tags }).(SegmentTagArrayOutput)
}

// attribute of the resource
func (o SegmentOutput) Temperatures() SegmentTemperatureArrayOutput {
	return o.ApplyT(func(v *Segment) SegmentTemperatureArrayOutput { return v.Temperatures }).(SegmentTemperatureArrayOutput)
}

// timezone of the resource (set by the geo-location)
func (o SegmentOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

// attribute of the resource
func (o SegmentOutput) WindDirections() SegmentWindDirectionArrayOutput {
	return o.ApplyT(func(v *Segment) SegmentWindDirectionArrayOutput { return v.WindDirections }).(SegmentWindDirectionArrayOutput)
}

// attribute of the resource
func (o SegmentOutput) WindSpeeds() SegmentWindSpeedArrayOutput {
	return o.ApplyT(func(v *Segment) SegmentWindSpeedArrayOutput { return v.WindSpeeds }).(SegmentWindSpeedArrayOutput)
}

type SegmentArrayOutput struct{ *pulumi.OutputState }

func (SegmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Segment)(nil)).Elem()
}

func (o SegmentArrayOutput) ToSegmentArrayOutput() SegmentArrayOutput {
	return o
}

func (o SegmentArrayOutput) ToSegmentArrayOutputWithContext(ctx context.Context) SegmentArrayOutput {
	return o
}

func (o SegmentArrayOutput) Index(i pulumi.IntInput) SegmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Segment {
		return vs[0].([]*Segment)[vs[1].(int)]
	}).(SegmentOutput)
}

type SegmentMapOutput struct{ *pulumi.OutputState }

func (SegmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Segment)(nil)).Elem()
}

func (o SegmentMapOutput) ToSegmentMapOutput() SegmentMapOutput {
	return o
}

func (o SegmentMapOutput) ToSegmentMapOutputWithContext(ctx context.Context) SegmentMapOutput {
	return o
}

func (o SegmentMapOutput) MapIndex(k pulumi.StringInput) SegmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Segment {
		return vs[0].(map[string]*Segment)[vs[1].(string)]
	}).(SegmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentInput)(nil)).Elem(), &Segment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentArrayInput)(nil)).Elem(), SegmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentMapInput)(nil)).Elem(), SegmentMap{})
	pulumi.RegisterOutputType(SegmentOutput{})
	pulumi.RegisterOutputType(SegmentArrayOutput{})
	pulumi.RegisterOutputType(SegmentMapOutput{})
}
