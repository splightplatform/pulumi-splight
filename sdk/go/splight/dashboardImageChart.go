// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/splightplatform/pulumi-splight/sdk/go/splight"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"type":       "GeometryCollection",
//				"geometries": []interface{}{},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			assetTest, err := splight.NewAsset(ctx, "assetTest", &splight.AssetArgs{
//				Description: pulumi.String("Created with Terraform"),
//				Geometry:    pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			attributeTest1, err := splight.NewAssetAttribute(ctx, "attributeTest1", &splight.AssetAttributeArgs{
//				Type:  pulumi.String("Number"),
//				Unit:  pulumi.String("meters"),
//				Asset: assetTest.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			attributeTest2, err := splight.NewAssetAttribute(ctx, "attributeTest2", &splight.AssetAttributeArgs{
//				Type:  pulumi.String("Number"),
//				Unit:  pulumi.String("seconds"),
//				Asset: assetTest.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			dashboardTest, err := splight.NewDashboard(ctx, "dashboardTest", &splight.DashboardArgs{
//				RelatedAssets: pulumi.StringArray{},
//			})
//			if err != nil {
//				return err
//			}
//			dashboardTabTest, err := splight.NewDashboardTab(ctx, "dashboardTabTest", &splight.DashboardTabArgs{
//				Order:     pulumi.Int(0),
//				Dashboard: dashboardTest.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = splight.NewDashboardImageChart(ctx, "dashboardChartTest", &splight.DashboardImageChartArgs{
//				Tab:               dashboardTabTest.ID(),
//				TimestampGte:      pulumi.String("now - 7d"),
//				TimestampLte:      pulumi.String("now"),
//				Description:       pulumi.String("Chart description"),
//				MinHeight:         pulumi.Int(1),
//				MinWidth:          pulumi.Int(4),
//				DisplayTimeRange:  pulumi.Bool(true),
//				LabelsDisplay:     pulumi.Bool(true),
//				LabelsAggregation: pulumi.String("last"),
//				LabelsPlacement:   pulumi.String("bottom"),
//				ShowBeyondData:    pulumi.Bool(true),
//				Height:            pulumi.Int(10),
//				Width:             pulumi.Int(20),
//				Collection:        pulumi.String("default"),
//				ImageUrl:          pulumi.String("123-123-123-123-123"),
//				ImageFile:         nil,
//				ChartItems: splight.DashboardImageChartChartItemArray{
//					&splight.DashboardImageChartChartItemArgs{
//						RefId:           pulumi.String("A"),
//						Type:            pulumi.String("QUERY"),
//						Color:           pulumi.String("red"),
//						ExpressionPlain: pulumi.String(""),
//						QueryFilterAsset: &splight.DashboardImageChartChartItemQueryFilterAssetArgs{
//							Id:   assetTest.ID(),
//							Name: assetTest.Name,
//						},
//						QueryFilterAttribute: &splight.DashboardImageChartChartItemQueryFilterAttributeArgs{
//							Id:   attributeTest1.ID(),
//							Name: attributeTest1.Name,
//						},
//						QueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {
//							assetTestId := _args[0].(string)
//							attributeTest1Id := _args[1].(string)
//							var _zero string
//							tmpJSON1, err := json.Marshal([]interface{}{
//								map[string]interface{}{
//									"$match": map[string]interface{}{
//										"asset":     assetTestId,
//										"attribute": attributeTest1Id,
//									},
//								},
//								map[string]interface{}{
//									"$addFields": map[string]interface{}{
//										"timestamp": map[string]interface{}{
//											"$dateTrunc": map[string]interface{}{
//												"date":    "$timestamp",
//												"unit":    "day",
//												"binSize": 1,
//											},
//										},
//									},
//								},
//								map[string]interface{}{
//									"$group": map[string]interface{}{
//										"_id": "$timestamp",
//										"value": map[string]interface{}{
//											"$last": "$value",
//										},
//										"timestamp": map[string]interface{}{
//											"$last": "$timestamp",
//										},
//									},
//								},
//							})
//							if err != nil {
//								return _zero, err
//							}
//							json1 := string(tmpJSON1)
//							return json1, nil
//						}).(pulumi.StringOutput),
//					},
//					&splight.DashboardImageChartChartItemArgs{
//						RefId:           pulumi.String("B"),
//						Color:           pulumi.String("blue"),
//						Type:            pulumi.String("QUERY"),
//						ExpressionPlain: pulumi.String(""),
//						QueryFilterAsset: &splight.DashboardImageChartChartItemQueryFilterAssetArgs{
//							Id:   assetTest.ID(),
//							Name: assetTest.Name,
//						},
//						QueryFilterAttribute: &splight.DashboardImageChartChartItemQueryFilterAttributeArgs{
//							Id:   attributeTest2.ID(),
//							Name: attributeTest2.Name,
//						},
//						QueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {
//							assetTestId := _args[0].(string)
//							attributeTest2Id := _args[1].(string)
//							var _zero string
//							tmpJSON2, err := json.Marshal([]interface{}{
//								map[string]interface{}{
//									"$match": map[string]interface{}{
//										"asset":     assetTestId,
//										"attribute": attributeTest2Id,
//									},
//								},
//								map[string]interface{}{
//									"$addFields": map[string]interface{}{
//										"timestamp": map[string]interface{}{
//											"$dateTrunc": map[string]interface{}{
//												"date":    "$timestamp",
//												"unit":    "hour",
//												"binSize": 1,
//											},
//										},
//									},
//								},
//								map[string]interface{}{
//									"$group": map[string]interface{}{
//										"_id": "$timestamp",
//										"value": map[string]interface{}{
//											"$last": "$value",
//										},
//										"timestamp": map[string]interface{}{
//											"$last": "$timestamp",
//										},
//									},
//								},
//							})
//							if err != nil {
//								return _zero, err
//							}
//							json2 := string(tmpJSON2)
//							return json2, nil
//						}).(pulumi.StringOutput),
//					},
//				},
//				Thresholds: splight.DashboardImageChartThresholdArray{
//					&splight.DashboardImageChartThresholdArgs{
//						Color:       pulumi.String("#00edcf"),
//						DisplayText: pulumi.String("T1Test"),
//						Value:       pulumi.Float64(13.1),
//					},
//				},
//				ValueMappings: splight.DashboardImageChartValueMappingArray{
//					&splight.DashboardImageChartValueMappingArgs{
//						DisplayText: pulumi.String("MODIFICADO"),
//						MatchValue:  pulumi.String("123.3"),
//						Type:        pulumi.String("exact_match"),
//						Order:       pulumi.Int(0),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/dashboardImageChart:DashboardImageChart [options] splight_dashboard_image_chart.<name> <dashboard_chart_id>
// ```
type DashboardImageChart struct {
	pulumi.CustomResourceState

	// chart traces to be included
	ChartItems DashboardImageChartChartItemArrayOutput `pulumi:"chartItems"`
	Collection pulumi.StringPtrOutput                  `pulumi:"collection"`
	// chart description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// whether to display the time range or not
	DisplayTimeRange pulumi.BoolPtrOutput `pulumi:"displayTimeRange"`
	// chart height in px
	Height pulumi.IntPtrOutput `pulumi:"height"`
	// image file
	ImageFile pulumi.StringPtrOutput `pulumi:"imageFile"`
	// image url
	ImageUrl pulumi.StringPtrOutput `pulumi:"imageUrl"`
	// [last|avg|...] aggregation
	LabelsAggregation pulumi.StringPtrOutput `pulumi:"labelsAggregation"`
	// whether to display the labels or not
	LabelsDisplay pulumi.BoolPtrOutput `pulumi:"labelsDisplay"`
	// [right|bottom] placement
	LabelsPlacement pulumi.StringPtrOutput `pulumi:"labelsPlacement"`
	// minimum chart height
	MinHeight pulumi.IntPtrOutput `pulumi:"minHeight"`
	// minimum chart width
	MinWidth pulumi.IntPtrOutput `pulumi:"minWidth"`
	// name of the chart
	Name pulumi.StringOutput `pulumi:"name"`
	// chart x position
	PositionX pulumi.IntPtrOutput `pulumi:"positionX"`
	// chart y position
	PositionY pulumi.IntPtrOutput `pulumi:"positionY"`
	// refresh interval
	RefreshInterval pulumi.StringPtrOutput `pulumi:"refreshInterval"`
	// relative window time
	RelativeWindowTime pulumi.StringPtrOutput `pulumi:"relativeWindowTime"`
	// whether to show data which is beyond timestampLte or not
	ShowBeyondData pulumi.BoolPtrOutput `pulumi:"showBeyondData"`
	// id for the tab where to place the chart
	Tab pulumi.StringOutput `pulumi:"tab"`
	// optional static lines to be added to the chart as references
	Thresholds DashboardImageChartThresholdArrayOutput `pulumi:"thresholds"`
	// date in isoformat or shortcut string where to end reading
	TimestampGte pulumi.StringOutput `pulumi:"timestampGte"`
	// date in isoformat or shortcut string where to start reading
	TimestampLte pulumi.StringOutput `pulumi:"timestampLte"`
	// chart timezone
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
	// optional mappings to transform data with rules
	ValueMappings DashboardImageChartValueMappingArrayOutput `pulumi:"valueMappings"`
	// chart width in cols (max 20)
	Width pulumi.IntPtrOutput `pulumi:"width"`
}

// NewDashboardImageChart registers a new resource with the given unique name, arguments, and options.
func NewDashboardImageChart(ctx *pulumi.Context,
	name string, args *DashboardImageChartArgs, opts ...pulumi.ResourceOption) (*DashboardImageChart, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChartItems == nil {
		return nil, errors.New("invalid value for required argument 'ChartItems'")
	}
	if args.Tab == nil {
		return nil, errors.New("invalid value for required argument 'Tab'")
	}
	if args.TimestampGte == nil {
		return nil, errors.New("invalid value for required argument 'TimestampGte'")
	}
	if args.TimestampLte == nil {
		return nil, errors.New("invalid value for required argument 'TimestampLte'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardImageChart
	err := ctx.RegisterResource("splight:index/dashboardImageChart:DashboardImageChart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardImageChart gets an existing DashboardImageChart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardImageChart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardImageChartState, opts ...pulumi.ResourceOption) (*DashboardImageChart, error) {
	var resource DashboardImageChart
	err := ctx.ReadResource("splight:index/dashboardImageChart:DashboardImageChart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardImageChart resources.
type dashboardImageChartState struct {
	// chart traces to be included
	ChartItems []DashboardImageChartChartItem `pulumi:"chartItems"`
	Collection *string                        `pulumi:"collection"`
	// chart description
	Description *string `pulumi:"description"`
	// whether to display the time range or not
	DisplayTimeRange *bool `pulumi:"displayTimeRange"`
	// chart height in px
	Height *int `pulumi:"height"`
	// image file
	ImageFile *string `pulumi:"imageFile"`
	// image url
	ImageUrl *string `pulumi:"imageUrl"`
	// [last|avg|...] aggregation
	LabelsAggregation *string `pulumi:"labelsAggregation"`
	// whether to display the labels or not
	LabelsDisplay *bool `pulumi:"labelsDisplay"`
	// [right|bottom] placement
	LabelsPlacement *string `pulumi:"labelsPlacement"`
	// minimum chart height
	MinHeight *int `pulumi:"minHeight"`
	// minimum chart width
	MinWidth *int `pulumi:"minWidth"`
	// name of the chart
	Name *string `pulumi:"name"`
	// chart x position
	PositionX *int `pulumi:"positionX"`
	// chart y position
	PositionY *int `pulumi:"positionY"`
	// refresh interval
	RefreshInterval *string `pulumi:"refreshInterval"`
	// relative window time
	RelativeWindowTime *string `pulumi:"relativeWindowTime"`
	// whether to show data which is beyond timestampLte or not
	ShowBeyondData *bool `pulumi:"showBeyondData"`
	// id for the tab where to place the chart
	Tab *string `pulumi:"tab"`
	// optional static lines to be added to the chart as references
	Thresholds []DashboardImageChartThreshold `pulumi:"thresholds"`
	// date in isoformat or shortcut string where to end reading
	TimestampGte *string `pulumi:"timestampGte"`
	// date in isoformat or shortcut string where to start reading
	TimestampLte *string `pulumi:"timestampLte"`
	// chart timezone
	Timezone *string `pulumi:"timezone"`
	// optional mappings to transform data with rules
	ValueMappings []DashboardImageChartValueMapping `pulumi:"valueMappings"`
	// chart width in cols (max 20)
	Width *int `pulumi:"width"`
}

type DashboardImageChartState struct {
	// chart traces to be included
	ChartItems DashboardImageChartChartItemArrayInput
	Collection pulumi.StringPtrInput
	// chart description
	Description pulumi.StringPtrInput
	// whether to display the time range or not
	DisplayTimeRange pulumi.BoolPtrInput
	// chart height in px
	Height pulumi.IntPtrInput
	// image file
	ImageFile pulumi.StringPtrInput
	// image url
	ImageUrl pulumi.StringPtrInput
	// [last|avg|...] aggregation
	LabelsAggregation pulumi.StringPtrInput
	// whether to display the labels or not
	LabelsDisplay pulumi.BoolPtrInput
	// [right|bottom] placement
	LabelsPlacement pulumi.StringPtrInput
	// minimum chart height
	MinHeight pulumi.IntPtrInput
	// minimum chart width
	MinWidth pulumi.IntPtrInput
	// name of the chart
	Name pulumi.StringPtrInput
	// chart x position
	PositionX pulumi.IntPtrInput
	// chart y position
	PositionY pulumi.IntPtrInput
	// refresh interval
	RefreshInterval pulumi.StringPtrInput
	// relative window time
	RelativeWindowTime pulumi.StringPtrInput
	// whether to show data which is beyond timestampLte or not
	ShowBeyondData pulumi.BoolPtrInput
	// id for the tab where to place the chart
	Tab pulumi.StringPtrInput
	// optional static lines to be added to the chart as references
	Thresholds DashboardImageChartThresholdArrayInput
	// date in isoformat or shortcut string where to end reading
	TimestampGte pulumi.StringPtrInput
	// date in isoformat or shortcut string where to start reading
	TimestampLte pulumi.StringPtrInput
	// chart timezone
	Timezone pulumi.StringPtrInput
	// optional mappings to transform data with rules
	ValueMappings DashboardImageChartValueMappingArrayInput
	// chart width in cols (max 20)
	Width pulumi.IntPtrInput
}

func (DashboardImageChartState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardImageChartState)(nil)).Elem()
}

type dashboardImageChartArgs struct {
	// chart traces to be included
	ChartItems []DashboardImageChartChartItem `pulumi:"chartItems"`
	Collection *string                        `pulumi:"collection"`
	// chart description
	Description *string `pulumi:"description"`
	// whether to display the time range or not
	DisplayTimeRange *bool `pulumi:"displayTimeRange"`
	// chart height in px
	Height *int `pulumi:"height"`
	// image file
	ImageFile *string `pulumi:"imageFile"`
	// image url
	ImageUrl *string `pulumi:"imageUrl"`
	// [last|avg|...] aggregation
	LabelsAggregation *string `pulumi:"labelsAggregation"`
	// whether to display the labels or not
	LabelsDisplay *bool `pulumi:"labelsDisplay"`
	// [right|bottom] placement
	LabelsPlacement *string `pulumi:"labelsPlacement"`
	// minimum chart height
	MinHeight *int `pulumi:"minHeight"`
	// minimum chart width
	MinWidth *int `pulumi:"minWidth"`
	// name of the chart
	Name *string `pulumi:"name"`
	// chart x position
	PositionX *int `pulumi:"positionX"`
	// chart y position
	PositionY *int `pulumi:"positionY"`
	// refresh interval
	RefreshInterval *string `pulumi:"refreshInterval"`
	// relative window time
	RelativeWindowTime *string `pulumi:"relativeWindowTime"`
	// whether to show data which is beyond timestampLte or not
	ShowBeyondData *bool `pulumi:"showBeyondData"`
	// id for the tab where to place the chart
	Tab string `pulumi:"tab"`
	// optional static lines to be added to the chart as references
	Thresholds []DashboardImageChartThreshold `pulumi:"thresholds"`
	// date in isoformat or shortcut string where to end reading
	TimestampGte string `pulumi:"timestampGte"`
	// date in isoformat or shortcut string where to start reading
	TimestampLte string `pulumi:"timestampLte"`
	// chart timezone
	Timezone *string `pulumi:"timezone"`
	// optional mappings to transform data with rules
	ValueMappings []DashboardImageChartValueMapping `pulumi:"valueMappings"`
	// chart width in cols (max 20)
	Width *int `pulumi:"width"`
}

// The set of arguments for constructing a DashboardImageChart resource.
type DashboardImageChartArgs struct {
	// chart traces to be included
	ChartItems DashboardImageChartChartItemArrayInput
	Collection pulumi.StringPtrInput
	// chart description
	Description pulumi.StringPtrInput
	// whether to display the time range or not
	DisplayTimeRange pulumi.BoolPtrInput
	// chart height in px
	Height pulumi.IntPtrInput
	// image file
	ImageFile pulumi.StringPtrInput
	// image url
	ImageUrl pulumi.StringPtrInput
	// [last|avg|...] aggregation
	LabelsAggregation pulumi.StringPtrInput
	// whether to display the labels or not
	LabelsDisplay pulumi.BoolPtrInput
	// [right|bottom] placement
	LabelsPlacement pulumi.StringPtrInput
	// minimum chart height
	MinHeight pulumi.IntPtrInput
	// minimum chart width
	MinWidth pulumi.IntPtrInput
	// name of the chart
	Name pulumi.StringPtrInput
	// chart x position
	PositionX pulumi.IntPtrInput
	// chart y position
	PositionY pulumi.IntPtrInput
	// refresh interval
	RefreshInterval pulumi.StringPtrInput
	// relative window time
	RelativeWindowTime pulumi.StringPtrInput
	// whether to show data which is beyond timestampLte or not
	ShowBeyondData pulumi.BoolPtrInput
	// id for the tab where to place the chart
	Tab pulumi.StringInput
	// optional static lines to be added to the chart as references
	Thresholds DashboardImageChartThresholdArrayInput
	// date in isoformat or shortcut string where to end reading
	TimestampGte pulumi.StringInput
	// date in isoformat or shortcut string where to start reading
	TimestampLte pulumi.StringInput
	// chart timezone
	Timezone pulumi.StringPtrInput
	// optional mappings to transform data with rules
	ValueMappings DashboardImageChartValueMappingArrayInput
	// chart width in cols (max 20)
	Width pulumi.IntPtrInput
}

func (DashboardImageChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardImageChartArgs)(nil)).Elem()
}

type DashboardImageChartInput interface {
	pulumi.Input

	ToDashboardImageChartOutput() DashboardImageChartOutput
	ToDashboardImageChartOutputWithContext(ctx context.Context) DashboardImageChartOutput
}

func (*DashboardImageChart) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardImageChart)(nil)).Elem()
}

func (i *DashboardImageChart) ToDashboardImageChartOutput() DashboardImageChartOutput {
	return i.ToDashboardImageChartOutputWithContext(context.Background())
}

func (i *DashboardImageChart) ToDashboardImageChartOutputWithContext(ctx context.Context) DashboardImageChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardImageChartOutput)
}

// DashboardImageChartArrayInput is an input type that accepts DashboardImageChartArray and DashboardImageChartArrayOutput values.
// You can construct a concrete instance of `DashboardImageChartArrayInput` via:
//
//	DashboardImageChartArray{ DashboardImageChartArgs{...} }
type DashboardImageChartArrayInput interface {
	pulumi.Input

	ToDashboardImageChartArrayOutput() DashboardImageChartArrayOutput
	ToDashboardImageChartArrayOutputWithContext(context.Context) DashboardImageChartArrayOutput
}

type DashboardImageChartArray []DashboardImageChartInput

func (DashboardImageChartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardImageChart)(nil)).Elem()
}

func (i DashboardImageChartArray) ToDashboardImageChartArrayOutput() DashboardImageChartArrayOutput {
	return i.ToDashboardImageChartArrayOutputWithContext(context.Background())
}

func (i DashboardImageChartArray) ToDashboardImageChartArrayOutputWithContext(ctx context.Context) DashboardImageChartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardImageChartArrayOutput)
}

// DashboardImageChartMapInput is an input type that accepts DashboardImageChartMap and DashboardImageChartMapOutput values.
// You can construct a concrete instance of `DashboardImageChartMapInput` via:
//
//	DashboardImageChartMap{ "key": DashboardImageChartArgs{...} }
type DashboardImageChartMapInput interface {
	pulumi.Input

	ToDashboardImageChartMapOutput() DashboardImageChartMapOutput
	ToDashboardImageChartMapOutputWithContext(context.Context) DashboardImageChartMapOutput
}

type DashboardImageChartMap map[string]DashboardImageChartInput

func (DashboardImageChartMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardImageChart)(nil)).Elem()
}

func (i DashboardImageChartMap) ToDashboardImageChartMapOutput() DashboardImageChartMapOutput {
	return i.ToDashboardImageChartMapOutputWithContext(context.Background())
}

func (i DashboardImageChartMap) ToDashboardImageChartMapOutputWithContext(ctx context.Context) DashboardImageChartMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardImageChartMapOutput)
}

type DashboardImageChartOutput struct{ *pulumi.OutputState }

func (DashboardImageChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardImageChart)(nil)).Elem()
}

func (o DashboardImageChartOutput) ToDashboardImageChartOutput() DashboardImageChartOutput {
	return o
}

func (o DashboardImageChartOutput) ToDashboardImageChartOutputWithContext(ctx context.Context) DashboardImageChartOutput {
	return o
}

// chart traces to be included
func (o DashboardImageChartOutput) ChartItems() DashboardImageChartChartItemArrayOutput {
	return o.ApplyT(func(v *DashboardImageChart) DashboardImageChartChartItemArrayOutput { return v.ChartItems }).(DashboardImageChartChartItemArrayOutput)
}

func (o DashboardImageChartOutput) Collection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringPtrOutput { return v.Collection }).(pulumi.StringPtrOutput)
}

// chart description
func (o DashboardImageChartOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// whether to display the time range or not
func (o DashboardImageChartOutput) DisplayTimeRange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.BoolPtrOutput { return v.DisplayTimeRange }).(pulumi.BoolPtrOutput)
}

// chart height in px
func (o DashboardImageChartOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.IntPtrOutput { return v.Height }).(pulumi.IntPtrOutput)
}

// image file
func (o DashboardImageChartOutput) ImageFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringPtrOutput { return v.ImageFile }).(pulumi.StringPtrOutput)
}

// image url
func (o DashboardImageChartOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringPtrOutput { return v.ImageUrl }).(pulumi.StringPtrOutput)
}

// [last|avg|...] aggregation
func (o DashboardImageChartOutput) LabelsAggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringPtrOutput { return v.LabelsAggregation }).(pulumi.StringPtrOutput)
}

// whether to display the labels or not
func (o DashboardImageChartOutput) LabelsDisplay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.BoolPtrOutput { return v.LabelsDisplay }).(pulumi.BoolPtrOutput)
}

// [right|bottom] placement
func (o DashboardImageChartOutput) LabelsPlacement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringPtrOutput { return v.LabelsPlacement }).(pulumi.StringPtrOutput)
}

// minimum chart height
func (o DashboardImageChartOutput) MinHeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.IntPtrOutput { return v.MinHeight }).(pulumi.IntPtrOutput)
}

// minimum chart width
func (o DashboardImageChartOutput) MinWidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.IntPtrOutput { return v.MinWidth }).(pulumi.IntPtrOutput)
}

// name of the chart
func (o DashboardImageChartOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// chart x position
func (o DashboardImageChartOutput) PositionX() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.IntPtrOutput { return v.PositionX }).(pulumi.IntPtrOutput)
}

// chart y position
func (o DashboardImageChartOutput) PositionY() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.IntPtrOutput { return v.PositionY }).(pulumi.IntPtrOutput)
}

// refresh interval
func (o DashboardImageChartOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringPtrOutput { return v.RefreshInterval }).(pulumi.StringPtrOutput)
}

// relative window time
func (o DashboardImageChartOutput) RelativeWindowTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringPtrOutput { return v.RelativeWindowTime }).(pulumi.StringPtrOutput)
}

// whether to show data which is beyond timestampLte or not
func (o DashboardImageChartOutput) ShowBeyondData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.BoolPtrOutput { return v.ShowBeyondData }).(pulumi.BoolPtrOutput)
}

// id for the tab where to place the chart
func (o DashboardImageChartOutput) Tab() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringOutput { return v.Tab }).(pulumi.StringOutput)
}

// optional static lines to be added to the chart as references
func (o DashboardImageChartOutput) Thresholds() DashboardImageChartThresholdArrayOutput {
	return o.ApplyT(func(v *DashboardImageChart) DashboardImageChartThresholdArrayOutput { return v.Thresholds }).(DashboardImageChartThresholdArrayOutput)
}

// date in isoformat or shortcut string where to end reading
func (o DashboardImageChartOutput) TimestampGte() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringOutput { return v.TimestampGte }).(pulumi.StringOutput)
}

// date in isoformat or shortcut string where to start reading
func (o DashboardImageChartOutput) TimestampLte() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringOutput { return v.TimestampLte }).(pulumi.StringOutput)
}

// chart timezone
func (o DashboardImageChartOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// optional mappings to transform data with rules
func (o DashboardImageChartOutput) ValueMappings() DashboardImageChartValueMappingArrayOutput {
	return o.ApplyT(func(v *DashboardImageChart) DashboardImageChartValueMappingArrayOutput { return v.ValueMappings }).(DashboardImageChartValueMappingArrayOutput)
}

// chart width in cols (max 20)
func (o DashboardImageChartOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DashboardImageChart) pulumi.IntPtrOutput { return v.Width }).(pulumi.IntPtrOutput)
}

type DashboardImageChartArrayOutput struct{ *pulumi.OutputState }

func (DashboardImageChartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardImageChart)(nil)).Elem()
}

func (o DashboardImageChartArrayOutput) ToDashboardImageChartArrayOutput() DashboardImageChartArrayOutput {
	return o
}

func (o DashboardImageChartArrayOutput) ToDashboardImageChartArrayOutputWithContext(ctx context.Context) DashboardImageChartArrayOutput {
	return o
}

func (o DashboardImageChartArrayOutput) Index(i pulumi.IntInput) DashboardImageChartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardImageChart {
		return vs[0].([]*DashboardImageChart)[vs[1].(int)]
	}).(DashboardImageChartOutput)
}

type DashboardImageChartMapOutput struct{ *pulumi.OutputState }

func (DashboardImageChartMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardImageChart)(nil)).Elem()
}

func (o DashboardImageChartMapOutput) ToDashboardImageChartMapOutput() DashboardImageChartMapOutput {
	return o
}

func (o DashboardImageChartMapOutput) ToDashboardImageChartMapOutputWithContext(ctx context.Context) DashboardImageChartMapOutput {
	return o
}

func (o DashboardImageChartMapOutput) MapIndex(k pulumi.StringInput) DashboardImageChartOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardImageChart {
		return vs[0].(map[string]*DashboardImageChart)[vs[1].(string)]
	}).(DashboardImageChartOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardImageChartInput)(nil)).Elem(), &DashboardImageChart{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardImageChartArrayInput)(nil)).Elem(), DashboardImageChartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardImageChartMapInput)(nil)).Elem(), DashboardImageChartMap{})
	pulumi.RegisterOutputType(DashboardImageChartOutput{})
	pulumi.RegisterOutputType(DashboardImageChartArrayOutput{})
	pulumi.RegisterOutputType(DashboardImageChartMapOutput{})
}
