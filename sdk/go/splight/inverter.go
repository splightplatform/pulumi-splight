// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import splight:index/inverter:Inverter [options] splight_inverter.<name> <inverter_id>
// ```
type Inverter struct {
	pulumi.CustomResourceState

	// attribute of the resource
	AccumulatedEnergies InverterAccumulatedEnergyArrayOutput `pulumi:"accumulatedEnergies"`
	// attribute of the resource
	ActivePowers InverterActivePowerArrayOutput `pulumi:"activePowers"`
	// custom timezone to use instead of the one computed from the geo-location
	CustomTimezone pulumi.StringPtrOutput `pulumi:"customTimezone"`
	// attribute of the resource
	DailyEnergies InverterDailyEnergyArrayOutput `pulumi:"dailyEnergies"`
	// description of the resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// attribute of the resource
	EnergyMeasurementType InverterEnergyMeasurementTypePtrOutput `pulumi:"energyMeasurementType"`
	// geo position and shape of the resource
	Geometry pulumi.StringPtrOutput `pulumi:"geometry"`
	// kind of the resource
	Kinds InverterKindArrayOutput `pulumi:"kinds"`
	// attribute of the resource
	Make InverterMakePtrOutput `pulumi:"make"`
	// attribute of the resource
	MaxActivePower InverterMaxActivePowerPtrOutput `pulumi:"maxActivePower"`
	// attribute of the resource
	Model InverterModelPtrOutput `pulumi:"model"`
	// name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// attribute of the resource
	RawDailyEnergies InverterRawDailyEnergyArrayOutput `pulumi:"rawDailyEnergies"`
	// attribute of the resource
	SerialNumber InverterSerialNumberPtrOutput `pulumi:"serialNumber"`
	// attribute of the resource
	SwitchStatuses InverterSwitchStatusArrayOutput `pulumi:"switchStatuses"`
	// tags of the resource
	Tags InverterTagArrayOutput `pulumi:"tags"`
	// attribute of the resource
	Temperatures InverterTemperatureArrayOutput `pulumi:"temperatures"`
	// timezone of the resource (set by the geo-location)
	Timezone pulumi.StringOutput `pulumi:"timezone"`
}

// NewInverter registers a new resource with the given unique name, arguments, and options.
func NewInverter(ctx *pulumi.Context,
	name string, args *InverterArgs, opts ...pulumi.ResourceOption) (*Inverter, error) {
	if args == nil {
		args = &InverterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Inverter
	err := ctx.RegisterResource("splight:index/inverter:Inverter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInverter gets an existing Inverter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInverter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InverterState, opts ...pulumi.ResourceOption) (*Inverter, error) {
	var resource Inverter
	err := ctx.ReadResource("splight:index/inverter:Inverter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Inverter resources.
type inverterState struct {
	// attribute of the resource
	AccumulatedEnergies []InverterAccumulatedEnergy `pulumi:"accumulatedEnergies"`
	// attribute of the resource
	ActivePowers []InverterActivePower `pulumi:"activePowers"`
	// custom timezone to use instead of the one computed from the geo-location
	CustomTimezone *string `pulumi:"customTimezone"`
	// attribute of the resource
	DailyEnergies []InverterDailyEnergy `pulumi:"dailyEnergies"`
	// description of the resource
	Description *string `pulumi:"description"`
	// attribute of the resource
	EnergyMeasurementType *InverterEnergyMeasurementType `pulumi:"energyMeasurementType"`
	// geo position and shape of the resource
	Geometry *string `pulumi:"geometry"`
	// kind of the resource
	Kinds []InverterKind `pulumi:"kinds"`
	// attribute of the resource
	Make *InverterMake `pulumi:"make"`
	// attribute of the resource
	MaxActivePower *InverterMaxActivePower `pulumi:"maxActivePower"`
	// attribute of the resource
	Model *InverterModel `pulumi:"model"`
	// name of the resource
	Name *string `pulumi:"name"`
	// attribute of the resource
	RawDailyEnergies []InverterRawDailyEnergy `pulumi:"rawDailyEnergies"`
	// attribute of the resource
	SerialNumber *InverterSerialNumber `pulumi:"serialNumber"`
	// attribute of the resource
	SwitchStatuses []InverterSwitchStatus `pulumi:"switchStatuses"`
	// tags of the resource
	Tags []InverterTag `pulumi:"tags"`
	// attribute of the resource
	Temperatures []InverterTemperature `pulumi:"temperatures"`
	// timezone of the resource (set by the geo-location)
	Timezone *string `pulumi:"timezone"`
}

type InverterState struct {
	// attribute of the resource
	AccumulatedEnergies InverterAccumulatedEnergyArrayInput
	// attribute of the resource
	ActivePowers InverterActivePowerArrayInput
	// custom timezone to use instead of the one computed from the geo-location
	CustomTimezone pulumi.StringPtrInput
	// attribute of the resource
	DailyEnergies InverterDailyEnergyArrayInput
	// description of the resource
	Description pulumi.StringPtrInput
	// attribute of the resource
	EnergyMeasurementType InverterEnergyMeasurementTypePtrInput
	// geo position and shape of the resource
	Geometry pulumi.StringPtrInput
	// kind of the resource
	Kinds InverterKindArrayInput
	// attribute of the resource
	Make InverterMakePtrInput
	// attribute of the resource
	MaxActivePower InverterMaxActivePowerPtrInput
	// attribute of the resource
	Model InverterModelPtrInput
	// name of the resource
	Name pulumi.StringPtrInput
	// attribute of the resource
	RawDailyEnergies InverterRawDailyEnergyArrayInput
	// attribute of the resource
	SerialNumber InverterSerialNumberPtrInput
	// attribute of the resource
	SwitchStatuses InverterSwitchStatusArrayInput
	// tags of the resource
	Tags InverterTagArrayInput
	// attribute of the resource
	Temperatures InverterTemperatureArrayInput
	// timezone of the resource (set by the geo-location)
	Timezone pulumi.StringPtrInput
}

func (InverterState) ElementType() reflect.Type {
	return reflect.TypeOf((*inverterState)(nil)).Elem()
}

type inverterArgs struct {
	// custom timezone to use instead of the one computed from the geo-location
	CustomTimezone *string `pulumi:"customTimezone"`
	// description of the resource
	Description *string `pulumi:"description"`
	// attribute of the resource
	EnergyMeasurementType *InverterEnergyMeasurementType `pulumi:"energyMeasurementType"`
	// geo position and shape of the resource
	Geometry *string `pulumi:"geometry"`
	// attribute of the resource
	Make *InverterMake `pulumi:"make"`
	// attribute of the resource
	MaxActivePower *InverterMaxActivePower `pulumi:"maxActivePower"`
	// attribute of the resource
	Model *InverterModel `pulumi:"model"`
	// name of the resource
	Name *string `pulumi:"name"`
	// attribute of the resource
	SerialNumber *InverterSerialNumber `pulumi:"serialNumber"`
	// tags of the resource
	Tags []InverterTag `pulumi:"tags"`
}

// The set of arguments for constructing a Inverter resource.
type InverterArgs struct {
	// custom timezone to use instead of the one computed from the geo-location
	CustomTimezone pulumi.StringPtrInput
	// description of the resource
	Description pulumi.StringPtrInput
	// attribute of the resource
	EnergyMeasurementType InverterEnergyMeasurementTypePtrInput
	// geo position and shape of the resource
	Geometry pulumi.StringPtrInput
	// attribute of the resource
	Make InverterMakePtrInput
	// attribute of the resource
	MaxActivePower InverterMaxActivePowerPtrInput
	// attribute of the resource
	Model InverterModelPtrInput
	// name of the resource
	Name pulumi.StringPtrInput
	// attribute of the resource
	SerialNumber InverterSerialNumberPtrInput
	// tags of the resource
	Tags InverterTagArrayInput
}

func (InverterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inverterArgs)(nil)).Elem()
}

type InverterInput interface {
	pulumi.Input

	ToInverterOutput() InverterOutput
	ToInverterOutputWithContext(ctx context.Context) InverterOutput
}

func (*Inverter) ElementType() reflect.Type {
	return reflect.TypeOf((**Inverter)(nil)).Elem()
}

func (i *Inverter) ToInverterOutput() InverterOutput {
	return i.ToInverterOutputWithContext(context.Background())
}

func (i *Inverter) ToInverterOutputWithContext(ctx context.Context) InverterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterOutput)
}

// InverterArrayInput is an input type that accepts InverterArray and InverterArrayOutput values.
// You can construct a concrete instance of `InverterArrayInput` via:
//
//	InverterArray{ InverterArgs{...} }
type InverterArrayInput interface {
	pulumi.Input

	ToInverterArrayOutput() InverterArrayOutput
	ToInverterArrayOutputWithContext(context.Context) InverterArrayOutput
}

type InverterArray []InverterInput

func (InverterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Inverter)(nil)).Elem()
}

func (i InverterArray) ToInverterArrayOutput() InverterArrayOutput {
	return i.ToInverterArrayOutputWithContext(context.Background())
}

func (i InverterArray) ToInverterArrayOutputWithContext(ctx context.Context) InverterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterArrayOutput)
}

// InverterMapInput is an input type that accepts InverterMap and InverterMapOutput values.
// You can construct a concrete instance of `InverterMapInput` via:
//
//	InverterMap{ "key": InverterArgs{...} }
type InverterMapInput interface {
	pulumi.Input

	ToInverterMapOutput() InverterMapOutput
	ToInverterMapOutputWithContext(context.Context) InverterMapOutput
}

type InverterMap map[string]InverterInput

func (InverterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Inverter)(nil)).Elem()
}

func (i InverterMap) ToInverterMapOutput() InverterMapOutput {
	return i.ToInverterMapOutputWithContext(context.Background())
}

func (i InverterMap) ToInverterMapOutputWithContext(ctx context.Context) InverterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InverterMapOutput)
}

type InverterOutput struct{ *pulumi.OutputState }

func (InverterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Inverter)(nil)).Elem()
}

func (o InverterOutput) ToInverterOutput() InverterOutput {
	return o
}

func (o InverterOutput) ToInverterOutputWithContext(ctx context.Context) InverterOutput {
	return o
}

// attribute of the resource
func (o InverterOutput) AccumulatedEnergies() InverterAccumulatedEnergyArrayOutput {
	return o.ApplyT(func(v *Inverter) InverterAccumulatedEnergyArrayOutput { return v.AccumulatedEnergies }).(InverterAccumulatedEnergyArrayOutput)
}

// attribute of the resource
func (o InverterOutput) ActivePowers() InverterActivePowerArrayOutput {
	return o.ApplyT(func(v *Inverter) InverterActivePowerArrayOutput { return v.ActivePowers }).(InverterActivePowerArrayOutput)
}

// custom timezone to use instead of the one computed from the geo-location
func (o InverterOutput) CustomTimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Inverter) pulumi.StringPtrOutput { return v.CustomTimezone }).(pulumi.StringPtrOutput)
}

// attribute of the resource
func (o InverterOutput) DailyEnergies() InverterDailyEnergyArrayOutput {
	return o.ApplyT(func(v *Inverter) InverterDailyEnergyArrayOutput { return v.DailyEnergies }).(InverterDailyEnergyArrayOutput)
}

// description of the resource
func (o InverterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Inverter) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// attribute of the resource
func (o InverterOutput) EnergyMeasurementType() InverterEnergyMeasurementTypePtrOutput {
	return o.ApplyT(func(v *Inverter) InverterEnergyMeasurementTypePtrOutput { return v.EnergyMeasurementType }).(InverterEnergyMeasurementTypePtrOutput)
}

// geo position and shape of the resource
func (o InverterOutput) Geometry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Inverter) pulumi.StringPtrOutput { return v.Geometry }).(pulumi.StringPtrOutput)
}

// kind of the resource
func (o InverterOutput) Kinds() InverterKindArrayOutput {
	return o.ApplyT(func(v *Inverter) InverterKindArrayOutput { return v.Kinds }).(InverterKindArrayOutput)
}

// attribute of the resource
func (o InverterOutput) Make() InverterMakePtrOutput {
	return o.ApplyT(func(v *Inverter) InverterMakePtrOutput { return v.Make }).(InverterMakePtrOutput)
}

// attribute of the resource
func (o InverterOutput) MaxActivePower() InverterMaxActivePowerPtrOutput {
	return o.ApplyT(func(v *Inverter) InverterMaxActivePowerPtrOutput { return v.MaxActivePower }).(InverterMaxActivePowerPtrOutput)
}

// attribute of the resource
func (o InverterOutput) Model() InverterModelPtrOutput {
	return o.ApplyT(func(v *Inverter) InverterModelPtrOutput { return v.Model }).(InverterModelPtrOutput)
}

// name of the resource
func (o InverterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Inverter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// attribute of the resource
func (o InverterOutput) RawDailyEnergies() InverterRawDailyEnergyArrayOutput {
	return o.ApplyT(func(v *Inverter) InverterRawDailyEnergyArrayOutput { return v.RawDailyEnergies }).(InverterRawDailyEnergyArrayOutput)
}

// attribute of the resource
func (o InverterOutput) SerialNumber() InverterSerialNumberPtrOutput {
	return o.ApplyT(func(v *Inverter) InverterSerialNumberPtrOutput { return v.SerialNumber }).(InverterSerialNumberPtrOutput)
}

// attribute of the resource
func (o InverterOutput) SwitchStatuses() InverterSwitchStatusArrayOutput {
	return o.ApplyT(func(v *Inverter) InverterSwitchStatusArrayOutput { return v.SwitchStatuses }).(InverterSwitchStatusArrayOutput)
}

// tags of the resource
func (o InverterOutput) Tags() InverterTagArrayOutput {
	return o.ApplyT(func(v *Inverter) InverterTagArrayOutput { return v.Tags }).(InverterTagArrayOutput)
}

// attribute of the resource
func (o InverterOutput) Temperatures() InverterTemperatureArrayOutput {
	return o.ApplyT(func(v *Inverter) InverterTemperatureArrayOutput { return v.Temperatures }).(InverterTemperatureArrayOutput)
}

// timezone of the resource (set by the geo-location)
func (o InverterOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *Inverter) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

type InverterArrayOutput struct{ *pulumi.OutputState }

func (InverterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Inverter)(nil)).Elem()
}

func (o InverterArrayOutput) ToInverterArrayOutput() InverterArrayOutput {
	return o
}

func (o InverterArrayOutput) ToInverterArrayOutputWithContext(ctx context.Context) InverterArrayOutput {
	return o
}

func (o InverterArrayOutput) Index(i pulumi.IntInput) InverterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Inverter {
		return vs[0].([]*Inverter)[vs[1].(int)]
	}).(InverterOutput)
}

type InverterMapOutput struct{ *pulumi.OutputState }

func (InverterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Inverter)(nil)).Elem()
}

func (o InverterMapOutput) ToInverterMapOutput() InverterMapOutput {
	return o
}

func (o InverterMapOutput) ToInverterMapOutputWithContext(ctx context.Context) InverterMapOutput {
	return o
}

func (o InverterMapOutput) MapIndex(k pulumi.StringInput) InverterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Inverter {
		return vs[0].(map[string]*Inverter)[vs[1].(string)]
	}).(InverterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InverterInput)(nil)).Elem(), &Inverter{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterArrayInput)(nil)).Elem(), InverterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InverterMapInput)(nil)).Elem(), InverterMap{})
	pulumi.RegisterOutputType(InverterOutput{})
	pulumi.RegisterOutputType(InverterArrayOutput{})
	pulumi.RegisterOutputType(InverterMapOutput{})
}
