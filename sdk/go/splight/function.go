// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/splightplatform/pulumi-splight/sdk/go/splight"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"type": "GeometryCollection",
//				"geometries": []map[string]interface{}{
//					map[string]interface{}{
//						"type": "Point",
//						"coordinates": []float64{
//							0,
//							0,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			myAsset, err := splight.NewAsset(ctx, "myAsset", &splight.AssetArgs{
//				Description: pulumi.String("My Asset Description"),
//				Geometry:    pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			myAttribute, err := splight.NewAssetAttribute(ctx, "myAttribute", &splight.AssetAttributeArgs{
//				Type:  pulumi.String("Number"),
//				Asset: myAsset.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"type": "GeometryCollection",
//				"geometries": []map[string]interface{}{
//					map[string]interface{}{
//						"type": "Point",
//						"coordinates": []float64{
//							0,
//							0,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			myTargetAsset, err := splight.NewAsset(ctx, "myTargetAsset", &splight.AssetArgs{
//				Description: pulumi.String("My Target Asset Description"),
//				Geometry:    pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			myTargetAttribute, err := splight.NewAssetAttribute(ctx, "myTargetAttribute", &splight.AssetAttributeArgs{
//				Type:  pulumi.String("Number"),
//				Asset: myTargetAsset.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON2, err := json.Marshal(map[string]interface{}{
//				"$function": map[string]interface{}{
//					"body": "function () { return A * 2 }",
//					"args": []interface{}{},
//					"lang": "js",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json2 := string(tmpJSON2)
//			_, err = splight.NewFunction(ctx, "functionTest", &splight.FunctionArgs{
//				Description:    pulumi.String("My Function Description"),
//				Type:           pulumi.String("rate"),
//				RateUnit:       pulumi.String("minute"),
//				RateValue:      pulumi.Int(10),
//				TimeWindow:     3600 * 12,
//				TargetVariable: pulumi.String("B"),
//				TargetAsset: &splight.FunctionTargetAssetArgs{
//					Id:   myTargetAsset.ID(),
//					Name: myTargetAsset.Name,
//				},
//				TargetAttribute: &splight.FunctionTargetAttributeArgs{
//					Id:   myTargetAttribute.ID(),
//					Name: myTargetAttribute.Name,
//				},
//				FunctionItems: splight.FunctionFunctionItemArray{
//					&splight.FunctionFunctionItemArgs{
//						RefId:           pulumi.String("A"),
//						Type:            pulumi.String("QUERY"),
//						Expression:      pulumi.String(""),
//						ExpressionPlain: pulumi.String(""),
//						QueryFilterAsset: &splight.FunctionFunctionItemQueryFilterAssetArgs{
//							Id:   myAsset.ID(),
//							Name: myAsset.Name,
//						},
//						QueryFilterAttribute: &splight.FunctionFunctionItemQueryFilterAttributeArgs{
//							Id:   myAttribute.ID(),
//							Name: myAttribute.Name,
//						},
//						QueryPlain: pulumi.All(myAsset.ID(), myAttribute.ID()).ApplyT(func(_args []interface{}) (string, error) {
//							myAssetId := _args[0].(string)
//							myAttributeId := _args[1].(string)
//							var _zero string
//							tmpJSON3, err := json.Marshal([]map[string]interface{}{
//								map[string]interface{}{
//									"$match": map[string]interface{}{
//										"asset":     myAssetId,
//										"attribute": myAttributeId,
//									},
//								},
//							})
//							if err != nil {
//								return _zero, err
//							}
//							json3 := string(tmpJSON3)
//							return json3, nil
//						}).(pulumi.StringOutput),
//					},
//					&splight.FunctionFunctionItemArgs{
//						RefId:                pulumi.String("B"),
//						Type:                 pulumi.String("EXPRESSION"),
//						Expression:           pulumi.String("A * 2"),
//						ExpressionPlain:      pulumi.String(json2),
//						QueryFilterAsset:     nil,
//						QueryFilterAttribute: nil,
//						QueryPlain:           pulumi.String(""),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/function:Function [options] splight_function.<name> <function_id>
// ```
type Function struct {
	pulumi.CustomResourceState

	// schedule value for cron
	CronDom pulumi.IntOutput `pulumi:"cronDom"`
	// schedule value for cron
	CronDow pulumi.IntOutput `pulumi:"cronDow"`
	// schedule value for cron
	CronHours pulumi.IntOutput `pulumi:"cronHours"`
	// schedule value for cron
	CronMinutes pulumi.IntOutput `pulumi:"cronMinutes"`
	// schedule value for cron
	CronMonth pulumi.IntOutput `pulumi:"cronMonth"`
	// schedule value for cron
	CronYear pulumi.IntOutput `pulumi:"cronYear"`
	// The description of the resource
	Description pulumi.StringOutput `pulumi:"description"`
	// traces to be used to compute the results
	FunctionItems FunctionFunctionItemArrayOutput `pulumi:"functionItems"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// [day|hour|minute] schedule unit
	RateUnit pulumi.StringOutput `pulumi:"rateUnit"`
	// schedule value
	RateValue pulumi.IntOutput `pulumi:"rateValue"`
	// Asset/Attribute filter
	TargetAsset FunctionTargetAssetOutput `pulumi:"targetAsset"`
	// Asset/Attribute filter
	TargetAttribute FunctionTargetAttributeOutput `pulumi:"targetAttribute"`
	// variable to be considered to be ingested
	TargetVariable pulumi.StringOutput `pulumi:"targetVariable"`
	// window to fetch data from. Data out of that window will not be considered for evaluation
	TimeWindow pulumi.IntOutput `pulumi:"timeWindow"`
	// [cron|rate] type for the cron
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFunction registers a new resource with the given unique name, arguments, and options.
func NewFunction(ctx *pulumi.Context,
	name string, args *FunctionArgs, opts ...pulumi.ResourceOption) (*Function, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.FunctionItems == nil {
		return nil, errors.New("invalid value for required argument 'FunctionItems'")
	}
	if args.TargetAsset == nil {
		return nil, errors.New("invalid value for required argument 'TargetAsset'")
	}
	if args.TargetAttribute == nil {
		return nil, errors.New("invalid value for required argument 'TargetAttribute'")
	}
	if args.TargetVariable == nil {
		return nil, errors.New("invalid value for required argument 'TargetVariable'")
	}
	if args.TimeWindow == nil {
		return nil, errors.New("invalid value for required argument 'TimeWindow'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Function
	err := ctx.RegisterResource("splight:index/function:Function", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunction gets an existing Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionState, opts ...pulumi.ResourceOption) (*Function, error) {
	var resource Function
	err := ctx.ReadResource("splight:index/function:Function", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Function resources.
type functionState struct {
	// schedule value for cron
	CronDom *int `pulumi:"cronDom"`
	// schedule value for cron
	CronDow *int `pulumi:"cronDow"`
	// schedule value for cron
	CronHours *int `pulumi:"cronHours"`
	// schedule value for cron
	CronMinutes *int `pulumi:"cronMinutes"`
	// schedule value for cron
	CronMonth *int `pulumi:"cronMonth"`
	// schedule value for cron
	CronYear *int `pulumi:"cronYear"`
	// The description of the resource
	Description *string `pulumi:"description"`
	// traces to be used to compute the results
	FunctionItems []FunctionFunctionItem `pulumi:"functionItems"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// [day|hour|minute] schedule unit
	RateUnit *string `pulumi:"rateUnit"`
	// schedule value
	RateValue *int `pulumi:"rateValue"`
	// Asset/Attribute filter
	TargetAsset *FunctionTargetAsset `pulumi:"targetAsset"`
	// Asset/Attribute filter
	TargetAttribute *FunctionTargetAttribute `pulumi:"targetAttribute"`
	// variable to be considered to be ingested
	TargetVariable *string `pulumi:"targetVariable"`
	// window to fetch data from. Data out of that window will not be considered for evaluation
	TimeWindow *int `pulumi:"timeWindow"`
	// [cron|rate] type for the cron
	Type *string `pulumi:"type"`
}

type FunctionState struct {
	// schedule value for cron
	CronDom pulumi.IntPtrInput
	// schedule value for cron
	CronDow pulumi.IntPtrInput
	// schedule value for cron
	CronHours pulumi.IntPtrInput
	// schedule value for cron
	CronMinutes pulumi.IntPtrInput
	// schedule value for cron
	CronMonth pulumi.IntPtrInput
	// schedule value for cron
	CronYear pulumi.IntPtrInput
	// The description of the resource
	Description pulumi.StringPtrInput
	// traces to be used to compute the results
	FunctionItems FunctionFunctionItemArrayInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// [day|hour|minute] schedule unit
	RateUnit pulumi.StringPtrInput
	// schedule value
	RateValue pulumi.IntPtrInput
	// Asset/Attribute filter
	TargetAsset FunctionTargetAssetPtrInput
	// Asset/Attribute filter
	TargetAttribute FunctionTargetAttributePtrInput
	// variable to be considered to be ingested
	TargetVariable pulumi.StringPtrInput
	// window to fetch data from. Data out of that window will not be considered for evaluation
	TimeWindow pulumi.IntPtrInput
	// [cron|rate] type for the cron
	Type pulumi.StringPtrInput
}

func (FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionState)(nil)).Elem()
}

type functionArgs struct {
	// schedule value for cron
	CronDom *int `pulumi:"cronDom"`
	// schedule value for cron
	CronDow *int `pulumi:"cronDow"`
	// schedule value for cron
	CronHours *int `pulumi:"cronHours"`
	// schedule value for cron
	CronMinutes *int `pulumi:"cronMinutes"`
	// schedule value for cron
	CronMonth *int `pulumi:"cronMonth"`
	// schedule value for cron
	CronYear *int `pulumi:"cronYear"`
	// The description of the resource
	Description string `pulumi:"description"`
	// traces to be used to compute the results
	FunctionItems []FunctionFunctionItem `pulumi:"functionItems"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// [day|hour|minute] schedule unit
	RateUnit *string `pulumi:"rateUnit"`
	// schedule value
	RateValue *int `pulumi:"rateValue"`
	// Asset/Attribute filter
	TargetAsset FunctionTargetAsset `pulumi:"targetAsset"`
	// Asset/Attribute filter
	TargetAttribute FunctionTargetAttribute `pulumi:"targetAttribute"`
	// variable to be considered to be ingested
	TargetVariable string `pulumi:"targetVariable"`
	// window to fetch data from. Data out of that window will not be considered for evaluation
	TimeWindow int `pulumi:"timeWindow"`
	// [cron|rate] type for the cron
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Function resource.
type FunctionArgs struct {
	// schedule value for cron
	CronDom pulumi.IntPtrInput
	// schedule value for cron
	CronDow pulumi.IntPtrInput
	// schedule value for cron
	CronHours pulumi.IntPtrInput
	// schedule value for cron
	CronMinutes pulumi.IntPtrInput
	// schedule value for cron
	CronMonth pulumi.IntPtrInput
	// schedule value for cron
	CronYear pulumi.IntPtrInput
	// The description of the resource
	Description pulumi.StringInput
	// traces to be used to compute the results
	FunctionItems FunctionFunctionItemArrayInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// [day|hour|minute] schedule unit
	RateUnit pulumi.StringPtrInput
	// schedule value
	RateValue pulumi.IntPtrInput
	// Asset/Attribute filter
	TargetAsset FunctionTargetAssetInput
	// Asset/Attribute filter
	TargetAttribute FunctionTargetAttributeInput
	// variable to be considered to be ingested
	TargetVariable pulumi.StringInput
	// window to fetch data from. Data out of that window will not be considered for evaluation
	TimeWindow pulumi.IntInput
	// [cron|rate] type for the cron
	Type pulumi.StringInput
}

func (FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionArgs)(nil)).Elem()
}

type FunctionInput interface {
	pulumi.Input

	ToFunctionOutput() FunctionOutput
	ToFunctionOutputWithContext(ctx context.Context) FunctionOutput
}

func (*Function) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (i *Function) ToFunctionOutput() FunctionOutput {
	return i.ToFunctionOutputWithContext(context.Background())
}

func (i *Function) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionOutput)
}

// FunctionArrayInput is an input type that accepts FunctionArray and FunctionArrayOutput values.
// You can construct a concrete instance of `FunctionArrayInput` via:
//
//	FunctionArray{ FunctionArgs{...} }
type FunctionArrayInput interface {
	pulumi.Input

	ToFunctionArrayOutput() FunctionArrayOutput
	ToFunctionArrayOutputWithContext(context.Context) FunctionArrayOutput
}

type FunctionArray []FunctionInput

func (FunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (i FunctionArray) ToFunctionArrayOutput() FunctionArrayOutput {
	return i.ToFunctionArrayOutputWithContext(context.Background())
}

func (i FunctionArray) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArrayOutput)
}

// FunctionMapInput is an input type that accepts FunctionMap and FunctionMapOutput values.
// You can construct a concrete instance of `FunctionMapInput` via:
//
//	FunctionMap{ "key": FunctionArgs{...} }
type FunctionMapInput interface {
	pulumi.Input

	ToFunctionMapOutput() FunctionMapOutput
	ToFunctionMapOutputWithContext(context.Context) FunctionMapOutput
}

type FunctionMap map[string]FunctionInput

func (FunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (i FunctionMap) ToFunctionMapOutput() FunctionMapOutput {
	return i.ToFunctionMapOutputWithContext(context.Background())
}

func (i FunctionMap) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionMapOutput)
}

type FunctionOutput struct{ *pulumi.OutputState }

func (FunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (o FunctionOutput) ToFunctionOutput() FunctionOutput {
	return o
}

func (o FunctionOutput) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return o
}

// schedule value for cron
func (o FunctionOutput) CronDom() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.CronDom }).(pulumi.IntOutput)
}

// schedule value for cron
func (o FunctionOutput) CronDow() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.CronDow }).(pulumi.IntOutput)
}

// schedule value for cron
func (o FunctionOutput) CronHours() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.CronHours }).(pulumi.IntOutput)
}

// schedule value for cron
func (o FunctionOutput) CronMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.CronMinutes }).(pulumi.IntOutput)
}

// schedule value for cron
func (o FunctionOutput) CronMonth() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.CronMonth }).(pulumi.IntOutput)
}

// schedule value for cron
func (o FunctionOutput) CronYear() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.CronYear }).(pulumi.IntOutput)
}

// The description of the resource
func (o FunctionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// traces to be used to compute the results
func (o FunctionOutput) FunctionItems() FunctionFunctionItemArrayOutput {
	return o.ApplyT(func(v *Function) FunctionFunctionItemArrayOutput { return v.FunctionItems }).(FunctionFunctionItemArrayOutput)
}

// The name of the resource
func (o FunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [day|hour|minute] schedule unit
func (o FunctionOutput) RateUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.RateUnit }).(pulumi.StringOutput)
}

// schedule value
func (o FunctionOutput) RateValue() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.RateValue }).(pulumi.IntOutput)
}

// Asset/Attribute filter
func (o FunctionOutput) TargetAsset() FunctionTargetAssetOutput {
	return o.ApplyT(func(v *Function) FunctionTargetAssetOutput { return v.TargetAsset }).(FunctionTargetAssetOutput)
}

// Asset/Attribute filter
func (o FunctionOutput) TargetAttribute() FunctionTargetAttributeOutput {
	return o.ApplyT(func(v *Function) FunctionTargetAttributeOutput { return v.TargetAttribute }).(FunctionTargetAttributeOutput)
}

// variable to be considered to be ingested
func (o FunctionOutput) TargetVariable() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.TargetVariable }).(pulumi.StringOutput)
}

// window to fetch data from. Data out of that window will not be considered for evaluation
func (o FunctionOutput) TimeWindow() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.TimeWindow }).(pulumi.IntOutput)
}

// [cron|rate] type for the cron
func (o FunctionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type FunctionArrayOutput struct{ *pulumi.OutputState }

func (FunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (o FunctionArrayOutput) ToFunctionArrayOutput() FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) Index(i pulumi.IntInput) FunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Function {
		return vs[0].([]*Function)[vs[1].(int)]
	}).(FunctionOutput)
}

type FunctionMapOutput struct{ *pulumi.OutputState }

func (FunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (o FunctionMapOutput) ToFunctionMapOutput() FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) MapIndex(k pulumi.StringInput) FunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Function {
		return vs[0].(map[string]*Function)[vs[1].(string)]
	}).(FunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionInput)(nil)).Elem(), &Function{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArrayInput)(nil)).Elem(), FunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionMapInput)(nil)).Elem(), FunctionMap{})
	pulumi.RegisterOutputType(FunctionOutput{})
	pulumi.RegisterOutputType(FunctionArrayOutput{})
	pulumi.RegisterOutputType(FunctionMapOutput{})
}
