// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import splight:index/server:Server [options] splight_server.<name> <server_id>
 * ```
 */
export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splight:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * static config parameters of the routine
     */
    public readonly configs!: pulumi.Output<outputs.ServerConfig[] | undefined>;
    /**
     * optional description to add details of the resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * environment variables for the server
     */
    public readonly envVars!: pulumi.Output<outputs.ServerEnvVar[] | undefined>;
    /**
     * log level of the server
     */
    public readonly logLevel!: pulumi.Output<string | undefined>;
    /**
     * instance size
     */
    public readonly machineInstanceSize!: pulumi.Output<string | undefined>;
    /**
     * the name of the server to be created
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * id of the compute node where the server runs
     */
    public readonly node!: pulumi.Output<string | undefined>;
    /**
     * ports of the server
     */
    public readonly ports!: pulumi.Output<outputs.ServerPort[] | undefined>;
    /**
     * restart policy of the server
     */
    public readonly restartPolicy!: pulumi.Output<string | undefined>;
    /**
     * tags of the resource
     */
    public readonly tags!: pulumi.Output<outputs.ServerTag[] | undefined>;
    /**
     * [NAME-VERSION] the version of the hub server
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["envVars"] = state ? state.envVars : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["machineInstanceSize"] = state ? state.machineInstanceSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["node"] = state ? state.node : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["restartPolicy"] = state ? state.restartPolicy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["envVars"] = args ? args.envVars : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["machineInstanceSize"] = args ? args.machineInstanceSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["node"] = args ? args.node : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["restartPolicy"] = args ? args.restartPolicy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * static config parameters of the routine
     */
    configs?: pulumi.Input<pulumi.Input<inputs.ServerConfig>[]>;
    /**
     * optional description to add details of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * environment variables for the server
     */
    envVars?: pulumi.Input<pulumi.Input<inputs.ServerEnvVar>[]>;
    /**
     * log level of the server
     */
    logLevel?: pulumi.Input<string>;
    /**
     * instance size
     */
    machineInstanceSize?: pulumi.Input<string>;
    /**
     * the name of the server to be created
     */
    name?: pulumi.Input<string>;
    /**
     * id of the compute node where the server runs
     */
    node?: pulumi.Input<string>;
    /**
     * ports of the server
     */
    ports?: pulumi.Input<pulumi.Input<inputs.ServerPort>[]>;
    /**
     * restart policy of the server
     */
    restartPolicy?: pulumi.Input<string>;
    /**
     * tags of the resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ServerTag>[]>;
    /**
     * [NAME-VERSION] the version of the hub server
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * static config parameters of the routine
     */
    configs?: pulumi.Input<pulumi.Input<inputs.ServerConfig>[]>;
    /**
     * optional description to add details of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * environment variables for the server
     */
    envVars?: pulumi.Input<pulumi.Input<inputs.ServerEnvVar>[]>;
    /**
     * log level of the server
     */
    logLevel?: pulumi.Input<string>;
    /**
     * instance size
     */
    machineInstanceSize?: pulumi.Input<string>;
    /**
     * the name of the server to be created
     */
    name?: pulumi.Input<string>;
    /**
     * id of the compute node where the server runs
     */
    node?: pulumi.Input<string>;
    /**
     * ports of the server
     */
    ports?: pulumi.Input<pulumi.Input<inputs.ServerPort>[]>;
    /**
     * restart policy of the server
     */
    restartPolicy?: pulumi.Input<string>;
    /**
     * tags of the resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ServerTag>[]>;
    /**
     * [NAME-VERSION] the version of the hub server
     */
    version: pulumi.Input<string>;
}
