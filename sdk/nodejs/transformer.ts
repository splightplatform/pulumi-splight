// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import splight:index/transformer:Transformer [options] splight_transformer.<name> <transformer_id>
 * ```
 */
export class Transformer extends pulumi.CustomResource {
    /**
     * Get an existing Transformer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransformerState, opts?: pulumi.CustomResourceOptions): Transformer {
        return new Transformer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splight:index/transformer:Transformer';

    /**
     * Returns true if the given object is an instance of Transformer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Transformer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Transformer.__pulumiType;
    }

    /**
     * attribute of the resource
     */
    public /*out*/ readonly activePowerHvs!: pulumi.Output<outputs.TransformerActivePowerHv[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly activePowerLosses!: pulumi.Output<outputs.TransformerActivePowerLoss[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly activePowerLvs!: pulumi.Output<outputs.TransformerActivePowerLv[]>;
    /**
     * attribute of the resource
     */
    public readonly capacitance!: pulumi.Output<outputs.TransformerCapacitance | undefined>;
    /**
     * attribute of the resource
     */
    public readonly conductance!: pulumi.Output<outputs.TransformerConductance | undefined>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly contingencies!: pulumi.Output<outputs.TransformerContingency[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly currentHvs!: pulumi.Output<outputs.TransformerCurrentHv[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly currentLvs!: pulumi.Output<outputs.TransformerCurrentLv[]>;
    /**
     * description of the resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * geo position and shape of the resource
     */
    public readonly geometry!: pulumi.Output<string | undefined>;
    /**
     * kind of the resource
     */
    public /*out*/ readonly kinds!: pulumi.Output<outputs.TransformerKind[]>;
    /**
     * attribute of the resource
     */
    public readonly maximumAllowedCurrent!: pulumi.Output<outputs.TransformerMaximumAllowedCurrent | undefined>;
    /**
     * attribute of the resource
     */
    public readonly maximumAllowedPower!: pulumi.Output<outputs.TransformerMaximumAllowedPower | undefined>;
    /**
     * name of the resource
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * attribute of the resource
     */
    public readonly reactance!: pulumi.Output<outputs.TransformerReactance | undefined>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly reactivePowerHvs!: pulumi.Output<outputs.TransformerReactivePowerHv[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly reactivePowerLosses!: pulumi.Output<outputs.TransformerReactivePowerLoss[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly reactivePowerLvs!: pulumi.Output<outputs.TransformerReactivePowerLv[]>;
    /**
     * attribute of the resource
     */
    public readonly resistance!: pulumi.Output<outputs.TransformerResistance | undefined>;
    /**
     * attribute of the resource
     */
    public readonly safetyMarginForPower!: pulumi.Output<outputs.TransformerSafetyMarginForPower | undefined>;
    /**
     * attribute of the resource
     */
    public readonly standardType!: pulumi.Output<outputs.TransformerStandardType | undefined>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly switchStatusHvs!: pulumi.Output<outputs.TransformerSwitchStatusHv[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly switchStatusLvs!: pulumi.Output<outputs.TransformerSwitchStatusLv[]>;
    /**
     * tags of the resource
     */
    public readonly tags!: pulumi.Output<outputs.TransformerTag[] | undefined>;
    /**
     * attribute of the resource
     */
    public readonly tapPos!: pulumi.Output<outputs.TransformerTapPos | undefined>;
    /**
     * timezone that overrides location-based timezone of the resource
     */
    public readonly timezone!: pulumi.Output<string>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly voltageHvs!: pulumi.Output<outputs.TransformerVoltageHv[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly voltageLvs!: pulumi.Output<outputs.TransformerVoltageLv[]>;
    /**
     * attribute of the resource
     */
    public readonly xnOhm!: pulumi.Output<outputs.TransformerXnOhm | undefined>;

    /**
     * Create a Transformer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TransformerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransformerArgs | TransformerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransformerState | undefined;
            resourceInputs["activePowerHvs"] = state ? state.activePowerHvs : undefined;
            resourceInputs["activePowerLosses"] = state ? state.activePowerLosses : undefined;
            resourceInputs["activePowerLvs"] = state ? state.activePowerLvs : undefined;
            resourceInputs["capacitance"] = state ? state.capacitance : undefined;
            resourceInputs["conductance"] = state ? state.conductance : undefined;
            resourceInputs["contingencies"] = state ? state.contingencies : undefined;
            resourceInputs["currentHvs"] = state ? state.currentHvs : undefined;
            resourceInputs["currentLvs"] = state ? state.currentLvs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["geometry"] = state ? state.geometry : undefined;
            resourceInputs["kinds"] = state ? state.kinds : undefined;
            resourceInputs["maximumAllowedCurrent"] = state ? state.maximumAllowedCurrent : undefined;
            resourceInputs["maximumAllowedPower"] = state ? state.maximumAllowedPower : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reactance"] = state ? state.reactance : undefined;
            resourceInputs["reactivePowerHvs"] = state ? state.reactivePowerHvs : undefined;
            resourceInputs["reactivePowerLosses"] = state ? state.reactivePowerLosses : undefined;
            resourceInputs["reactivePowerLvs"] = state ? state.reactivePowerLvs : undefined;
            resourceInputs["resistance"] = state ? state.resistance : undefined;
            resourceInputs["safetyMarginForPower"] = state ? state.safetyMarginForPower : undefined;
            resourceInputs["standardType"] = state ? state.standardType : undefined;
            resourceInputs["switchStatusHvs"] = state ? state.switchStatusHvs : undefined;
            resourceInputs["switchStatusLvs"] = state ? state.switchStatusLvs : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tapPos"] = state ? state.tapPos : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["voltageHvs"] = state ? state.voltageHvs : undefined;
            resourceInputs["voltageLvs"] = state ? state.voltageLvs : undefined;
            resourceInputs["xnOhm"] = state ? state.xnOhm : undefined;
        } else {
            const args = argsOrState as TransformerArgs | undefined;
            resourceInputs["capacitance"] = args ? args.capacitance : undefined;
            resourceInputs["conductance"] = args ? args.conductance : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["geometry"] = args ? args.geometry : undefined;
            resourceInputs["maximumAllowedCurrent"] = args ? args.maximumAllowedCurrent : undefined;
            resourceInputs["maximumAllowedPower"] = args ? args.maximumAllowedPower : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reactance"] = args ? args.reactance : undefined;
            resourceInputs["resistance"] = args ? args.resistance : undefined;
            resourceInputs["safetyMarginForPower"] = args ? args.safetyMarginForPower : undefined;
            resourceInputs["standardType"] = args ? args.standardType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tapPos"] = args ? args.tapPos : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["xnOhm"] = args ? args.xnOhm : undefined;
            resourceInputs["activePowerHvs"] = undefined /*out*/;
            resourceInputs["activePowerLosses"] = undefined /*out*/;
            resourceInputs["activePowerLvs"] = undefined /*out*/;
            resourceInputs["contingencies"] = undefined /*out*/;
            resourceInputs["currentHvs"] = undefined /*out*/;
            resourceInputs["currentLvs"] = undefined /*out*/;
            resourceInputs["kinds"] = undefined /*out*/;
            resourceInputs["reactivePowerHvs"] = undefined /*out*/;
            resourceInputs["reactivePowerLosses"] = undefined /*out*/;
            resourceInputs["reactivePowerLvs"] = undefined /*out*/;
            resourceInputs["switchStatusHvs"] = undefined /*out*/;
            resourceInputs["switchStatusLvs"] = undefined /*out*/;
            resourceInputs["voltageHvs"] = undefined /*out*/;
            resourceInputs["voltageLvs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Transformer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Transformer resources.
 */
export interface TransformerState {
    /**
     * attribute of the resource
     */
    activePowerHvs?: pulumi.Input<pulumi.Input<inputs.TransformerActivePowerHv>[]>;
    /**
     * attribute of the resource
     */
    activePowerLosses?: pulumi.Input<pulumi.Input<inputs.TransformerActivePowerLoss>[]>;
    /**
     * attribute of the resource
     */
    activePowerLvs?: pulumi.Input<pulumi.Input<inputs.TransformerActivePowerLv>[]>;
    /**
     * attribute of the resource
     */
    capacitance?: pulumi.Input<inputs.TransformerCapacitance>;
    /**
     * attribute of the resource
     */
    conductance?: pulumi.Input<inputs.TransformerConductance>;
    /**
     * attribute of the resource
     */
    contingencies?: pulumi.Input<pulumi.Input<inputs.TransformerContingency>[]>;
    /**
     * attribute of the resource
     */
    currentHvs?: pulumi.Input<pulumi.Input<inputs.TransformerCurrentHv>[]>;
    /**
     * attribute of the resource
     */
    currentLvs?: pulumi.Input<pulumi.Input<inputs.TransformerCurrentLv>[]>;
    /**
     * description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * geo position and shape of the resource
     */
    geometry?: pulumi.Input<string>;
    /**
     * kind of the resource
     */
    kinds?: pulumi.Input<pulumi.Input<inputs.TransformerKind>[]>;
    /**
     * attribute of the resource
     */
    maximumAllowedCurrent?: pulumi.Input<inputs.TransformerMaximumAllowedCurrent>;
    /**
     * attribute of the resource
     */
    maximumAllowedPower?: pulumi.Input<inputs.TransformerMaximumAllowedPower>;
    /**
     * name of the resource
     */
    name?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    reactance?: pulumi.Input<inputs.TransformerReactance>;
    /**
     * attribute of the resource
     */
    reactivePowerHvs?: pulumi.Input<pulumi.Input<inputs.TransformerReactivePowerHv>[]>;
    /**
     * attribute of the resource
     */
    reactivePowerLosses?: pulumi.Input<pulumi.Input<inputs.TransformerReactivePowerLoss>[]>;
    /**
     * attribute of the resource
     */
    reactivePowerLvs?: pulumi.Input<pulumi.Input<inputs.TransformerReactivePowerLv>[]>;
    /**
     * attribute of the resource
     */
    resistance?: pulumi.Input<inputs.TransformerResistance>;
    /**
     * attribute of the resource
     */
    safetyMarginForPower?: pulumi.Input<inputs.TransformerSafetyMarginForPower>;
    /**
     * attribute of the resource
     */
    standardType?: pulumi.Input<inputs.TransformerStandardType>;
    /**
     * attribute of the resource
     */
    switchStatusHvs?: pulumi.Input<pulumi.Input<inputs.TransformerSwitchStatusHv>[]>;
    /**
     * attribute of the resource
     */
    switchStatusLvs?: pulumi.Input<pulumi.Input<inputs.TransformerSwitchStatusLv>[]>;
    /**
     * tags of the resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TransformerTag>[]>;
    /**
     * attribute of the resource
     */
    tapPos?: pulumi.Input<inputs.TransformerTapPos>;
    /**
     * timezone that overrides location-based timezone of the resource
     */
    timezone?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    voltageHvs?: pulumi.Input<pulumi.Input<inputs.TransformerVoltageHv>[]>;
    /**
     * attribute of the resource
     */
    voltageLvs?: pulumi.Input<pulumi.Input<inputs.TransformerVoltageLv>[]>;
    /**
     * attribute of the resource
     */
    xnOhm?: pulumi.Input<inputs.TransformerXnOhm>;
}

/**
 * The set of arguments for constructing a Transformer resource.
 */
export interface TransformerArgs {
    /**
     * attribute of the resource
     */
    capacitance?: pulumi.Input<inputs.TransformerCapacitance>;
    /**
     * attribute of the resource
     */
    conductance?: pulumi.Input<inputs.TransformerConductance>;
    /**
     * description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * geo position and shape of the resource
     */
    geometry?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    maximumAllowedCurrent?: pulumi.Input<inputs.TransformerMaximumAllowedCurrent>;
    /**
     * attribute of the resource
     */
    maximumAllowedPower?: pulumi.Input<inputs.TransformerMaximumAllowedPower>;
    /**
     * name of the resource
     */
    name?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    reactance?: pulumi.Input<inputs.TransformerReactance>;
    /**
     * attribute of the resource
     */
    resistance?: pulumi.Input<inputs.TransformerResistance>;
    /**
     * attribute of the resource
     */
    safetyMarginForPower?: pulumi.Input<inputs.TransformerSafetyMarginForPower>;
    /**
     * attribute of the resource
     */
    standardType?: pulumi.Input<inputs.TransformerStandardType>;
    /**
     * tags of the resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TransformerTag>[]>;
    /**
     * attribute of the resource
     */
    tapPos?: pulumi.Input<inputs.TransformerTapPos>;
    /**
     * timezone that overrides location-based timezone of the resource
     */
    timezone?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    xnOhm?: pulumi.Input<inputs.TransformerXnOhm>;
}
