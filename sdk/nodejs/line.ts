// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import splight:index/line:Line [options] splight_line.<name> <line_id>
 * ```
 */
export class Line extends pulumi.CustomResource {
    /**
     * Get an existing Line resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LineState, opts?: pulumi.CustomResourceOptions): Line {
        return new Line(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splight:index/line:Line';

    /**
     * Returns true if the given object is an instance of Line.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Line {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Line.__pulumiType;
    }

    /**
     * attribute of the resource
     */
    public readonly absorptivity!: pulumi.Output<outputs.LineAbsorptivity>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly activePowerEnds!: pulumi.Output<outputs.LineActivePowerEnd[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly activePowers!: pulumi.Output<outputs.LineActivePower[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly ampacities!: pulumi.Output<outputs.LineAmpacity[]>;
    /**
     * attribute of the resource
     */
    public readonly atmosphere!: pulumi.Output<outputs.LineAtmosphere>;
    /**
     * attribute of the resource
     */
    public readonly capacitance!: pulumi.Output<outputs.LineCapacitance>;
    /**
     * attribute of the resource
     */
    public readonly conductance!: pulumi.Output<outputs.LineConductance>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly currentRs!: pulumi.Output<outputs.LineCurrentR[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly currentS!: pulumi.Output<outputs.LineCurrent[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly currentTs!: pulumi.Output<outputs.LineCurrentT[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly currents!: pulumi.Output<outputs.LineCurrent[]>;
    /**
     * description of the resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * attribute of the resource
     */
    public readonly diameter!: pulumi.Output<outputs.LineDiameter>;
    /**
     * attribute of the resource
     */
    public readonly emissivity!: pulumi.Output<outputs.LineEmissivity>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly energies!: pulumi.Output<outputs.LineEnergy[]>;
    /**
     * geo position and shape of the resource
     */
    public readonly geometry!: pulumi.Output<string | undefined>;
    /**
     * kind of the resource
     */
    public /*out*/ readonly kinds!: pulumi.Output<outputs.LineKind[]>;
    /**
     * attribute of the resource
     */
    public readonly length!: pulumi.Output<outputs.LineLength>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly maxTemperatures!: pulumi.Output<outputs.LineMaxTemperature[]>;
    /**
     * attribute of the resource
     */
    public readonly maximumAllowedCurrent!: pulumi.Output<outputs.LineMaximumAllowedCurrent>;
    /**
     * attribute of the resource
     */
    public readonly maximumAllowedPower!: pulumi.Output<outputs.LineMaximumAllowedPower>;
    /**
     * attribute of the resource
     */
    public readonly maximumAllowedTemperature!: pulumi.Output<outputs.LineMaximumAllowedTemperature>;
    /**
     * attribute of the resource
     */
    public readonly maximumAllowedTemperatureLte!: pulumi.Output<outputs.LineMaximumAllowedTemperatureLte>;
    /**
     * attribute of the resource
     */
    public readonly maximumAllowedTemperatureSte!: pulumi.Output<outputs.LineMaximumAllowedTemperatureSte>;
    /**
     * name of the resource
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * attribute of the resource
     */
    public readonly numberOfConductors!: pulumi.Output<outputs.LineNumberOfConductors>;
    /**
     * attribute of the resource
     */
    public readonly reactance!: pulumi.Output<outputs.LineReactance>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly reactivePowers!: pulumi.Output<outputs.LineReactivePower[]>;
    /**
     * attribute of the resource
     */
    public readonly referenceResistance!: pulumi.Output<outputs.LineReferenceResistance>;
    /**
     * related assets of the resource
     */
    public readonly relatedAssets!: pulumi.Output<outputs.LineRelatedAsset[] | undefined>;
    /**
     * attribute of the resource
     */
    public readonly resistance!: pulumi.Output<outputs.LineResistance>;
    /**
     * attribute of the resource
     */
    public readonly safetyMarginForPower!: pulumi.Output<outputs.LineSafetyMarginForPower>;
    /**
     * attribute of the resource
     */
    public readonly susceptance!: pulumi.Output<outputs.LineSusceptance>;
    /**
     * tags of the resource
     */
    public readonly tags!: pulumi.Output<outputs.LineTag[] | undefined>;
    /**
     * attribute of the resource
     */
    public readonly temperatureCoeffResistance!: pulumi.Output<outputs.LineTemperatureCoeffResistance>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly voltageRs!: pulumi.Output<outputs.LineVoltageR[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly voltageSts!: pulumi.Output<outputs.LineVoltageSt[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly voltageTrs!: pulumi.Output<outputs.LineVoltageTr[]>;

    /**
     * Create a Line resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LineArgs | LineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LineState | undefined;
            resourceInputs["absorptivity"] = state ? state.absorptivity : undefined;
            resourceInputs["activePowerEnds"] = state ? state.activePowerEnds : undefined;
            resourceInputs["activePowers"] = state ? state.activePowers : undefined;
            resourceInputs["ampacities"] = state ? state.ampacities : undefined;
            resourceInputs["atmosphere"] = state ? state.atmosphere : undefined;
            resourceInputs["capacitance"] = state ? state.capacitance : undefined;
            resourceInputs["conductance"] = state ? state.conductance : undefined;
            resourceInputs["currentRs"] = state ? state.currentRs : undefined;
            resourceInputs["currentS"] = state ? state.currentS : undefined;
            resourceInputs["currentTs"] = state ? state.currentTs : undefined;
            resourceInputs["currents"] = state ? state.currents : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diameter"] = state ? state.diameter : undefined;
            resourceInputs["emissivity"] = state ? state.emissivity : undefined;
            resourceInputs["energies"] = state ? state.energies : undefined;
            resourceInputs["geometry"] = state ? state.geometry : undefined;
            resourceInputs["kinds"] = state ? state.kinds : undefined;
            resourceInputs["length"] = state ? state.length : undefined;
            resourceInputs["maxTemperatures"] = state ? state.maxTemperatures : undefined;
            resourceInputs["maximumAllowedCurrent"] = state ? state.maximumAllowedCurrent : undefined;
            resourceInputs["maximumAllowedPower"] = state ? state.maximumAllowedPower : undefined;
            resourceInputs["maximumAllowedTemperature"] = state ? state.maximumAllowedTemperature : undefined;
            resourceInputs["maximumAllowedTemperatureLte"] = state ? state.maximumAllowedTemperatureLte : undefined;
            resourceInputs["maximumAllowedTemperatureSte"] = state ? state.maximumAllowedTemperatureSte : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfConductors"] = state ? state.numberOfConductors : undefined;
            resourceInputs["reactance"] = state ? state.reactance : undefined;
            resourceInputs["reactivePowers"] = state ? state.reactivePowers : undefined;
            resourceInputs["referenceResistance"] = state ? state.referenceResistance : undefined;
            resourceInputs["relatedAssets"] = state ? state.relatedAssets : undefined;
            resourceInputs["resistance"] = state ? state.resistance : undefined;
            resourceInputs["safetyMarginForPower"] = state ? state.safetyMarginForPower : undefined;
            resourceInputs["susceptance"] = state ? state.susceptance : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["temperatureCoeffResistance"] = state ? state.temperatureCoeffResistance : undefined;
            resourceInputs["voltageRs"] = state ? state.voltageRs : undefined;
            resourceInputs["voltageSts"] = state ? state.voltageSts : undefined;
            resourceInputs["voltageTrs"] = state ? state.voltageTrs : undefined;
        } else {
            const args = argsOrState as LineArgs | undefined;
            if ((!args || args.absorptivity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'absorptivity'");
            }
            if ((!args || args.atmosphere === undefined) && !opts.urn) {
                throw new Error("Missing required property 'atmosphere'");
            }
            if ((!args || args.capacitance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacitance'");
            }
            if ((!args || args.conductance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conductance'");
            }
            if ((!args || args.diameter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diameter'");
            }
            if ((!args || args.emissivity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'emissivity'");
            }
            if ((!args || args.length === undefined) && !opts.urn) {
                throw new Error("Missing required property 'length'");
            }
            if ((!args || args.maximumAllowedCurrent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maximumAllowedCurrent'");
            }
            if ((!args || args.maximumAllowedPower === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maximumAllowedPower'");
            }
            if ((!args || args.maximumAllowedTemperature === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maximumAllowedTemperature'");
            }
            if ((!args || args.maximumAllowedTemperatureLte === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maximumAllowedTemperatureLte'");
            }
            if ((!args || args.maximumAllowedTemperatureSte === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maximumAllowedTemperatureSte'");
            }
            if ((!args || args.numberOfConductors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numberOfConductors'");
            }
            if ((!args || args.reactance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reactance'");
            }
            if ((!args || args.referenceResistance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'referenceResistance'");
            }
            if ((!args || args.resistance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resistance'");
            }
            if ((!args || args.safetyMarginForPower === undefined) && !opts.urn) {
                throw new Error("Missing required property 'safetyMarginForPower'");
            }
            if ((!args || args.susceptance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'susceptance'");
            }
            if ((!args || args.temperatureCoeffResistance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'temperatureCoeffResistance'");
            }
            resourceInputs["absorptivity"] = args ? args.absorptivity : undefined;
            resourceInputs["atmosphere"] = args ? args.atmosphere : undefined;
            resourceInputs["capacitance"] = args ? args.capacitance : undefined;
            resourceInputs["conductance"] = args ? args.conductance : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diameter"] = args ? args.diameter : undefined;
            resourceInputs["emissivity"] = args ? args.emissivity : undefined;
            resourceInputs["geometry"] = args ? args.geometry : undefined;
            resourceInputs["length"] = args ? args.length : undefined;
            resourceInputs["maximumAllowedCurrent"] = args ? args.maximumAllowedCurrent : undefined;
            resourceInputs["maximumAllowedPower"] = args ? args.maximumAllowedPower : undefined;
            resourceInputs["maximumAllowedTemperature"] = args ? args.maximumAllowedTemperature : undefined;
            resourceInputs["maximumAllowedTemperatureLte"] = args ? args.maximumAllowedTemperatureLte : undefined;
            resourceInputs["maximumAllowedTemperatureSte"] = args ? args.maximumAllowedTemperatureSte : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfConductors"] = args ? args.numberOfConductors : undefined;
            resourceInputs["reactance"] = args ? args.reactance : undefined;
            resourceInputs["referenceResistance"] = args ? args.referenceResistance : undefined;
            resourceInputs["relatedAssets"] = args ? args.relatedAssets : undefined;
            resourceInputs["resistance"] = args ? args.resistance : undefined;
            resourceInputs["safetyMarginForPower"] = args ? args.safetyMarginForPower : undefined;
            resourceInputs["susceptance"] = args ? args.susceptance : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["temperatureCoeffResistance"] = args ? args.temperatureCoeffResistance : undefined;
            resourceInputs["activePowerEnds"] = undefined /*out*/;
            resourceInputs["activePowers"] = undefined /*out*/;
            resourceInputs["ampacities"] = undefined /*out*/;
            resourceInputs["currentRs"] = undefined /*out*/;
            resourceInputs["currentS"] = undefined /*out*/;
            resourceInputs["currentTs"] = undefined /*out*/;
            resourceInputs["currents"] = undefined /*out*/;
            resourceInputs["energies"] = undefined /*out*/;
            resourceInputs["kinds"] = undefined /*out*/;
            resourceInputs["maxTemperatures"] = undefined /*out*/;
            resourceInputs["reactivePowers"] = undefined /*out*/;
            resourceInputs["voltageRs"] = undefined /*out*/;
            resourceInputs["voltageSts"] = undefined /*out*/;
            resourceInputs["voltageTrs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Line.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Line resources.
 */
export interface LineState {
    /**
     * attribute of the resource
     */
    absorptivity?: pulumi.Input<inputs.LineAbsorptivity>;
    /**
     * attribute of the resource
     */
    activePowerEnds?: pulumi.Input<pulumi.Input<inputs.LineActivePowerEnd>[]>;
    /**
     * attribute of the resource
     */
    activePowers?: pulumi.Input<pulumi.Input<inputs.LineActivePower>[]>;
    /**
     * attribute of the resource
     */
    ampacities?: pulumi.Input<pulumi.Input<inputs.LineAmpacity>[]>;
    /**
     * attribute of the resource
     */
    atmosphere?: pulumi.Input<inputs.LineAtmosphere>;
    /**
     * attribute of the resource
     */
    capacitance?: pulumi.Input<inputs.LineCapacitance>;
    /**
     * attribute of the resource
     */
    conductance?: pulumi.Input<inputs.LineConductance>;
    /**
     * attribute of the resource
     */
    currentRs?: pulumi.Input<pulumi.Input<inputs.LineCurrentR>[]>;
    /**
     * attribute of the resource
     */
    currentS?: pulumi.Input<pulumi.Input<inputs.LineCurrent>[]>;
    /**
     * attribute of the resource
     */
    currentTs?: pulumi.Input<pulumi.Input<inputs.LineCurrentT>[]>;
    /**
     * attribute of the resource
     */
    currents?: pulumi.Input<pulumi.Input<inputs.LineCurrent>[]>;
    /**
     * description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    diameter?: pulumi.Input<inputs.LineDiameter>;
    /**
     * attribute of the resource
     */
    emissivity?: pulumi.Input<inputs.LineEmissivity>;
    /**
     * attribute of the resource
     */
    energies?: pulumi.Input<pulumi.Input<inputs.LineEnergy>[]>;
    /**
     * geo position and shape of the resource
     */
    geometry?: pulumi.Input<string>;
    /**
     * kind of the resource
     */
    kinds?: pulumi.Input<pulumi.Input<inputs.LineKind>[]>;
    /**
     * attribute of the resource
     */
    length?: pulumi.Input<inputs.LineLength>;
    /**
     * attribute of the resource
     */
    maxTemperatures?: pulumi.Input<pulumi.Input<inputs.LineMaxTemperature>[]>;
    /**
     * attribute of the resource
     */
    maximumAllowedCurrent?: pulumi.Input<inputs.LineMaximumAllowedCurrent>;
    /**
     * attribute of the resource
     */
    maximumAllowedPower?: pulumi.Input<inputs.LineMaximumAllowedPower>;
    /**
     * attribute of the resource
     */
    maximumAllowedTemperature?: pulumi.Input<inputs.LineMaximumAllowedTemperature>;
    /**
     * attribute of the resource
     */
    maximumAllowedTemperatureLte?: pulumi.Input<inputs.LineMaximumAllowedTemperatureLte>;
    /**
     * attribute of the resource
     */
    maximumAllowedTemperatureSte?: pulumi.Input<inputs.LineMaximumAllowedTemperatureSte>;
    /**
     * name of the resource
     */
    name?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    numberOfConductors?: pulumi.Input<inputs.LineNumberOfConductors>;
    /**
     * attribute of the resource
     */
    reactance?: pulumi.Input<inputs.LineReactance>;
    /**
     * attribute of the resource
     */
    reactivePowers?: pulumi.Input<pulumi.Input<inputs.LineReactivePower>[]>;
    /**
     * attribute of the resource
     */
    referenceResistance?: pulumi.Input<inputs.LineReferenceResistance>;
    /**
     * related assets of the resource
     */
    relatedAssets?: pulumi.Input<pulumi.Input<inputs.LineRelatedAsset>[]>;
    /**
     * attribute of the resource
     */
    resistance?: pulumi.Input<inputs.LineResistance>;
    /**
     * attribute of the resource
     */
    safetyMarginForPower?: pulumi.Input<inputs.LineSafetyMarginForPower>;
    /**
     * attribute of the resource
     */
    susceptance?: pulumi.Input<inputs.LineSusceptance>;
    /**
     * tags of the resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LineTag>[]>;
    /**
     * attribute of the resource
     */
    temperatureCoeffResistance?: pulumi.Input<inputs.LineTemperatureCoeffResistance>;
    /**
     * attribute of the resource
     */
    voltageRs?: pulumi.Input<pulumi.Input<inputs.LineVoltageR>[]>;
    /**
     * attribute of the resource
     */
    voltageSts?: pulumi.Input<pulumi.Input<inputs.LineVoltageSt>[]>;
    /**
     * attribute of the resource
     */
    voltageTrs?: pulumi.Input<pulumi.Input<inputs.LineVoltageTr>[]>;
}

/**
 * The set of arguments for constructing a Line resource.
 */
export interface LineArgs {
    /**
     * attribute of the resource
     */
    absorptivity: pulumi.Input<inputs.LineAbsorptivity>;
    /**
     * attribute of the resource
     */
    atmosphere: pulumi.Input<inputs.LineAtmosphere>;
    /**
     * attribute of the resource
     */
    capacitance: pulumi.Input<inputs.LineCapacitance>;
    /**
     * attribute of the resource
     */
    conductance: pulumi.Input<inputs.LineConductance>;
    /**
     * description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    diameter: pulumi.Input<inputs.LineDiameter>;
    /**
     * attribute of the resource
     */
    emissivity: pulumi.Input<inputs.LineEmissivity>;
    /**
     * geo position and shape of the resource
     */
    geometry?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    length: pulumi.Input<inputs.LineLength>;
    /**
     * attribute of the resource
     */
    maximumAllowedCurrent: pulumi.Input<inputs.LineMaximumAllowedCurrent>;
    /**
     * attribute of the resource
     */
    maximumAllowedPower: pulumi.Input<inputs.LineMaximumAllowedPower>;
    /**
     * attribute of the resource
     */
    maximumAllowedTemperature: pulumi.Input<inputs.LineMaximumAllowedTemperature>;
    /**
     * attribute of the resource
     */
    maximumAllowedTemperatureLte: pulumi.Input<inputs.LineMaximumAllowedTemperatureLte>;
    /**
     * attribute of the resource
     */
    maximumAllowedTemperatureSte: pulumi.Input<inputs.LineMaximumAllowedTemperatureSte>;
    /**
     * name of the resource
     */
    name?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    numberOfConductors: pulumi.Input<inputs.LineNumberOfConductors>;
    /**
     * attribute of the resource
     */
    reactance: pulumi.Input<inputs.LineReactance>;
    /**
     * attribute of the resource
     */
    referenceResistance: pulumi.Input<inputs.LineReferenceResistance>;
    /**
     * related assets of the resource
     */
    relatedAssets?: pulumi.Input<pulumi.Input<inputs.LineRelatedAsset>[]>;
    /**
     * attribute of the resource
     */
    resistance: pulumi.Input<inputs.LineResistance>;
    /**
     * attribute of the resource
     */
    safetyMarginForPower: pulumi.Input<inputs.LineSafetyMarginForPower>;
    /**
     * attribute of the resource
     */
    susceptance: pulumi.Input<inputs.LineSusceptance>;
    /**
     * tags of the resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LineTag>[]>;
    /**
     * attribute of the resource
     */
    temperatureCoeffResistance: pulumi.Input<inputs.LineTemperatureCoeffResistance>;
}
