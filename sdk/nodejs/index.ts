// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActionArgs, ActionState } from "./action";
export type Action = import("./action").Action;
export const Action: typeof import("./action").Action = null as any;
utilities.lazyLoad(exports, ["Action"], () => require("./action"));

export { AlertArgs, AlertState } from "./alert";
export type Alert = import("./alert").Alert;
export const Alert: typeof import("./alert").Alert = null as any;
utilities.lazyLoad(exports, ["Alert"], () => require("./alert"));

export { AssetArgs, AssetState } from "./asset";
export type Asset = import("./asset").Asset;
export const Asset: typeof import("./asset").Asset = null as any;
utilities.lazyLoad(exports, ["Asset"], () => require("./asset"));

export { AssetAttributeArgs, AssetAttributeState } from "./assetAttribute";
export type AssetAttribute = import("./assetAttribute").AssetAttribute;
export const AssetAttribute: typeof import("./assetAttribute").AssetAttribute = null as any;
utilities.lazyLoad(exports, ["AssetAttribute"], () => require("./assetAttribute"));

export { AssetMetadataArgs, AssetMetadataState } from "./assetMetadata";
export type AssetMetadata = import("./assetMetadata").AssetMetadata;
export const AssetMetadata: typeof import("./assetMetadata").AssetMetadata = null as any;
utilities.lazyLoad(exports, ["AssetMetadata"], () => require("./assetMetadata"));

export { AssetRelationArgs, AssetRelationState } from "./assetRelation";
export type AssetRelation = import("./assetRelation").AssetRelation;
export const AssetRelation: typeof import("./assetRelation").AssetRelation = null as any;
utilities.lazyLoad(exports, ["AssetRelation"], () => require("./assetRelation"));

export { BusArgs, BusState } from "./bus";
export type Bus = import("./bus").Bus;
export const Bus: typeof import("./bus").Bus = null as any;
utilities.lazyLoad(exports, ["Bus"], () => require("./bus"));

export { CommandArgs, CommandState } from "./command";
export type Command = import("./command").Command;
export const Command: typeof import("./command").Command = null as any;
utilities.lazyLoad(exports, ["Command"], () => require("./command"));

export { ComponentArgs, ComponentState } from "./component";
export type Component = import("./component").Component;
export const Component: typeof import("./component").Component = null as any;
utilities.lazyLoad(exports, ["Component"], () => require("./component"));

export { ComponentRoutineArgs, ComponentRoutineState } from "./componentRoutine";
export type ComponentRoutine = import("./componentRoutine").ComponentRoutine;
export const ComponentRoutine: typeof import("./componentRoutine").ComponentRoutine = null as any;
utilities.lazyLoad(exports, ["ComponentRoutine"], () => require("./componentRoutine"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { DashboardActionlistChartArgs, DashboardActionlistChartState } from "./dashboardActionlistChart";
export type DashboardActionlistChart = import("./dashboardActionlistChart").DashboardActionlistChart;
export const DashboardActionlistChart: typeof import("./dashboardActionlistChart").DashboardActionlistChart = null as any;
utilities.lazyLoad(exports, ["DashboardActionlistChart"], () => require("./dashboardActionlistChart"));

export { DashboardAlerteventsChartArgs, DashboardAlerteventsChartState } from "./dashboardAlerteventsChart";
export type DashboardAlerteventsChart = import("./dashboardAlerteventsChart").DashboardAlerteventsChart;
export const DashboardAlerteventsChart: typeof import("./dashboardAlerteventsChart").DashboardAlerteventsChart = null as any;
utilities.lazyLoad(exports, ["DashboardAlerteventsChart"], () => require("./dashboardAlerteventsChart"));

export { DashboardAlertlistChartArgs, DashboardAlertlistChartState } from "./dashboardAlertlistChart";
export type DashboardAlertlistChart = import("./dashboardAlertlistChart").DashboardAlertlistChart;
export const DashboardAlertlistChart: typeof import("./dashboardAlertlistChart").DashboardAlertlistChart = null as any;
utilities.lazyLoad(exports, ["DashboardAlertlistChart"], () => require("./dashboardAlertlistChart"));

export { DashboardAssetlistChartArgs, DashboardAssetlistChartState } from "./dashboardAssetlistChart";
export type DashboardAssetlistChart = import("./dashboardAssetlistChart").DashboardAssetlistChart;
export const DashboardAssetlistChart: typeof import("./dashboardAssetlistChart").DashboardAssetlistChart = null as any;
utilities.lazyLoad(exports, ["DashboardAssetlistChart"], () => require("./dashboardAssetlistChart"));

export { DashboardBarChartArgs, DashboardBarChartState } from "./dashboardBarChart";
export type DashboardBarChart = import("./dashboardBarChart").DashboardBarChart;
export const DashboardBarChart: typeof import("./dashboardBarChart").DashboardBarChart = null as any;
utilities.lazyLoad(exports, ["DashboardBarChart"], () => require("./dashboardBarChart"));

export { DashboardBargaugeChartArgs, DashboardBargaugeChartState } from "./dashboardBargaugeChart";
export type DashboardBargaugeChart = import("./dashboardBargaugeChart").DashboardBargaugeChart;
export const DashboardBargaugeChart: typeof import("./dashboardBargaugeChart").DashboardBargaugeChart = null as any;
utilities.lazyLoad(exports, ["DashboardBargaugeChart"], () => require("./dashboardBargaugeChart"));

export { DashboardCommandlistChartArgs, DashboardCommandlistChartState } from "./dashboardCommandlistChart";
export type DashboardCommandlistChart = import("./dashboardCommandlistChart").DashboardCommandlistChart;
export const DashboardCommandlistChart: typeof import("./dashboardCommandlistChart").DashboardCommandlistChart = null as any;
utilities.lazyLoad(exports, ["DashboardCommandlistChart"], () => require("./dashboardCommandlistChart"));

export { DashboardGaugeChartArgs, DashboardGaugeChartState } from "./dashboardGaugeChart";
export type DashboardGaugeChart = import("./dashboardGaugeChart").DashboardGaugeChart;
export const DashboardGaugeChart: typeof import("./dashboardGaugeChart").DashboardGaugeChart = null as any;
utilities.lazyLoad(exports, ["DashboardGaugeChart"], () => require("./dashboardGaugeChart"));

export { DashboardHistogramChartArgs, DashboardHistogramChartState } from "./dashboardHistogramChart";
export type DashboardHistogramChart = import("./dashboardHistogramChart").DashboardHistogramChart;
export const DashboardHistogramChart: typeof import("./dashboardHistogramChart").DashboardHistogramChart = null as any;
utilities.lazyLoad(exports, ["DashboardHistogramChart"], () => require("./dashboardHistogramChart"));

export { DashboardImageChartArgs, DashboardImageChartState } from "./dashboardImageChart";
export type DashboardImageChart = import("./dashboardImageChart").DashboardImageChart;
export const DashboardImageChart: typeof import("./dashboardImageChart").DashboardImageChart = null as any;
utilities.lazyLoad(exports, ["DashboardImageChart"], () => require("./dashboardImageChart"));

export { DashboardStatChartArgs, DashboardStatChartState } from "./dashboardStatChart";
export type DashboardStatChart = import("./dashboardStatChart").DashboardStatChart;
export const DashboardStatChart: typeof import("./dashboardStatChart").DashboardStatChart = null as any;
utilities.lazyLoad(exports, ["DashboardStatChart"], () => require("./dashboardStatChart"));

export { DashboardTabArgs, DashboardTabState } from "./dashboardTab";
export type DashboardTab = import("./dashboardTab").DashboardTab;
export const DashboardTab: typeof import("./dashboardTab").DashboardTab = null as any;
utilities.lazyLoad(exports, ["DashboardTab"], () => require("./dashboardTab"));

export { DashboardTableChartArgs, DashboardTableChartState } from "./dashboardTableChart";
export type DashboardTableChart = import("./dashboardTableChart").DashboardTableChart;
export const DashboardTableChart: typeof import("./dashboardTableChart").DashboardTableChart = null as any;
utilities.lazyLoad(exports, ["DashboardTableChart"], () => require("./dashboardTableChart"));

export { DashboardTextChartArgs, DashboardTextChartState } from "./dashboardTextChart";
export type DashboardTextChart = import("./dashboardTextChart").DashboardTextChart;
export const DashboardTextChart: typeof import("./dashboardTextChart").DashboardTextChart = null as any;
utilities.lazyLoad(exports, ["DashboardTextChart"], () => require("./dashboardTextChart"));

export { DashboardTimeseriesChartArgs, DashboardTimeseriesChartState } from "./dashboardTimeseriesChart";
export type DashboardTimeseriesChart = import("./dashboardTimeseriesChart").DashboardTimeseriesChart;
export const DashboardTimeseriesChart: typeof import("./dashboardTimeseriesChart").DashboardTimeseriesChart = null as any;
utilities.lazyLoad(exports, ["DashboardTimeseriesChart"], () => require("./dashboardTimeseriesChart"));

export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { FileFolderArgs, FileFolderState } from "./fileFolder";
export type FileFolder = import("./fileFolder").FileFolder;
export const FileFolder: typeof import("./fileFolder").FileFolder = null as any;
utilities.lazyLoad(exports, ["FileFolder"], () => require("./fileFolder"));

export { FunctionArgs, FunctionState } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;
utilities.lazyLoad(exports, ["Function"], () => require("./function"));

export { GeneratorArgs, GeneratorState } from "./generator";
export type Generator = import("./generator").Generator;
export const Generator: typeof import("./generator").Generator = null as any;
utilities.lazyLoad(exports, ["Generator"], () => require("./generator"));

export { GetAssetKindsResult } from "./getAssetKinds";
export const getAssetKinds: typeof import("./getAssetKinds").getAssetKinds = null as any;
export const getAssetKindsOutput: typeof import("./getAssetKinds").getAssetKindsOutput = null as any;
utilities.lazyLoad(exports, ["getAssetKinds","getAssetKindsOutput"], () => require("./getAssetKinds"));

export { GetBusesResult } from "./getBuses";
export const getBuses: typeof import("./getBuses").getBuses = null as any;
export const getBusesOutput: typeof import("./getBuses").getBusesOutput = null as any;
utilities.lazyLoad(exports, ["getBuses","getBusesOutput"], () => require("./getBuses"));

export { GetGeneratorsResult } from "./getGenerators";
export const getGenerators: typeof import("./getGenerators").getGenerators = null as any;
export const getGeneratorsOutput: typeof import("./getGenerators").getGeneratorsOutput = null as any;
utilities.lazyLoad(exports, ["getGenerators","getGeneratorsOutput"], () => require("./getGenerators"));

export { GetGridsResult } from "./getGrids";
export const getGrids: typeof import("./getGrids").getGrids = null as any;
export const getGridsOutput: typeof import("./getGrids").getGridsOutput = null as any;
utilities.lazyLoad(exports, ["getGrids","getGridsOutput"], () => require("./getGrids"));

export { GetLinesResult } from "./getLines";
export const getLines: typeof import("./getLines").getLines = null as any;
export const getLinesOutput: typeof import("./getLines").getLinesOutput = null as any;
utilities.lazyLoad(exports, ["getLines","getLinesOutput"], () => require("./getLines"));

export { GetTagsResult } from "./getTags";
export const getTags: typeof import("./getTags").getTags = null as any;
export const getTagsOutput: typeof import("./getTags").getTagsOutput = null as any;
utilities.lazyLoad(exports, ["getTags","getTagsOutput"], () => require("./getTags"));

export { GridArgs, GridState } from "./grid";
export type Grid = import("./grid").Grid;
export const Grid: typeof import("./grid").Grid = null as any;
utilities.lazyLoad(exports, ["Grid"], () => require("./grid"));

export { InverterArgs, InverterState } from "./inverter";
export type Inverter = import("./inverter").Inverter;
export const Inverter: typeof import("./inverter").Inverter = null as any;
utilities.lazyLoad(exports, ["Inverter"], () => require("./inverter"));

export { LineArgs, LineState } from "./line";
export type Line = import("./line").Line;
export const Line: typeof import("./line").Line = null as any;
utilities.lazyLoad(exports, ["Line"], () => require("./line"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { SegmentArgs, SegmentState } from "./segment";
export type Segment = import("./segment").Segment;
export const Segment: typeof import("./segment").Segment = null as any;
utilities.lazyLoad(exports, ["Segment"], () => require("./segment"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "splight:index/action:Action":
                return new Action(name, <any>undefined, { urn })
            case "splight:index/alert:Alert":
                return new Alert(name, <any>undefined, { urn })
            case "splight:index/asset:Asset":
                return new Asset(name, <any>undefined, { urn })
            case "splight:index/assetAttribute:AssetAttribute":
                return new AssetAttribute(name, <any>undefined, { urn })
            case "splight:index/assetMetadata:AssetMetadata":
                return new AssetMetadata(name, <any>undefined, { urn })
            case "splight:index/assetRelation:AssetRelation":
                return new AssetRelation(name, <any>undefined, { urn })
            case "splight:index/bus:Bus":
                return new Bus(name, <any>undefined, { urn })
            case "splight:index/command:Command":
                return new Command(name, <any>undefined, { urn })
            case "splight:index/component:Component":
                return new Component(name, <any>undefined, { urn })
            case "splight:index/componentRoutine:ComponentRoutine":
                return new ComponentRoutine(name, <any>undefined, { urn })
            case "splight:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "splight:index/dashboardActionlistChart:DashboardActionlistChart":
                return new DashboardActionlistChart(name, <any>undefined, { urn })
            case "splight:index/dashboardAlerteventsChart:DashboardAlerteventsChart":
                return new DashboardAlerteventsChart(name, <any>undefined, { urn })
            case "splight:index/dashboardAlertlistChart:DashboardAlertlistChart":
                return new DashboardAlertlistChart(name, <any>undefined, { urn })
            case "splight:index/dashboardAssetlistChart:DashboardAssetlistChart":
                return new DashboardAssetlistChart(name, <any>undefined, { urn })
            case "splight:index/dashboardBarChart:DashboardBarChart":
                return new DashboardBarChart(name, <any>undefined, { urn })
            case "splight:index/dashboardBargaugeChart:DashboardBargaugeChart":
                return new DashboardBargaugeChart(name, <any>undefined, { urn })
            case "splight:index/dashboardCommandlistChart:DashboardCommandlistChart":
                return new DashboardCommandlistChart(name, <any>undefined, { urn })
            case "splight:index/dashboardGaugeChart:DashboardGaugeChart":
                return new DashboardGaugeChart(name, <any>undefined, { urn })
            case "splight:index/dashboardHistogramChart:DashboardHistogramChart":
                return new DashboardHistogramChart(name, <any>undefined, { urn })
            case "splight:index/dashboardImageChart:DashboardImageChart":
                return new DashboardImageChart(name, <any>undefined, { urn })
            case "splight:index/dashboardStatChart:DashboardStatChart":
                return new DashboardStatChart(name, <any>undefined, { urn })
            case "splight:index/dashboardTab:DashboardTab":
                return new DashboardTab(name, <any>undefined, { urn })
            case "splight:index/dashboardTableChart:DashboardTableChart":
                return new DashboardTableChart(name, <any>undefined, { urn })
            case "splight:index/dashboardTextChart:DashboardTextChart":
                return new DashboardTextChart(name, <any>undefined, { urn })
            case "splight:index/dashboardTimeseriesChart:DashboardTimeseriesChart":
                return new DashboardTimeseriesChart(name, <any>undefined, { urn })
            case "splight:index/file:File":
                return new File(name, <any>undefined, { urn })
            case "splight:index/fileFolder:FileFolder":
                return new FileFolder(name, <any>undefined, { urn })
            case "splight:index/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "splight:index/generator:Generator":
                return new Generator(name, <any>undefined, { urn })
            case "splight:index/grid:Grid":
                return new Grid(name, <any>undefined, { urn })
            case "splight:index/inverter:Inverter":
                return new Inverter(name, <any>undefined, { urn })
            case "splight:index/line:Line":
                return new Line(name, <any>undefined, { urn })
            case "splight:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "splight:index/segment:Segment":
                return new Segment(name, <any>undefined, { urn })
            case "splight:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("splight", "index/action", _module)
pulumi.runtime.registerResourceModule("splight", "index/alert", _module)
pulumi.runtime.registerResourceModule("splight", "index/asset", _module)
pulumi.runtime.registerResourceModule("splight", "index/assetAttribute", _module)
pulumi.runtime.registerResourceModule("splight", "index/assetMetadata", _module)
pulumi.runtime.registerResourceModule("splight", "index/assetRelation", _module)
pulumi.runtime.registerResourceModule("splight", "index/bus", _module)
pulumi.runtime.registerResourceModule("splight", "index/command", _module)
pulumi.runtime.registerResourceModule("splight", "index/component", _module)
pulumi.runtime.registerResourceModule("splight", "index/componentRoutine", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardActionlistChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardAlerteventsChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardAlertlistChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardAssetlistChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardBarChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardBargaugeChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardCommandlistChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardGaugeChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardHistogramChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardImageChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardStatChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardTab", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardTableChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardTextChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardTimeseriesChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/file", _module)
pulumi.runtime.registerResourceModule("splight", "index/fileFolder", _module)
pulumi.runtime.registerResourceModule("splight", "index/function", _module)
pulumi.runtime.registerResourceModule("splight", "index/generator", _module)
pulumi.runtime.registerResourceModule("splight", "index/grid", _module)
pulumi.runtime.registerResourceModule("splight", "index/inverter", _module)
pulumi.runtime.registerResourceModule("splight", "index/line", _module)
pulumi.runtime.registerResourceModule("splight", "index/secret", _module)
pulumi.runtime.registerResourceModule("splight", "index/segment", _module)
pulumi.runtime.registerResourceModule("splight", "index/tag", _module)
pulumi.runtime.registerResourcePackage("splight", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:splight") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
