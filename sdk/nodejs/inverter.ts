// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import splight:index/inverter:Inverter [options] splight_inverter.<name> <inverter_id>
 * ```
 */
export class Inverter extends pulumi.CustomResource {
    /**
     * Get an existing Inverter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InverterState, opts?: pulumi.CustomResourceOptions): Inverter {
        return new Inverter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splight:index/inverter:Inverter';

    /**
     * Returns true if the given object is an instance of Inverter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Inverter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Inverter.__pulumiType;
    }

    /**
     * attribute of the resource
     */
    public /*out*/ readonly accumulatedEnergies!: pulumi.Output<outputs.InverterAccumulatedEnergy[]>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly activePowers!: pulumi.Output<outputs.InverterActivePower[]>;
    /**
     * custom timezone to use instead of the one computed from the geo-location
     */
    public readonly customTimezone!: pulumi.Output<string | undefined>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly dailyEnergies!: pulumi.Output<outputs.InverterDailyEnergy[]>;
    /**
     * description of the resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * attribute of the resource
     */
    public readonly energyMeasurementType!: pulumi.Output<outputs.InverterEnergyMeasurementType | undefined>;
    /**
     * geo position and shape of the resource
     */
    public readonly geometry!: pulumi.Output<string | undefined>;
    /**
     * kind of the resource
     */
    public /*out*/ readonly kinds!: pulumi.Output<outputs.InverterKind[]>;
    /**
     * attribute of the resource
     */
    public readonly make!: pulumi.Output<outputs.InverterMake | undefined>;
    /**
     * attribute of the resource
     */
    public readonly maxActivePower!: pulumi.Output<outputs.InverterMaxActivePower | undefined>;
    /**
     * attribute of the resource
     */
    public readonly model!: pulumi.Output<outputs.InverterModel | undefined>;
    /**
     * name of the resource
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly rawDailyEnergies!: pulumi.Output<outputs.InverterRawDailyEnergy[]>;
    /**
     * attribute of the resource
     */
    public readonly serialNumber!: pulumi.Output<outputs.InverterSerialNumber | undefined>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly switchStatuses!: pulumi.Output<outputs.InverterSwitchStatus[]>;
    /**
     * tags of the resource
     */
    public readonly tags!: pulumi.Output<outputs.InverterTag[] | undefined>;
    /**
     * attribute of the resource
     */
    public /*out*/ readonly temperatures!: pulumi.Output<outputs.InverterTemperature[]>;
    /**
     * timezone of the resource (set by the geo-location)
     */
    public /*out*/ readonly timezone!: pulumi.Output<string>;

    /**
     * Create a Inverter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: InverterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InverterArgs | InverterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InverterState | undefined;
            resourceInputs["accumulatedEnergies"] = state ? state.accumulatedEnergies : undefined;
            resourceInputs["activePowers"] = state ? state.activePowers : undefined;
            resourceInputs["customTimezone"] = state ? state.customTimezone : undefined;
            resourceInputs["dailyEnergies"] = state ? state.dailyEnergies : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["energyMeasurementType"] = state ? state.energyMeasurementType : undefined;
            resourceInputs["geometry"] = state ? state.geometry : undefined;
            resourceInputs["kinds"] = state ? state.kinds : undefined;
            resourceInputs["make"] = state ? state.make : undefined;
            resourceInputs["maxActivePower"] = state ? state.maxActivePower : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rawDailyEnergies"] = state ? state.rawDailyEnergies : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["switchStatuses"] = state ? state.switchStatuses : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["temperatures"] = state ? state.temperatures : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as InverterArgs | undefined;
            resourceInputs["customTimezone"] = args ? args.customTimezone : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["energyMeasurementType"] = args ? args.energyMeasurementType : undefined;
            resourceInputs["geometry"] = args ? args.geometry : undefined;
            resourceInputs["make"] = args ? args.make : undefined;
            resourceInputs["maxActivePower"] = args ? args.maxActivePower : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serialNumber"] = args ? args.serialNumber : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["accumulatedEnergies"] = undefined /*out*/;
            resourceInputs["activePowers"] = undefined /*out*/;
            resourceInputs["dailyEnergies"] = undefined /*out*/;
            resourceInputs["kinds"] = undefined /*out*/;
            resourceInputs["rawDailyEnergies"] = undefined /*out*/;
            resourceInputs["switchStatuses"] = undefined /*out*/;
            resourceInputs["temperatures"] = undefined /*out*/;
            resourceInputs["timezone"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Inverter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Inverter resources.
 */
export interface InverterState {
    /**
     * attribute of the resource
     */
    accumulatedEnergies?: pulumi.Input<pulumi.Input<inputs.InverterAccumulatedEnergy>[]>;
    /**
     * attribute of the resource
     */
    activePowers?: pulumi.Input<pulumi.Input<inputs.InverterActivePower>[]>;
    /**
     * custom timezone to use instead of the one computed from the geo-location
     */
    customTimezone?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    dailyEnergies?: pulumi.Input<pulumi.Input<inputs.InverterDailyEnergy>[]>;
    /**
     * description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    energyMeasurementType?: pulumi.Input<inputs.InverterEnergyMeasurementType>;
    /**
     * geo position and shape of the resource
     */
    geometry?: pulumi.Input<string>;
    /**
     * kind of the resource
     */
    kinds?: pulumi.Input<pulumi.Input<inputs.InverterKind>[]>;
    /**
     * attribute of the resource
     */
    make?: pulumi.Input<inputs.InverterMake>;
    /**
     * attribute of the resource
     */
    maxActivePower?: pulumi.Input<inputs.InverterMaxActivePower>;
    /**
     * attribute of the resource
     */
    model?: pulumi.Input<inputs.InverterModel>;
    /**
     * name of the resource
     */
    name?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    rawDailyEnergies?: pulumi.Input<pulumi.Input<inputs.InverterRawDailyEnergy>[]>;
    /**
     * attribute of the resource
     */
    serialNumber?: pulumi.Input<inputs.InverterSerialNumber>;
    /**
     * attribute of the resource
     */
    switchStatuses?: pulumi.Input<pulumi.Input<inputs.InverterSwitchStatus>[]>;
    /**
     * tags of the resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.InverterTag>[]>;
    /**
     * attribute of the resource
     */
    temperatures?: pulumi.Input<pulumi.Input<inputs.InverterTemperature>[]>;
    /**
     * timezone of the resource (set by the geo-location)
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Inverter resource.
 */
export interface InverterArgs {
    /**
     * custom timezone to use instead of the one computed from the geo-location
     */
    customTimezone?: pulumi.Input<string>;
    /**
     * description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    energyMeasurementType?: pulumi.Input<inputs.InverterEnergyMeasurementType>;
    /**
     * geo position and shape of the resource
     */
    geometry?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    make?: pulumi.Input<inputs.InverterMake>;
    /**
     * attribute of the resource
     */
    maxActivePower?: pulumi.Input<inputs.InverterMaxActivePower>;
    /**
     * attribute of the resource
     */
    model?: pulumi.Input<inputs.InverterModel>;
    /**
     * name of the resource
     */
    name?: pulumi.Input<string>;
    /**
     * attribute of the resource
     */
    serialNumber?: pulumi.Input<inputs.InverterSerialNumber>;
    /**
     * tags of the resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.InverterTag>[]>;
}
