// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AssetRelation extends pulumi.CustomResource {
    /**
     * Get an existing AssetRelation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssetRelationState, opts?: pulumi.CustomResourceOptions): AssetRelation {
        return new AssetRelation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splight:index/assetRelation:AssetRelation';

    /**
     * Returns true if the given object is an instance of AssetRelation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssetRelation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssetRelation.__pulumiType;
    }

    /**
     * asset where the relation origins
     */
    public readonly asset!: pulumi.Output<outputs.AssetRelationAsset>;
    /**
     * relation description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * relation name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * target asset of the relation
     */
    public readonly relatedAsset!: pulumi.Output<outputs.AssetRelationRelatedAsset>;
    /**
     * kind of the target relation asset
     */
    public readonly relatedAssetKind!: pulumi.Output<outputs.AssetRelationRelatedAssetKind>;

    /**
     * Create a AssetRelation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssetRelationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AssetRelationArgs | AssetRelationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AssetRelationState | undefined;
            resourceInputs["asset"] = state ? state.asset : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["relatedAsset"] = state ? state.relatedAsset : undefined;
            resourceInputs["relatedAssetKind"] = state ? state.relatedAssetKind : undefined;
        } else {
            const args = argsOrState as AssetRelationArgs | undefined;
            if ((!args || args.asset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'asset'");
            }
            if ((!args || args.relatedAsset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'relatedAsset'");
            }
            if ((!args || args.relatedAssetKind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'relatedAssetKind'");
            }
            resourceInputs["asset"] = args ? args.asset : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["relatedAsset"] = args ? args.relatedAsset : undefined;
            resourceInputs["relatedAssetKind"] = args ? args.relatedAssetKind : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AssetRelation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AssetRelation resources.
 */
export interface AssetRelationState {
    /**
     * asset where the relation origins
     */
    asset?: pulumi.Input<inputs.AssetRelationAsset>;
    /**
     * relation description
     */
    description?: pulumi.Input<string>;
    /**
     * relation name
     */
    name?: pulumi.Input<string>;
    /**
     * target asset of the relation
     */
    relatedAsset?: pulumi.Input<inputs.AssetRelationRelatedAsset>;
    /**
     * kind of the target relation asset
     */
    relatedAssetKind?: pulumi.Input<inputs.AssetRelationRelatedAssetKind>;
}

/**
 * The set of arguments for constructing a AssetRelation resource.
 */
export interface AssetRelationArgs {
    /**
     * asset where the relation origins
     */
    asset: pulumi.Input<inputs.AssetRelationAsset>;
    /**
     * relation description
     */
    description?: pulumi.Input<string>;
    /**
     * relation name
     */
    name?: pulumi.Input<string>;
    /**
     * target asset of the relation
     */
    relatedAsset: pulumi.Input<inputs.AssetRelationRelatedAsset>;
    /**
     * kind of the target relation asset
     */
    relatedAssetKind: pulumi.Input<inputs.AssetRelationRelatedAssetKind>;
}
