// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Splight.Splight
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import splight:index/generator:Generator [options] splight_generator.&lt;name&gt; &lt;generator_id&gt;
    /// ```
    /// </summary>
    [SplightResourceType("splight:index/generator:Generator")]
    public partial class Generator : global::Pulumi.CustomResource
    {
        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("activePowers")]
        public Output<ImmutableArray<Outputs.GeneratorActivePower>> ActivePowers { get; private set; } = null!;

        /// <summary>
        /// custom timezone to use instead of the one computed from the geo-location
        /// </summary>
        [Output("customTimezone")]
        public Output<string?> CustomTimezone { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("dailyEmissionAvoideds")]
        public Output<ImmutableArray<Outputs.GeneratorDailyEmissionAvoided>> DailyEmissionAvoideds { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("dailyEnergies")]
        public Output<ImmutableArray<Outputs.GeneratorDailyEnergy>> DailyEnergies { get; private set; } = null!;

        /// <summary>
        /// description of the resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// geo position and shape of the resource
        /// </summary>
        [Output("geometry")]
        public Output<string?> Geometry { get; private set; } = null!;

        /// <summary>
        /// kind of the resource
        /// </summary>
        [Output("kinds")]
        public Output<ImmutableArray<Outputs.GeneratorKind>> Kinds { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("monthlyEnergies")]
        public Output<ImmutableArray<Outputs.GeneratorMonthlyEnergy>> MonthlyEnergies { get; private set; } = null!;

        /// <summary>
        /// name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("reactivePowers")]
        public Output<ImmutableArray<Outputs.GeneratorReactivePower>> ReactivePowers { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("switchStatuses")]
        public Output<ImmutableArray<Outputs.GeneratorSwitchStatus>> SwitchStatuses { get; private set; } = null!;

        /// <summary>
        /// tags of the resource
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.GeneratorTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// timezone of the resource (set by the geo-location)
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a Generator resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Generator(string name, GeneratorArgs? args = null, CustomResourceOptions? options = null)
            : base("splight:index/generator:Generator", name, args ?? new GeneratorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Generator(string name, Input<string> id, GeneratorState? state = null, CustomResourceOptions? options = null)
            : base("splight:index/generator:Generator", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/splightplatform",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Generator resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Generator Get(string name, Input<string> id, GeneratorState? state = null, CustomResourceOptions? options = null)
        {
            return new Generator(name, id, state, options);
        }
    }

    public sealed class GeneratorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// custom timezone to use instead of the one computed from the geo-location
        /// </summary>
        [Input("customTimezone")]
        public Input<string>? CustomTimezone { get; set; }

        /// <summary>
        /// description of the resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// geo position and shape of the resource
        /// </summary>
        [Input("geometry")]
        public Input<string>? Geometry { get; set; }

        /// <summary>
        /// name of the resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<Inputs.GeneratorTagArgs>? _tags;

        /// <summary>
        /// tags of the resource
        /// </summary>
        public InputList<Inputs.GeneratorTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GeneratorTagArgs>());
            set => _tags = value;
        }

        public GeneratorArgs()
        {
        }
        public static new GeneratorArgs Empty => new GeneratorArgs();
    }

    public sealed class GeneratorState : global::Pulumi.ResourceArgs
    {
        [Input("activePowers")]
        private InputList<Inputs.GeneratorActivePowerGetArgs>? _activePowers;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        public InputList<Inputs.GeneratorActivePowerGetArgs> ActivePowers
        {
            get => _activePowers ?? (_activePowers = new InputList<Inputs.GeneratorActivePowerGetArgs>());
            set => _activePowers = value;
        }

        /// <summary>
        /// custom timezone to use instead of the one computed from the geo-location
        /// </summary>
        [Input("customTimezone")]
        public Input<string>? CustomTimezone { get; set; }

        [Input("dailyEmissionAvoideds")]
        private InputList<Inputs.GeneratorDailyEmissionAvoidedGetArgs>? _dailyEmissionAvoideds;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        public InputList<Inputs.GeneratorDailyEmissionAvoidedGetArgs> DailyEmissionAvoideds
        {
            get => _dailyEmissionAvoideds ?? (_dailyEmissionAvoideds = new InputList<Inputs.GeneratorDailyEmissionAvoidedGetArgs>());
            set => _dailyEmissionAvoideds = value;
        }

        [Input("dailyEnergies")]
        private InputList<Inputs.GeneratorDailyEnergyGetArgs>? _dailyEnergies;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        public InputList<Inputs.GeneratorDailyEnergyGetArgs> DailyEnergies
        {
            get => _dailyEnergies ?? (_dailyEnergies = new InputList<Inputs.GeneratorDailyEnergyGetArgs>());
            set => _dailyEnergies = value;
        }

        /// <summary>
        /// description of the resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// geo position and shape of the resource
        /// </summary>
        [Input("geometry")]
        public Input<string>? Geometry { get; set; }

        [Input("kinds")]
        private InputList<Inputs.GeneratorKindGetArgs>? _kinds;

        /// <summary>
        /// kind of the resource
        /// </summary>
        public InputList<Inputs.GeneratorKindGetArgs> Kinds
        {
            get => _kinds ?? (_kinds = new InputList<Inputs.GeneratorKindGetArgs>());
            set => _kinds = value;
        }

        [Input("monthlyEnergies")]
        private InputList<Inputs.GeneratorMonthlyEnergyGetArgs>? _monthlyEnergies;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        public InputList<Inputs.GeneratorMonthlyEnergyGetArgs> MonthlyEnergies
        {
            get => _monthlyEnergies ?? (_monthlyEnergies = new InputList<Inputs.GeneratorMonthlyEnergyGetArgs>());
            set => _monthlyEnergies = value;
        }

        /// <summary>
        /// name of the resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("reactivePowers")]
        private InputList<Inputs.GeneratorReactivePowerGetArgs>? _reactivePowers;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        public InputList<Inputs.GeneratorReactivePowerGetArgs> ReactivePowers
        {
            get => _reactivePowers ?? (_reactivePowers = new InputList<Inputs.GeneratorReactivePowerGetArgs>());
            set => _reactivePowers = value;
        }

        [Input("switchStatuses")]
        private InputList<Inputs.GeneratorSwitchStatusGetArgs>? _switchStatuses;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        public InputList<Inputs.GeneratorSwitchStatusGetArgs> SwitchStatuses
        {
            get => _switchStatuses ?? (_switchStatuses = new InputList<Inputs.GeneratorSwitchStatusGetArgs>());
            set => _switchStatuses = value;
        }

        [Input("tags")]
        private InputList<Inputs.GeneratorTagGetArgs>? _tags;

        /// <summary>
        /// tags of the resource
        /// </summary>
        public InputList<Inputs.GeneratorTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GeneratorTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// timezone of the resource (set by the geo-location)
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public GeneratorState()
        {
        }
        public static new GeneratorState Empty => new GeneratorState();
    }
}
