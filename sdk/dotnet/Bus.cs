// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Splight.Splight
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import splight:index/bus:Bus [options] splight_bus.&lt;name&gt; &lt;bus_id&gt;
    /// ```
    /// </summary>
    [SplightResourceType("splight:index/bus:Bus")]
    public partial class Bus : global::Pulumi.CustomResource
    {
        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("activePowers")]
        public Output<ImmutableArray<Outputs.BusActivePower>> ActivePowers { get; private set; } = null!;

        /// <summary>
        /// description of the resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// geo position and shape of the resource
        /// </summary>
        [Output("geometry")]
        public Output<string?> Geometry { get; private set; } = null!;

        /// <summary>
        /// kind of the resource
        /// </summary>
        [Output("kinds")]
        public Output<ImmutableArray<Outputs.BusKind>> Kinds { get; private set; } = null!;

        /// <summary>
        /// name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("nominalVoltageKv")]
        public Output<Outputs.BusNominalVoltageKv> NominalVoltageKv { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("reactivePowers")]
        public Output<ImmutableArray<Outputs.BusReactivePower>> ReactivePowers { get; private set; } = null!;

        /// <summary>
        /// tags of the resource
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.BusTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// timezone that overrides location-based timezone of the resource
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a Bus resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Bus(string name, BusArgs? args = null, CustomResourceOptions? options = null)
            : base("splight:index/bus:Bus", name, args ?? new BusArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Bus(string name, Input<string> id, BusState? state = null, CustomResourceOptions? options = null)
            : base("splight:index/bus:Bus", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/splightplatform",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Bus resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Bus Get(string name, Input<string> id, BusState? state = null, CustomResourceOptions? options = null)
        {
            return new Bus(name, id, state, options);
        }
    }

    public sealed class BusArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// description of the resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// geo position and shape of the resource
        /// </summary>
        [Input("geometry")]
        public Input<string>? Geometry { get; set; }

        /// <summary>
        /// name of the resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Input("nominalVoltageKv")]
        public Input<Inputs.BusNominalVoltageKvArgs>? NominalVoltageKv { get; set; }

        [Input("tags")]
        private InputList<Inputs.BusTagArgs>? _tags;

        /// <summary>
        /// tags of the resource
        /// </summary>
        public InputList<Inputs.BusTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.BusTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// timezone that overrides location-based timezone of the resource
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public BusArgs()
        {
        }
        public static new BusArgs Empty => new BusArgs();
    }

    public sealed class BusState : global::Pulumi.ResourceArgs
    {
        [Input("activePowers")]
        private InputList<Inputs.BusActivePowerGetArgs>? _activePowers;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        public InputList<Inputs.BusActivePowerGetArgs> ActivePowers
        {
            get => _activePowers ?? (_activePowers = new InputList<Inputs.BusActivePowerGetArgs>());
            set => _activePowers = value;
        }

        /// <summary>
        /// description of the resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// geo position and shape of the resource
        /// </summary>
        [Input("geometry")]
        public Input<string>? Geometry { get; set; }

        [Input("kinds")]
        private InputList<Inputs.BusKindGetArgs>? _kinds;

        /// <summary>
        /// kind of the resource
        /// </summary>
        public InputList<Inputs.BusKindGetArgs> Kinds
        {
            get => _kinds ?? (_kinds = new InputList<Inputs.BusKindGetArgs>());
            set => _kinds = value;
        }

        /// <summary>
        /// name of the resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Input("nominalVoltageKv")]
        public Input<Inputs.BusNominalVoltageKvGetArgs>? NominalVoltageKv { get; set; }

        [Input("reactivePowers")]
        private InputList<Inputs.BusReactivePowerGetArgs>? _reactivePowers;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        public InputList<Inputs.BusReactivePowerGetArgs> ReactivePowers
        {
            get => _reactivePowers ?? (_reactivePowers = new InputList<Inputs.BusReactivePowerGetArgs>());
            set => _reactivePowers = value;
        }

        [Input("tags")]
        private InputList<Inputs.BusTagGetArgs>? _tags;

        /// <summary>
        /// tags of the resource
        /// </summary>
        public InputList<Inputs.BusTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.BusTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// timezone that overrides location-based timezone of the resource
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public BusState()
        {
        }
        public static new BusState Empty => new BusState();
    }
}
