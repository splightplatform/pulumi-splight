// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Splight.Splight
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import splight:index/segment:Segment [options] splight_segment.&lt;name&gt; &lt;segment_id&gt;
    /// ```
    /// </summary>
    [SplightResourceType("splight:index/segment:Segment")]
    public partial class Segment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("altitude")]
        public Output<Outputs.SegmentAltitude> Altitude { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("azimuth")]
        public Output<Outputs.SegmentAzimuth> Azimuth { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("cumulativeDistance")]
        public Output<Outputs.SegmentCumulativeDistance> CumulativeDistance { get; private set; } = null!;

        /// <summary>
        /// description of the resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// geo position and shape of the resource
        /// </summary>
        [Output("geometry")]
        public Output<string?> Geometry { get; private set; } = null!;

        /// <summary>
        /// kind of the resource
        /// </summary>
        [Output("kinds")]
        public Output<ImmutableArray<Outputs.SegmentKind>> Kinds { get; private set; } = null!;

        /// <summary>
        /// name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// related assets of the resource
        /// </summary>
        [Output("relatedAssets")]
        public Output<ImmutableArray<Outputs.SegmentRelatedAsset>> RelatedAssets { get; private set; } = null!;

        /// <summary>
        /// tags of the resource
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.SegmentTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("temperatures")]
        public Output<ImmutableArray<Outputs.SegmentTemperature>> Temperatures { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("windDirections")]
        public Output<ImmutableArray<Outputs.SegmentWindDirection>> WindDirections { get; private set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Output("windSpeeds")]
        public Output<ImmutableArray<Outputs.SegmentWindSpeed>> WindSpeeds { get; private set; } = null!;


        /// <summary>
        /// Create a Segment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Segment(string name, SegmentArgs args, CustomResourceOptions? options = null)
            : base("splight:index/segment:Segment", name, args ?? new SegmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Segment(string name, Input<string> id, SegmentState? state = null, CustomResourceOptions? options = null)
            : base("splight:index/segment:Segment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/splightplatform",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Segment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Segment Get(string name, Input<string> id, SegmentState? state = null, CustomResourceOptions? options = null)
        {
            return new Segment(name, id, state, options);
        }
    }

    public sealed class SegmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Input("altitude", required: true)]
        public Input<Inputs.SegmentAltitudeArgs> Altitude { get; set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Input("azimuth", required: true)]
        public Input<Inputs.SegmentAzimuthArgs> Azimuth { get; set; } = null!;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Input("cumulativeDistance", required: true)]
        public Input<Inputs.SegmentCumulativeDistanceArgs> CumulativeDistance { get; set; } = null!;

        /// <summary>
        /// description of the resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// geo position and shape of the resource
        /// </summary>
        [Input("geometry")]
        public Input<string>? Geometry { get; set; }

        /// <summary>
        /// name of the resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("relatedAssets")]
        private InputList<Inputs.SegmentRelatedAssetArgs>? _relatedAssets;

        /// <summary>
        /// related assets of the resource
        /// </summary>
        public InputList<Inputs.SegmentRelatedAssetArgs> RelatedAssets
        {
            get => _relatedAssets ?? (_relatedAssets = new InputList<Inputs.SegmentRelatedAssetArgs>());
            set => _relatedAssets = value;
        }

        [Input("tags")]
        private InputList<Inputs.SegmentTagArgs>? _tags;

        /// <summary>
        /// tags of the resource
        /// </summary>
        public InputList<Inputs.SegmentTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.SegmentTagArgs>());
            set => _tags = value;
        }

        public SegmentArgs()
        {
        }
        public static new SegmentArgs Empty => new SegmentArgs();
    }

    public sealed class SegmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Input("altitude")]
        public Input<Inputs.SegmentAltitudeGetArgs>? Altitude { get; set; }

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Input("azimuth")]
        public Input<Inputs.SegmentAzimuthGetArgs>? Azimuth { get; set; }

        /// <summary>
        /// attribute of the resource
        /// </summary>
        [Input("cumulativeDistance")]
        public Input<Inputs.SegmentCumulativeDistanceGetArgs>? CumulativeDistance { get; set; }

        /// <summary>
        /// description of the resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// geo position and shape of the resource
        /// </summary>
        [Input("geometry")]
        public Input<string>? Geometry { get; set; }

        [Input("kinds")]
        private InputList<Inputs.SegmentKindGetArgs>? _kinds;

        /// <summary>
        /// kind of the resource
        /// </summary>
        public InputList<Inputs.SegmentKindGetArgs> Kinds
        {
            get => _kinds ?? (_kinds = new InputList<Inputs.SegmentKindGetArgs>());
            set => _kinds = value;
        }

        /// <summary>
        /// name of the resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("relatedAssets")]
        private InputList<Inputs.SegmentRelatedAssetGetArgs>? _relatedAssets;

        /// <summary>
        /// related assets of the resource
        /// </summary>
        public InputList<Inputs.SegmentRelatedAssetGetArgs> RelatedAssets
        {
            get => _relatedAssets ?? (_relatedAssets = new InputList<Inputs.SegmentRelatedAssetGetArgs>());
            set => _relatedAssets = value;
        }

        [Input("tags")]
        private InputList<Inputs.SegmentTagGetArgs>? _tags;

        /// <summary>
        /// tags of the resource
        /// </summary>
        public InputList<Inputs.SegmentTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.SegmentTagGetArgs>());
            set => _tags = value;
        }

        [Input("temperatures")]
        private InputList<Inputs.SegmentTemperatureGetArgs>? _temperatures;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        public InputList<Inputs.SegmentTemperatureGetArgs> Temperatures
        {
            get => _temperatures ?? (_temperatures = new InputList<Inputs.SegmentTemperatureGetArgs>());
            set => _temperatures = value;
        }

        [Input("windDirections")]
        private InputList<Inputs.SegmentWindDirectionGetArgs>? _windDirections;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        public InputList<Inputs.SegmentWindDirectionGetArgs> WindDirections
        {
            get => _windDirections ?? (_windDirections = new InputList<Inputs.SegmentWindDirectionGetArgs>());
            set => _windDirections = value;
        }

        [Input("windSpeeds")]
        private InputList<Inputs.SegmentWindSpeedGetArgs>? _windSpeeds;

        /// <summary>
        /// attribute of the resource
        /// </summary>
        public InputList<Inputs.SegmentWindSpeedGetArgs> WindSpeeds
        {
            get => _windSpeeds ?? (_windSpeeds = new InputList<Inputs.SegmentWindSpeedGetArgs>());
            set => _windSpeeds = value;
        }

        public SegmentState()
        {
        }
        public static new SegmentState Empty => new SegmentState();
    }
}
