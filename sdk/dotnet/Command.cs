// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Splight.Splight
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Splight = Splight.Splight;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myAsset = new Splight.Asset("myAsset", new()
    ///     {
    ///         Description = "My Asset Description",
    ///         CustomTimezone = "America/Los_Angeles",
    ///         Geometry = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["type"] = "GeometryCollection",
    ///             ["geometries"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "Point",
    ///                     ["coordinates"] = new[]
    ///                     {
    ///                         0,
    ///                         0,
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var myAttribute = new Splight.AssetAttribute("myAttribute", new()
    ///     {
    ///         Type = "Number",
    ///         Unit = "meters",
    ///         Asset = myAsset.Id,
    ///     });
    /// 
    ///     var myAction = new Splight.Action("myAction", new()
    ///     {
    ///         Asset = new Splight.Inputs.ActionAssetArgs
    ///         {
    ///             Id = myAsset.Id,
    ///             Name = myAsset.Name,
    ///         },
    ///         Setpoints = new[]
    ///         {
    ///             new Splight.Inputs.ActionSetpointArgs
    ///             {
    ///                 Value = JsonSerializer.Serialize(1),
    ///                 Attribute = new Splight.Inputs.ActionSetpointAttributeArgs
    ///                 {
    ///                     Id = myAttribute.Id,
    ///                     Name = myAttribute.Name,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var myCommand = new Splight.Command("myCommand", new()
    ///     {
    ///         Actions = new[]
    ///         {
    ///             new Splight.Inputs.CommandActionArgs
    ///             {
    ///                 Id = myAction.Id,
    ///                 Name = myAction.Name,
    ///                 Asset = new Splight.Inputs.CommandActionAssetArgs
    ///                 {
    ///                     Id = myAsset.Id,
    ///                     Name = myAsset.Name,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import splight:index/command:Command [options] splight_command.&lt;name&gt; &lt;command_id&gt;
    /// ```
    /// </summary>
    [SplightResourceType("splight:index/command:Command")]
    public partial class Command : global::Pulumi.CustomResource
    {
        /// <summary>
        /// command actions
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<Outputs.CommandAction>> Actions { get; private set; } = null!;

        /// <summary>
        /// the description of the command to be created
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// the name of the command to be created
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Command resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Command(string name, CommandArgs args, CustomResourceOptions? options = null)
            : base("splight:index/command:Command", name, args ?? new CommandArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Command(string name, Input<string> id, CommandState? state = null, CustomResourceOptions? options = null)
            : base("splight:index/command:Command", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/splightplatform",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Command resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Command Get(string name, Input<string> id, CommandState? state = null, CustomResourceOptions? options = null)
        {
            return new Command(name, id, state, options);
        }
    }

    public sealed class CommandArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions", required: true)]
        private InputList<Inputs.CommandActionArgs>? _actions;

        /// <summary>
        /// command actions
        /// </summary>
        public InputList<Inputs.CommandActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.CommandActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// the description of the command to be created
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// the name of the command to be created
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public CommandArgs()
        {
        }
        public static new CommandArgs Empty => new CommandArgs();
    }

    public sealed class CommandState : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.CommandActionGetArgs>? _actions;

        /// <summary>
        /// command actions
        /// </summary>
        public InputList<Inputs.CommandActionGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.CommandActionGetArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// the description of the command to be created
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// the name of the command to be created
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public CommandState()
        {
        }
        public static new CommandState Empty => new CommandState();
    }
}
