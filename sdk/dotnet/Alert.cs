// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Splight.Splight
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Splight = Splight.Splight;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myAsset = new Splight.Asset("myAsset", new()
    ///     {
    ///         Description = "My Asset Description",
    ///         Geometry = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["type"] = "GeometryCollection",
    ///             ["geometries"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "Point",
    ///                     ["coordinates"] = new[]
    ///                     {
    ///                         0,
    ///                         0,
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var myAttribute = new Splight.AssetAttribute("myAttribute", new()
    ///     {
    ///         Type = "Number",
    ///         Asset = myAsset.Id,
    ///     });
    /// 
    ///     var myAlert = new Splight.Alert("myAlert", new()
    ///     {
    ///         Description = "My Alert Description",
    ///         Type = "rate",
    ///         RateUnit = "minute",
    ///         RateValue = 10,
    ///         TimeWindow = 3600,
    ///         Thresholds = new[]
    ///         {
    ///             new Splight.Inputs.AlertThresholdArgs
    ///             {
    ///                 Value = 1,
    ///                 Status = "alert",
    ///                 StatusText = "Some warning!",
    ///             },
    ///         },
    ///         Severity = "sev1",
    ///         Operator = "lt",
    ///         Aggregation = "max",
    ///         TargetVariable = "A",
    ///         AlertItems = new[]
    ///         {
    ///             new Splight.Inputs.AlertAlertItemArgs
    ///             {
    ///                 RefId = "A",
    ///                 Type = "QUERY",
    ///                 Expression = "",
    ///                 ExpressionPlain = "",
    ///                 QueryFilterAsset = new Splight.Inputs.AlertAlertItemQueryFilterAssetArgs
    ///                 {
    ///                     Id = myAsset.Id,
    ///                     Name = myAsset.Name,
    ///                 },
    ///                 QueryFilterAttribute = new Splight.Inputs.AlertAlertItemQueryFilterAttributeArgs
    ///                 {
    ///                     Id = myAttribute.Id,
    ///                     Name = myAttribute.Name,
    ///                 },
    ///                 QueryGroupFunction = "avg",
    ///                 QueryGroupUnit = "day",
    ///                 QueryPlain = Output.JsonSerialize(Output.Create(new[]
    ///                 {
    ///                     new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["$match"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["asset"] = myAsset.Id,
    ///                             ["attribute"] = myAttribute.Id,
    ///                         },
    ///                     },
    ///                 })),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import splight:index/alert:Alert [options] splight_alert.&lt;name&gt; &lt;alert_id&gt;
    /// ```
    /// </summary>
    [SplightResourceType("splight:index/alert:Alert")]
    public partial class Alert : global::Pulumi.CustomResource
    {
        /// <summary>
        /// aggregation to be applied to reads before comparisson
        /// </summary>
        [Output("aggregation")]
        public Output<string> Aggregation { get; private set; } = null!;

        /// <summary>
        /// traces to be used to compute the results
        /// </summary>
        [Output("alertItems")]
        public Output<ImmutableArray<Outputs.AlertAlertItem>> AlertItems { get; private set; } = null!;

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronDom")]
        public Output<int> CronDom { get; private set; } = null!;

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronDow")]
        public Output<int> CronDow { get; private set; } = null!;

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronHours")]
        public Output<int> CronHours { get; private set; } = null!;

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronMinutes")]
        public Output<int> CronMinutes { get; private set; } = null!;

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronMonth")]
        public Output<int> CronMonth { get; private set; } = null!;

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronYear")]
        public Output<int> CronYear { get; private set; } = null!;

        /// <summary>
        /// The description of the resource
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// operator to be used to compare the read value with the threshold value
        /// </summary>
        [Output("operator")]
        public Output<string> Operator { get; private set; } = null!;

        /// <summary>
        /// [day|hour|minute] schedule unit
        /// </summary>
        [Output("rateUnit")]
        public Output<string> RateUnit { get; private set; } = null!;

        /// <summary>
        /// schedule value
        /// </summary>
        [Output("rateValue")]
        public Output<int> RateValue { get; private set; } = null!;

        /// <summary>
        /// related assets to be linked. In case one of these alerts triggers it will be reflected on each of these assets.
        /// </summary>
        [Output("relatedAssets")]
        public Output<ImmutableArray<string>> RelatedAssets { get; private set; } = null!;

        /// <summary>
        /// [sev1,...,sev8] severity for the alert
        /// </summary>
        [Output("severity")]
        public Output<string> Severity { get; private set; } = null!;

        /// <summary>
        /// variable to be used to compare with thresholds
        /// </summary>
        [Output("targetVariable")]
        public Output<string> TargetVariable { get; private set; } = null!;

        [Output("thresholds")]
        public Output<ImmutableArray<Outputs.AlertThreshold>> Thresholds { get; private set; } = null!;

        /// <summary>
        /// window to fetch data from. Data out of that window will not be considered for evaluation
        /// </summary>
        [Output("timeWindow")]
        public Output<int> TimeWindow { get; private set; } = null!;

        /// <summary>
        /// [cron|rate] type for the cron
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Alert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Alert(string name, AlertArgs args, CustomResourceOptions? options = null)
            : base("splight:index/alert:Alert", name, args ?? new AlertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Alert(string name, Input<string> id, AlertState? state = null, CustomResourceOptions? options = null)
            : base("splight:index/alert:Alert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/splightplatform",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Alert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Alert Get(string name, Input<string> id, AlertState? state = null, CustomResourceOptions? options = null)
        {
            return new Alert(name, id, state, options);
        }
    }

    public sealed class AlertArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// aggregation to be applied to reads before comparisson
        /// </summary>
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("alertItems", required: true)]
        private InputList<Inputs.AlertAlertItemArgs>? _alertItems;

        /// <summary>
        /// traces to be used to compute the results
        /// </summary>
        public InputList<Inputs.AlertAlertItemArgs> AlertItems
        {
            get => _alertItems ?? (_alertItems = new InputList<Inputs.AlertAlertItemArgs>());
            set => _alertItems = value;
        }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronDom")]
        public Input<int>? CronDom { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronDow")]
        public Input<int>? CronDow { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronHours")]
        public Input<int>? CronHours { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronMinutes")]
        public Input<int>? CronMinutes { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronMonth")]
        public Input<int>? CronMonth { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronYear")]
        public Input<int>? CronYear { get; set; }

        /// <summary>
        /// The description of the resource
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// operator to be used to compare the read value with the threshold value
        /// </summary>
        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        /// <summary>
        /// [day|hour|minute] schedule unit
        /// </summary>
        [Input("rateUnit")]
        public Input<string>? RateUnit { get; set; }

        /// <summary>
        /// schedule value
        /// </summary>
        [Input("rateValue")]
        public Input<int>? RateValue { get; set; }

        [Input("relatedAssets")]
        private InputList<string>? _relatedAssets;

        /// <summary>
        /// related assets to be linked. In case one of these alerts triggers it will be reflected on each of these assets.
        /// </summary>
        public InputList<string> RelatedAssets
        {
            get => _relatedAssets ?? (_relatedAssets = new InputList<string>());
            set => _relatedAssets = value;
        }

        /// <summary>
        /// [sev1,...,sev8] severity for the alert
        /// </summary>
        [Input("severity", required: true)]
        public Input<string> Severity { get; set; } = null!;

        /// <summary>
        /// variable to be used to compare with thresholds
        /// </summary>
        [Input("targetVariable", required: true)]
        public Input<string> TargetVariable { get; set; } = null!;

        [Input("thresholds", required: true)]
        private InputList<Inputs.AlertThresholdArgs>? _thresholds;
        public InputList<Inputs.AlertThresholdArgs> Thresholds
        {
            get => _thresholds ?? (_thresholds = new InputList<Inputs.AlertThresholdArgs>());
            set => _thresholds = value;
        }

        /// <summary>
        /// window to fetch data from. Data out of that window will not be considered for evaluation
        /// </summary>
        [Input("timeWindow", required: true)]
        public Input<int> TimeWindow { get; set; } = null!;

        /// <summary>
        /// [cron|rate] type for the cron
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public AlertArgs()
        {
        }
        public static new AlertArgs Empty => new AlertArgs();
    }

    public sealed class AlertState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// aggregation to be applied to reads before comparisson
        /// </summary>
        [Input("aggregation")]
        public Input<string>? Aggregation { get; set; }

        [Input("alertItems")]
        private InputList<Inputs.AlertAlertItemGetArgs>? _alertItems;

        /// <summary>
        /// traces to be used to compute the results
        /// </summary>
        public InputList<Inputs.AlertAlertItemGetArgs> AlertItems
        {
            get => _alertItems ?? (_alertItems = new InputList<Inputs.AlertAlertItemGetArgs>());
            set => _alertItems = value;
        }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronDom")]
        public Input<int>? CronDom { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronDow")]
        public Input<int>? CronDow { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronHours")]
        public Input<int>? CronHours { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronMinutes")]
        public Input<int>? CronMinutes { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronMonth")]
        public Input<int>? CronMonth { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronYear")]
        public Input<int>? CronYear { get; set; }

        /// <summary>
        /// The description of the resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// operator to be used to compare the read value with the threshold value
        /// </summary>
        [Input("operator")]
        public Input<string>? Operator { get; set; }

        /// <summary>
        /// [day|hour|minute] schedule unit
        /// </summary>
        [Input("rateUnit")]
        public Input<string>? RateUnit { get; set; }

        /// <summary>
        /// schedule value
        /// </summary>
        [Input("rateValue")]
        public Input<int>? RateValue { get; set; }

        [Input("relatedAssets")]
        private InputList<string>? _relatedAssets;

        /// <summary>
        /// related assets to be linked. In case one of these alerts triggers it will be reflected on each of these assets.
        /// </summary>
        public InputList<string> RelatedAssets
        {
            get => _relatedAssets ?? (_relatedAssets = new InputList<string>());
            set => _relatedAssets = value;
        }

        /// <summary>
        /// [sev1,...,sev8] severity for the alert
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        /// <summary>
        /// variable to be used to compare with thresholds
        /// </summary>
        [Input("targetVariable")]
        public Input<string>? TargetVariable { get; set; }

        [Input("thresholds")]
        private InputList<Inputs.AlertThresholdGetArgs>? _thresholds;
        public InputList<Inputs.AlertThresholdGetArgs> Thresholds
        {
            get => _thresholds ?? (_thresholds = new InputList<Inputs.AlertThresholdGetArgs>());
            set => _thresholds = value;
        }

        /// <summary>
        /// window to fetch data from. Data out of that window will not be considered for evaluation
        /// </summary>
        [Input("timeWindow")]
        public Input<int>? TimeWindow { get; set; }

        /// <summary>
        /// [cron|rate] type for the cron
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AlertState()
        {
        }
        public static new AlertState Empty => new AlertState();
    }
}
