// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Splight.Splight
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Splight = Splight.Splight;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myAsset = new Splight.Asset("myAsset", new()
    ///     {
    ///         Description = "My Asset Description",
    ///         Geometry = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["type"] = "GeometryCollection",
    ///             ["geometries"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "Point",
    ///                     ["coordinates"] = new[]
    ///                     {
    ///                         0,
    ///                         0,
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var myAttribute = new Splight.AssetAttribute("myAttribute", new()
    ///     {
    ///         Type = "Number",
    ///         Asset = myAsset.Id,
    ///     });
    /// 
    ///     var myTargetAsset = new Splight.Asset("myTargetAsset", new()
    ///     {
    ///         Description = "My Target Asset Description",
    ///         Geometry = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["type"] = "GeometryCollection",
    ///             ["geometries"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "Point",
    ///                     ["coordinates"] = new[]
    ///                     {
    ///                         0,
    ///                         0,
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var myTargetAttribute = new Splight.AssetAttribute("myTargetAttribute", new()
    ///     {
    ///         Type = "Number",
    ///         Asset = myTargetAsset.Id,
    ///     });
    /// 
    ///     var functionTest = new Splight.Function("functionTest", new()
    ///     {
    ///         Description = "My Function Description",
    ///         Type = "rate",
    ///         RateUnit = "minute",
    ///         RateValue = 10,
    ///         TimeWindow = 3600 * 12,
    ///         TargetVariable = "B",
    ///         TargetAsset = new Splight.Inputs.FunctionTargetAssetArgs
    ///         {
    ///             Id = myTargetAsset.Id,
    ///             Name = myTargetAsset.Name,
    ///         },
    ///         TargetAttribute = new Splight.Inputs.FunctionTargetAttributeArgs
    ///         {
    ///             Id = myTargetAttribute.Id,
    ///             Name = myTargetAttribute.Name,
    ///         },
    ///         FunctionItems = new[]
    ///         {
    ///             new Splight.Inputs.FunctionFunctionItemArgs
    ///             {
    ///                 RefId = "A",
    ///                 Type = "QUERY",
    ///                 Expression = "",
    ///                 ExpressionPlain = "",
    ///                 QueryFilterAsset = new Splight.Inputs.FunctionFunctionItemQueryFilterAssetArgs
    ///                 {
    ///                     Id = myAsset.Id,
    ///                     Name = myAsset.Name,
    ///                 },
    ///                 QueryFilterAttribute = new Splight.Inputs.FunctionFunctionItemQueryFilterAttributeArgs
    ///                 {
    ///                     Id = myAttribute.Id,
    ///                     Name = myAttribute.Name,
    ///                 },
    ///                 QueryPlain = Output.JsonSerialize(Output.Create(new[]
    ///                 {
    ///                     new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["$match"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["asset"] = myAsset.Id,
    ///                             ["attribute"] = myAttribute.Id,
    ///                         },
    ///                     },
    ///                 })),
    ///             },
    ///             new Splight.Inputs.FunctionFunctionItemArgs
    ///             {
    ///                 RefId = "B",
    ///                 Type = "EXPRESSION",
    ///                 Expression = "A * 2",
    ///                 ExpressionPlain = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["$function"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["body"] = "function () { return A * 2 }",
    ///                         ["args"] = new[]
    ///                         {
    ///                         },
    ///                         ["lang"] = "js",
    ///                     },
    ///                 }),
    ///                 QueryFilterAsset = null,
    ///                 QueryFilterAttribute = null,
    ///                 QueryPlain = "",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import splight:index/function:Function [options] splight_function.&lt;name&gt; &lt;function_id&gt;
    /// ```
    /// </summary>
    [SplightResourceType("splight:index/function:Function")]
    public partial class Function : global::Pulumi.CustomResource
    {
        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronDom")]
        public Output<int> CronDom { get; private set; } = null!;

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronDow")]
        public Output<int> CronDow { get; private set; } = null!;

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronHours")]
        public Output<int> CronHours { get; private set; } = null!;

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronMinutes")]
        public Output<int> CronMinutes { get; private set; } = null!;

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronMonth")]
        public Output<int> CronMonth { get; private set; } = null!;

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Output("cronYear")]
        public Output<int> CronYear { get; private set; } = null!;

        /// <summary>
        /// The description of the resource
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// traces to be used to compute the results
        /// </summary>
        [Output("functionItems")]
        public Output<ImmutableArray<Outputs.FunctionFunctionItem>> FunctionItems { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// [day|hour|minute] schedule unit
        /// </summary>
        [Output("rateUnit")]
        public Output<string> RateUnit { get; private set; } = null!;

        /// <summary>
        /// schedule value
        /// </summary>
        [Output("rateValue")]
        public Output<int> RateValue { get; private set; } = null!;

        /// <summary>
        /// Asset/Attribute filter
        /// </summary>
        [Output("targetAsset")]
        public Output<Outputs.FunctionTargetAsset> TargetAsset { get; private set; } = null!;

        /// <summary>
        /// Asset/Attribute filter
        /// </summary>
        [Output("targetAttribute")]
        public Output<Outputs.FunctionTargetAttribute> TargetAttribute { get; private set; } = null!;

        /// <summary>
        /// variable to be considered to be ingested
        /// </summary>
        [Output("targetVariable")]
        public Output<string> TargetVariable { get; private set; } = null!;

        /// <summary>
        /// window to fetch data from. Data out of that window will not be considered for evaluation
        /// </summary>
        [Output("timeWindow")]
        public Output<int> TimeWindow { get; private set; } = null!;

        /// <summary>
        /// [cron|rate] type for the cron
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Function resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Function(string name, FunctionArgs args, CustomResourceOptions? options = null)
            : base("splight:index/function:Function", name, args ?? new FunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Function(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
            : base("splight:index/function:Function", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/splightplatform",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Function resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Function Get(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
        {
            return new Function(name, id, state, options);
        }
    }

    public sealed class FunctionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronDom")]
        public Input<int>? CronDom { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronDow")]
        public Input<int>? CronDow { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronHours")]
        public Input<int>? CronHours { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronMinutes")]
        public Input<int>? CronMinutes { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronMonth")]
        public Input<int>? CronMonth { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronYear")]
        public Input<int>? CronYear { get; set; }

        /// <summary>
        /// The description of the resource
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("functionItems", required: true)]
        private InputList<Inputs.FunctionFunctionItemArgs>? _functionItems;

        /// <summary>
        /// traces to be used to compute the results
        /// </summary>
        public InputList<Inputs.FunctionFunctionItemArgs> FunctionItems
        {
            get => _functionItems ?? (_functionItems = new InputList<Inputs.FunctionFunctionItemArgs>());
            set => _functionItems = value;
        }

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [day|hour|minute] schedule unit
        /// </summary>
        [Input("rateUnit")]
        public Input<string>? RateUnit { get; set; }

        /// <summary>
        /// schedule value
        /// </summary>
        [Input("rateValue")]
        public Input<int>? RateValue { get; set; }

        /// <summary>
        /// Asset/Attribute filter
        /// </summary>
        [Input("targetAsset", required: true)]
        public Input<Inputs.FunctionTargetAssetArgs> TargetAsset { get; set; } = null!;

        /// <summary>
        /// Asset/Attribute filter
        /// </summary>
        [Input("targetAttribute", required: true)]
        public Input<Inputs.FunctionTargetAttributeArgs> TargetAttribute { get; set; } = null!;

        /// <summary>
        /// variable to be considered to be ingested
        /// </summary>
        [Input("targetVariable", required: true)]
        public Input<string> TargetVariable { get; set; } = null!;

        /// <summary>
        /// window to fetch data from. Data out of that window will not be considered for evaluation
        /// </summary>
        [Input("timeWindow", required: true)]
        public Input<int> TimeWindow { get; set; } = null!;

        /// <summary>
        /// [cron|rate] type for the cron
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public FunctionArgs()
        {
        }
        public static new FunctionArgs Empty => new FunctionArgs();
    }

    public sealed class FunctionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronDom")]
        public Input<int>? CronDom { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronDow")]
        public Input<int>? CronDow { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronHours")]
        public Input<int>? CronHours { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronMinutes")]
        public Input<int>? CronMinutes { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronMonth")]
        public Input<int>? CronMonth { get; set; }

        /// <summary>
        /// schedule value for cron
        /// </summary>
        [Input("cronYear")]
        public Input<int>? CronYear { get; set; }

        /// <summary>
        /// The description of the resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("functionItems")]
        private InputList<Inputs.FunctionFunctionItemGetArgs>? _functionItems;

        /// <summary>
        /// traces to be used to compute the results
        /// </summary>
        public InputList<Inputs.FunctionFunctionItemGetArgs> FunctionItems
        {
            get => _functionItems ?? (_functionItems = new InputList<Inputs.FunctionFunctionItemGetArgs>());
            set => _functionItems = value;
        }

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [day|hour|minute] schedule unit
        /// </summary>
        [Input("rateUnit")]
        public Input<string>? RateUnit { get; set; }

        /// <summary>
        /// schedule value
        /// </summary>
        [Input("rateValue")]
        public Input<int>? RateValue { get; set; }

        /// <summary>
        /// Asset/Attribute filter
        /// </summary>
        [Input("targetAsset")]
        public Input<Inputs.FunctionTargetAssetGetArgs>? TargetAsset { get; set; }

        /// <summary>
        /// Asset/Attribute filter
        /// </summary>
        [Input("targetAttribute")]
        public Input<Inputs.FunctionTargetAttributeGetArgs>? TargetAttribute { get; set; }

        /// <summary>
        /// variable to be considered to be ingested
        /// </summary>
        [Input("targetVariable")]
        public Input<string>? TargetVariable { get; set; }

        /// <summary>
        /// window to fetch data from. Data out of that window will not be considered for evaluation
        /// </summary>
        [Input("timeWindow")]
        public Input<int>? TimeWindow { get; set; }

        /// <summary>
        /// [cron|rate] type for the cron
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public FunctionState()
        {
        }
        public static new FunctionState Empty => new FunctionState();
    }
}
