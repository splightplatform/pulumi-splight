// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Splight.Splight
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import splight:index/assetRelation:AssetRelation [options] splight_relation.&lt;name&gt; &lt;relation_id&gt;
    /// ```
    /// </summary>
    [SplightResourceType("splight:index/assetRelation:AssetRelation")]
    public partial class AssetRelation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// asset where the relation origins
        /// </summary>
        [Output("asset")]
        public Output<Outputs.AssetRelationAsset> Asset { get; private set; } = null!;

        /// <summary>
        /// relation description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// relation name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// target asset of the relation
        /// </summary>
        [Output("relatedAsset")]
        public Output<Outputs.AssetRelationRelatedAsset?> RelatedAsset { get; private set; } = null!;

        /// <summary>
        /// kind of the target relation asset
        /// </summary>
        [Output("relatedAssetKind")]
        public Output<Outputs.AssetRelationRelatedAssetKind> RelatedAssetKind { get; private set; } = null!;


        /// <summary>
        /// Create a AssetRelation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AssetRelation(string name, AssetRelationArgs args, CustomResourceOptions? options = null)
            : base("splight:index/assetRelation:AssetRelation", name, args ?? new AssetRelationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AssetRelation(string name, Input<string> id, AssetRelationState? state = null, CustomResourceOptions? options = null)
            : base("splight:index/assetRelation:AssetRelation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/splightplatform",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AssetRelation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AssetRelation Get(string name, Input<string> id, AssetRelationState? state = null, CustomResourceOptions? options = null)
        {
            return new AssetRelation(name, id, state, options);
        }
    }

    public sealed class AssetRelationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// asset where the relation origins
        /// </summary>
        [Input("asset", required: true)]
        public Input<Inputs.AssetRelationAssetArgs> Asset { get; set; } = null!;

        /// <summary>
        /// relation description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// relation name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// target asset of the relation
        /// </summary>
        [Input("relatedAsset")]
        public Input<Inputs.AssetRelationRelatedAssetArgs>? RelatedAsset { get; set; }

        /// <summary>
        /// kind of the target relation asset
        /// </summary>
        [Input("relatedAssetKind", required: true)]
        public Input<Inputs.AssetRelationRelatedAssetKindArgs> RelatedAssetKind { get; set; } = null!;

        public AssetRelationArgs()
        {
        }
        public static new AssetRelationArgs Empty => new AssetRelationArgs();
    }

    public sealed class AssetRelationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// asset where the relation origins
        /// </summary>
        [Input("asset")]
        public Input<Inputs.AssetRelationAssetGetArgs>? Asset { get; set; }

        /// <summary>
        /// relation description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// relation name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// target asset of the relation
        /// </summary>
        [Input("relatedAsset")]
        public Input<Inputs.AssetRelationRelatedAssetGetArgs>? RelatedAsset { get; set; }

        /// <summary>
        /// kind of the target relation asset
        /// </summary>
        [Input("relatedAssetKind")]
        public Input<Inputs.AssetRelationRelatedAssetKindGetArgs>? RelatedAssetKind { get; set; }

        public AssetRelationState()
        {
        }
        public static new AssetRelationState Empty => new AssetRelationState();
    }
}
