{
    "name": "splight",
    "description": "A Pulumi package for creating and managing Splight resources.",
    "keywords": [
        "splightplatform",
        "splight",
        "infrastructure"
    ],
    "homepage": "https://www.splight-ai.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`splight` Terraform Provider](https://github.com/splightplatform/terraform-provider-splight).",
    "repository": "https://github.com/splightplatform/pulumi-splight",
    "logoUrl": "https://raw.githubusercontent.com/splightplatform/pulumi-splight/main/docs/logo.png",
    "pluginDownloadURL": "github://api.github.com/splightplatform",
    "publisher": "splightplatform",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Splight",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/splightplatform/pulumi-splight/sdk/go/splight",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageName": "@splightplatform/pulumi-splight",
            "packageDescription": "A Pulumi package for creating and managing Splight resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/splightplatform/terraform-provider-splight)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-splight` repo](https://github.com/splightplatform/pulumi-splight/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-splight` repo](https://github.com/splightplatform/terraform-provider-splight/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "pulumi_splight",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/splightplatform/terraform-provider-splight)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-splight` repo](https://github.com/splightplatform/pulumi-splight/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-splight` repo](https://github.com/splightplatform/terraform-provider-splight/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "hostname": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        }
    },
    "types": {
        "splight:index/AlertAlertItem:AlertAlertItem": {
            "properties": {
                "expressionPlain": {
                    "type": "string"
                },
                "queryPlain": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "expressionPlain",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/AlertThreshold:AlertThreshold": {
            "properties": {
                "status": {
                    "type": "string",
                    "description": "[alert|warning|no_alert] status value for the threshold\n"
                },
                "statusText": {
                    "type": "string",
                    "description": "optional custom value to be displayed in the platform.\n"
                },
                "value": {
                    "type": "number",
                    "description": "value to be considered to compare\n"
                }
            },
            "type": "object",
            "required": [
                "status",
                "value"
            ]
        },
        "splight:index/AssetKind:AssetKind": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "kind id\n"
                },
                "name": {
                    "type": "string",
                    "description": "kind name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/ComponentInput:ComponentInput": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "sensitive": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "splight:index/ComponentRoutineConfig:ComponentRoutineConfig": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "sensitive": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "splight:index/ComponentRoutineInput:ComponentRoutineInput": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "sensitive": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "valueType": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineInputValue:ComponentRoutineInputValue"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "valueType"
            ]
        },
        "splight:index/ComponentRoutineInputValue:ComponentRoutineInputValue": {
            "properties": {
                "asset": {
                    "type": "string"
                },
                "attribute": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "asset",
                "attribute"
            ]
        },
        "splight:index/ComponentRoutineOutput:ComponentRoutineOutput": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "sensitive": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "valueType": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineOutputValue:ComponentRoutineOutputValue"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "valueType"
            ]
        },
        "splight:index/ComponentRoutineOutputValue:ComponentRoutineOutputValue": {
            "properties": {
                "asset": {
                    "type": "string"
                },
                "attribute": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "asset",
                "attribute"
            ]
        },
        "splight:index/DashboardChartChartItem:DashboardChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardChartChartItemQueryFilterAsset:DashboardChartChartItemQueryFilterAsset",
                    "description": "asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardChartChartItemQueryFilterAttribute:DashboardChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardChartChartItemQueryFilterAsset:DashboardChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/DashboardChartChartItemQueryFilterAttribute:DashboardChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/DashboardChartThreshold:DashboardChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardChartValueMapping:DashboardChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/FunctionFunctionItem:FunctionFunctionItem": {
            "properties": {
                "expressionPlain": {
                    "type": "string"
                },
                "queryPlain": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "expressionPlain",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/getAssetKindsKind:getAssetKindsKind": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the splight package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "hostname": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        },
        "inputProperties": {
            "hostname": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        }
    },
    "resources": {
        "splight:index/alert:Alert": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst alertTest = new splight.Alert(\"alertTest\", {\n    description: \"Created with Terraform\",\n    type: \"rate\",\n    rateUnit: \"minute\",\n    rateValue: 10,\n    timeWindow: 600,\n    thresholds: [{\n        value: 4,\n        status: \"no_alert\",\n        statusText: \"CustomStatusText\",\n    }],\n    severity: \"sev8\",\n    operator: \"gt\",\n    aggregation: \"avg\",\n    targetVariable: \"A\",\n    alertItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"1234-1234-1234-1234\",\n                    attribute: \"1234-1234-1234-1234\",\n                },\n            }]),\n        },\n        {\n            refId: \"B\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"1234-1234-1234-1234\",\n                    attribute: \"1234-1234-1234-1234\",\n                },\n            }]),\n        },\n    ],\n    relatedAssets: [\"1234-1234-1234-1234\"],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nalert_test = splight.Alert(\"alertTest\",\n    description=\"Created with Terraform\",\n    type=\"rate\",\n    rate_unit=\"minute\",\n    rate_value=10,\n    time_window=600,\n    thresholds=[splight.AlertThresholdArgs(\n        value=4,\n        status=\"no_alert\",\n        status_text=\"CustomStatusText\",\n    )],\n    severity=\"sev8\",\n    operator=\"gt\",\n    aggregation=\"avg\",\n    target_variable=\"A\",\n    alert_items=[\n        splight.AlertAlertItemArgs(\n            ref_id=\"A\",\n            type=\"QUERY\",\n            expression_plain=\"\",\n            query_plain=json.dumps([{\n                \"$match\": {\n                    \"asset\": \"1234-1234-1234-1234\",\n                    \"attribute\": \"1234-1234-1234-1234\",\n                },\n            }]),\n        ),\n        splight.AlertAlertItemArgs(\n            ref_id=\"B\",\n            type=\"QUERY\",\n            expression_plain=\"\",\n            query_plain=json.dumps([{\n                \"$match\": {\n                    \"asset\": \"1234-1234-1234-1234\",\n                    \"attribute\": \"1234-1234-1234-1234\",\n                },\n            }]),\n        ),\n    ],\n    related_assets=[\"1234-1234-1234-1234\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var alertTest = new Splight.Alert(\"alertTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Type = \"rate\",\n        RateUnit = \"minute\",\n        RateValue = 10,\n        TimeWindow = 600,\n        Thresholds = new[]\n        {\n            new Splight.Inputs.AlertThresholdArgs\n            {\n                Value = 4,\n                Status = \"no_alert\",\n                StatusText = \"CustomStatusText\",\n            },\n        },\n        Severity = \"sev8\",\n        Operator = \"gt\",\n        Aggregation = \"avg\",\n        TargetVariable = \"A\",\n        AlertItems = new[]\n        {\n            new Splight.Inputs.AlertAlertItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryPlain = JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"1234-1234-1234-1234\",\n                            [\"attribute\"] = \"1234-1234-1234-1234\",\n                        },\n                    },\n                }),\n            },\n            new Splight.Inputs.AlertAlertItemArgs\n            {\n                RefId = \"B\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryPlain = JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"1234-1234-1234-1234\",\n                            [\"attribute\"] = \"1234-1234-1234-1234\",\n                        },\n                    },\n                }),\n            },\n        },\n        RelatedAssets = new[]\n        {\n            \"1234-1234-1234-1234\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\"asset\":     \"1234-1234-1234-1234\",\n\t\t\t\t\t\"attribute\": \"1234-1234-1234-1234\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\"asset\":     \"1234-1234-1234-1234\",\n\t\t\t\t\t\"attribute\": \"1234-1234-1234-1234\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = splight.NewAlert(ctx, \"alertTest\", \u0026splight.AlertArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tType:        pulumi.String(\"rate\"),\n\t\t\tRateUnit:    pulumi.String(\"minute\"),\n\t\t\tRateValue:   pulumi.Int(10),\n\t\t\tTimeWindow:  pulumi.Int(600),\n\t\t\tThresholds: splight.AlertThresholdArray{\n\t\t\t\t\u0026splight.AlertThresholdArgs{\n\t\t\t\t\tValue:      pulumi.Float64(4),\n\t\t\t\t\tStatus:     pulumi.String(\"no_alert\"),\n\t\t\t\t\tStatusText: pulumi.String(\"CustomStatusText\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSeverity:       pulumi.String(\"sev8\"),\n\t\t\tOperator:       pulumi.String(\"gt\"),\n\t\t\tAggregation:    pulumi.String(\"avg\"),\n\t\t\tTargetVariable: pulumi.String(\"A\"),\n\t\t\tAlertItems: splight.AlertAlertItemArray{\n\t\t\t\t\u0026splight.AlertAlertItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryPlain:      pulumi.String(json0),\n\t\t\t\t},\n\t\t\t\t\u0026splight.AlertAlertItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryPlain:      pulumi.String(json1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRelatedAssets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"1234-1234-1234-1234\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Alert;\nimport com.pulumi.splight.AlertArgs;\nimport com.pulumi.splight.inputs.AlertThresholdArgs;\nimport com.pulumi.splight.inputs.AlertAlertItemArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var alertTest = new Alert(\"alertTest\", AlertArgs.builder()\n            .description(\"Created with Terraform\")\n            .type(\"rate\")\n            .rateUnit(\"minute\")\n            .rateValue(10)\n            .timeWindow(600)\n            .thresholds(AlertThresholdArgs.builder()\n                .value(4)\n                .status(\"no_alert\")\n                .statusText(\"CustomStatusText\")\n                .build())\n            .severity(\"sev8\")\n            .operator(\"gt\")\n            .aggregation(\"avg\")\n            .targetVariable(\"A\")\n            .alertItems(            \n                AlertAlertItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryPlain(serializeJson(\n                        jsonArray(jsonObject(\n                            jsonProperty(\"$match\", jsonObject(\n                                jsonProperty(\"asset\", \"1234-1234-1234-1234\"),\n                                jsonProperty(\"attribute\", \"1234-1234-1234-1234\")\n                            ))\n                        ))))\n                    .build(),\n                AlertAlertItemArgs.builder()\n                    .refId(\"B\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryPlain(serializeJson(\n                        jsonArray(jsonObject(\n                            jsonProperty(\"$match\", jsonObject(\n                                jsonProperty(\"asset\", \"1234-1234-1234-1234\"),\n                                jsonProperty(\"attribute\", \"1234-1234-1234-1234\")\n                            ))\n                        ))))\n                    .build())\n            .relatedAssets(\"1234-1234-1234-1234\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  alertTest:\n    type: splight:Alert\n    properties:\n      description: Created with Terraform\n      type: rate\n      rateUnit: minute\n      rateValue: 10\n      timeWindow: 600\n      thresholds:\n        - value: 4\n          status: no_alert\n          statusText: CustomStatusText\n      severity: sev8\n      operator: gt\n      aggregation: avg\n      targetVariable: A\n      alertItems:\n        - refId: A\n          type: QUERY\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 1234-1234-1234-1234\n                  attribute: 1234-1234-1234-1234\n        - refId: B\n          type: QUERY\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 1234-1234-1234-1234\n                  attribute: 1234-1234-1234-1234\n      relatedAssets:\n        - 1234-1234-1234-1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/alert:Alert [options] splight_alert.\u003cname\u003e \u003calert_id\u003e\n```\n\n",
            "properties": {
                "aggregation": {
                    "type": "string",
                    "description": "aggregation to be applied to reads before comparisson\n"
                },
                "alertItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertAlertItem:AlertAlertItem"
                    },
                    "description": "variables to be calculated for a complex comparisson.\n"
                },
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "operator": {
                    "type": "string",
                    "description": "operator to be used to compare the read value with the threshold value\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "related assets to be linked. In case one of these alerts triggers it will be reflected on each of these assets.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "[sev1,...,sev8] severity for the alert\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be used to compare with thresholds\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertThreshold:AlertThreshold"
                    }
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "required": [
                "aggregation",
                "alertItems",
                "cronDom",
                "cronDow",
                "cronHours",
                "cronMinutes",
                "cronMonth",
                "cronYear",
                "description",
                "name",
                "operator",
                "rateUnit",
                "rateValue",
                "severity",
                "targetVariable",
                "thresholds",
                "timeWindow",
                "type"
            ],
            "inputProperties": {
                "aggregation": {
                    "type": "string",
                    "description": "aggregation to be applied to reads before comparisson\n"
                },
                "alertItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertAlertItem:AlertAlertItem"
                    },
                    "description": "variables to be calculated for a complex comparisson.\n"
                },
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "operator": {
                    "type": "string",
                    "description": "operator to be used to compare the read value with the threshold value\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "related assets to be linked. In case one of these alerts triggers it will be reflected on each of these assets.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "[sev1,...,sev8] severity for the alert\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be used to compare with thresholds\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertThreshold:AlertThreshold"
                    }
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "requiredInputs": [
                "aggregation",
                "alertItems",
                "description",
                "operator",
                "severity",
                "targetVariable",
                "thresholds",
                "timeWindow",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alert resources.\n",
                "properties": {
                    "aggregation": {
                        "type": "string",
                        "description": "aggregation to be applied to reads before comparisson\n"
                    },
                    "alertItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/AlertAlertItem:AlertAlertItem"
                        },
                        "description": "variables to be calculated for a complex comparisson.\n"
                    },
                    "cronDom": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronDow": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronHours": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMinutes": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMonth": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronYear": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the resource\n"
                    },
                    "operator": {
                        "type": "string",
                        "description": "operator to be used to compare the read value with the threshold value\n"
                    },
                    "rateUnit": {
                        "type": "string",
                        "description": "[day|hour|minute] schedule unit\n"
                    },
                    "rateValue": {
                        "type": "integer",
                        "description": "schedule value\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "related assets to be linked. In case one of these alerts triggers it will be reflected on each of these assets.\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "[sev1,...,sev8] severity for the alert\n"
                    },
                    "targetVariable": {
                        "type": "string",
                        "description": "variable to be used to compare with thresholds\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/AlertThreshold:AlertThreshold"
                        }
                    },
                    "timeWindow": {
                        "type": "integer",
                        "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[cron|rate] type for the cron\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/asset:Asset": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetMainTest = new splight.Asset(\"assetMainTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n    kinds: [{\n        id: \"1234-1234-1234-1234\",\n        name: \"Line\",\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_main_test = splight.Asset(\"assetMainTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }),\n    kinds=[splight.AssetKindArgs(\n        id=\"1234-1234-1234-1234\",\n        name=\"Line\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetMainTest = new Splight.Asset(\"assetMainTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n        Kinds = new[]\n        {\n            new Splight.Inputs.AssetKindArgs\n            {\n                Id = \"1234-1234-1234-1234\",\n                Name = \"Line\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = splight.NewAsset(ctx, \"assetMainTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t\tKinds: splight.AssetKindArray{\n\t\t\t\t\u0026splight.AssetKindArgs{\n\t\t\t\t\tId:   pulumi.String(\"1234-1234-1234-1234\"),\n\t\t\t\t\tName: pulumi.String(\"Line\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.inputs.AssetKindArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetMainTest = new Asset(\"assetMainTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .kinds(AssetKindArgs.builder()\n                .id(\"1234-1234-1234-1234\")\n                .name(\"Line\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetMainTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n      kinds:\n        - id: 1234-1234-1234-1234\n          name: Line\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/asset:Asset [options] splight_asset.\u003cname\u003e \u003casset_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of the resource\n"
                },
                "geometry": {
                    "type": "string",
                    "description": "geo position and shape of the resource\n"
                },
                "kinds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AssetKind:AssetKind"
                    },
                    "description": "kind of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "linked assets\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "description of the resource\n"
                },
                "geometry": {
                    "type": "string",
                    "description": "geo position and shape of the resource\n"
                },
                "kinds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AssetKind:AssetKind"
                    },
                    "description": "kind of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "linked assets\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Asset resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "description of the resource\n"
                    },
                    "geometry": {
                        "type": "string",
                        "description": "geo position and shape of the resource\n"
                    },
                    "kinds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/AssetKind:AssetKind"
                        },
                        "description": "kind of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "linked assets\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/assetAttribute:AssetAttribute": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTestFunctionAttribute = new splight.AssetAttribute(\"assetTestFunctionAttribute\", {\n    asset: \"1234-1234-1234-1234\",\n    type: \"Number\",\n    unit: \"meters\",\n});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\nasset_test_function_attribute = splight.AssetAttribute(\"assetTestFunctionAttribute\",\n    asset=\"1234-1234-1234-1234\",\n    type=\"Number\",\n    unit=\"meters\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTestFunctionAttribute = new Splight.AssetAttribute(\"assetTestFunctionAttribute\", new()\n    {\n        Asset = \"1234-1234-1234-1234\",\n        Type = \"Number\",\n        Unit = \"meters\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.NewAssetAttribute(ctx, \"assetTestFunctionAttribute\", \u0026splight.AssetAttributeArgs{\n\t\t\tAsset: pulumi.String(\"1234-1234-1234-1234\"),\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTestFunctionAttribute = new AssetAttribute(\"assetTestFunctionAttribute\", AssetAttributeArgs.builder()\n            .asset(\"1234-1234-1234-1234\")\n            .type(\"Number\")\n            .unit(\"meters\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTestFunctionAttribute:\n    type: splight:AssetAttribute\n    properties:\n      asset: 1234-1234-1234-1234\n      type: Number\n      unit: meters\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/assetAttribute:AssetAttribute [options] splight_asset_attribute.\u003cname\u003e \u003casset_attribute_id\u003e\n```\n\n",
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n"
                }
            },
            "required": [
                "asset",
                "name",
                "type"
            ],
            "inputProperties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n"
                }
            },
            "requiredInputs": [
                "asset",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AssetAttribute resources.\n",
                "properties": {
                    "asset": {
                        "type": "string",
                        "description": "reference to the asset to be linked to\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                    },
                    "unit": {
                        "type": "string",
                        "description": "optional reference to the unit of the measure\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/assetMetadata:AssetMetadata": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTestMetadata = new splight.AssetMetadata(\"assetTestMetadata\", {\n    type: \"Number\",\n    unit: \"meters\",\n    value: JSON.stringify(10),\n    asset: \"1234-1234-1234-1234\",\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test_metadata = splight.AssetMetadata(\"assetTestMetadata\",\n    type=\"Number\",\n    unit=\"meters\",\n    value=json.dumps(10),\n    asset=\"1234-1234-1234-1234\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTestMetadata = new Splight.AssetMetadata(\"assetTestMetadata\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Value = JsonSerializer.Serialize(10),\n        Asset = \"1234-1234-1234-1234\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(10)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = splight.NewAssetMetadata(ctx, \"assetTestMetadata\", \u0026splight.AssetMetadataArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tValue: pulumi.String(json0),\n\t\t\tAsset: pulumi.String(\"1234-1234-1234-1234\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.AssetMetadata;\nimport com.pulumi.splight.AssetMetadataArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTestMetadata = new AssetMetadata(\"assetTestMetadata\", AssetMetadataArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .value(serializeJson(\n                10))\n            .asset(\"1234-1234-1234-1234\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTestMetadata:\n    type: splight:AssetMetadata\n    properties:\n      type: Number\n      unit: meters\n      value:\n        fn::toJSON: 10\n      asset: 1234-1234-1234-1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/assetMetadata:AssetMetadata [options] splight_asset_metadata.\u003cname\u003e \u003casset_metadata_id\u003e\n```\n\n",
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "required": [
                "asset",
                "name",
                "type",
                "value"
            ],
            "inputProperties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "requiredInputs": [
                "asset",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AssetMetadata resources.\n",
                "properties": {
                    "asset": {
                        "type": "string",
                        "description": "reference to the asset to be linked to\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                    },
                    "unit": {
                        "type": "string",
                        "description": "optional reference to the unit of the measure\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "metadata value\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/component:Component": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst componentTest = new splight.Component(\"componentTest\", {\n    description: \"Created with Terraform\",\n    version: \"Random-3.1.0\",\n    inputs: [\n        {\n            name: \"period\",\n            type: \"int\",\n            value: JSON.stringify(10),\n            multiple: false,\n            required: false,\n            sensitive: false,\n            description: \"\",\n        },\n        {\n            name: \"min\",\n            type: \"int\",\n            value: JSON.stringify(1),\n            multiple: false,\n            required: false,\n            sensitive: false,\n            description: \"\",\n        },\n        {\n            name: \"max\",\n            type: \"int\",\n            value: JSON.stringify(150),\n            multiple: false,\n            required: false,\n            sensitive: false,\n            description: \"\",\n        },\n        {\n            name: \"max_iterations\",\n            type: \"int\",\n            value: JSON.stringify(3),\n            multiple: false,\n            required: false,\n            sensitive: false,\n            description: \"\",\n        },\n        {\n            name: \"should_crash\",\n            type: \"bool\",\n            value: JSON.stringify(\"true\"),\n            multiple: false,\n            required: false,\n            sensitive: false,\n            description: \"\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\ncomponent_test = splight.Component(\"componentTest\",\n    description=\"Created with Terraform\",\n    version=\"Random-3.1.0\",\n    inputs=[\n        splight.ComponentInputArgs(\n            name=\"period\",\n            type=\"int\",\n            value=json.dumps(10),\n            multiple=False,\n            required=False,\n            sensitive=False,\n            description=\"\",\n        ),\n        splight.ComponentInputArgs(\n            name=\"min\",\n            type=\"int\",\n            value=json.dumps(1),\n            multiple=False,\n            required=False,\n            sensitive=False,\n            description=\"\",\n        ),\n        splight.ComponentInputArgs(\n            name=\"max\",\n            type=\"int\",\n            value=json.dumps(150),\n            multiple=False,\n            required=False,\n            sensitive=False,\n            description=\"\",\n        ),\n        splight.ComponentInputArgs(\n            name=\"max_iterations\",\n            type=\"int\",\n            value=json.dumps(3),\n            multiple=False,\n            required=False,\n            sensitive=False,\n            description=\"\",\n        ),\n        splight.ComponentInputArgs(\n            name=\"should_crash\",\n            type=\"bool\",\n            value=json.dumps(\"true\"),\n            multiple=False,\n            required=False,\n            sensitive=False,\n            description=\"\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var componentTest = new Splight.Component(\"componentTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Version = \"Random-3.1.0\",\n        Inputs = new[]\n        {\n            new Splight.Inputs.ComponentInputArgs\n            {\n                Name = \"period\",\n                Type = \"int\",\n                Value = JsonSerializer.Serialize(10),\n                Multiple = false,\n                Required = false,\n                Sensitive = false,\n                Description = \"\",\n            },\n            new Splight.Inputs.ComponentInputArgs\n            {\n                Name = \"min\",\n                Type = \"int\",\n                Value = JsonSerializer.Serialize(1),\n                Multiple = false,\n                Required = false,\n                Sensitive = false,\n                Description = \"\",\n            },\n            new Splight.Inputs.ComponentInputArgs\n            {\n                Name = \"max\",\n                Type = \"int\",\n                Value = JsonSerializer.Serialize(150),\n                Multiple = false,\n                Required = false,\n                Sensitive = false,\n                Description = \"\",\n            },\n            new Splight.Inputs.ComponentInputArgs\n            {\n                Name = \"max_iterations\",\n                Type = \"int\",\n                Value = JsonSerializer.Serialize(3),\n                Multiple = false,\n                Required = false,\n                Sensitive = false,\n                Description = \"\",\n            },\n            new Splight.Inputs.ComponentInputArgs\n            {\n                Name = \"should_crash\",\n                Type = \"bool\",\n                Value = JsonSerializer.Serialize(\"true\"),\n                Multiple = false,\n                Required = false,\n                Sensitive = false,\n                Description = \"\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(10)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(1)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\ttmpJSON2, err := json.Marshal(150)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson2 := string(tmpJSON2)\n\t\ttmpJSON3, err := json.Marshal(3)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson3 := string(tmpJSON3)\n\t\ttmpJSON4, err := json.Marshal(\"true\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson4 := string(tmpJSON4)\n\t\t_, err = splight.NewComponent(ctx, \"componentTest\", \u0026splight.ComponentArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tVersion:     pulumi.String(\"Random-3.1.0\"),\n\t\t\tInputs: splight.ComponentInputTypeArray{\n\t\t\t\t\u0026splight.ComponentInputTypeArgs{\n\t\t\t\t\tName:        pulumi.String(\"period\"),\n\t\t\t\t\tType:        pulumi.String(\"int\"),\n\t\t\t\t\tValue:       pulumi.String(json0),\n\t\t\t\t\tMultiple:    pulumi.Bool(false),\n\t\t\t\t\tRequired:    pulumi.Bool(false),\n\t\t\t\t\tSensitive:   pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(\"\"),\n\t\t\t\t},\n\t\t\t\t\u0026splight.ComponentInputTypeArgs{\n\t\t\t\t\tName:        pulumi.String(\"min\"),\n\t\t\t\t\tType:        pulumi.String(\"int\"),\n\t\t\t\t\tValue:       pulumi.String(json1),\n\t\t\t\t\tMultiple:    pulumi.Bool(false),\n\t\t\t\t\tRequired:    pulumi.Bool(false),\n\t\t\t\t\tSensitive:   pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(\"\"),\n\t\t\t\t},\n\t\t\t\t\u0026splight.ComponentInputTypeArgs{\n\t\t\t\t\tName:        pulumi.String(\"max\"),\n\t\t\t\t\tType:        pulumi.String(\"int\"),\n\t\t\t\t\tValue:       pulumi.String(json2),\n\t\t\t\t\tMultiple:    pulumi.Bool(false),\n\t\t\t\t\tRequired:    pulumi.Bool(false),\n\t\t\t\t\tSensitive:   pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(\"\"),\n\t\t\t\t},\n\t\t\t\t\u0026splight.ComponentInputTypeArgs{\n\t\t\t\t\tName:        pulumi.String(\"max_iterations\"),\n\t\t\t\t\tType:        pulumi.String(\"int\"),\n\t\t\t\t\tValue:       pulumi.String(json3),\n\t\t\t\t\tMultiple:    pulumi.Bool(false),\n\t\t\t\t\tRequired:    pulumi.Bool(false),\n\t\t\t\t\tSensitive:   pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(\"\"),\n\t\t\t\t},\n\t\t\t\t\u0026splight.ComponentInputTypeArgs{\n\t\t\t\t\tName:        pulumi.String(\"should_crash\"),\n\t\t\t\t\tType:        pulumi.String(\"bool\"),\n\t\t\t\t\tValue:       pulumi.String(json4),\n\t\t\t\t\tMultiple:    pulumi.Bool(false),\n\t\t\t\t\tRequired:    pulumi.Bool(false),\n\t\t\t\t\tSensitive:   pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(\"\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Component;\nimport com.pulumi.splight.ComponentArgs;\nimport com.pulumi.splight.inputs.ComponentInputArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var componentTest = new Component(\"componentTest\", ComponentArgs.builder()\n            .description(\"Created with Terraform\")\n            .version(\"Random-3.1.0\")\n            .inputs(            \n                ComponentInputArgs.builder()\n                    .name(\"period\")\n                    .type(\"int\")\n                    .value(serializeJson(\n                        10))\n                    .multiple(false)\n                    .required(false)\n                    .sensitive(false)\n                    .description(\"\")\n                    .build(),\n                ComponentInputArgs.builder()\n                    .name(\"min\")\n                    .type(\"int\")\n                    .value(serializeJson(\n                        1))\n                    .multiple(false)\n                    .required(false)\n                    .sensitive(false)\n                    .description(\"\")\n                    .build(),\n                ComponentInputArgs.builder()\n                    .name(\"max\")\n                    .type(\"int\")\n                    .value(serializeJson(\n                        150))\n                    .multiple(false)\n                    .required(false)\n                    .sensitive(false)\n                    .description(\"\")\n                    .build(),\n                ComponentInputArgs.builder()\n                    .name(\"max_iterations\")\n                    .type(\"int\")\n                    .value(serializeJson(\n                        3))\n                    .multiple(false)\n                    .required(false)\n                    .sensitive(false)\n                    .description(\"\")\n                    .build(),\n                ComponentInputArgs.builder()\n                    .name(\"should_crash\")\n                    .type(\"bool\")\n                    .value(serializeJson(\n                        \"true\"))\n                    .multiple(false)\n                    .required(false)\n                    .sensitive(false)\n                    .description(\"\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  componentTest:\n    type: splight:Component\n    properties:\n      description: Created with Terraform\n      version: Random-3.1.0\n      inputs:\n        - name: period\n          type: int\n          value:\n            fn::toJSON: 10\n          multiple: false\n          required: false\n          sensitive: false\n          description:\n        - name: min\n          type: int\n          value:\n            fn::toJSON: 1\n          multiple: false\n          required: false\n          sensitive: false\n          description:\n        - name: max\n          type: int\n          value:\n            fn::toJSON: 150\n          multiple: false\n          required: false\n          sensitive: false\n          description:\n        - name: max_iterations\n          type: int\n          value:\n            fn::toJSON: 3\n          multiple: false\n          required: false\n          sensitive: false\n          description:\n        - name: should_crash\n          type: bool\n          value:\n            fn::toJSON: 'true'\n          multiple: false\n          required: false\n          sensitive: false\n          description:\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/component:Component [options] splight_component.\u003cname\u003e \u003ccomponent_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "optinal description to add details of the resource\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentInput:ComponentInput"
                    },
                    "description": "static config parameters of the routine\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the component to be created\n"
                },
                "version": {
                    "type": "string",
                    "description": "[NAME-VERSION] the version of the hub component\n"
                }
            },
            "required": [
                "name",
                "version"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "optinal description to add details of the resource\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentInput:ComponentInput"
                    },
                    "description": "static config parameters of the routine\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the component to be created\n"
                },
                "version": {
                    "type": "string",
                    "description": "[NAME-VERSION] the version of the hub component\n"
                }
            },
            "requiredInputs": [
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Component resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "optinal description to add details of the resource\n"
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentInput:ComponentInput"
                        },
                        "description": "static config parameters of the routine\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the component to be created\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "[NAME-VERSION] the version of the hub component\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/componentRoutine:ComponentRoutine": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst componentTestRoutine = new splight.ComponentRoutine(\"componentTestRoutine\", {\n    description: \"Created with Terraform\",\n    type: \"IncomingRoutine\",\n    componentId: \"1234-1234-1234-1234\",\n    configs: [{\n        name: \"config_param\",\n        type: \"bool\",\n        value: \"true\",\n        multiple: false,\n        required: true,\n        sensitive: false,\n        description: JSON.stringify(\"Created with Terraform123123\"),\n    }],\n    outputs: [{\n        name: \"address\",\n        description: \"destination address for data to be pushed\",\n        type: \"DataAddress\",\n        valueType: \"Number\",\n        multiple: false,\n        required: true,\n        values: {\n            asset: \"1234-1234-1234-1234\",\n            attribute: \"1234-1234-1234-1234\",\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\ncomponent_test_routine = splight.ComponentRoutine(\"componentTestRoutine\",\n    description=\"Created with Terraform\",\n    type=\"IncomingRoutine\",\n    component_id=\"1234-1234-1234-1234\",\n    configs=[splight.ComponentRoutineConfigArgs(\n        name=\"config_param\",\n        type=\"bool\",\n        value=\"true\",\n        multiple=False,\n        required=True,\n        sensitive=False,\n        description=json.dumps(\"Created with Terraform123123\"),\n    )],\n    outputs=[splight.ComponentRoutineOutputArgs(\n        name=\"address\",\n        description=\"destination address for data to be pushed\",\n        type=\"DataAddress\",\n        value_type=\"Number\",\n        multiple=False,\n        required=True,\n        values={\n            \"asset\": \"1234-1234-1234-1234\",\n            \"attribute\": \"1234-1234-1234-1234\",\n        },\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var componentTestRoutine = new Splight.ComponentRoutine(\"componentTestRoutine\", new()\n    {\n        Description = \"Created with Terraform\",\n        Type = \"IncomingRoutine\",\n        ComponentId = \"1234-1234-1234-1234\",\n        Configs = new[]\n        {\n            new Splight.Inputs.ComponentRoutineConfigArgs\n            {\n                Name = \"config_param\",\n                Type = \"bool\",\n                Value = \"true\",\n                Multiple = false,\n                Required = true,\n                Sensitive = false,\n                Description = JsonSerializer.Serialize(\"Created with Terraform123123\"),\n            },\n        },\n        Outputs = new[]\n        {\n            new Splight.Inputs.ComponentRoutineOutputArgs\n            {\n                Name = \"address\",\n                Description = \"destination address for data to be pushed\",\n                Type = \"DataAddress\",\n                ValueType = \"Number\",\n                Multiple = false,\n                Required = true,\n                Values = \n                {\n                    { \"asset\", \"1234-1234-1234-1234\" },\n                    { \"attribute\", \"1234-1234-1234-1234\" },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(\"Created with Terraform123123\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = splight.NewComponentRoutine(ctx, \"componentTestRoutine\", \u0026splight.ComponentRoutineArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tType:        pulumi.String(\"IncomingRoutine\"),\n\t\t\tComponentId: pulumi.String(\"1234-1234-1234-1234\"),\n\t\t\tConfigs: splight.ComponentRoutineConfigArray{\n\t\t\t\t\u0026splight.ComponentRoutineConfigArgs{\n\t\t\t\t\tName:        pulumi.String(\"config_param\"),\n\t\t\t\t\tType:        pulumi.String(\"bool\"),\n\t\t\t\t\tValue:       pulumi.String(\"true\"),\n\t\t\t\t\tMultiple:    pulumi.Bool(false),\n\t\t\t\t\tRequired:    pulumi.Bool(true),\n\t\t\t\t\tSensitive:   pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(json0),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOutputs: splight.ComponentRoutineOutputTypeArray{\n\t\t\t\t\u0026splight.ComponentRoutineOutputTypeArgs{\n\t\t\t\t\tName:        pulumi.String(\"address\"),\n\t\t\t\t\tDescription: pulumi.String(\"destination address for data to be pushed\"),\n\t\t\t\t\tType:        pulumi.String(\"DataAddress\"),\n\t\t\t\t\tValueType:   pulumi.String(\"Number\"),\n\t\t\t\t\tMultiple:    pulumi.Bool(false),\n\t\t\t\t\tRequired:    pulumi.Bool(true),\n\t\t\t\t\tValues: splight.ComponentRoutineOutputValueArray{\n\t\t\t\t\t\tAsset:     \"1234-1234-1234-1234\",\n\t\t\t\t\t\tAttribute: \"1234-1234-1234-1234\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.ComponentRoutine;\nimport com.pulumi.splight.ComponentRoutineArgs;\nimport com.pulumi.splight.inputs.ComponentRoutineConfigArgs;\nimport com.pulumi.splight.inputs.ComponentRoutineOutputArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var componentTestRoutine = new ComponentRoutine(\"componentTestRoutine\", ComponentRoutineArgs.builder()\n            .description(\"Created with Terraform\")\n            .type(\"IncomingRoutine\")\n            .componentId(\"1234-1234-1234-1234\")\n            .configs(ComponentRoutineConfigArgs.builder()\n                .name(\"config_param\")\n                .type(\"bool\")\n                .value(\"true\")\n                .multiple(false)\n                .required(true)\n                .sensitive(false)\n                .description(serializeJson(\n                    \"Created with Terraform123123\"))\n                .build())\n            .outputs(ComponentRoutineOutputArgs.builder()\n                .name(\"address\")\n                .description(\"destination address for data to be pushed\")\n                .type(\"DataAddress\")\n                .valueType(\"Number\")\n                .multiple(false)\n                .required(true)\n                .values(ComponentRoutineOutputValueArgs.builder()\n                    .asset(\"1234-1234-1234-1234\")\n                    .attribute(\"1234-1234-1234-1234\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  componentTestRoutine:\n    type: splight:ComponentRoutine\n    properties:\n      description: Created with Terraform\n      type: IncomingRoutine\n      componentId: 1234-1234-1234-1234\n      configs:\n        - name: config_param\n          type: bool\n          value: 'true'\n          multiple: false\n          required: true\n          sensitive: false\n          description:\n            fn::toJSON: Created with Terraform123123\n      outputs:\n        - name: address\n          description: destination address for data to be pushed\n          type: DataAddress\n          valueType: Number\n          multiple: false\n          required: true\n          values:\n            asset: 1234-1234-1234-1234\n            attribute: 1234-1234-1234-1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/componentRoutine:ComponentRoutine [options] splight_component_routine.\u003cname\u003e \u003ccomponent_routine_id\u003e\n```\n\n",
            "properties": {
                "componentId": {
                    "type": "string",
                    "description": "reference to component to be attached\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineConfig:ComponentRoutineConfig"
                    },
                    "description": "static config parameters of the routine\n"
                },
                "description": {
                    "type": "string",
                    "description": "optional complementary information about the routine\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineInput:ComponentRoutineInput"
                    },
                    "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the routine\n"
                },
                "outputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineOutput:ComponentRoutineOutput"
                    },
                    "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                },
                "type": {
                    "type": "string",
                    "description": "[IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)\n"
                }
            },
            "required": [
                "componentId",
                "name",
                "type"
            ],
            "inputProperties": {
                "componentId": {
                    "type": "string",
                    "description": "reference to component to be attached\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineConfig:ComponentRoutineConfig"
                    },
                    "description": "static config parameters of the routine\n"
                },
                "description": {
                    "type": "string",
                    "description": "optional complementary information about the routine\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineInput:ComponentRoutineInput"
                    },
                    "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the routine\n"
                },
                "outputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineOutput:ComponentRoutineOutput"
                    },
                    "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                },
                "type": {
                    "type": "string",
                    "description": "[IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)\n"
                }
            },
            "requiredInputs": [
                "componentId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComponentRoutine resources.\n",
                "properties": {
                    "componentId": {
                        "type": "string",
                        "description": "reference to component to be attached\n"
                    },
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentRoutineConfig:ComponentRoutineConfig"
                        },
                        "description": "static config parameters of the routine\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "optional complementary information about the routine\n"
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentRoutineInput:ComponentRoutineInput"
                        },
                        "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the routine\n"
                    },
                    "outputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentRoutineOutput:ComponentRoutineOutput"
                        },
                        "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboard:Dashboard": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: [\"1234-1234-1234-1234\"]});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[\"1234-1234-1234-1234\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[]\n        {\n            \"1234-1234-1234-1234\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"1234-1234-1234-1234\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets(\"1234-1234-1234-1234\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets:\n        - 1234-1234-1234-1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboard:Dashboard [options] splight_dashboard.\u003cname\u003e \u003cdashboard_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "complementary information for the dashboard\n"
                },
                "name": {
                    "type": "string",
                    "description": "dashboard name\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "assets linked\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "complementary information for the dashboard\n"
                },
                "name": {
                    "type": "string",
                    "description": "dashboard name\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "assets linked\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "complementary information for the dashboard\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "dashboard name\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "assets linked\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardChart:DashboardChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst dashboardChartTest = new splight.DashboardChart(\"dashboardChartTest\", {\n    type: \"timeseries\",\n    tab: \"1234-1234-1234-1234\",\n    timestampGte: \"now - 6h\",\n    timestampLte: \"now\",\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"1234-1234-1234-1234\",\n                    attribute: \"1234-1234-1234-1234\",\n                },\n            }]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"1234-1234-1234-1234\",\n                    attribute: \"1234-1234-1234-1234\",\n                },\n            }]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\ndashboard_chart_test = splight.DashboardChart(\"dashboardChartTest\",\n    type=\"timeseries\",\n    tab=\"1234-1234-1234-1234\",\n    timestamp_gte=\"now - 6h\",\n    timestamp_lte=\"now\",\n    chart_items=[\n        splight.DashboardChartChartItemArgs(\n            ref_id=\"A\",\n            type=\"QUERY\",\n            color=\"red\",\n            expression_plain=\"\",\n            query_plain=json.dumps([{\n                \"$match\": {\n                    \"asset\": \"1234-1234-1234-1234\",\n                    \"attribute\": \"1234-1234-1234-1234\",\n                },\n            }]),\n        ),\n        splight.DashboardChartChartItemArgs(\n            ref_id=\"B\",\n            color=\"blue\",\n            type=\"QUERY\",\n            expression_plain=\"\",\n            query_plain=json.dumps([{\n                \"$match\": {\n                    \"asset\": \"1234-1234-1234-1234\",\n                    \"attribute\": \"1234-1234-1234-1234\",\n                },\n            }]),\n        ),\n    ],\n    thresholds=[splight.DashboardChartThresholdArgs(\n        color=\"#00edcf\",\n        display_text=\"T1Test\",\n        value=13.1,\n    )],\n    value_mappings=[splight.DashboardChartValueMappingArgs(\n        display_text=\"MODIFICADO\",\n        match_value=\"123.3\",\n        type=\"exact_match\",\n        order=0,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dashboardChartTest = new Splight.DashboardChart(\"dashboardChartTest\", new()\n    {\n        Type = \"timeseries\",\n        Tab = \"1234-1234-1234-1234\",\n        TimestampGte = \"now - 6h\",\n        TimestampLte = \"now\",\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryPlain = JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"1234-1234-1234-1234\",\n                            [\"attribute\"] = \"1234-1234-1234-1234\",\n                        },\n                    },\n                }),\n            },\n            new Splight.Inputs.DashboardChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryPlain = JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"1234-1234-1234-1234\",\n                            [\"attribute\"] = \"1234-1234-1234-1234\",\n                        },\n                    },\n                }),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\"asset\":     \"1234-1234-1234-1234\",\n\t\t\t\t\t\"attribute\": \"1234-1234-1234-1234\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\"asset\":     \"1234-1234-1234-1234\",\n\t\t\t\t\t\"attribute\": \"1234-1234-1234-1234\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = splight.NewDashboardChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardChartArgs{\n\t\t\tType:         pulumi.String(\"timeseries\"),\n\t\t\tTab:          pulumi.String(\"1234-1234-1234-1234\"),\n\t\t\tTimestampGte: pulumi.String(\"now - 6h\"),\n\t\t\tTimestampLte: pulumi.String(\"now\"),\n\t\t\tChartItems: splight.DashboardChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryPlain:      pulumi.String(json0),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryPlain:      pulumi.String(json1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.DashboardChart;\nimport com.pulumi.splight.DashboardChartArgs;\nimport com.pulumi.splight.inputs.DashboardChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dashboardChartTest = new DashboardChart(\"dashboardChartTest\", DashboardChartArgs.builder()\n            .type(\"timeseries\")\n            .tab(\"1234-1234-1234-1234\")\n            .timestampGte(\"now - 6h\")\n            .timestampLte(\"now\")\n            .chartItems(            \n                DashboardChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryPlain(serializeJson(\n                        jsonArray(jsonObject(\n                            jsonProperty(\"$match\", jsonObject(\n                                jsonProperty(\"asset\", \"1234-1234-1234-1234\"),\n                                jsonProperty(\"attribute\", \"1234-1234-1234-1234\")\n                            ))\n                        ))))\n                    .build(),\n                DashboardChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryPlain(serializeJson(\n                        jsonArray(jsonObject(\n                            jsonProperty(\"$match\", jsonObject(\n                                jsonProperty(\"asset\", \"1234-1234-1234-1234\"),\n                                jsonProperty(\"attribute\", \"1234-1234-1234-1234\")\n                            ))\n                        ))))\n                    .build())\n            .thresholds(DashboardChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dashboardChartTest:\n    type: splight:DashboardChart\n    properties:\n      type: timeseries\n      tab: 1234-1234-1234-1234\n      timestampGte: now - 6h\n      timestampLte: now\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 1234-1234-1234-1234\n                  attribute: 1234-1234-1234-1234\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 1234-1234-1234-1234\n                  attribute: 1234-1234-1234-1234\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardChart:DashboardChart [options] splight_dashbaord_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartChartItem:DashboardChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartThreshold:DashboardChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "type": {
                    "type": "string",
                    "description": "[timeseries|bargauge|..] chart type\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartValueMapping:DashboardChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte",
                "type"
            ],
            "inputProperties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartChartItem:DashboardChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartThreshold:DashboardChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "type": {
                    "type": "string",
                    "description": "[timeseries|bargauge|..] chart type\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartValueMapping:DashboardChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardChart resources.\n",
                "properties": {
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardChartChartItem:DashboardChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardChartThreshold:DashboardChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[timeseries|bargauge|..] chart type\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardChartValueMapping:DashboardChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardTab:DashboardTab": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    dashboard: \"1234-1234-1234-1234\",\n    order: 0,\n});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    dashboard=\"1234-1234-1234-1234\",\n    order=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Dashboard = \"1234-1234-1234-1234\",\n        Order = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tDashboard: pulumi.String(\"1234-1234-1234-1234\"),\n\t\t\tOrder:     pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .dashboard(\"1234-1234-1234-1234\")\n            .order(0)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      dashboard: 1234-1234-1234-1234\n      order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardTab:DashboardTab [options] splight_dashboard_tab.\u003cname\u003e \u003cdashboard_tab_id\u003e\n```\n\n",
            "properties": {
                "dashboard": {
                    "type": "string",
                    "description": "dashboard id where to place it\n"
                },
                "name": {
                    "type": "string",
                    "description": "name for the tab\n"
                },
                "order": {
                    "type": "integer",
                    "description": "order within the dashboard\n"
                }
            },
            "required": [
                "dashboard",
                "name"
            ],
            "inputProperties": {
                "dashboard": {
                    "type": "string",
                    "description": "dashboard id where to place it\n"
                },
                "name": {
                    "type": "string",
                    "description": "name for the tab\n"
                },
                "order": {
                    "type": "integer",
                    "description": "order within the dashboard\n"
                }
            },
            "requiredInputs": [
                "dashboard"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardTab resources.\n",
                "properties": {
                    "dashboard": {
                        "type": "string",
                        "description": "dashboard id where to place it\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name for the tab\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "order within the dashboard\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/file:File": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst fileInnerTest = new splight.File(\"fileInnerTest\", {\n    description: \"Sample file for testing inner file\",\n    parent: \"1234-1234-1234-1234\",\n    path: \"./variables.tf\",\n});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\nfile_inner_test = splight.File(\"fileInnerTest\",\n    description=\"Sample file for testing inner file\",\n    parent=\"1234-1234-1234-1234\",\n    path=\"./variables.tf\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fileInnerTest = new Splight.File(\"fileInnerTest\", new()\n    {\n        Description = \"Sample file for testing inner file\",\n        Parent = \"1234-1234-1234-1234\",\n        Path = \"./variables.tf\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.NewFile(ctx, \"fileInnerTest\", \u0026splight.FileArgs{\n\t\t\tDescription: pulumi.String(\"Sample file for testing inner file\"),\n\t\t\tParent:      pulumi.String(\"1234-1234-1234-1234\"),\n\t\t\tPath:        pulumi.String(\"./variables.tf\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.File;\nimport com.pulumi.splight.FileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fileInnerTest = new File(\"fileInnerTest\", FileArgs.builder()\n            .description(\"Sample file for testing inner file\")\n            .parent(\"1234-1234-1234-1234\")\n            .path(\"./variables.tf\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fileInnerTest:\n    type: splight:File\n    properties:\n      description: Sample file for testing inner file\n      parent: 1234-1234-1234-1234\n      path: ./variables.tf\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/file:File [options] splight_file.\u003cname\u003e \u003cfile_id\u003e\n```\n\n",
            "properties": {
                "checksum": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "complementary information to describe the file\n"
                },
                "parent": {
                    "type": "string",
                    "description": "the id reference for a folder to be placed in\n"
                },
                "path": {
                    "type": "string",
                    "description": "the path for the file resource in your system\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "assets to be linked\n"
                }
            },
            "required": [
                "checksum",
                "path"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "complementary information to describe the file\n"
                },
                "parent": {
                    "type": "string",
                    "description": "the id reference for a folder to be placed in\n"
                },
                "path": {
                    "type": "string",
                    "description": "the path for the file resource in your system\n",
                    "willReplaceOnChanges": true
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "assets to be linked\n"
                }
            },
            "requiredInputs": [
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering File resources.\n",
                "properties": {
                    "checksum": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "complementary information to describe the file\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "the id reference for a folder to be placed in\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "the path for the file resource in your system\n",
                        "willReplaceOnChanges": true
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "assets to be linked\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/fileFolder:FileFolder": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst fileFolderTest = new splight.FileFolder(\"fileFolderTest\", {});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\nfile_folder_test = splight.FileFolder(\"fileFolderTest\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fileFolderTest = new Splight.FileFolder(\"fileFolderTest\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.NewFileFolder(ctx, \"fileFolderTest\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.FileFolder;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fileFolderTest = new FileFolder(\"fileFolderTest\");\n\n    }\n}\n```\n```yaml\nresources:\n  fileFolderTest:\n    type: splight:FileFolder\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/fileFolder:FileFolder [options] splight_file_folder.\u003cname\u003e \u003cfile_folder_id\u003e\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "folder name\n"
                },
                "parent": {
                    "type": "string",
                    "description": "optional folder id where to place this folder\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "folder name\n",
                    "willReplaceOnChanges": true
                },
                "parent": {
                    "type": "string",
                    "description": "optional folder id where to place this folder\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FileFolder resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "folder name\n",
                        "willReplaceOnChanges": true
                    },
                    "parent": {
                        "type": "string",
                        "description": "optional folder id where to place this folder\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/function:Function": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst functionTest = new splight.Function(\"functionTest\", {\n    description: \"Created with Terraform\",\n    type: \"rate\",\n    timeWindow: 600,\n    rateValue: 10,\n    rateUnit: \"minute\",\n    targetVariable: \"A\",\n    targetAsset: {\n        id: \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n        name: \"An asset\",\n    },\n    targetAttribute: {\n        id: \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n        name: \"An attribute\",\n    },\n    functionItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n                    attribute: \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n                },\n            }]),\n        },\n        {\n            refId: \"B\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n                    attribute: \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n                },\n            }]),\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nfunction_test = splight.Function(\"functionTest\",\n    description=\"Created with Terraform\",\n    type=\"rate\",\n    time_window=600,\n    rate_value=10,\n    rate_unit=\"minute\",\n    target_variable=\"A\",\n    target_asset={\n        \"id\": \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n        \"name\": \"An asset\",\n    },\n    target_attribute={\n        \"id\": \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n        \"name\": \"An attribute\",\n    },\n    function_items=[\n        splight.FunctionFunctionItemArgs(\n            ref_id=\"A\",\n            type=\"QUERY\",\n            expression_plain=\"\",\n            query_plain=json.dumps([{\n                \"$match\": {\n                    \"asset\": \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n                    \"attribute\": \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n                },\n            }]),\n        ),\n        splight.FunctionFunctionItemArgs(\n            ref_id=\"B\",\n            type=\"QUERY\",\n            expression_plain=\"\",\n            query_plain=json.dumps([{\n                \"$match\": {\n                    \"asset\": \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n                    \"attribute\": \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n                },\n            }]),\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var functionTest = new Splight.Function(\"functionTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Type = \"rate\",\n        TimeWindow = 600,\n        RateValue = 10,\n        RateUnit = \"minute\",\n        TargetVariable = \"A\",\n        TargetAsset = \n        {\n            { \"id\", \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\" },\n            { \"name\", \"An asset\" },\n        },\n        TargetAttribute = \n        {\n            { \"id\", \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\" },\n            { \"name\", \"An attribute\" },\n        },\n        FunctionItems = new[]\n        {\n            new Splight.Inputs.FunctionFunctionItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryPlain = JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n                            [\"attribute\"] = \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n                        },\n                    },\n                }),\n            },\n            new Splight.Inputs.FunctionFunctionItemArgs\n            {\n                RefId = \"B\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryPlain = JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n                            [\"attribute\"] = \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n                        },\n                    },\n                }),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\"asset\":     \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n\t\t\t\t\t\"attribute\": \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\"asset\":     \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n\t\t\t\t\t\"attribute\": \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = splight.NewFunction(ctx, \"functionTest\", \u0026splight.FunctionArgs{\n\t\t\tDescription:    pulumi.String(\"Created with Terraform\"),\n\t\t\tType:           pulumi.String(\"rate\"),\n\t\t\tTimeWindow:     pulumi.Int(600),\n\t\t\tRateValue:      pulumi.Int(10),\n\t\t\tRateUnit:       pulumi.String(\"minute\"),\n\t\t\tTargetVariable: pulumi.String(\"A\"),\n\t\t\tTargetAsset: pulumi.StringMap{\n\t\t\t\t\"id\":   pulumi.String(\"49551a15-d79b-40dc-9434-1b33d6b2fcb2\"),\n\t\t\t\t\"name\": pulumi.String(\"An asset\"),\n\t\t\t},\n\t\t\tTargetAttribute: pulumi.StringMap{\n\t\t\t\t\"id\":   pulumi.String(\"49551a15-d79b-40dc-9434-1b33d6b2fcb2\"),\n\t\t\t\t\"name\": pulumi.String(\"An attribute\"),\n\t\t\t},\n\t\t\tFunctionItems: splight.FunctionFunctionItemArray{\n\t\t\t\t\u0026splight.FunctionFunctionItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryPlain:      pulumi.String(json0),\n\t\t\t\t},\n\t\t\t\t\u0026splight.FunctionFunctionItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryPlain:      pulumi.String(json1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Function;\nimport com.pulumi.splight.FunctionArgs;\nimport com.pulumi.splight.inputs.FunctionFunctionItemArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var functionTest = new Function(\"functionTest\", FunctionArgs.builder()\n            .description(\"Created with Terraform\")\n            .type(\"rate\")\n            .timeWindow(600)\n            .rateValue(10)\n            .rateUnit(\"minute\")\n            .targetVariable(\"A\")\n            .targetAsset(Map.ofEntries(\n                Map.entry(\"id\", \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\"),\n                Map.entry(\"name\", \"An asset\")\n            ))\n            .targetAttribute(Map.ofEntries(\n                Map.entry(\"id\", \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\"),\n                Map.entry(\"name\", \"An attribute\")\n            ))\n            .functionItems(            \n                FunctionFunctionItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryPlain(serializeJson(\n                        jsonArray(jsonObject(\n                            jsonProperty(\"$match\", jsonObject(\n                                jsonProperty(\"asset\", \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\"),\n                                jsonProperty(\"attribute\", \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\")\n                            ))\n                        ))))\n                    .build(),\n                FunctionFunctionItemArgs.builder()\n                    .refId(\"B\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryPlain(serializeJson(\n                        jsonArray(jsonObject(\n                            jsonProperty(\"$match\", jsonObject(\n                                jsonProperty(\"asset\", \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\"),\n                                jsonProperty(\"attribute\", \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\")\n                            ))\n                        ))))\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  functionTest:\n    type: splight:Function\n    properties:\n      description: Created with Terraform\n      type: rate\n      timeWindow: 600\n      rateValue: 10\n      rateUnit: minute\n      targetVariable: A\n      targetAsset:\n        id: 49551a15-d79b-40dc-9434-1b33d6b2fcb2\n        name: An asset\n      targetAttribute:\n        id: 49551a15-d79b-40dc-9434-1b33d6b2fcb2\n        name: An attribute\n      functionItems:\n        - refId: A\n          type: QUERY\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 49551a15-d79b-40dc-9434-1b33d6b2fcb2\n                  attribute: c1d0d94b-5feb-4ebb-a527-0b0a34196252\n        - refId: B\n          type: QUERY\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 49551a15-d79b-40dc-9434-1b33d6b2fcb2\n                  attribute: c1d0d94b-5feb-4ebb-a527-0b0a34196252\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/function:Function [options] splight_function.\u003cname\u003e \u003cfunction_id\u003e\n```\n\n",
            "properties": {
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "functionItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/FunctionFunctionItem:FunctionFunctionItem"
                    },
                    "description": "traces to be used to compute the results\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "targetAsset": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "asset where to ingest results\n"
                },
                "targetAttribute": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "attribute where to ingest results\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be considered to be ingested\n"
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "required": [
                "cronDom",
                "cronDow",
                "cronHours",
                "cronMinutes",
                "cronMonth",
                "cronYear",
                "description",
                "functionItems",
                "name",
                "rateUnit",
                "rateValue",
                "targetAsset",
                "targetAttribute",
                "targetVariable",
                "timeWindow",
                "type"
            ],
            "inputProperties": {
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "functionItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/FunctionFunctionItem:FunctionFunctionItem"
                    },
                    "description": "traces to be used to compute the results\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "targetAsset": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "asset where to ingest results\n"
                },
                "targetAttribute": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "attribute where to ingest results\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be considered to be ingested\n"
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "requiredInputs": [
                "description",
                "functionItems",
                "targetAsset",
                "targetAttribute",
                "targetVariable",
                "timeWindow",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Function resources.\n",
                "properties": {
                    "cronDom": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronDow": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronHours": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMinutes": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMonth": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronYear": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource\n"
                    },
                    "functionItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/FunctionFunctionItem:FunctionFunctionItem"
                        },
                        "description": "traces to be used to compute the results\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the resource\n"
                    },
                    "rateUnit": {
                        "type": "string",
                        "description": "[day|hour|minute] schedule unit\n"
                    },
                    "rateValue": {
                        "type": "integer",
                        "description": "schedule value\n"
                    },
                    "targetAsset": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "asset where to ingest results\n"
                    },
                    "targetAttribute": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "attribute where to ingest results\n"
                    },
                    "targetVariable": {
                        "type": "string",
                        "description": "variable to be considered to be ingested\n"
                    },
                    "timeWindow": {
                        "type": "integer",
                        "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[cron|rate] type for the cron\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/node:Node": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst myNode = new splight.Node(\"myNode\", {\n    instanceType: \"t2.micro\",\n    region: \"us-east-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\nmy_node = splight.Node(\"myNode\",\n    instance_type=\"t2.micro\",\n    region=\"us-east-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myNode = new Splight.Node(\"myNode\", new()\n    {\n        InstanceType = \"t2.micro\",\n        Region = \"us-east-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.NewNode(ctx, \"myNode\", \u0026splight.NodeArgs{\n\t\t\tInstanceType: pulumi.String(\"t2.micro\"),\n\t\t\tRegion:       pulumi.String(\"us-east-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Node;\nimport com.pulumi.splight.NodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myNode = new Node(\"myNode\", NodeArgs.builder()\n            .instanceType(\"t2.micro\")\n            .region(\"us-east-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myNode:\n    type: splight:Node\n    properties:\n      instanceType: t2.micro\n      region: us-east-1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/node:Node [options] splight_node.\u003cname\u003e \u003cnode_id\u003e\n```\n\n",
            "properties": {
                "instanceType": {
                    "type": "string",
                    "description": "intance type\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "organization id\n"
                },
                "region": {
                    "type": "string",
                    "description": "node region\n"
                }
            },
            "required": [
                "instanceType",
                "name",
                "organizationId",
                "region"
            ],
            "inputProperties": {
                "instanceType": {
                    "type": "string",
                    "description": "intance type\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "node region\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceType",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Node resources.\n",
                "properties": {
                    "instanceType": {
                        "type": "string",
                        "description": "intance type\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "organization id\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "node region\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "splight:index/secret:Secret": {
            "description": "Provides a Cloudflare Observatory Scheduled Test resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst secretTest = new splight.Secret(\"secretTest\", {rawValue: \"ASUPERSECR3T\"});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\nsecret_test = splight.Secret(\"secretTest\", raw_value=\"ASUPERSECR3T\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var secretTest = new Splight.Secret(\"secretTest\", new()\n    {\n        RawValue = \"ASUPERSECR3T\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.NewSecret(ctx, \"secretTest\", \u0026splight.SecretArgs{\n\t\t\tRawValue: pulumi.String(\"ASUPERSECR3T\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Secret;\nimport com.pulumi.splight.SecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var secretTest = new Secret(\"secretTest\", SecretArgs.builder()\n            .rawValue(\"ASUPERSECR3T\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  secretTest:\n    type: splight:Secret\n    properties:\n      rawValue: ASUPERSECR3T\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/secret:Secret [options] splight_secret.\u003cname\u003e \u003csecret_id\u003e\n```\n\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "rawValue": {
                    "type": "string",
                    "secret": true
                },
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "rawValue",
                "value"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "rawValue": {
                    "type": "string",
                    "secret": true
                }
            },
            "requiredInputs": [
                "rawValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "rawValue": {
                        "type": "string",
                        "secret": true
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "splight:index/getAssetKinds:getAssetKinds": {
            "description": "Data source to fetch all asset kinds defined in the platform\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@pulumi/splight\";\n\nconst kinds = splight.getAssetKinds({});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\nkinds = splight.get_asset_kinds()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Pulumi.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var kinds = Splight.GetAssetKinds.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.GetAssetKinds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.SplightFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var kinds = SplightFunctions.getAssetKinds();\n\n    }\n}\n```\n```yaml\nvariables:\n  kinds:\n    fn::invoke:\n      Function: splight:getAssetKinds\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getAssetKinds.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kinds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/getAssetKindsKind:getAssetKindsKind"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "kinds",
                    "id"
                ]
            }
        }
    }
}