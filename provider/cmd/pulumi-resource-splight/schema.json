{
    "name": "splight",
    "description": "A Pulumi package for creating and managing Splight resources.",
    "keywords": [
        "splightplatform",
        "splight",
        "infrastructure"
    ],
    "homepage": "https://www.splight-ai.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`splight` Terraform Provider](https://github.com/splightplatform/terraform-provider-splight).",
    "repository": "https://github.com/splightplatform/pulumi-splight",
    "logoUrl": "https://raw.githubusercontent.com/splightplatform/pulumi-splight/main/docs/logo.png",
    "pluginDownloadURL": "github://api.github.com/splightplatform",
    "publisher": "splightplatform",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Splight",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/splightplatform/pulumi-splight/sdk/go/splight",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageName": "@splightplatform/pulumi-splight",
            "packageDescription": "A Pulumi package for creating and managing Splight resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/splightplatform/terraform-provider-splight)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-splight` repo](https://github.com/splightplatform/pulumi-splight/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-splight` repo](https://github.com/splightplatform/terraform-provider-splight/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "pulumi_splight",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/splightplatform/terraform-provider-splight)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-splight` repo](https://github.com/splightplatform/pulumi-splight/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-splight` repo](https://github.com/splightplatform/terraform-provider-splight/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "hostname": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        }
    },
    "types": {
        "splight:index/ActionAsset:ActionAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "asset id\n"
                },
                "name": {
                    "type": "string",
                    "description": "asset name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/ActionSetpoint:ActionSetpoint": {
            "properties": {
                "attribute": {
                    "$ref": "#/types/splight:index/ActionSetpointAttribute:ActionSetpointAttribute",
                    "description": "the target attribute of the setpoint which should also be an attribute of the specified asset\n"
                },
                "id": {
                    "type": "string",
                    "description": "setpoint Id\n"
                },
                "name": {
                    "type": "string",
                    "description": "setpoint name\n"
                },
                "value": {
                    "type": "string",
                    "description": "JSON encoded scalar value\n"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "attribute",
                        "id",
                        "name",
                        "value"
                    ]
                }
            }
        },
        "splight:index/ActionSetpointAttribute:ActionSetpointAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "attribute id\n"
                },
                "name": {
                    "type": "string",
                    "description": "attribute name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/AlertAlertItem:AlertAlertItem": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "how the expression is shown (i.e 'A * 2')\n",
                    "willReplaceOnChanges": true
                },
                "expressionPlain": {
                    "type": "string",
                    "description": "actual mongo query containing the expression\n",
                    "willReplaceOnChanges": true
                },
                "id": {
                    "type": "string",
                    "description": "Id of the function item\n"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/AlertAlertItemQueryFilterAsset:AlertAlertItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/AlertAlertItemQueryFilterAttribute:AlertAlertItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string",
                    "description": "function used to aggregate data\n",
                    "willReplaceOnChanges": true
                },
                "queryGroupUnit": {
                    "type": "string",
                    "description": "time window to apply the aggregation\n",
                    "willReplaceOnChanges": true
                },
                "queryPlain": {
                    "type": "string",
                    "description": "actual mongo query\n",
                    "willReplaceOnChanges": true
                },
                "refId": {
                    "type": "string",
                    "description": "identifier of the variable (i.e 'A')\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "either QUERY or EXPRESSION\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "expression",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryGroupFunction",
                "queryGroupUnit",
                "queryPlain",
                "refId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expression",
                        "expressionPlain",
                        "id",
                        "queryFilterAsset",
                        "queryFilterAttribute",
                        "queryGroupFunction",
                        "queryGroupUnit",
                        "queryPlain",
                        "refId",
                        "type"
                    ]
                }
            }
        },
        "splight:index/AlertAlertItemQueryFilterAsset:AlertAlertItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "splight:index/AlertAlertItemQueryFilterAttribute:AlertAlertItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "splight:index/AlertRelatedAsset:AlertRelatedAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "asset id\n"
                },
                "name": {
                    "type": "string",
                    "description": "asset name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/AlertTag:AlertTag": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "tag id\n"
                },
                "name": {
                    "type": "string",
                    "description": "tag name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/AlertThreshold:AlertThreshold": {
            "properties": {
                "status": {
                    "type": "string",
                    "description": "[alert|warning|no_alert] status value for the threshold\n"
                },
                "statusText": {
                    "type": "string",
                    "description": "optional custom value to be displayed in the platform.\n"
                },
                "value": {
                    "type": "number",
                    "description": "value to be considered to compare\n"
                }
            },
            "type": "object",
            "required": [
                "status",
                "value"
            ]
        },
        "splight:index/AssetKind:AssetKind": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "kind id\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "kind name\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/AssetRelationAsset:AssetRelationAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "asset id\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "asset name\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/AssetRelationRelatedAsset:AssetRelationRelatedAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "asset id\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "asset name\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/AssetRelationRelatedAssetKind:AssetRelationRelatedAssetKind": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "kind id\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "kind name\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/AssetTag:AssetTag": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "tag id\n"
                },
                "name": {
                    "type": "string",
                    "description": "tag name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/CommandAction:CommandAction": {
            "properties": {
                "asset": {
                    "$ref": "#/types/splight:index/CommandActionAsset:CommandActionAsset",
                    "description": "asset associated with the action (to be deprecated)\n"
                },
                "id": {
                    "type": "string",
                    "description": "action Id\n"
                },
                "name": {
                    "type": "string",
                    "description": "setpoint name\n"
                }
            },
            "type": "object",
            "required": [
                "asset",
                "id",
                "name"
            ]
        },
        "splight:index/CommandActionAsset:CommandActionAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "asset id\n"
                },
                "name": {
                    "type": "string",
                    "description": "asset name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/ComponentInput:ComponentInput": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "sensitive": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "splight:index/ComponentRoutineConfig:ComponentRoutineConfig": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "sensitive": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "splight:index/ComponentRoutineInput:ComponentRoutineInput": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "sensitive": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "valueType": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineInputValue:ComponentRoutineInputValue"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "valueType"
            ]
        },
        "splight:index/ComponentRoutineInputValue:ComponentRoutineInputValue": {
            "properties": {
                "asset": {
                    "type": "string"
                },
                "attribute": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "asset",
                "attribute"
            ]
        },
        "splight:index/ComponentRoutineOutput:ComponentRoutineOutput": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "sensitive": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "valueType": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineOutputValue:ComponentRoutineOutputValue"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "valueType"
            ]
        },
        "splight:index/ComponentRoutineOutputValue:ComponentRoutineOutputValue": {
            "properties": {
                "asset": {
                    "type": "string"
                },
                "attribute": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "asset",
                "attribute"
            ]
        },
        "splight:index/ComponentTag:ComponentTag": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "tag id\n"
                },
                "name": {
                    "type": "string",
                    "description": "tag name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/DashboardActionlistChartChartItem:DashboardActionlistChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardActionlistChartChartItemQueryFilterAsset:DashboardActionlistChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardActionlistChartChartItemQueryFilterAttribute:DashboardActionlistChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardActionlistChartChartItemQueryFilterAsset:DashboardActionlistChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardActionlistChartChartItemQueryFilterAttribute:DashboardActionlistChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardActionlistChartThreshold:DashboardActionlistChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardActionlistChartValueMapping:DashboardActionlistChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardAlerteventsChartChartItem:DashboardAlerteventsChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardAlerteventsChartChartItemQueryFilterAsset:DashboardAlerteventsChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardAlerteventsChartChartItemQueryFilterAttribute:DashboardAlerteventsChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardAlerteventsChartChartItemQueryFilterAsset:DashboardAlerteventsChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardAlerteventsChartChartItemQueryFilterAttribute:DashboardAlerteventsChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardAlerteventsChartThreshold:DashboardAlerteventsChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardAlerteventsChartValueMapping:DashboardAlerteventsChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardAlertlistChartChartItem:DashboardAlertlistChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardAlertlistChartChartItemQueryFilterAsset:DashboardAlertlistChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardAlertlistChartChartItemQueryFilterAttribute:DashboardAlertlistChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardAlertlistChartChartItemQueryFilterAsset:DashboardAlertlistChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardAlertlistChartChartItemQueryFilterAttribute:DashboardAlertlistChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardAlertlistChartThreshold:DashboardAlertlistChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardAlertlistChartValueMapping:DashboardAlertlistChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardAssetlistChartChartItem:DashboardAssetlistChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardAssetlistChartChartItemQueryFilterAsset:DashboardAssetlistChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardAssetlistChartChartItemQueryFilterAttribute:DashboardAssetlistChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardAssetlistChartChartItemQueryFilterAsset:DashboardAssetlistChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardAssetlistChartChartItemQueryFilterAttribute:DashboardAssetlistChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardAssetlistChartThreshold:DashboardAssetlistChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardAssetlistChartValueMapping:DashboardAssetlistChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardBarChartChartItem:DashboardBarChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardBarChartChartItemQueryFilterAsset:DashboardBarChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardBarChartChartItemQueryFilterAttribute:DashboardBarChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardBarChartChartItemQueryFilterAsset:DashboardBarChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardBarChartChartItemQueryFilterAttribute:DashboardBarChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardBarChartThreshold:DashboardBarChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardBarChartValueMapping:DashboardBarChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardBargaugeChartChartItem:DashboardBargaugeChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardBargaugeChartChartItemQueryFilterAsset:DashboardBargaugeChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardBargaugeChartChartItemQueryFilterAttribute:DashboardBargaugeChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardBargaugeChartChartItemQueryFilterAsset:DashboardBargaugeChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardBargaugeChartChartItemQueryFilterAttribute:DashboardBargaugeChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardBargaugeChartThreshold:DashboardBargaugeChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardBargaugeChartValueMapping:DashboardBargaugeChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardCommandlistChartChartItem:DashboardCommandlistChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardCommandlistChartChartItemQueryFilterAsset:DashboardCommandlistChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardCommandlistChartChartItemQueryFilterAttribute:DashboardCommandlistChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardCommandlistChartChartItemQueryFilterAsset:DashboardCommandlistChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardCommandlistChartChartItemQueryFilterAttribute:DashboardCommandlistChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardCommandlistChartThreshold:DashboardCommandlistChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardCommandlistChartValueMapping:DashboardCommandlistChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardGaugeChartChartItem:DashboardGaugeChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardGaugeChartChartItemQueryFilterAsset:DashboardGaugeChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardGaugeChartChartItemQueryFilterAttribute:DashboardGaugeChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardGaugeChartChartItemQueryFilterAsset:DashboardGaugeChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardGaugeChartChartItemQueryFilterAttribute:DashboardGaugeChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardGaugeChartThreshold:DashboardGaugeChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardGaugeChartValueMapping:DashboardGaugeChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardHistogramChartChartItem:DashboardHistogramChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardHistogramChartChartItemQueryFilterAsset:DashboardHistogramChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardHistogramChartChartItemQueryFilterAttribute:DashboardHistogramChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardHistogramChartChartItemQueryFilterAsset:DashboardHistogramChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardHistogramChartChartItemQueryFilterAttribute:DashboardHistogramChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardHistogramChartThreshold:DashboardHistogramChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardHistogramChartValueMapping:DashboardHistogramChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardImageChartChartItem:DashboardImageChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardImageChartChartItemQueryFilterAsset:DashboardImageChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardImageChartChartItemQueryFilterAttribute:DashboardImageChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardImageChartChartItemQueryFilterAsset:DashboardImageChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardImageChartChartItemQueryFilterAttribute:DashboardImageChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardImageChartThreshold:DashboardImageChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardImageChartValueMapping:DashboardImageChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardRelatedAsset:DashboardRelatedAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "asset id\n"
                },
                "name": {
                    "type": "string",
                    "description": "asset name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/DashboardStatChartChartItem:DashboardStatChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardStatChartChartItemQueryFilterAsset:DashboardStatChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardStatChartChartItemQueryFilterAttribute:DashboardStatChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardStatChartChartItemQueryFilterAsset:DashboardStatChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardStatChartChartItemQueryFilterAttribute:DashboardStatChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardStatChartThreshold:DashboardStatChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardStatChartValueMapping:DashboardStatChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardTableChartChartItem:DashboardTableChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardTableChartChartItemQueryFilterAsset:DashboardTableChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardTableChartChartItemQueryFilterAttribute:DashboardTableChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardTableChartChartItemQueryFilterAsset:DashboardTableChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardTableChartChartItemQueryFilterAttribute:DashboardTableChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardTableChartThreshold:DashboardTableChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardTableChartValueMapping:DashboardTableChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardTag:DashboardTag": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "tag id\n"
                },
                "name": {
                    "type": "string",
                    "description": "tag name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/DashboardTextChartChartItem:DashboardTextChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardTextChartChartItemQueryFilterAsset:DashboardTextChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardTextChartChartItemQueryFilterAttribute:DashboardTextChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardTextChartChartItemQueryFilterAsset:DashboardTextChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardTextChartChartItemQueryFilterAttribute:DashboardTextChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardTextChartThreshold:DashboardTextChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardTextChartValueMapping:DashboardTextChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/DashboardTimeseriesChartChartItem:DashboardTimeseriesChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/DashboardTimeseriesChartChartItemQueryFilterAsset:DashboardTimeseriesChartChartItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/DashboardTimeseriesChartChartItemQueryFilterAttribute:DashboardTimeseriesChartChartItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string"
                },
                "queryGroupUnit": {
                    "type": "string"
                },
                "queryLimit": {
                    "type": "integer"
                },
                "queryPlain": {
                    "type": "string"
                },
                "querySortDirection": {
                    "type": "integer"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardTimeseriesChartChartItemQueryFilterAsset:DashboardTimeseriesChartChartItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardTimeseriesChartChartItemQueryFilterAttribute:DashboardTimeseriesChartChartItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/DashboardTimeseriesChartThreshold:DashboardTimeseriesChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardTimeseriesChartValueMapping:DashboardTimeseriesChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/FunctionFunctionItem:FunctionFunctionItem": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "how the expression is shown (i.e 'A * 2')\n"
                },
                "expressionPlain": {
                    "type": "string",
                    "description": "actual mongo query containing the expression\n"
                },
                "id": {
                    "type": "string",
                    "description": "Id of the function item\n"
                },
                "queryFilterAsset": {
                    "$ref": "#/types/splight:index/FunctionFunctionItemQueryFilterAsset:FunctionFunctionItemQueryFilterAsset",
                    "description": "Asset filter\n"
                },
                "queryFilterAttribute": {
                    "$ref": "#/types/splight:index/FunctionFunctionItemQueryFilterAttribute:FunctionFunctionItemQueryFilterAttribute",
                    "description": "Attribute filter\n"
                },
                "queryGroupFunction": {
                    "type": "string",
                    "description": "function used to aggregate data\n"
                },
                "queryGroupUnit": {
                    "type": "string",
                    "description": "time window to apply the aggregation\n"
                },
                "queryPlain": {
                    "type": "string",
                    "description": "actual mongo query\n"
                },
                "refId": {
                    "type": "string",
                    "description": "identifier of the variable (i.e 'A')\n"
                },
                "type": {
                    "type": "string",
                    "description": "either QUERY or EXPRESSION\n"
                }
            },
            "type": "object",
            "required": [
                "expression",
                "expressionPlain",
                "queryFilterAsset",
                "queryFilterAttribute",
                "queryGroupFunction",
                "queryGroupUnit",
                "queryPlain",
                "refId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expression",
                        "expressionPlain",
                        "id",
                        "queryFilterAsset",
                        "queryFilterAttribute",
                        "queryGroupFunction",
                        "queryGroupUnit",
                        "queryPlain",
                        "refId",
                        "type"
                    ]
                }
            }
        },
        "splight:index/FunctionFunctionItemQueryFilterAsset:FunctionFunctionItemQueryFilterAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/FunctionFunctionItemQueryFilterAttribute:FunctionFunctionItemQueryFilterAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/FunctionRelatedAsset:FunctionRelatedAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "asset id\n"
                },
                "name": {
                    "type": "string",
                    "description": "asset name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/FunctionTag:FunctionTag": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "tag id\n"
                },
                "name": {
                    "type": "string",
                    "description": "tag name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/FunctionTargetAsset:FunctionTargetAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/FunctionTargetAttribute:FunctionTargetAttribute": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "type of the resource\n"
                }
            },
            "type": "object"
        },
        "splight:index/LineAbsorptivity:LineAbsorptivity": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineActivePower:LineActivePower": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/LineActivePowerEnd:LineActivePowerEnd": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/LineAmpacity:LineAmpacity": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/LineAtmosphere:LineAtmosphere": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineCapacitance:LineCapacitance": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineConductance:LineConductance": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineCurrent:LineCurrent": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/LineCurrentR:LineCurrentR": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/LineCurrentT:LineCurrentT": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/LineDiameter:LineDiameter": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineEmissivity:LineEmissivity": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineEnergy:LineEnergy": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/LineKind:LineKind": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "kind id\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "kind name\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/LineLength:LineLength": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineMaxTemperature:LineMaxTemperature": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/LineMaximumAllowedCurrent:LineMaximumAllowedCurrent": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineMaximumAllowedPower:LineMaximumAllowedPower": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineMaximumAllowedTemperature:LineMaximumAllowedTemperature": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineMaximumAllowedTemperatureLte:LineMaximumAllowedTemperatureLte": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineMaximumAllowedTemperatureSte:LineMaximumAllowedTemperatureSte": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineNumberOfConductors:LineNumberOfConductors": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineReactance:LineReactance": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineReactivePower:LineReactivePower": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/LineReferenceResistance:LineReferenceResistance": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineRelatedAsset:LineRelatedAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "asset id\n"
                },
                "name": {
                    "type": "string",
                    "description": "asset name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/LineResistance:LineResistance": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineSafetyMarginForPower:LineSafetyMarginForPower": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineSusceptance:LineSusceptance": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineTag:LineTag": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "tag id\n"
                },
                "name": {
                    "type": "string",
                    "description": "tag name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/LineTemperatureCoeffResistance:LineTemperatureCoeffResistance": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/LineVoltageR:LineVoltageR": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/LineVoltageSt:LineVoltageSt": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/LineVoltageTr:LineVoltageTr": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/SegmentAltitude:SegmentAltitude": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/SegmentAzimuth:SegmentAzimuth": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/SegmentCumulativeDistance:SegmentCumulativeDistance": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit",
                        "value"
                    ]
                }
            }
        },
        "splight:index/SegmentKind:SegmentKind": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "kind id\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "kind name\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/SegmentRelatedAsset:SegmentRelatedAsset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "asset id\n"
                },
                "name": {
                    "type": "string",
                    "description": "asset name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/SegmentTag:SegmentTag": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "tag id\n"
                },
                "name": {
                    "type": "string",
                    "description": "tag name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/SegmentTemperature:SegmentTemperature": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/SegmentWindDirection:SegmentWindDirection": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/SegmentWindSpeed:SegmentWindSpeed": {
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asset",
                        "id",
                        "name",
                        "type",
                        "unit"
                    ]
                }
            }
        },
        "splight:index/getAssetKindsKind:getAssetKindsKind": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "splight:index/getTagsTag:getTagsTag": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the splight package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "hostname": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        },
        "inputProperties": {
            "hostname": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        }
    },
    "resources": {
        "splight:index/action:Action": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst myAsset = new splight.Asset(\"myAsset\", {\n    description: \"My Asset Description\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [{\n            type: \"Point\",\n            coordinates: [\n                0,\n                0,\n            ],\n        }],\n    }),\n});\nconst myAttribute = new splight.AssetAttribute(\"myAttribute\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: myAsset.id,\n});\nconst myAction = new splight.Action(\"myAction\", {\n    asset: {\n        id: myAsset.id,\n        name: myAsset.name,\n    },\n    setpoints: [{\n        value: JSON.stringify(1),\n        attribute: {\n            id: myAttribute.id,\n            name: myAttribute.name,\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nmy_asset = splight.Asset(\"myAsset\",\n    description=\"My Asset Description\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [{\n            \"type\": \"Point\",\n            \"coordinates\": [\n                0,\n                0,\n            ],\n        }],\n    }))\nmy_attribute = splight.AssetAttribute(\"myAttribute\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=my_asset.id)\nmy_action = splight.Action(\"myAction\",\n    asset={\n        \"id\": my_asset.id,\n        \"name\": my_asset.name,\n    },\n    setpoints=[{\n        \"value\": json.dumps(1),\n        \"attribute\": {\n            \"id\": my_attribute.id,\n            \"name\": my_attribute.name,\n        },\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAsset = new Splight.Asset(\"myAsset\", new()\n    {\n        Description = \"My Asset Description\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"type\"] = \"Point\",\n                    [\"coordinates\"] = new[]\n                    {\n                        0,\n                        0,\n                    },\n                },\n            },\n        }),\n    });\n\n    var myAttribute = new Splight.AssetAttribute(\"myAttribute\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = myAsset.Id,\n    });\n\n    var myAction = new Splight.Action(\"myAction\", new()\n    {\n        Asset = new Splight.Inputs.ActionAssetArgs\n        {\n            Id = myAsset.Id,\n            Name = myAsset.Name,\n        },\n        Setpoints = new[]\n        {\n            new Splight.Inputs.ActionSetpointArgs\n            {\n                Value = JsonSerializer.Serialize(1),\n                Attribute = new Splight.Inputs.ActionSetpointAttributeArgs\n                {\n                    Id = myAttribute.Id,\n                    Name = myAttribute.Name,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\": \"GeometryCollection\",\n\t\t\t\"geometries\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"type\": \"Point\",\n\t\t\t\t\t\"coordinates\": []float64{\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tmyAsset, err := splight.NewAsset(ctx, \"myAsset\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"My Asset Description\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyAttribute, err := splight.NewAssetAttribute(ctx, \"myAttribute\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: myAsset.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON1, err := json.Marshal(1)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = splight.NewAction(ctx, \"myAction\", \u0026splight.ActionArgs{\n\t\t\tAsset: \u0026splight.ActionAssetArgs{\n\t\t\t\tId:   myAsset.ID(),\n\t\t\t\tName: myAsset.Name,\n\t\t\t},\n\t\t\tSetpoints: splight.ActionSetpointArray{\n\t\t\t\t\u0026splight.ActionSetpointArgs{\n\t\t\t\t\tValue: pulumi.String(json1),\n\t\t\t\t\tAttribute: \u0026splight.ActionSetpointAttributeArgs{\n\t\t\t\t\t\tId:   myAttribute.ID(),\n\t\t\t\t\t\tName: myAttribute.Name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Action;\nimport com.pulumi.splight.ActionArgs;\nimport com.pulumi.splight.inputs.ActionAssetArgs;\nimport com.pulumi.splight.inputs.ActionSetpointArgs;\nimport com.pulumi.splight.inputs.ActionSetpointAttributeArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myAsset = new Asset(\"myAsset\", AssetArgs.builder()\n            .description(\"My Asset Description\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(jsonObject(\n                        jsonProperty(\"type\", \"Point\"),\n                        jsonProperty(\"coordinates\", jsonArray(\n                            0, \n                            0\n                        ))\n                    )))\n                )))\n            .build());\n\n        var myAttribute = new AssetAttribute(\"myAttribute\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(myAsset.id())\n            .build());\n\n        var myAction = new Action(\"myAction\", ActionArgs.builder()\n            .asset(ActionAssetArgs.builder()\n                .id(myAsset.id())\n                .name(myAsset.name())\n                .build())\n            .setpoints(ActionSetpointArgs.builder()\n                .value(serializeJson(\n                    1))\n                .attribute(ActionSetpointAttributeArgs.builder()\n                    .id(myAttribute.id())\n                    .name(myAttribute.name())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myAsset:\n    type: splight:Asset\n    properties:\n      description: My Asset Description\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries:\n            - type: Point\n              coordinates:\n                - 0\n                - 0\n  myAttribute:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${myAsset.id}\n  myAction:\n    type: splight:Action\n    properties:\n      asset:\n        id: ${myAsset.id}\n        name: ${myAsset.name}\n      setpoints:\n        - value:\n            fn::toJSON: 1\n          attribute:\n            id: ${myAttribute.id}\n            name: ${myAttribute.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/action:Action [options] splight_action.\u003cname\u003e \u003caction_id\u003e\n```\n\n",
            "properties": {
                "asset": {
                    "$ref": "#/types/splight:index/ActionAsset:ActionAsset",
                    "description": "target asset of the setpoint\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the action to be created\n"
                },
                "setpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ActionSetpoint:ActionSetpoint"
                    },
                    "description": "action setpoints\n"
                }
            },
            "required": [
                "asset",
                "name",
                "setpoints"
            ],
            "inputProperties": {
                "asset": {
                    "$ref": "#/types/splight:index/ActionAsset:ActionAsset",
                    "description": "target asset of the setpoint\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the action to be created\n"
                },
                "setpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ActionSetpoint:ActionSetpoint"
                    },
                    "description": "action setpoints\n"
                }
            },
            "requiredInputs": [
                "asset",
                "setpoints"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Action resources.\n",
                "properties": {
                    "asset": {
                        "$ref": "#/types/splight:index/ActionAsset:ActionAsset",
                        "description": "target asset of the setpoint\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the action to be created\n"
                    },
                    "setpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ActionSetpoint:ActionSetpoint"
                        },
                        "description": "action setpoints\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/alert:Alert": {
            "description": "## Example Usage\n\n## Import\n\n```sh\n$ pulumi import splight:index/alert:Alert [options] splight_alert.\u003cname\u003e \u003calert_id\u003e\n```\n\n",
            "properties": {
                "aggregation": {
                    "type": "string",
                    "description": "aggregation to be applied to reads before comparisson\n"
                },
                "alertItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertAlertItem:AlertAlertItem"
                    },
                    "description": "traces to be used to compute the results\n"
                },
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "operator": {
                    "type": "string",
                    "description": "operator to be used to compare the read value with the threshold value\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertRelatedAsset:AlertRelatedAsset"
                    },
                    "description": "related assets of the resource\n"
                },
                "severity": {
                    "type": "string",
                    "description": "[sev1,...,sev8] severity for the alert\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertTag:AlertTag"
                    },
                    "description": "tags of the resource\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be used to compare with thresholds\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertThreshold:AlertThreshold"
                    }
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "required": [
                "aggregation",
                "alertItems",
                "cronDom",
                "cronDow",
                "cronHours",
                "cronMinutes",
                "cronMonth",
                "cronYear",
                "description",
                "name",
                "operator",
                "rateUnit",
                "rateValue",
                "severity",
                "targetVariable",
                "thresholds",
                "timeWindow",
                "type"
            ],
            "inputProperties": {
                "aggregation": {
                    "type": "string",
                    "description": "aggregation to be applied to reads before comparisson\n"
                },
                "alertItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertAlertItem:AlertAlertItem"
                    },
                    "description": "traces to be used to compute the results\n"
                },
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "operator": {
                    "type": "string",
                    "description": "operator to be used to compare the read value with the threshold value\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertRelatedAsset:AlertRelatedAsset"
                    },
                    "description": "related assets of the resource\n"
                },
                "severity": {
                    "type": "string",
                    "description": "[sev1,...,sev8] severity for the alert\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertTag:AlertTag"
                    },
                    "description": "tags of the resource\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be used to compare with thresholds\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertThreshold:AlertThreshold"
                    }
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "requiredInputs": [
                "aggregation",
                "alertItems",
                "description",
                "operator",
                "severity",
                "targetVariable",
                "thresholds",
                "timeWindow",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alert resources.\n",
                "properties": {
                    "aggregation": {
                        "type": "string",
                        "description": "aggregation to be applied to reads before comparisson\n"
                    },
                    "alertItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/AlertAlertItem:AlertAlertItem"
                        },
                        "description": "traces to be used to compute the results\n"
                    },
                    "cronDom": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronDow": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronHours": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMinutes": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMonth": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronYear": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the resource\n"
                    },
                    "operator": {
                        "type": "string",
                        "description": "operator to be used to compare the read value with the threshold value\n"
                    },
                    "rateUnit": {
                        "type": "string",
                        "description": "[day|hour|minute] schedule unit\n"
                    },
                    "rateValue": {
                        "type": "integer",
                        "description": "schedule value\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/AlertRelatedAsset:AlertRelatedAsset"
                        },
                        "description": "related assets of the resource\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "[sev1,...,sev8] severity for the alert\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/AlertTag:AlertTag"
                        },
                        "description": "tags of the resource\n"
                    },
                    "targetVariable": {
                        "type": "string",
                        "description": "variable to be used to compare with thresholds\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/AlertThreshold:AlertThreshold"
                        }
                    },
                    "timeWindow": {
                        "type": "integer",
                        "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[cron|rate] type for the cron\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/asset:Asset": {
            "description": "## Example Usage\n\n## Import\n\n```sh\n$ pulumi import splight:index/asset:Asset [options] splight_asset.\u003cname\u003e \u003casset_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of the resource\n"
                },
                "geometry": {
                    "type": "string",
                    "description": "GeoJSON GeomtryCollection\n"
                },
                "kind": {
                    "$ref": "#/types/splight:index/AssetKind:AssetKind",
                    "description": "kind of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AssetTag:AssetTag"
                    },
                    "description": "tags of the resource\n"
                }
            },
            "required": [
                "geometry",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "description of the resource\n"
                },
                "geometry": {
                    "type": "string",
                    "description": "GeoJSON GeomtryCollection\n"
                },
                "kind": {
                    "$ref": "#/types/splight:index/AssetKind:AssetKind",
                    "description": "kind of the resource\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AssetTag:AssetTag"
                    },
                    "description": "tags of the resource\n"
                }
            },
            "requiredInputs": [
                "geometry"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Asset resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "description of the resource\n"
                    },
                    "geometry": {
                        "type": "string",
                        "description": "GeoJSON GeomtryCollection\n"
                    },
                    "kind": {
                        "$ref": "#/types/splight:index/AssetKind:AssetKind",
                        "description": "kind of the resource\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/AssetTag:AssetTag"
                        },
                        "description": "tags of the resource\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/assetAttribute:AssetAttribute": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst myAsset = new splight.Asset(\"myAsset\", {\n    description: \"My Asset Description\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [{\n            type: \"Point\",\n            coordinates: [\n                0,\n                0,\n            ],\n        }],\n    }),\n});\nconst myAttribute = new splight.AssetAttribute(\"myAttribute\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: myAsset.id,\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nmy_asset = splight.Asset(\"myAsset\",\n    description=\"My Asset Description\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [{\n            \"type\": \"Point\",\n            \"coordinates\": [\n                0,\n                0,\n            ],\n        }],\n    }))\nmy_attribute = splight.AssetAttribute(\"myAttribute\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=my_asset.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAsset = new Splight.Asset(\"myAsset\", new()\n    {\n        Description = \"My Asset Description\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"type\"] = \"Point\",\n                    [\"coordinates\"] = new[]\n                    {\n                        0,\n                        0,\n                    },\n                },\n            },\n        }),\n    });\n\n    var myAttribute = new Splight.AssetAttribute(\"myAttribute\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = myAsset.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\": \"GeometryCollection\",\n\t\t\t\"geometries\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"type\": \"Point\",\n\t\t\t\t\t\"coordinates\": []float64{\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tmyAsset, err := splight.NewAsset(ctx, \"myAsset\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"My Asset Description\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewAssetAttribute(ctx, \"myAttribute\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: myAsset.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myAsset = new Asset(\"myAsset\", AssetArgs.builder()\n            .description(\"My Asset Description\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(jsonObject(\n                        jsonProperty(\"type\", \"Point\"),\n                        jsonProperty(\"coordinates\", jsonArray(\n                            0, \n                            0\n                        ))\n                    )))\n                )))\n            .build());\n\n        var myAttribute = new AssetAttribute(\"myAttribute\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(myAsset.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myAsset:\n    type: splight:Asset\n    properties:\n      description: My Asset Description\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries:\n            - type: Point\n              coordinates:\n                - 0\n                - 0\n  myAttribute:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${myAsset.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/assetAttribute:AssetAttribute [options] splight_asset_attribute.\u003cname\u003e \u003casset_attribute_id\u003e\n```\n\n",
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n"
                }
            },
            "required": [
                "asset",
                "name",
                "type"
            ],
            "inputProperties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "asset",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AssetAttribute resources.\n",
                "properties": {
                    "asset": {
                        "type": "string",
                        "description": "reference to the asset to be linked to\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                    },
                    "unit": {
                        "type": "string",
                        "description": "optional reference to the unit of the measure\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "splight:index/assetMetadata:AssetMetadata": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst myAsset = new splight.Asset(\"myAsset\", {\n    description: \"My Asset Description\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [{\n            type: \"Point\",\n            coordinates: [\n                0,\n                0,\n            ],\n        }],\n    }),\n});\nconst myAssetMetadata = new splight.AssetMetadata(\"myAssetMetadata\", {\n    type: \"Number\",\n    unit: \"meters\",\n    value: JSON.stringify(10),\n    asset: myAsset.id,\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nmy_asset = splight.Asset(\"myAsset\",\n    description=\"My Asset Description\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [{\n            \"type\": \"Point\",\n            \"coordinates\": [\n                0,\n                0,\n            ],\n        }],\n    }))\nmy_asset_metadata = splight.AssetMetadata(\"myAssetMetadata\",\n    type=\"Number\",\n    unit=\"meters\",\n    value=json.dumps(10),\n    asset=my_asset.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAsset = new Splight.Asset(\"myAsset\", new()\n    {\n        Description = \"My Asset Description\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"type\"] = \"Point\",\n                    [\"coordinates\"] = new[]\n                    {\n                        0,\n                        0,\n                    },\n                },\n            },\n        }),\n    });\n\n    var myAssetMetadata = new Splight.AssetMetadata(\"myAssetMetadata\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Value = JsonSerializer.Serialize(10),\n        Asset = myAsset.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\": \"GeometryCollection\",\n\t\t\t\"geometries\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"type\": \"Point\",\n\t\t\t\t\t\"coordinates\": []float64{\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tmyAsset, err := splight.NewAsset(ctx, \"myAsset\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"My Asset Description\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON1, err := json.Marshal(10)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = splight.NewAssetMetadata(ctx, \"myAssetMetadata\", \u0026splight.AssetMetadataArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tValue: pulumi.String(json1),\n\t\t\tAsset: myAsset.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetMetadata;\nimport com.pulumi.splight.AssetMetadataArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myAsset = new Asset(\"myAsset\", AssetArgs.builder()\n            .description(\"My Asset Description\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(jsonObject(\n                        jsonProperty(\"type\", \"Point\"),\n                        jsonProperty(\"coordinates\", jsonArray(\n                            0, \n                            0\n                        ))\n                    )))\n                )))\n            .build());\n\n        var myAssetMetadata = new AssetMetadata(\"myAssetMetadata\", AssetMetadataArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .value(serializeJson(\n                10))\n            .asset(myAsset.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myAsset:\n    type: splight:Asset\n    properties:\n      description: My Asset Description\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries:\n            - type: Point\n              coordinates:\n                - 0\n                - 0\n  myAssetMetadata:\n    type: splight:AssetMetadata\n    properties:\n      type: Number\n      unit: meters\n      value:\n        fn::toJSON: 10\n      asset: ${myAsset.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/assetMetadata:AssetMetadata [options] splight_asset_metadata.\u003cname\u003e \u003casset_metadata_id\u003e\n```\n\n",
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "required": [
                "asset",
                "name",
                "type",
                "value"
            ],
            "inputProperties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "requiredInputs": [
                "asset",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AssetMetadata resources.\n",
                "properties": {
                    "asset": {
                        "type": "string",
                        "description": "reference to the asset to be linked to\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[String|Boolean|Number] type of the data to be ingested in this attribute\n"
                    },
                    "unit": {
                        "type": "string",
                        "description": "optional reference to the unit of the measure\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "metadata value\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/assetRelation:AssetRelation": {
            "description": "## Example Usage\n\n## Import\n\n```sh\n$ pulumi import splight:index/assetRelation:AssetRelation [options] splight_relation.\u003cname\u003e \u003crelation_id\u003e\n```\n\n",
            "properties": {
                "asset": {
                    "$ref": "#/types/splight:index/AssetRelationAsset:AssetRelationAsset",
                    "description": "asset where the relation origins\n"
                },
                "description": {
                    "type": "string",
                    "description": "relation description\n"
                },
                "name": {
                    "type": "string",
                    "description": "relation name\n"
                },
                "relatedAsset": {
                    "$ref": "#/types/splight:index/AssetRelationRelatedAsset:AssetRelationRelatedAsset",
                    "description": "target asset of the relation\n"
                },
                "relatedAssetKind": {
                    "$ref": "#/types/splight:index/AssetRelationRelatedAssetKind:AssetRelationRelatedAssetKind",
                    "description": "kind of the target relation asset\n"
                }
            },
            "required": [
                "asset",
                "name",
                "relatedAsset",
                "relatedAssetKind"
            ],
            "inputProperties": {
                "asset": {
                    "$ref": "#/types/splight:index/AssetRelationAsset:AssetRelationAsset",
                    "description": "asset where the relation origins\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "relation description\n"
                },
                "name": {
                    "type": "string",
                    "description": "relation name\n",
                    "willReplaceOnChanges": true
                },
                "relatedAsset": {
                    "$ref": "#/types/splight:index/AssetRelationRelatedAsset:AssetRelationRelatedAsset",
                    "description": "target asset of the relation\n"
                },
                "relatedAssetKind": {
                    "$ref": "#/types/splight:index/AssetRelationRelatedAssetKind:AssetRelationRelatedAssetKind",
                    "description": "kind of the target relation asset\n"
                }
            },
            "requiredInputs": [
                "asset",
                "relatedAsset",
                "relatedAssetKind"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AssetRelation resources.\n",
                "properties": {
                    "asset": {
                        "$ref": "#/types/splight:index/AssetRelationAsset:AssetRelationAsset",
                        "description": "asset where the relation origins\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "relation description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "relation name\n",
                        "willReplaceOnChanges": true
                    },
                    "relatedAsset": {
                        "$ref": "#/types/splight:index/AssetRelationRelatedAsset:AssetRelationRelatedAsset",
                        "description": "target asset of the relation\n"
                    },
                    "relatedAssetKind": {
                        "$ref": "#/types/splight:index/AssetRelationRelatedAssetKind:AssetRelationRelatedAssetKind",
                        "description": "kind of the target relation asset\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/command:Command": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst myAsset = new splight.Asset(\"myAsset\", {\n    description: \"My Asset Description\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [{\n            type: \"Point\",\n            coordinates: [\n                0,\n                0,\n            ],\n        }],\n    }),\n});\nconst myAttribute = new splight.AssetAttribute(\"myAttribute\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: myAsset.id,\n});\nconst myAction = new splight.Action(\"myAction\", {\n    asset: {\n        id: myAsset.id,\n        name: myAsset.name,\n    },\n    setpoints: [{\n        value: JSON.stringify(1),\n        attribute: {\n            id: myAttribute.id,\n            name: myAttribute.name,\n        },\n    }],\n});\nconst myCommand = new splight.Command(\"myCommand\", {actions: [{\n    id: myAction.id,\n    name: myAction.name,\n    asset: {\n        id: myAsset.id,\n        name: myAsset.name,\n    },\n}]});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nmy_asset = splight.Asset(\"myAsset\",\n    description=\"My Asset Description\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [{\n            \"type\": \"Point\",\n            \"coordinates\": [\n                0,\n                0,\n            ],\n        }],\n    }))\nmy_attribute = splight.AssetAttribute(\"myAttribute\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=my_asset.id)\nmy_action = splight.Action(\"myAction\",\n    asset={\n        \"id\": my_asset.id,\n        \"name\": my_asset.name,\n    },\n    setpoints=[{\n        \"value\": json.dumps(1),\n        \"attribute\": {\n            \"id\": my_attribute.id,\n            \"name\": my_attribute.name,\n        },\n    }])\nmy_command = splight.Command(\"myCommand\", actions=[{\n    \"id\": my_action.id,\n    \"name\": my_action.name,\n    \"asset\": {\n        \"id\": my_asset.id,\n        \"name\": my_asset.name,\n    },\n}])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAsset = new Splight.Asset(\"myAsset\", new()\n    {\n        Description = \"My Asset Description\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"type\"] = \"Point\",\n                    [\"coordinates\"] = new[]\n                    {\n                        0,\n                        0,\n                    },\n                },\n            },\n        }),\n    });\n\n    var myAttribute = new Splight.AssetAttribute(\"myAttribute\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = myAsset.Id,\n    });\n\n    var myAction = new Splight.Action(\"myAction\", new()\n    {\n        Asset = new Splight.Inputs.ActionAssetArgs\n        {\n            Id = myAsset.Id,\n            Name = myAsset.Name,\n        },\n        Setpoints = new[]\n        {\n            new Splight.Inputs.ActionSetpointArgs\n            {\n                Value = JsonSerializer.Serialize(1),\n                Attribute = new Splight.Inputs.ActionSetpointAttributeArgs\n                {\n                    Id = myAttribute.Id,\n                    Name = myAttribute.Name,\n                },\n            },\n        },\n    });\n\n    var myCommand = new Splight.Command(\"myCommand\", new()\n    {\n        Actions = new[]\n        {\n            new Splight.Inputs.CommandActionArgs\n            {\n                Id = myAction.Id,\n                Name = myAction.Name,\n                Asset = new Splight.Inputs.CommandActionAssetArgs\n                {\n                    Id = myAsset.Id,\n                    Name = myAsset.Name,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\": \"GeometryCollection\",\n\t\t\t\"geometries\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"type\": \"Point\",\n\t\t\t\t\t\"coordinates\": []float64{\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tmyAsset, err := splight.NewAsset(ctx, \"myAsset\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"My Asset Description\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyAttribute, err := splight.NewAssetAttribute(ctx, \"myAttribute\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: myAsset.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON1, err := json.Marshal(1)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\tmyAction, err := splight.NewAction(ctx, \"myAction\", \u0026splight.ActionArgs{\n\t\t\tAsset: \u0026splight.ActionAssetArgs{\n\t\t\t\tId:   myAsset.ID(),\n\t\t\t\tName: myAsset.Name,\n\t\t\t},\n\t\t\tSetpoints: splight.ActionSetpointArray{\n\t\t\t\t\u0026splight.ActionSetpointArgs{\n\t\t\t\t\tValue: pulumi.String(json1),\n\t\t\t\t\tAttribute: \u0026splight.ActionSetpointAttributeArgs{\n\t\t\t\t\t\tId:   myAttribute.ID(),\n\t\t\t\t\t\tName: myAttribute.Name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewCommand(ctx, \"myCommand\", \u0026splight.CommandArgs{\n\t\t\tActions: splight.CommandActionArray{\n\t\t\t\t\u0026splight.CommandActionArgs{\n\t\t\t\t\tId:   myAction.ID(),\n\t\t\t\t\tName: myAction.Name,\n\t\t\t\t\tAsset: \u0026splight.CommandActionAssetArgs{\n\t\t\t\t\t\tId:   myAsset.ID(),\n\t\t\t\t\t\tName: myAsset.Name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Action;\nimport com.pulumi.splight.ActionArgs;\nimport com.pulumi.splight.inputs.ActionAssetArgs;\nimport com.pulumi.splight.inputs.ActionSetpointArgs;\nimport com.pulumi.splight.inputs.ActionSetpointAttributeArgs;\nimport com.pulumi.splight.Command;\nimport com.pulumi.splight.CommandArgs;\nimport com.pulumi.splight.inputs.CommandActionArgs;\nimport com.pulumi.splight.inputs.CommandActionAssetArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myAsset = new Asset(\"myAsset\", AssetArgs.builder()\n            .description(\"My Asset Description\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(jsonObject(\n                        jsonProperty(\"type\", \"Point\"),\n                        jsonProperty(\"coordinates\", jsonArray(\n                            0, \n                            0\n                        ))\n                    )))\n                )))\n            .build());\n\n        var myAttribute = new AssetAttribute(\"myAttribute\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(myAsset.id())\n            .build());\n\n        var myAction = new Action(\"myAction\", ActionArgs.builder()\n            .asset(ActionAssetArgs.builder()\n                .id(myAsset.id())\n                .name(myAsset.name())\n                .build())\n            .setpoints(ActionSetpointArgs.builder()\n                .value(serializeJson(\n                    1))\n                .attribute(ActionSetpointAttributeArgs.builder()\n                    .id(myAttribute.id())\n                    .name(myAttribute.name())\n                    .build())\n                .build())\n            .build());\n\n        var myCommand = new Command(\"myCommand\", CommandArgs.builder()\n            .actions(CommandActionArgs.builder()\n                .id(myAction.id())\n                .name(myAction.name())\n                .asset(CommandActionAssetArgs.builder()\n                    .id(myAsset.id())\n                    .name(myAsset.name())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myAsset:\n    type: splight:Asset\n    properties:\n      description: My Asset Description\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries:\n            - type: Point\n              coordinates:\n                - 0\n                - 0\n  myAttribute:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${myAsset.id}\n  myAction:\n    type: splight:Action\n    properties:\n      asset:\n        id: ${myAsset.id}\n        name: ${myAsset.name}\n      setpoints:\n        - value:\n            fn::toJSON: 1\n          attribute:\n            id: ${myAttribute.id}\n            name: ${myAttribute.name}\n  myCommand:\n    type: splight:Command\n    properties:\n      actions:\n        - id: ${myAction.id}\n          name: ${myAction.name}\n          asset:\n            id: ${myAsset.id}\n            name: ${myAsset.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/command:Command [options] splight_command.\u003cname\u003e \u003ccommand_id\u003e\n```\n\n",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/CommandAction:CommandAction"
                    },
                    "description": "command actions\n"
                },
                "description": {
                    "type": "string",
                    "description": "the description of the command to be created\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the command to be created\n"
                }
            },
            "required": [
                "actions",
                "name"
            ],
            "inputProperties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/CommandAction:CommandAction"
                    },
                    "description": "command actions\n"
                },
                "description": {
                    "type": "string",
                    "description": "the description of the command to be created\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the command to be created\n"
                }
            },
            "requiredInputs": [
                "actions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Command resources.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/CommandAction:CommandAction"
                        },
                        "description": "command actions\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "the description of the command to be created\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the command to be created\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/component:Component": {
            "description": "## Example Usage\n\n## Import\n\n```sh\n$ pulumi import splight:index/component:Component [options] splight_component.\u003cname\u003e \u003ccomponent_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "optional description to add details of the resource\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentInput:ComponentInput"
                    },
                    "description": "static config parameters of the routine\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the component to be created\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentTag:ComponentTag"
                    },
                    "description": "tags of the resource\n"
                },
                "version": {
                    "type": "string",
                    "description": "[NAME-VERSION] the version of the hub component\n"
                }
            },
            "required": [
                "name",
                "version"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "optional description to add details of the resource\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentInput:ComponentInput"
                    },
                    "description": "static config parameters of the routine\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the component to be created\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentTag:ComponentTag"
                    },
                    "description": "tags of the resource\n"
                },
                "version": {
                    "type": "string",
                    "description": "[NAME-VERSION] the version of the hub component\n"
                }
            },
            "requiredInputs": [
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Component resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "optional description to add details of the resource\n"
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentInput:ComponentInput"
                        },
                        "description": "static config parameters of the routine\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the component to be created\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentTag:ComponentTag"
                        },
                        "description": "tags of the resource\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "[NAME-VERSION] the version of the hub component\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/componentRoutine:ComponentRoutine": {
            "description": "## Example Usage\n\n## Import\n\n```sh\n$ pulumi import splight:index/componentRoutine:ComponentRoutine [options] splight_component_routine.\u003cname\u003e \u003ccomponent_routine_id\u003e\n```\n\n",
            "properties": {
                "componentId": {
                    "type": "string",
                    "description": "reference to component to be attached\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineConfig:ComponentRoutineConfig"
                    },
                    "description": "static config parameters of the routine\n"
                },
                "description": {
                    "type": "string",
                    "description": "optional complementary information about the routine\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineInput:ComponentRoutineInput"
                    },
                    "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the routine\n"
                },
                "outputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineOutput:ComponentRoutineOutput"
                    },
                    "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                },
                "type": {
                    "type": "string",
                    "description": "[IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)\n"
                }
            },
            "required": [
                "componentId",
                "name",
                "type"
            ],
            "inputProperties": {
                "componentId": {
                    "type": "string",
                    "description": "reference to component to be attached\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineConfig:ComponentRoutineConfig"
                    },
                    "description": "static config parameters of the routine\n"
                },
                "description": {
                    "type": "string",
                    "description": "optional complementary information about the routine\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineInput:ComponentRoutineInput"
                    },
                    "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the routine\n"
                },
                "outputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineOutput:ComponentRoutineOutput"
                    },
                    "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                },
                "type": {
                    "type": "string",
                    "description": "[IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)\n"
                }
            },
            "requiredInputs": [
                "componentId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComponentRoutine resources.\n",
                "properties": {
                    "componentId": {
                        "type": "string",
                        "description": "reference to component to be attached\n"
                    },
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentRoutineConfig:ComponentRoutineConfig"
                        },
                        "description": "static config parameters of the routine\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "optional complementary information about the routine\n"
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentRoutineInput:ComponentRoutineInput"
                        },
                        "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the routine\n"
                    },
                    "outputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentRoutineOutput:ComponentRoutineOutput"
                        },
                        "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboard:Dashboard": {
            "description": "## Example Usage\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboard:Dashboard [options] splight_dashboard.\u003cname\u003e \u003cdashboard_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "dashboard description\n"
                },
                "name": {
                    "type": "string",
                    "description": "dashboard name\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardRelatedAsset:DashboardRelatedAsset"
                    },
                    "description": "related assets of the resource\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTag:DashboardTag"
                    },
                    "description": "tags of the resource\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "dashboard description\n"
                },
                "name": {
                    "type": "string",
                    "description": "dashboard name\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardRelatedAsset:DashboardRelatedAsset"
                    },
                    "description": "related assets of the resource\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTag:DashboardTag"
                    },
                    "description": "tags of the resource\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "dashboard description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "dashboard name\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardRelatedAsset:DashboardRelatedAsset"
                        },
                        "description": "related assets of the resource\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardTag:DashboardTag"
                        },
                        "description": "tags of the resource\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardActionlistChart:DashboardActionlistChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardActionlistChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    actionListType: \"table\",\n    filterName: \"some name\",\n    filterAssetName: \"some asset name\",\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardActionlistChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    action_list_type=\"table\",\n    filter_name=\"some name\",\n    filter_asset_name=\"some asset name\",\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardActionlistChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        ActionListType = \"table\",\n        FilterName = \"some name\",\n        FilterAssetName = \"some asset name\",\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardActionlistChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardActionlistChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardActionlistChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardActionlistChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardActionlistChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardActionlistChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardActionlistChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardActionlistChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardActionlistChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardActionlistChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tActionListType:    pulumi.String(\"table\"),\n\t\t\tFilterName:        pulumi.String(\"some name\"),\n\t\t\tFilterAssetName:   pulumi.String(\"some asset name\"),\n\t\t\tChartItems: splight.DashboardActionlistChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardActionlistChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardActionlistChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardActionlistChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardActionlistChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardActionlistChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardActionlistChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardActionlistChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardActionlistChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardActionlistChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardActionlistChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardActionlistChart;\nimport com.pulumi.splight.DashboardActionlistChartArgs;\nimport com.pulumi.splight.inputs.DashboardActionlistChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardActionlistChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardActionlistChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardActionlistChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardActionlistChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardActionlistChart(\"dashboardChartTest\", DashboardActionlistChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .actionListType(\"table\")\n            .filterName(\"some name\")\n            .filterAssetName(\"some asset name\")\n            .chartItems(            \n                DashboardActionlistChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardActionlistChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardActionlistChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardActionlistChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardActionlistChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardActionlistChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardActionlistChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardActionlistChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardActionlistChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      actionListType: table\n      filterName: some name\n      filterAssetName: some asset name\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardActionlistChart:DashboardActionlistChart [options] splight_dashboard_actionlist_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "actionListType": {
                    "type": "string",
                    "description": "action list type\n"
                },
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardActionlistChartChartItem:DashboardActionlistChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "filterAssetName": {
                    "type": "string",
                    "description": "filter asset name\n"
                },
                "filterName": {
                    "type": "string",
                    "description": "filter name\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardActionlistChartThreshold:DashboardActionlistChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardActionlistChartValueMapping:DashboardActionlistChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "actionListType": {
                    "type": "string",
                    "description": "action list type\n"
                },
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardActionlistChartChartItem:DashboardActionlistChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "filterAssetName": {
                    "type": "string",
                    "description": "filter asset name\n"
                },
                "filterName": {
                    "type": "string",
                    "description": "filter name\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardActionlistChartThreshold:DashboardActionlistChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardActionlistChartValueMapping:DashboardActionlistChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardActionlistChart resources.\n",
                "properties": {
                    "actionListType": {
                        "type": "string",
                        "description": "action list type\n"
                    },
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardActionlistChartChartItem:DashboardActionlistChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "filterAssetName": {
                        "type": "string",
                        "description": "filter asset name\n"
                    },
                    "filterName": {
                        "type": "string",
                        "description": "filter name\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardActionlistChartThreshold:DashboardActionlistChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardActionlistChartValueMapping:DashboardActionlistChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardAlerteventsChart:DashboardAlerteventsChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardAlerteventsChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    filterName: \"some name\",\n    filterOldStatuses: [\"warning\"],\n    filterNewStatuses: [\n        \"no_alert\",\n        \"warning\",\n    ],\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardAlerteventsChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    filter_name=\"some name\",\n    filter_old_statuses=[\"warning\"],\n    filter_new_statuses=[\n        \"no_alert\",\n        \"warning\",\n    ],\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardAlerteventsChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        FilterName = \"some name\",\n        FilterOldStatuses = new[]\n        {\n            \"warning\",\n        },\n        FilterNewStatuses = new[]\n        {\n            \"no_alert\",\n            \"warning\",\n        },\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardAlerteventsChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardAlerteventsChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardAlerteventsChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardAlerteventsChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardAlerteventsChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardAlerteventsChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardAlerteventsChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardAlerteventsChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardAlerteventsChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardAlerteventsChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tFilterName:        pulumi.String(\"some name\"),\n\t\t\tFilterOldStatuses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"warning\"),\n\t\t\t},\n\t\t\tFilterNewStatuses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"no_alert\"),\n\t\t\t\tpulumi.String(\"warning\"),\n\t\t\t},\n\t\t\tChartItems: splight.DashboardAlerteventsChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardAlerteventsChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardAlerteventsChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardAlerteventsChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardAlerteventsChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardAlerteventsChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardAlerteventsChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardAlerteventsChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardAlerteventsChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardAlerteventsChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardAlerteventsChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardAlerteventsChart;\nimport com.pulumi.splight.DashboardAlerteventsChartArgs;\nimport com.pulumi.splight.inputs.DashboardAlerteventsChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardAlerteventsChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardAlerteventsChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardAlerteventsChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardAlerteventsChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardAlerteventsChart(\"dashboardChartTest\", DashboardAlerteventsChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .filterName(\"some name\")\n            .filterOldStatuses(\"warning\")\n            .filterNewStatuses(            \n                \"no_alert\",\n                \"warning\")\n            .chartItems(            \n                DashboardAlerteventsChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardAlerteventsChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardAlerteventsChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardAlerteventsChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardAlerteventsChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardAlerteventsChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardAlerteventsChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardAlerteventsChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardAlerteventsChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      filterName: some name\n      filterOldStatuses:\n        - warning\n      filterNewStatuses:\n        - no_alert\n        - warning\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardAlerteventsChart:DashboardAlerteventsChart [options] splight_dashboard_alertevents_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlerteventsChartChartItem:DashboardAlerteventsChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "filterName": {
                    "type": "string",
                    "description": "filter name\n"
                },
                "filterNewStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "filter new status\n"
                },
                "filterOldStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "filter old status\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlerteventsChartThreshold:DashboardAlerteventsChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlerteventsChartValueMapping:DashboardAlerteventsChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlerteventsChartChartItem:DashboardAlerteventsChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "filterName": {
                    "type": "string",
                    "description": "filter name\n"
                },
                "filterNewStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "filter new status\n"
                },
                "filterOldStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "filter old status\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlerteventsChartThreshold:DashboardAlerteventsChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlerteventsChartValueMapping:DashboardAlerteventsChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardAlerteventsChart resources.\n",
                "properties": {
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardAlerteventsChartChartItem:DashboardAlerteventsChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "filterName": {
                        "type": "string",
                        "description": "filter name\n"
                    },
                    "filterNewStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "filter new status\n"
                    },
                    "filterOldStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "filter old status\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardAlerteventsChartThreshold:DashboardAlerteventsChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardAlerteventsChartValueMapping:DashboardAlerteventsChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardAlertlistChart:DashboardAlertlistChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardAlertlistChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    filterName: \"some name\",\n    filterStatuses: [\"healthy\"],\n    alertListType: \"table\",\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardAlertlistChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    filter_name=\"some name\",\n    filter_statuses=[\"healthy\"],\n    alert_list_type=\"table\",\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardAlertlistChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        FilterName = \"some name\",\n        FilterStatuses = new[]\n        {\n            \"healthy\",\n        },\n        AlertListType = \"table\",\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardAlertlistChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardAlertlistChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardAlertlistChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardAlertlistChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardAlertlistChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardAlertlistChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardAlertlistChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardAlertlistChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardAlertlistChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardAlertlistChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tFilterName:        pulumi.String(\"some name\"),\n\t\t\tFilterStatuses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"healthy\"),\n\t\t\t},\n\t\t\tAlertListType: pulumi.String(\"table\"),\n\t\t\tChartItems: splight.DashboardAlertlistChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardAlertlistChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardAlertlistChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardAlertlistChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardAlertlistChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardAlertlistChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardAlertlistChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardAlertlistChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardAlertlistChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardAlertlistChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardAlertlistChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardAlertlistChart;\nimport com.pulumi.splight.DashboardAlertlistChartArgs;\nimport com.pulumi.splight.inputs.DashboardAlertlistChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardAlertlistChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardAlertlistChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardAlertlistChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardAlertlistChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardAlertlistChart(\"dashboardChartTest\", DashboardAlertlistChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .filterName(\"some name\")\n            .filterStatuses(\"healthy\")\n            .alertListType(\"table\")\n            .chartItems(            \n                DashboardAlertlistChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardAlertlistChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardAlertlistChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardAlertlistChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardAlertlistChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardAlertlistChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardAlertlistChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardAlertlistChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardAlertlistChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      filterName: some name\n      filterStatuses:\n        - healthy\n      alertListType: table\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardAlertlistChart:DashboardAlertlistChart [options] splight_dashboard_alertlist_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "alertListType": {
                    "type": "string",
                    "description": "alert list type\n"
                },
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlertlistChartChartItem:DashboardAlertlistChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "filterName": {
                    "type": "string",
                    "description": "filter name\n"
                },
                "filterStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "filter status list\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlertlistChartThreshold:DashboardAlertlistChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlertlistChartValueMapping:DashboardAlertlistChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "alertListType": {
                    "type": "string",
                    "description": "alert list type\n"
                },
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlertlistChartChartItem:DashboardAlertlistChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "filterName": {
                    "type": "string",
                    "description": "filter name\n"
                },
                "filterStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "filter status list\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlertlistChartThreshold:DashboardAlertlistChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAlertlistChartValueMapping:DashboardAlertlistChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardAlertlistChart resources.\n",
                "properties": {
                    "alertListType": {
                        "type": "string",
                        "description": "alert list type\n"
                    },
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardAlertlistChartChartItem:DashboardAlertlistChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "filterName": {
                        "type": "string",
                        "description": "filter name\n"
                    },
                    "filterStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "filter status list\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardAlertlistChartThreshold:DashboardAlertlistChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardAlertlistChartValueMapping:DashboardAlertlistChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardAssetlistChart:DashboardAssetlistChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardAssetlistChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    filterName: \"some name\",\n    filterStatuses: [\"healthy\"],\n    assetListType: \"table\",\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardAssetlistChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    filter_name=\"some name\",\n    filter_statuses=[\"healthy\"],\n    asset_list_type=\"table\",\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardAssetlistChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        FilterName = \"some name\",\n        FilterStatuses = new[]\n        {\n            \"healthy\",\n        },\n        AssetListType = \"table\",\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardAssetlistChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardAssetlistChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardAssetlistChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardAssetlistChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardAssetlistChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardAssetlistChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardAssetlistChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardAssetlistChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardAssetlistChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardAssetlistChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tFilterName:        pulumi.String(\"some name\"),\n\t\t\tFilterStatuses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"healthy\"),\n\t\t\t},\n\t\t\tAssetListType: pulumi.String(\"table\"),\n\t\t\tChartItems: splight.DashboardAssetlistChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardAssetlistChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardAssetlistChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardAssetlistChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardAssetlistChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardAssetlistChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardAssetlistChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardAssetlistChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardAssetlistChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardAssetlistChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardAssetlistChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardAssetlistChart;\nimport com.pulumi.splight.DashboardAssetlistChartArgs;\nimport com.pulumi.splight.inputs.DashboardAssetlistChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardAssetlistChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardAssetlistChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardAssetlistChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardAssetlistChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardAssetlistChart(\"dashboardChartTest\", DashboardAssetlistChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .filterName(\"some name\")\n            .filterStatuses(\"healthy\")\n            .assetListType(\"table\")\n            .chartItems(            \n                DashboardAssetlistChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardAssetlistChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardAssetlistChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardAssetlistChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardAssetlistChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardAssetlistChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardAssetlistChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardAssetlistChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardAssetlistChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      filterName: some name\n      filterStatuses:\n        - healthy\n      assetListType: table\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardAssetlistChart:DashboardAssetlistChart [options] splight_dashboard_assetlist_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "assetListType": {
                    "type": "string",
                    "description": "asset list type\n"
                },
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAssetlistChartChartItem:DashboardAssetlistChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "filterName": {
                    "type": "string",
                    "description": "filter name\n"
                },
                "filterStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "filter status list\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAssetlistChartThreshold:DashboardAssetlistChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAssetlistChartValueMapping:DashboardAssetlistChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "assetListType": {
                    "type": "string",
                    "description": "asset list type\n"
                },
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAssetlistChartChartItem:DashboardAssetlistChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "filterName": {
                    "type": "string",
                    "description": "filter name\n"
                },
                "filterStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "filter status list\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAssetlistChartThreshold:DashboardAssetlistChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardAssetlistChartValueMapping:DashboardAssetlistChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardAssetlistChart resources.\n",
                "properties": {
                    "assetListType": {
                        "type": "string",
                        "description": "asset list type\n"
                    },
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardAssetlistChartChartItem:DashboardAssetlistChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "filterName": {
                        "type": "string",
                        "description": "filter name\n"
                    },
                    "filterStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "filter status list\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardAssetlistChartThreshold:DashboardAssetlistChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardAssetlistChartValueMapping:DashboardAssetlistChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardBarChart:DashboardBarChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardBarChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    yAxisUnit: \"MW\",\n    numberOfDecimals: 2,\n    orientation: \"vertical\",\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardBarChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    y_axis_unit=\"MW\",\n    number_of_decimals=2,\n    orientation=\"vertical\",\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardBarChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        YAxisUnit = \"MW\",\n        NumberOfDecimals = 2,\n        Orientation = \"vertical\",\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardBarChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardBarChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardBarChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardBarChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardBarChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardBarChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardBarChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardBarChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardBarChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardBarChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tYAxisUnit:         pulumi.String(\"MW\"),\n\t\t\tNumberOfDecimals:  pulumi.Int(2),\n\t\t\tOrientation:       pulumi.String(\"vertical\"),\n\t\t\tChartItems: splight.DashboardBarChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardBarChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardBarChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardBarChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardBarChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardBarChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardBarChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardBarChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardBarChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardBarChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardBarChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardBarChart;\nimport com.pulumi.splight.DashboardBarChartArgs;\nimport com.pulumi.splight.inputs.DashboardBarChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardBarChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardBarChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardBarChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardBarChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardBarChart(\"dashboardChartTest\", DashboardBarChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .yAxisUnit(\"MW\")\n            .numberOfDecimals(2)\n            .orientation(\"vertical\")\n            .chartItems(            \n                DashboardBarChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardBarChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardBarChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardBarChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardBarChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardBarChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardBarChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardBarChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardBarChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      yAxisUnit: MW\n      numberOfDecimals: 2\n      orientation: vertical\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardBarChart:DashboardBarChart [options] splight_dashboard_bar_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBarChartChartItem:DashboardBarChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "orientation": {
                    "type": "string",
                    "description": "orientation\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBarChartThreshold:DashboardBarChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBarChartValueMapping:DashboardBarChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                },
                "yAxisUnit": {
                    "type": "string",
                    "description": "y axis units\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBarChartChartItem:DashboardBarChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "orientation": {
                    "type": "string",
                    "description": "orientation\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBarChartThreshold:DashboardBarChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBarChartValueMapping:DashboardBarChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                },
                "yAxisUnit": {
                    "type": "string",
                    "description": "y axis units\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardBarChart resources.\n",
                "properties": {
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardBarChartChartItem:DashboardBarChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "numberOfDecimals": {
                        "type": "integer",
                        "description": "number of decimals\n"
                    },
                    "orientation": {
                        "type": "string",
                        "description": "orientation\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardBarChartThreshold:DashboardBarChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardBarChartValueMapping:DashboardBarChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    },
                    "yAxisUnit": {
                        "type": "string",
                        "description": "y axis units\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardBargaugeChart:DashboardBargaugeChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardBargaugeChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    maxLimit: 100,\n    numberOfDecimals: 2,\n    orientation: \"vertical\",\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"EXPRESSION\",\n            queryPlain: \"\",\n            expressionPlain: JSON.stringify({\n                $function: {\n                    body: \"function ($A) { return $A/50 }\",\n                    args: [\"$A\"],\n                    lang: \"js\",\n                },\n            }),\n            queryFilterAsset: {},\n            queryFilterAttribute: {},\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardBargaugeChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    max_limit=100,\n    number_of_decimals=2,\n    orientation=\"vertical\",\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"EXPRESSION\",\n            \"query_plain\": \"\",\n            \"expression_plain\": json.dumps({\n                \"_function\": {\n                    \"body\": \"function ($A) { return $A/50 }\",\n                    \"args\": [\"$A\"],\n                    \"lang\": \"js\",\n                },\n            }),\n            \"query_filter_asset\": {},\n            \"query_filter_attribute\": {},\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardBargaugeChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        MaxLimit = 100,\n        NumberOfDecimals = 2,\n        Orientation = \"vertical\",\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardBargaugeChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardBargaugeChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardBargaugeChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardBargaugeChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"EXPRESSION\",\n                QueryPlain = \"\",\n                ExpressionPlain = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"$function\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"body\"] = \"function ($A) { return $A/50 }\",\n                        [\"args\"] = new[]\n                        {\n                            \"$A\",\n                        },\n                        [\"lang\"] = \"js\",\n                    },\n                }),\n                QueryFilterAsset = null,\n                QueryFilterAttribute = null,\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardBargaugeChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardBargaugeChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"$function\": map[string]interface{}{\n\t\t\t\t\"body\": \"function ($A) { return $A/50 }\",\n\t\t\t\t\"args\": []string{\n\t\t\t\t\t\"$A\",\n\t\t\t\t},\n\t\t\t\t\"lang\": \"js\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = splight.NewDashboardBargaugeChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardBargaugeChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tMaxLimit:          pulumi.Int(100),\n\t\t\tNumberOfDecimals:  pulumi.Int(2),\n\t\t\tOrientation:       pulumi.String(\"vertical\"),\n\t\t\tChartItems: splight.DashboardBargaugeChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardBargaugeChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardBargaugeChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardBargaugeChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardBargaugeChartChartItemArgs{\n\t\t\t\t\tRefId:                pulumi.String(\"B\"),\n\t\t\t\t\tColor:                pulumi.String(\"blue\"),\n\t\t\t\t\tType:                 pulumi.String(\"EXPRESSION\"),\n\t\t\t\t\tQueryPlain:           pulumi.String(\"\"),\n\t\t\t\t\tExpressionPlain:      pulumi.String(json1),\n\t\t\t\t\tQueryFilterAsset:     nil,\n\t\t\t\t\tQueryFilterAttribute: nil,\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardBargaugeChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardBargaugeChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardBargaugeChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardBargaugeChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardBargaugeChart;\nimport com.pulumi.splight.DashboardBargaugeChartArgs;\nimport com.pulumi.splight.inputs.DashboardBargaugeChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardBargaugeChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardBargaugeChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardBargaugeChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardBargaugeChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardBargaugeChart(\"dashboardChartTest\", DashboardBargaugeChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .maxLimit(100)\n            .numberOfDecimals(2)\n            .orientation(\"vertical\")\n            .chartItems(            \n                DashboardBargaugeChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardBargaugeChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardBargaugeChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardBargaugeChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"EXPRESSION\")\n                    .queryPlain(\"\")\n                    .expressionPlain(serializeJson(\n                        jsonObject(\n                            jsonProperty(\"$function\", jsonObject(\n                                jsonProperty(\"body\", \"function ($A) { return $A/50 }\"),\n                                jsonProperty(\"args\", jsonArray(\"$A\")),\n                                jsonProperty(\"lang\", \"js\")\n                            ))\n                        )))\n                    .queryFilterAsset()\n                    .queryFilterAttribute()\n                    .build())\n            .thresholds(DashboardBargaugeChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardBargaugeChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardBargaugeChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      maxLimit: 100\n      numberOfDecimals: 2\n      orientation: vertical\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: EXPRESSION\n          queryPlain:\n          expressionPlain:\n            fn::toJSON:\n              $function:\n                body: function ($A) { return $A/50 }\n                args:\n                  - $A\n                lang: js\n          queryFilterAsset: {}\n          queryFilterAttribute: {}\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardBargaugeChart:DashboardBargaugeChart [options] splight_dashboard_bargauge_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBargaugeChartChartItem:DashboardBargaugeChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "maxLimit": {
                    "type": "integer",
                    "description": "bar gauge max limit\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "orientation": {
                    "type": "string",
                    "description": "orientation\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBargaugeChartThreshold:DashboardBargaugeChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBargaugeChartValueMapping:DashboardBargaugeChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBargaugeChartChartItem:DashboardBargaugeChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "maxLimit": {
                    "type": "integer",
                    "description": "bar gauge max limit\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "orientation": {
                    "type": "string",
                    "description": "orientation\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBargaugeChartThreshold:DashboardBargaugeChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardBargaugeChartValueMapping:DashboardBargaugeChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardBargaugeChart resources.\n",
                "properties": {
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardBargaugeChartChartItem:DashboardBargaugeChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "maxLimit": {
                        "type": "integer",
                        "description": "bar gauge max limit\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "numberOfDecimals": {
                        "type": "integer",
                        "description": "number of decimals\n"
                    },
                    "orientation": {
                        "type": "string",
                        "description": "orientation\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardBargaugeChartThreshold:DashboardBargaugeChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardBargaugeChartValueMapping:DashboardBargaugeChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardCommandlistChart:DashboardCommandlistChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardCommandlistChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    commandListType: \"table\",\n    filterName: \"some name\",\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardCommandlistChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    command_list_type=\"table\",\n    filter_name=\"some name\",\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardCommandlistChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        CommandListType = \"table\",\n        FilterName = \"some name\",\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardCommandlistChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardCommandlistChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardCommandlistChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardCommandlistChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardCommandlistChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardCommandlistChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardCommandlistChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardCommandlistChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardCommandlistChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardCommandlistChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tCommandListType:   pulumi.String(\"table\"),\n\t\t\tFilterName:        pulumi.String(\"some name\"),\n\t\t\tChartItems: splight.DashboardCommandlistChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardCommandlistChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardCommandlistChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardCommandlistChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardCommandlistChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardCommandlistChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardCommandlistChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardCommandlistChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardCommandlistChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardCommandlistChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardCommandlistChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardCommandlistChart;\nimport com.pulumi.splight.DashboardCommandlistChartArgs;\nimport com.pulumi.splight.inputs.DashboardCommandlistChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardCommandlistChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardCommandlistChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardCommandlistChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardCommandlistChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardCommandlistChart(\"dashboardChartTest\", DashboardCommandlistChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .commandListType(\"table\")\n            .filterName(\"some name\")\n            .chartItems(            \n                DashboardCommandlistChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardCommandlistChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardCommandlistChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardCommandlistChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardCommandlistChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardCommandlistChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardCommandlistChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardCommandlistChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardCommandlistChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      commandListType: table\n      filterName: some name\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardCommandlistChart:DashboardCommandlistChart [options] splight_dashboard_commandlist_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardCommandlistChartChartItem:DashboardCommandlistChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "commandListType": {
                    "type": "string",
                    "description": "[table|button_list]command list type\n"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "filterName": {
                    "type": "string",
                    "description": "filter name\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardCommandlistChartThreshold:DashboardCommandlistChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardCommandlistChartValueMapping:DashboardCommandlistChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardCommandlistChartChartItem:DashboardCommandlistChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "commandListType": {
                    "type": "string",
                    "description": "[table|button_list]command list type\n"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "filterName": {
                    "type": "string",
                    "description": "filter name\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardCommandlistChartThreshold:DashboardCommandlistChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardCommandlistChartValueMapping:DashboardCommandlistChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardCommandlistChart resources.\n",
                "properties": {
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardCommandlistChartChartItem:DashboardCommandlistChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "commandListType": {
                        "type": "string",
                        "description": "[table|button_list]command list type\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "filterName": {
                        "type": "string",
                        "description": "filter name\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardCommandlistChartThreshold:DashboardCommandlistChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardCommandlistChartValueMapping:DashboardCommandlistChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardGaugeChart:DashboardGaugeChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardGaugeChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    maxLimit: 100,\n    numberOfDecimals: 2,\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardGaugeChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    max_limit=100,\n    number_of_decimals=2,\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardGaugeChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        MaxLimit = 100,\n        NumberOfDecimals = 2,\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardGaugeChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardGaugeChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardGaugeChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardGaugeChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardGaugeChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardGaugeChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardGaugeChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardGaugeChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardGaugeChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardGaugeChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tMaxLimit:          pulumi.Int(100),\n\t\t\tNumberOfDecimals:  pulumi.Int(2),\n\t\t\tChartItems: splight.DashboardGaugeChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardGaugeChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardGaugeChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardGaugeChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardGaugeChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardGaugeChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardGaugeChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardGaugeChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardGaugeChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardGaugeChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardGaugeChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardGaugeChart;\nimport com.pulumi.splight.DashboardGaugeChartArgs;\nimport com.pulumi.splight.inputs.DashboardGaugeChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardGaugeChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardGaugeChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardGaugeChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardGaugeChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardGaugeChart(\"dashboardChartTest\", DashboardGaugeChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .maxLimit(100)\n            .numberOfDecimals(2)\n            .chartItems(            \n                DashboardGaugeChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardGaugeChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardGaugeChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardGaugeChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardGaugeChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardGaugeChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardGaugeChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardGaugeChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardGaugeChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      maxLimit: 100\n      numberOfDecimals: 2\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardGaugeChart:DashboardGaugeChart [options] splight_dashboard_gauge_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardGaugeChartChartItem:DashboardGaugeChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "maxLimit": {
                    "type": "integer",
                    "description": "bar gauge max limit\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardGaugeChartThreshold:DashboardGaugeChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardGaugeChartValueMapping:DashboardGaugeChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardGaugeChartChartItem:DashboardGaugeChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "maxLimit": {
                    "type": "integer",
                    "description": "bar gauge max limit\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardGaugeChartThreshold:DashboardGaugeChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardGaugeChartValueMapping:DashboardGaugeChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardGaugeChart resources.\n",
                "properties": {
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardGaugeChartChartItem:DashboardGaugeChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "maxLimit": {
                        "type": "integer",
                        "description": "bar gauge max limit\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "numberOfDecimals": {
                        "type": "integer",
                        "description": "number of decimals\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardGaugeChartThreshold:DashboardGaugeChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardGaugeChartValueMapping:DashboardGaugeChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardHistogramChart:DashboardHistogramChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardHistogramChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    numberOfDecimals: 2,\n    bucketCount: 20,\n    bucketSize: 2,\n    histogramType: \"categorical\",\n    sorting: \"count\",\n    stacked: true,\n    categoriesTopMaxLimit: undefined,\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardHistogramChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    number_of_decimals=2,\n    bucket_count=20,\n    bucket_size=2,\n    histogram_type=\"categorical\",\n    sorting=\"count\",\n    stacked=True,\n    categories_top_max_limit=None,\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardHistogramChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        NumberOfDecimals = 2,\n        BucketCount = 20,\n        BucketSize = 2,\n        HistogramType = \"categorical\",\n        Sorting = \"count\",\n        Stacked = true,\n        CategoriesTopMaxLimit = null,\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardHistogramChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardHistogramChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardHistogramChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardHistogramChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardHistogramChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardHistogramChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardHistogramChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardHistogramChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardHistogramChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardHistogramChartArgs{\n\t\t\tTab:                   dashboardTabTest.ID(),\n\t\t\tTimestampGte:          pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:          pulumi.String(\"now\"),\n\t\t\tDescription:           pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:             pulumi.Int(1),\n\t\t\tMinWidth:              pulumi.Int(4),\n\t\t\tDisplayTimeRange:      pulumi.Bool(true),\n\t\t\tLabelsDisplay:         pulumi.Bool(true),\n\t\t\tLabelsAggregation:     pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:       pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:        pulumi.Bool(true),\n\t\t\tHeight:                pulumi.Int(10),\n\t\t\tWidth:                 pulumi.Int(20),\n\t\t\tCollection:            pulumi.String(\"default\"),\n\t\t\tNumberOfDecimals:      pulumi.Int(2),\n\t\t\tBucketCount:           pulumi.Int(20),\n\t\t\tBucketSize:            pulumi.Int(2),\n\t\t\tHistogramType:         pulumi.String(\"categorical\"),\n\t\t\tSorting:               pulumi.String(\"count\"),\n\t\t\tStacked:               pulumi.Bool(true),\n\t\t\tCategoriesTopMaxLimit: nil,\n\t\t\tChartItems: splight.DashboardHistogramChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardHistogramChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardHistogramChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardHistogramChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardHistogramChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardHistogramChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardHistogramChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardHistogramChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardHistogramChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardHistogramChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardHistogramChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardHistogramChart;\nimport com.pulumi.splight.DashboardHistogramChartArgs;\nimport com.pulumi.splight.inputs.DashboardHistogramChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardHistogramChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardHistogramChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardHistogramChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardHistogramChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardHistogramChart(\"dashboardChartTest\", DashboardHistogramChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .numberOfDecimals(2)\n            .bucketCount(20)\n            .bucketSize(2)\n            .histogramType(\"categorical\")\n            .sorting(\"count\")\n            .stacked(true)\n            .categoriesTopMaxLimit(null)\n            .chartItems(            \n                DashboardHistogramChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardHistogramChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardHistogramChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardHistogramChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardHistogramChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardHistogramChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardHistogramChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardHistogramChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardHistogramChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      numberOfDecimals: 2\n      bucketCount: 20\n      bucketSize: 2\n      histogramType: categorical\n      sorting: count\n      stacked: true\n      categoriesTopMaxLimit: null\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardHistogramChart:DashboardHistogramChart [options] splight_dashboard_histogram_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "bucketCount": {
                    "type": "integer",
                    "description": "bucket count\n"
                },
                "bucketSize": {
                    "type": "integer",
                    "description": "bucket size\n"
                },
                "categoriesTopMaxLimit": {
                    "type": "integer",
                    "description": "categories top max limit\n"
                },
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardHistogramChartChartItem:DashboardHistogramChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "histogramType": {
                    "type": "string",
                    "description": "histogram type\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "sorting": {
                    "type": "string",
                    "description": "sorting type\n"
                },
                "stacked": {
                    "type": "boolean",
                    "description": "whether to stack or not the histogram\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardHistogramChartThreshold:DashboardHistogramChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardHistogramChartValueMapping:DashboardHistogramChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "bucketCount": {
                    "type": "integer",
                    "description": "bucket count\n"
                },
                "bucketSize": {
                    "type": "integer",
                    "description": "bucket size\n"
                },
                "categoriesTopMaxLimit": {
                    "type": "integer",
                    "description": "categories top max limit\n"
                },
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardHistogramChartChartItem:DashboardHistogramChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "histogramType": {
                    "type": "string",
                    "description": "histogram type\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "sorting": {
                    "type": "string",
                    "description": "sorting type\n"
                },
                "stacked": {
                    "type": "boolean",
                    "description": "whether to stack or not the histogram\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardHistogramChartThreshold:DashboardHistogramChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardHistogramChartValueMapping:DashboardHistogramChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardHistogramChart resources.\n",
                "properties": {
                    "bucketCount": {
                        "type": "integer",
                        "description": "bucket count\n"
                    },
                    "bucketSize": {
                        "type": "integer",
                        "description": "bucket size\n"
                    },
                    "categoriesTopMaxLimit": {
                        "type": "integer",
                        "description": "categories top max limit\n"
                    },
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardHistogramChartChartItem:DashboardHistogramChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "histogramType": {
                        "type": "string",
                        "description": "histogram type\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "numberOfDecimals": {
                        "type": "integer",
                        "description": "number of decimals\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "sorting": {
                        "type": "string",
                        "description": "sorting type\n"
                    },
                    "stacked": {
                        "type": "boolean",
                        "description": "whether to stack or not the histogram\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardHistogramChartThreshold:DashboardHistogramChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardHistogramChartValueMapping:DashboardHistogramChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardImageChart:DashboardImageChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardImageChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    imageUrl: \"123-123-123-123-123\",\n    imageFile: undefined,\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardImageChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    image_url=\"123-123-123-123-123\",\n    image_file=None,\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardImageChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        ImageUrl = \"123-123-123-123-123\",\n        ImageFile = null,\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardImageChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardImageChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardImageChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardImageChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardImageChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardImageChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardImageChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardImageChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardImageChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardImageChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tImageUrl:          pulumi.String(\"123-123-123-123-123\"),\n\t\t\tImageFile:         nil,\n\t\t\tChartItems: splight.DashboardImageChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardImageChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardImageChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardImageChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardImageChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardImageChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardImageChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardImageChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardImageChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardImageChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardImageChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardImageChart;\nimport com.pulumi.splight.DashboardImageChartArgs;\nimport com.pulumi.splight.inputs.DashboardImageChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardImageChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardImageChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardImageChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardImageChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardImageChart(\"dashboardChartTest\", DashboardImageChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .imageUrl(\"123-123-123-123-123\")\n            .imageFile(null)\n            .chartItems(            \n                DashboardImageChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardImageChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardImageChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardImageChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardImageChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardImageChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardImageChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardImageChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardImageChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      imageUrl: 123-123-123-123-123\n      imageFile: null\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardImageChart:DashboardImageChart [options] splight_dashboard_image_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardImageChartChartItem:DashboardImageChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "imageFile": {
                    "type": "string",
                    "description": "image file\n"
                },
                "imageUrl": {
                    "type": "string",
                    "description": "image url\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardImageChartThreshold:DashboardImageChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardImageChartValueMapping:DashboardImageChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardImageChartChartItem:DashboardImageChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "imageFile": {
                    "type": "string",
                    "description": "image file\n"
                },
                "imageUrl": {
                    "type": "string",
                    "description": "image url\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardImageChartThreshold:DashboardImageChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardImageChartValueMapping:DashboardImageChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardImageChart resources.\n",
                "properties": {
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardImageChartChartItem:DashboardImageChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "imageFile": {
                        "type": "string",
                        "description": "image file\n"
                    },
                    "imageUrl": {
                        "type": "string",
                        "description": "image url\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardImageChartThreshold:DashboardImageChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardImageChartValueMapping:DashboardImageChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardStatChart:DashboardStatChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardStatChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    yAxisUnit: \"MW\",\n    border: false,\n    numberOfDecimals: 4,\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardStatChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    y_axis_unit=\"MW\",\n    border=False,\n    number_of_decimals=4,\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardStatChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        YAxisUnit = \"MW\",\n        Border = false,\n        NumberOfDecimals = 4,\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardStatChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardStatChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardStatChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardStatChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardStatChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardStatChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardStatChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardStatChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardStatChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardStatChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tYAxisUnit:         pulumi.String(\"MW\"),\n\t\t\tBorder:            pulumi.Bool(false),\n\t\t\tNumberOfDecimals:  pulumi.Int(4),\n\t\t\tChartItems: splight.DashboardStatChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardStatChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardStatChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardStatChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardStatChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardStatChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardStatChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardStatChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardStatChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardStatChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardStatChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardStatChart;\nimport com.pulumi.splight.DashboardStatChartArgs;\nimport com.pulumi.splight.inputs.DashboardStatChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardStatChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardStatChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardStatChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardStatChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardStatChart(\"dashboardChartTest\", DashboardStatChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .yAxisUnit(\"MW\")\n            .border(false)\n            .numberOfDecimals(4)\n            .chartItems(            \n                DashboardStatChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardStatChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardStatChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardStatChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardStatChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardStatChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardStatChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardStatChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardStatChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      yAxisUnit: MW\n      border: false\n      numberOfDecimals: 4\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardStatChart:DashboardStatChart [options] splight_dashboard_stat_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "border": {
                    "type": "boolean",
                    "description": "whether to show the border or not\n"
                },
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardStatChartChartItem:DashboardStatChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardStatChartThreshold:DashboardStatChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardStatChartValueMapping:DashboardStatChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                },
                "yAxisUnit": {
                    "type": "string",
                    "description": "y axis units\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "border": {
                    "type": "boolean",
                    "description": "whether to show the border or not\n"
                },
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardStatChartChartItem:DashboardStatChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardStatChartThreshold:DashboardStatChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardStatChartValueMapping:DashboardStatChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                },
                "yAxisUnit": {
                    "type": "string",
                    "description": "y axis units\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardStatChart resources.\n",
                "properties": {
                    "border": {
                        "type": "boolean",
                        "description": "whether to show the border or not\n"
                    },
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardStatChartChartItem:DashboardStatChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "numberOfDecimals": {
                        "type": "integer",
                        "description": "number of decimals\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardStatChartThreshold:DashboardStatChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardStatChartValueMapping:DashboardStatChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    },
                    "yAxisUnit": {
                        "type": "string",
                        "description": "y axis units\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardTab:DashboardTab": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    dashboard: \"1234-1234-1234-1234\",\n    order: 0,\n});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    dashboard=\"1234-1234-1234-1234\",\n    order=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Dashboard = \"1234-1234-1234-1234\",\n        Order = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tDashboard: pulumi.String(\"1234-1234-1234-1234\"),\n\t\t\tOrder:     pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .dashboard(\"1234-1234-1234-1234\")\n            .order(0)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      dashboard: 1234-1234-1234-1234\n      order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardTab:DashboardTab [options] splight_dashboard_tab.\u003cname\u003e \u003cdashboard_tab_id\u003e\n```\n\n",
            "properties": {
                "dashboard": {
                    "type": "string",
                    "description": "dashboard id where to place it\n"
                },
                "name": {
                    "type": "string",
                    "description": "name for the tab\n"
                },
                "order": {
                    "type": "integer",
                    "description": "order within the dashboard\n"
                }
            },
            "required": [
                "dashboard",
                "name"
            ],
            "inputProperties": {
                "dashboard": {
                    "type": "string",
                    "description": "dashboard id where to place it\n"
                },
                "name": {
                    "type": "string",
                    "description": "name for the tab\n"
                },
                "order": {
                    "type": "integer",
                    "description": "order within the dashboard\n"
                }
            },
            "requiredInputs": [
                "dashboard"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardTab resources.\n",
                "properties": {
                    "dashboard": {
                        "type": "string",
                        "description": "dashboard id where to place it\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name for the tab\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "order within the dashboard\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardTableChart:DashboardTableChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardTableChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    yAxisUnit: \"MW\",\n    numberOfDecimals: 4,\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardTableChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    y_axis_unit=\"MW\",\n    number_of_decimals=4,\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardTableChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        YAxisUnit = \"MW\",\n        NumberOfDecimals = 4,\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardTableChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardTableChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardTableChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardTableChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardTableChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardTableChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardTableChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardTableChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardTableChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardTableChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tYAxisUnit:         pulumi.String(\"MW\"),\n\t\t\tNumberOfDecimals:  pulumi.Int(4),\n\t\t\tChartItems: splight.DashboardTableChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardTableChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardTableChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardTableChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardTableChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardTableChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardTableChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardTableChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardTableChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardTableChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardTableChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardTableChart;\nimport com.pulumi.splight.DashboardTableChartArgs;\nimport com.pulumi.splight.inputs.DashboardTableChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardTableChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardTableChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardTableChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardTableChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardTableChart(\"dashboardChartTest\", DashboardTableChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .yAxisUnit(\"MW\")\n            .numberOfDecimals(4)\n            .chartItems(            \n                DashboardTableChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardTableChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardTableChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardTableChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardTableChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardTableChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardTableChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardTableChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardTableChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      yAxisUnit: MW\n      numberOfDecimals: 4\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardTableChart:DashboardTableChart [options] splight_dashboard_table_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTableChartChartItem:DashboardTableChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTableChartThreshold:DashboardTableChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTableChartValueMapping:DashboardTableChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                },
                "yAxisUnit": {
                    "type": "string",
                    "description": "y axis unit\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTableChartChartItem:DashboardTableChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTableChartThreshold:DashboardTableChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTableChartValueMapping:DashboardTableChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                },
                "yAxisUnit": {
                    "type": "string",
                    "description": "y axis unit\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardTableChart resources.\n",
                "properties": {
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardTableChartChartItem:DashboardTableChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "numberOfDecimals": {
                        "type": "integer",
                        "description": "number of decimals\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardTableChartThreshold:DashboardTableChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardTableChartValueMapping:DashboardTableChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    },
                    "yAxisUnit": {
                        "type": "string",
                        "description": "y axis unit\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardTextChart:DashboardTextChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardTextChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    text: \"text to show\",\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardTextChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    text=\"text to show\",\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardTextChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        Text = \"text to show\",\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardTextChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardTextChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardTextChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardTextChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardTextChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardTextChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardTextChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardTextChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardTextChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardTextChartArgs{\n\t\t\tTab:               dashboardTabTest.ID(),\n\t\t\tTimestampGte:      pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:      pulumi.String(\"now\"),\n\t\t\tDescription:       pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:         pulumi.Int(1),\n\t\t\tMinWidth:          pulumi.Int(4),\n\t\t\tDisplayTimeRange:  pulumi.Bool(true),\n\t\t\tLabelsDisplay:     pulumi.Bool(true),\n\t\t\tLabelsAggregation: pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:   pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:    pulumi.Bool(true),\n\t\t\tHeight:            pulumi.Int(10),\n\t\t\tWidth:             pulumi.Int(20),\n\t\t\tCollection:        pulumi.String(\"default\"),\n\t\t\tText:              pulumi.String(\"text to show\"),\n\t\t\tChartItems: splight.DashboardTextChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardTextChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardTextChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardTextChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardTextChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardTextChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardTextChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardTextChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardTextChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardTextChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardTextChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardTextChart;\nimport com.pulumi.splight.DashboardTextChartArgs;\nimport com.pulumi.splight.inputs.DashboardTextChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardTextChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardTextChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardTextChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardTextChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardTextChart(\"dashboardChartTest\", DashboardTextChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .text(\"text to show\")\n            .chartItems(            \n                DashboardTextChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardTextChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardTextChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardTextChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardTextChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardTextChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardTextChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardTextChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardTextChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      text: text to show\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardTextChart:DashboardTextChart [options] splight_dashboard_text_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTextChartChartItem:DashboardTextChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "text": {
                    "type": "string",
                    "description": "text to display\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTextChartThreshold:DashboardTextChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTextChartValueMapping:DashboardTextChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTextChartChartItem:DashboardTextChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "text": {
                    "type": "string",
                    "description": "text to display\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTextChartThreshold:DashboardTextChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTextChartValueMapping:DashboardTextChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardTextChart resources.\n",
                "properties": {
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardTextChartChartItem:DashboardTextChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "text": {
                        "type": "string",
                        "description": "text to display\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardTextChartThreshold:DashboardTextChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardTextChartValueMapping:DashboardTextChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardTimeseriesChart:DashboardTimeseriesChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst assetTest = new splight.Asset(\"assetTest\", {\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\nconst attributeTest1 = new splight.AssetAttribute(\"attributeTest1\", {\n    type: \"Number\",\n    unit: \"meters\",\n    asset: assetTest.id,\n});\nconst attributeTest2 = new splight.AssetAttribute(\"attributeTest2\", {\n    type: \"Number\",\n    unit: \"seconds\",\n    asset: assetTest.id,\n});\nconst dashboardTest = new splight.Dashboard(\"dashboardTest\", {relatedAssets: []});\nconst dashboardTabTest = new splight.DashboardTab(\"dashboardTabTest\", {\n    order: 0,\n    dashboard: dashboardTest.id,\n});\nconst dashboardChartTest = new splight.DashboardTimeseriesChart(\"dashboardChartTest\", {\n    tab: dashboardTabTest.id,\n    timestampGte: \"now - 7d\",\n    timestampLte: \"now\",\n    description: \"Chart description\",\n    minHeight: 1,\n    minWidth: 4,\n    displayTimeRange: true,\n    labelsDisplay: true,\n    labelsAggregation: \"last\",\n    labelsPlacement: \"bottom\",\n    showBeyondData: true,\n    height: 10,\n    width: 20,\n    collection: \"default\",\n    yAxisMaxLimit: 100,\n    yAxisMinLimit: 0,\n    yAxisUnit: \"kW\",\n    numberOfDecimals: 4,\n    xAxisFormat: \"MM-dd HH:mm\",\n    xAxisAutoSkip: true,\n    xAxisMaxTicksLimit: undefined,\n    lineInterpolationStyle: \"rounded\",\n    timeseriesType: \"bar\",\n    fill: true,\n    showLine: true,\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest1.id,\n                name: attributeTest1.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest1.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"day\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryFilterAsset: {\n                id: assetTest.id,\n                name: assetTest.name,\n            },\n            queryFilterAttribute: {\n                id: attributeTest2.id,\n                name: attributeTest2.name,\n            },\n            queryPlain: pulumi.jsonStringify([\n                {\n                    $match: {\n                        asset: assetTest.id,\n                        attribute: attributeTest2.id,\n                    },\n                },\n                {\n                    $addFields: {\n                        timestamp: {\n                            $dateTrunc: {\n                                date: \"$timestamp\",\n                                unit: \"hour\",\n                                binSize: 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    $group: {\n                        _id: \"$timestamp\",\n                        value: {\n                            $last: \"$value\",\n                        },\n                        timestamp: {\n                            $last: \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_splight as splight\n\nasset_test = splight.Asset(\"assetTest\",\n    description=\"Created with Terraform\",\n    geometry=json.dumps({\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [],\n    }))\nattribute_test1 = splight.AssetAttribute(\"attributeTest1\",\n    type=\"Number\",\n    unit=\"meters\",\n    asset=asset_test.id)\nattribute_test2 = splight.AssetAttribute(\"attributeTest2\",\n    type=\"Number\",\n    unit=\"seconds\",\n    asset=asset_test.id)\ndashboard_test = splight.Dashboard(\"dashboardTest\", related_assets=[])\ndashboard_tab_test = splight.DashboardTab(\"dashboardTabTest\",\n    order=0,\n    dashboard=dashboard_test.id)\ndashboard_chart_test = splight.DashboardTimeseriesChart(\"dashboardChartTest\",\n    tab=dashboard_tab_test.id,\n    timestamp_gte=\"now - 7d\",\n    timestamp_lte=\"now\",\n    description=\"Chart description\",\n    min_height=1,\n    min_width=4,\n    display_time_range=True,\n    labels_display=True,\n    labels_aggregation=\"last\",\n    labels_placement=\"bottom\",\n    show_beyond_data=True,\n    height=10,\n    width=20,\n    collection=\"default\",\n    y_axis_max_limit=100,\n    y_axis_min_limit=0,\n    y_axis_unit=\"kW\",\n    number_of_decimals=4,\n    x_axis_format=\"MM-dd HH:mm\",\n    x_axis_auto_skip=True,\n    x_axis_max_ticks_limit=None,\n    line_interpolation_style=\"rounded\",\n    timeseries_type=\"bar\",\n    fill=True,\n    show_line=True,\n    chart_items=[\n        {\n            \"ref_id\": \"A\",\n            \"type\": \"QUERY\",\n            \"color\": \"red\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test1.id,\n                \"name\": attribute_test1.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test1.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"day\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n        {\n            \"ref_id\": \"B\",\n            \"color\": \"blue\",\n            \"type\": \"QUERY\",\n            \"expression_plain\": \"\",\n            \"query_filter_asset\": {\n                \"id\": asset_test.id,\n                \"name\": asset_test.name,\n            },\n            \"query_filter_attribute\": {\n                \"id\": attribute_test2.id,\n                \"name\": attribute_test2.name,\n            },\n            \"query_plain\": pulumi.Output.json_dumps([\n                {\n                    \"_match\": {\n                        \"asset\": asset_test.id,\n                        \"attribute\": attribute_test2.id,\n                    },\n                },\n                {\n                    \"$addFields\": {\n                        \"timestamp\": {\n                            \"$dateTrunc\": {\n                                \"date\": \"$timestamp\",\n                                \"unit\": \"hour\",\n                                \"binSize\": 1,\n                            },\n                        },\n                    },\n                },\n                {\n                    \"$group\": {\n                        \"_id\": \"$timestamp\",\n                        \"value\": {\n                            \"$last\": \"$value\",\n                        },\n                        \"timestamp\": {\n                            \"$last\": \"$timestamp\",\n                        },\n                    },\n                },\n            ]),\n        },\n    ],\n    thresholds=[{\n        \"color\": \"#00edcf\",\n        \"display_text\": \"T1Test\",\n        \"value\": 13.1,\n    }],\n    value_mappings=[{\n        \"display_text\": \"MODIFICADO\",\n        \"match_value\": \"123.3\",\n        \"type\": \"exact_match\",\n        \"order\": 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTest = new Splight.Asset(\"assetTest\", new()\n    {\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var attributeTest1 = new Splight.AssetAttribute(\"attributeTest1\", new()\n    {\n        Type = \"Number\",\n        Unit = \"meters\",\n        Asset = assetTest.Id,\n    });\n\n    var attributeTest2 = new Splight.AssetAttribute(\"attributeTest2\", new()\n    {\n        Type = \"Number\",\n        Unit = \"seconds\",\n        Asset = assetTest.Id,\n    });\n\n    var dashboardTest = new Splight.Dashboard(\"dashboardTest\", new()\n    {\n        RelatedAssets = new[] {},\n    });\n\n    var dashboardTabTest = new Splight.DashboardTab(\"dashboardTabTest\", new()\n    {\n        Order = 0,\n        Dashboard = dashboardTest.Id,\n    });\n\n    var dashboardChartTest = new Splight.DashboardTimeseriesChart(\"dashboardChartTest\", new()\n    {\n        Tab = dashboardTabTest.Id,\n        TimestampGte = \"now - 7d\",\n        TimestampLte = \"now\",\n        Description = \"Chart description\",\n        MinHeight = 1,\n        MinWidth = 4,\n        DisplayTimeRange = true,\n        LabelsDisplay = true,\n        LabelsAggregation = \"last\",\n        LabelsPlacement = \"bottom\",\n        ShowBeyondData = true,\n        Height = 10,\n        Width = 20,\n        Collection = \"default\",\n        YAxisMaxLimit = 100,\n        YAxisMinLimit = 0,\n        YAxisUnit = \"kW\",\n        NumberOfDecimals = 4,\n        XAxisFormat = \"MM-dd HH:mm\",\n        XAxisAutoSkip = true,\n        XAxisMaxTicksLimit = null,\n        LineInterpolationStyle = \"rounded\",\n        TimeseriesType = \"bar\",\n        Fill = true,\n        ShowLine = true,\n        ChartItems = new[]\n        {\n            new Splight.Inputs.DashboardTimeseriesChartChartItemArgs\n            {\n                RefId = \"A\",\n                Type = \"QUERY\",\n                Color = \"red\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardTimeseriesChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardTimeseriesChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest1.Id,\n                    Name = attributeTest1.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest1.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"day\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n            new Splight.Inputs.DashboardTimeseriesChartChartItemArgs\n            {\n                RefId = \"B\",\n                Color = \"blue\",\n                Type = \"QUERY\",\n                ExpressionPlain = \"\",\n                QueryFilterAsset = new Splight.Inputs.DashboardTimeseriesChartChartItemQueryFilterAssetArgs\n                {\n                    Id = assetTest.Id,\n                    Name = assetTest.Name,\n                },\n                QueryFilterAttribute = new Splight.Inputs.DashboardTimeseriesChartChartItemQueryFilterAttributeArgs\n                {\n                    Id = attributeTest2.Id,\n                    Name = attributeTest2.Name,\n                },\n                QueryPlain = Output.JsonSerialize(Output.Create(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = assetTest.Id,\n                            [\"attribute\"] = attributeTest2.Id,\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$addFields\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$dateTrunc\"] = new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"date\"] = \"$timestamp\",\n                                    [\"unit\"] = \"hour\",\n                                    [\"binSize\"] = 1,\n                                },\n                            },\n                        },\n                    },\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$group\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"_id\"] = \"$timestamp\",\n                            [\"value\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$value\",\n                            },\n                            [\"timestamp\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"$last\"] = \"$timestamp\",\n                            },\n                        },\n                    },\n                })),\n            },\n        },\n        Thresholds = new[]\n        {\n            new Splight.Inputs.DashboardTimeseriesChartThresholdArgs\n            {\n                Color = \"#00edcf\",\n                DisplayText = \"T1Test\",\n                Value = 13.1,\n            },\n        },\n        ValueMappings = new[]\n        {\n            new Splight.Inputs.DashboardTimeseriesChartValueMappingArgs\n            {\n                DisplayText = \"MODIFICADO\",\n                MatchValue = \"123.3\",\n                Type = \"exact_match\",\n                Order = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":       \"GeometryCollection\",\n\t\t\t\"geometries\": []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tassetTest, err := splight.NewAsset(ctx, \"assetTest\", \u0026splight.AssetArgs{\n\t\t\tDescription: pulumi.String(\"Created with Terraform\"),\n\t\t\tGeometry:    pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest1, err := splight.NewAssetAttribute(ctx, \"attributeTest1\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"meters\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tattributeTest2, err := splight.NewAssetAttribute(ctx, \"attributeTest2\", \u0026splight.AssetAttributeArgs{\n\t\t\tType:  pulumi.String(\"Number\"),\n\t\t\tUnit:  pulumi.String(\"seconds\"),\n\t\t\tAsset: assetTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTest, err := splight.NewDashboard(ctx, \"dashboardTest\", \u0026splight.DashboardArgs{\n\t\t\tRelatedAssets: splight.DashboardRelatedAssetArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdashboardTabTest, err := splight.NewDashboardTab(ctx, \"dashboardTabTest\", \u0026splight.DashboardTabArgs{\n\t\t\tOrder:     pulumi.Int(0),\n\t\t\tDashboard: dashboardTest.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = splight.NewDashboardTimeseriesChart(ctx, \"dashboardChartTest\", \u0026splight.DashboardTimeseriesChartArgs{\n\t\t\tTab:                    dashboardTabTest.ID(),\n\t\t\tTimestampGte:           pulumi.String(\"now - 7d\"),\n\t\t\tTimestampLte:           pulumi.String(\"now\"),\n\t\t\tDescription:            pulumi.String(\"Chart description\"),\n\t\t\tMinHeight:              pulumi.Int(1),\n\t\t\tMinWidth:               pulumi.Int(4),\n\t\t\tDisplayTimeRange:       pulumi.Bool(true),\n\t\t\tLabelsDisplay:          pulumi.Bool(true),\n\t\t\tLabelsAggregation:      pulumi.String(\"last\"),\n\t\t\tLabelsPlacement:        pulumi.String(\"bottom\"),\n\t\t\tShowBeyondData:         pulumi.Bool(true),\n\t\t\tHeight:                 pulumi.Int(10),\n\t\t\tWidth:                  pulumi.Int(20),\n\t\t\tCollection:             pulumi.String(\"default\"),\n\t\t\tYAxisMaxLimit:          pulumi.Int(100),\n\t\t\tYAxisMinLimit:          pulumi.Int(0),\n\t\t\tYAxisUnit:              pulumi.String(\"kW\"),\n\t\t\tNumberOfDecimals:       pulumi.Int(4),\n\t\t\tXAxisFormat:            pulumi.String(\"MM-dd HH:mm\"),\n\t\t\tXAxisAutoSkip:          pulumi.Bool(true),\n\t\t\tXAxisMaxTicksLimit:     nil,\n\t\t\tLineInterpolationStyle: pulumi.String(\"rounded\"),\n\t\t\tTimeseriesType:         pulumi.String(\"bar\"),\n\t\t\tFill:                   pulumi.Bool(true),\n\t\t\tShowLine:               pulumi.Bool(true),\n\t\t\tChartItems: splight.DashboardTimeseriesChartChartItemArray{\n\t\t\t\t\u0026splight.DashboardTimeseriesChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"A\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tColor:           pulumi.String(\"red\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardTimeseriesChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardTimeseriesChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest1.ID(),\n\t\t\t\t\t\tName: attributeTest1.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest1.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest1Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest1Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"day\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\t\treturn json1, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\t\u0026splight.DashboardTimeseriesChartChartItemArgs{\n\t\t\t\t\tRefId:           pulumi.String(\"B\"),\n\t\t\t\t\tColor:           pulumi.String(\"blue\"),\n\t\t\t\t\tType:            pulumi.String(\"QUERY\"),\n\t\t\t\t\tExpressionPlain: pulumi.String(\"\"),\n\t\t\t\t\tQueryFilterAsset: \u0026splight.DashboardTimeseriesChartChartItemQueryFilterAssetArgs{\n\t\t\t\t\t\tId:   assetTest.ID(),\n\t\t\t\t\t\tName: assetTest.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryFilterAttribute: \u0026splight.DashboardTimeseriesChartChartItemQueryFilterAttributeArgs{\n\t\t\t\t\t\tId:   attributeTest2.ID(),\n\t\t\t\t\t\tName: attributeTest2.Name,\n\t\t\t\t\t},\n\t\t\t\t\tQueryPlain: pulumi.All(assetTest.ID(), attributeTest2.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\t\t\tassetTestId := _args[0].(string)\n\t\t\t\t\t\tattributeTest2Id := _args[1].(string)\n\t\t\t\t\t\tvar _zero string\n\t\t\t\t\t\ttmpJSON2, err := json.Marshal([]interface{}{\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"asset\":     assetTestId,\n\t\t\t\t\t\t\t\t\t\"attribute\": attributeTest2Id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$addFields\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$dateTrunc\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\t\"date\":    \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\"unit\":    \"hour\",\n\t\t\t\t\t\t\t\t\t\t\t\"binSize\": 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\t\"$group\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\"_id\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t\"value\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$value\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"timestamp\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\t\t\"$last\": \"$timestamp\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjson2 := string(tmpJSON2)\n\t\t\t\t\t\treturn json2, nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tThresholds: splight.DashboardTimeseriesChartThresholdArray{\n\t\t\t\t\u0026splight.DashboardTimeseriesChartThresholdArgs{\n\t\t\t\t\tColor:       pulumi.String(\"#00edcf\"),\n\t\t\t\t\tDisplayText: pulumi.String(\"T1Test\"),\n\t\t\t\t\tValue:       pulumi.Float64(13.1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValueMappings: splight.DashboardTimeseriesChartValueMappingArray{\n\t\t\t\t\u0026splight.DashboardTimeseriesChartValueMappingArgs{\n\t\t\t\t\tDisplayText: pulumi.String(\"MODIFICADO\"),\n\t\t\t\t\tMatchValue:  pulumi.String(\"123.3\"),\n\t\t\t\t\tType:        pulumi.String(\"exact_match\"),\n\t\t\t\t\tOrder:       pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Asset;\nimport com.pulumi.splight.AssetArgs;\nimport com.pulumi.splight.AssetAttribute;\nimport com.pulumi.splight.AssetAttributeArgs;\nimport com.pulumi.splight.Dashboard;\nimport com.pulumi.splight.DashboardArgs;\nimport com.pulumi.splight.DashboardTab;\nimport com.pulumi.splight.DashboardTabArgs;\nimport com.pulumi.splight.DashboardTimeseriesChart;\nimport com.pulumi.splight.DashboardTimeseriesChartArgs;\nimport com.pulumi.splight.inputs.DashboardTimeseriesChartChartItemArgs;\nimport com.pulumi.splight.inputs.DashboardTimeseriesChartChartItemQueryFilterAssetArgs;\nimport com.pulumi.splight.inputs.DashboardTimeseriesChartChartItemQueryFilterAttributeArgs;\nimport com.pulumi.splight.inputs.DashboardTimeseriesChartThresholdArgs;\nimport com.pulumi.splight.inputs.DashboardTimeseriesChartValueMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTest = new Asset(\"assetTest\", AssetArgs.builder()\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        var attributeTest1 = new AssetAttribute(\"attributeTest1\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"meters\")\n            .asset(assetTest.id())\n            .build());\n\n        var attributeTest2 = new AssetAttribute(\"attributeTest2\", AssetAttributeArgs.builder()\n            .type(\"Number\")\n            .unit(\"seconds\")\n            .asset(assetTest.id())\n            .build());\n\n        var dashboardTest = new Dashboard(\"dashboardTest\", DashboardArgs.builder()\n            .relatedAssets()\n            .build());\n\n        var dashboardTabTest = new DashboardTab(\"dashboardTabTest\", DashboardTabArgs.builder()\n            .order(0)\n            .dashboard(dashboardTest.id())\n            .build());\n\n        var dashboardChartTest = new DashboardTimeseriesChart(\"dashboardChartTest\", DashboardTimeseriesChartArgs.builder()\n            .tab(dashboardTabTest.id())\n            .timestampGte(\"now - 7d\")\n            .timestampLte(\"now\")\n            .description(\"Chart description\")\n            .minHeight(1)\n            .minWidth(4)\n            .displayTimeRange(true)\n            .labelsDisplay(true)\n            .labelsAggregation(\"last\")\n            .labelsPlacement(\"bottom\")\n            .showBeyondData(true)\n            .height(10)\n            .width(20)\n            .collection(\"default\")\n            .yAxisMaxLimit(100)\n            .yAxisMinLimit(0)\n            .yAxisUnit(\"kW\")\n            .numberOfDecimals(4)\n            .xAxisFormat(\"MM-dd HH:mm\")\n            .xAxisAutoSkip(true)\n            .xAxisMaxTicksLimit(null)\n            .lineInterpolationStyle(\"rounded\")\n            .timeseriesType(\"bar\")\n            .fill(true)\n            .showLine(true)\n            .chartItems(            \n                DashboardTimeseriesChartChartItemArgs.builder()\n                    .refId(\"A\")\n                    .type(\"QUERY\")\n                    .color(\"red\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardTimeseriesChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardTimeseriesChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest1.id())\n                        .name(attributeTest1.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest1.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest1Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest1Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"day\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build(),\n                DashboardTimeseriesChartChartItemArgs.builder()\n                    .refId(\"B\")\n                    .color(\"blue\")\n                    .type(\"QUERY\")\n                    .expressionPlain(\"\")\n                    .queryFilterAsset(DashboardTimeseriesChartChartItemQueryFilterAssetArgs.builder()\n                        .id(assetTest.id())\n                        .name(assetTest.name())\n                        .build())\n                    .queryFilterAttribute(DashboardTimeseriesChartChartItemQueryFilterAttributeArgs.builder()\n                        .id(attributeTest2.id())\n                        .name(attributeTest2.name())\n                        .build())\n                    .queryPlain(Output.tuple(assetTest.id(), attributeTest2.id()).applyValue(values -\u003e {\n                        var assetTestId = values.t1;\n                        var attributeTest2Id = values.t2;\n                        return serializeJson(\n                            jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"$match\", jsonObject(\n                                        jsonProperty(\"asset\", assetTestId),\n                                        jsonProperty(\"attribute\", attributeTest2Id)\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$addFields\", jsonObject(\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$dateTrunc\", jsonObject(\n                                                jsonProperty(\"date\", \"$timestamp\"),\n                                                jsonProperty(\"unit\", \"hour\"),\n                                                jsonProperty(\"binSize\", 1)\n                                            ))\n                                        ))\n                                    ))\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"$group\", jsonObject(\n                                        jsonProperty(\"_id\", \"$timestamp\"),\n                                        jsonProperty(\"value\", jsonObject(\n                                            jsonProperty(\"$last\", \"$value\")\n                                        )),\n                                        jsonProperty(\"timestamp\", jsonObject(\n                                            jsonProperty(\"$last\", \"$timestamp\")\n                                        ))\n                                    ))\n                                )\n                            ));\n                    }))\n                    .build())\n            .thresholds(DashboardTimeseriesChartThresholdArgs.builder()\n                .color(\"#00edcf\")\n                .displayText(\"T1Test\")\n                .value(13.1)\n                .build())\n            .valueMappings(DashboardTimeseriesChartValueMappingArgs.builder()\n                .displayText(\"MODIFICADO\")\n                .matchValue(\"123.3\")\n                .type(\"exact_match\")\n                .order(0)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTest:\n    type: splight:Asset\n    properties:\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n  attributeTest1:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: meters\n      asset: ${assetTest.id}\n  attributeTest2:\n    type: splight:AssetAttribute\n    properties:\n      type: Number\n      unit: seconds\n      asset: ${assetTest.id}\n  dashboardTest:\n    type: splight:Dashboard\n    properties:\n      relatedAssets: []\n  dashboardTabTest:\n    type: splight:DashboardTab\n    properties:\n      order: 0\n      dashboard: ${dashboardTest.id}\n  dashboardChartTest:\n    type: splight:DashboardTimeseriesChart\n    properties:\n      tab: ${dashboardTabTest.id}\n      timestampGte: now - 7d\n      timestampLte: now\n      description: Chart description\n      minHeight: 1\n      minWidth: 4\n      displayTimeRange: true\n      labelsDisplay: true\n      labelsAggregation: last\n      labelsPlacement: bottom\n      showBeyondData: true\n      height: 10\n      width: 20\n      collection: default\n      yAxisMaxLimit: 100\n      yAxisMinLimit: 0\n      yAxisUnit: kW\n      numberOfDecimals: 4\n      xAxisFormat: MM-dd HH:mm\n      xAxisAutoSkip: true\n      xAxisMaxTicksLimit: null\n      lineInterpolationStyle: rounded\n      timeseriesType: bar\n      fill: true\n      showLine: true\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest1.id}\n            name: ${attributeTest1.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest1.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: day\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryFilterAsset:\n            id: ${assetTest.id}\n            name: ${assetTest.name}\n          queryFilterAttribute:\n            id: ${attributeTest2.id}\n            name: ${attributeTest2.name}\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: ${assetTest.id}\n                  attribute: ${attributeTest2.id}\n              - $addFields:\n                  timestamp:\n                    $dateTrunc:\n                      date: $timestamp\n                      unit: hour\n                      binSize: 1\n              - $group:\n                  _id: $timestamp\n                  value:\n                    $last: $value\n                  timestamp:\n                    $last: $timestamp\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardTimeseriesChart:DashboardTimeseriesChart [options] splight_dashboard_timeseries_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTimeseriesChartChartItem:DashboardTimeseriesChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "fill": {
                    "type": "boolean",
                    "description": "whether to fill the area under the curve or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "lineInterpolationStyle": {
                    "type": "string",
                    "description": "line interpolation style\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "showLine": {
                    "type": "boolean",
                    "description": "whether to show the line or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTimeseriesChartThreshold:DashboardTimeseriesChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timeseriesType": {
                    "type": "string",
                    "description": "[line|bar] timeseries type\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTimeseriesChartValueMapping:DashboardTimeseriesChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                },
                "xAxisAutoSkip": {
                    "type": "boolean",
                    "description": "x axis auto skip\n"
                },
                "xAxisFormat": {
                    "type": "string",
                    "description": "x axis time format\n"
                },
                "xAxisMaxTicksLimit": {
                    "type": "integer",
                    "description": "x axis max ticks limit\n"
                },
                "yAxisMaxLimit": {
                    "type": "integer",
                    "description": "y axis max limit\n"
                },
                "yAxisMinLimit": {
                    "type": "integer",
                    "description": "y axis min limit\n"
                },
                "yAxisUnit": {
                    "type": "string",
                    "description": "y axis units\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "inputProperties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTimeseriesChartChartItem:DashboardTimeseriesChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "collection": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "chart description\n"
                },
                "displayTimeRange": {
                    "type": "boolean",
                    "description": "whether to display the time range or not\n"
                },
                "fill": {
                    "type": "boolean",
                    "description": "whether to fill the area under the curve or not\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "labelsAggregation": {
                    "type": "string",
                    "description": "[last|avg|...] aggregation\n"
                },
                "labelsDisplay": {
                    "type": "boolean",
                    "description": "whether to display the labels or not\n"
                },
                "labelsPlacement": {
                    "type": "string",
                    "description": "[right|bottom] placement\n"
                },
                "lineInterpolationStyle": {
                    "type": "string",
                    "description": "line interpolation style\n"
                },
                "minHeight": {
                    "type": "integer",
                    "description": "minimum chart height\n"
                },
                "minWidth": {
                    "type": "integer",
                    "description": "minimum chart width\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "numberOfDecimals": {
                    "type": "integer",
                    "description": "number of decimals\n"
                },
                "positionX": {
                    "type": "integer",
                    "description": "chart x position\n"
                },
                "positionY": {
                    "type": "integer",
                    "description": "chart y position\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "refresh interval\n"
                },
                "relativeWindowTime": {
                    "type": "string",
                    "description": "relative window time\n"
                },
                "showBeyondData": {
                    "type": "boolean",
                    "description": "whether to show data which is beyond timestamp_lte or not\n"
                },
                "showLine": {
                    "type": "boolean",
                    "description": "whether to show the line or not\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTimeseriesChartThreshold:DashboardTimeseriesChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timeseriesType": {
                    "type": "string",
                    "description": "[line|bar] timeseries type\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "chart timezone\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardTimeseriesChartValueMapping:DashboardTimeseriesChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                },
                "xAxisAutoSkip": {
                    "type": "boolean",
                    "description": "x axis auto skip\n"
                },
                "xAxisFormat": {
                    "type": "string",
                    "description": "x axis time format\n"
                },
                "xAxisMaxTicksLimit": {
                    "type": "integer",
                    "description": "x axis max ticks limit\n"
                },
                "yAxisMaxLimit": {
                    "type": "integer",
                    "description": "y axis max limit\n"
                },
                "yAxisMinLimit": {
                    "type": "integer",
                    "description": "y axis min limit\n"
                },
                "yAxisUnit": {
                    "type": "string",
                    "description": "y axis units\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardTimeseriesChart resources.\n",
                "properties": {
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardTimeseriesChartChartItem:DashboardTimeseriesChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "collection": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "chart description\n"
                    },
                    "displayTimeRange": {
                        "type": "boolean",
                        "description": "whether to display the time range or not\n"
                    },
                    "fill": {
                        "type": "boolean",
                        "description": "whether to fill the area under the curve or not\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "labelsAggregation": {
                        "type": "string",
                        "description": "[last|avg|...] aggregation\n"
                    },
                    "labelsDisplay": {
                        "type": "boolean",
                        "description": "whether to display the labels or not\n"
                    },
                    "labelsPlacement": {
                        "type": "string",
                        "description": "[right|bottom] placement\n"
                    },
                    "lineInterpolationStyle": {
                        "type": "string",
                        "description": "line interpolation style\n"
                    },
                    "minHeight": {
                        "type": "integer",
                        "description": "minimum chart height\n"
                    },
                    "minWidth": {
                        "type": "integer",
                        "description": "minimum chart width\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "numberOfDecimals": {
                        "type": "integer",
                        "description": "number of decimals\n"
                    },
                    "positionX": {
                        "type": "integer",
                        "description": "chart x position\n"
                    },
                    "positionY": {
                        "type": "integer",
                        "description": "chart y position\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "refresh interval\n"
                    },
                    "relativeWindowTime": {
                        "type": "string",
                        "description": "relative window time\n"
                    },
                    "showBeyondData": {
                        "type": "boolean",
                        "description": "whether to show data which is beyond timestamp_lte or not\n"
                    },
                    "showLine": {
                        "type": "boolean",
                        "description": "whether to show the line or not\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardTimeseriesChartThreshold:DashboardTimeseriesChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timeseriesType": {
                        "type": "string",
                        "description": "[line|bar] timeseries type\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "chart timezone\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardTimeseriesChartValueMapping:DashboardTimeseriesChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    },
                    "xAxisAutoSkip": {
                        "type": "boolean",
                        "description": "x axis auto skip\n"
                    },
                    "xAxisFormat": {
                        "type": "string",
                        "description": "x axis time format\n"
                    },
                    "xAxisMaxTicksLimit": {
                        "type": "integer",
                        "description": "x axis max ticks limit\n"
                    },
                    "yAxisMaxLimit": {
                        "type": "integer",
                        "description": "y axis max limit\n"
                    },
                    "yAxisMinLimit": {
                        "type": "integer",
                        "description": "y axis min limit\n"
                    },
                    "yAxisUnit": {
                        "type": "string",
                        "description": "y axis units\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/function:Function": {
            "description": "## Example Usage\n\n## Import\n\n```sh\n$ pulumi import splight:index/function:Function [options] splight_function.\u003cname\u003e \u003cfunction_id\u003e\n```\n\n",
            "properties": {
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "functionItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/FunctionFunctionItem:FunctionFunctionItem"
                    },
                    "description": "traces to be used to compute the results\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/FunctionRelatedAsset:FunctionRelatedAsset"
                    },
                    "description": "related assets of the resource\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/FunctionTag:FunctionTag"
                    },
                    "description": "tags of the resource\n"
                },
                "targetAsset": {
                    "$ref": "#/types/splight:index/FunctionTargetAsset:FunctionTargetAsset",
                    "description": "Asset filter\n"
                },
                "targetAttribute": {
                    "$ref": "#/types/splight:index/FunctionTargetAttribute:FunctionTargetAttribute",
                    "description": "Attribute filter\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be considered to be ingested\n"
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "required": [
                "cronDom",
                "cronDow",
                "cronHours",
                "cronMinutes",
                "cronMonth",
                "cronYear",
                "description",
                "functionItems",
                "name",
                "rateUnit",
                "rateValue",
                "targetAsset",
                "targetAttribute",
                "targetVariable",
                "timeWindow",
                "type"
            ],
            "inputProperties": {
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "functionItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/FunctionFunctionItem:FunctionFunctionItem"
                    },
                    "description": "traces to be used to compute the results\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/FunctionRelatedAsset:FunctionRelatedAsset"
                    },
                    "description": "related assets of the resource\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/FunctionTag:FunctionTag"
                    },
                    "description": "tags of the resource\n"
                },
                "targetAsset": {
                    "$ref": "#/types/splight:index/FunctionTargetAsset:FunctionTargetAsset",
                    "description": "Asset filter\n"
                },
                "targetAttribute": {
                    "$ref": "#/types/splight:index/FunctionTargetAttribute:FunctionTargetAttribute",
                    "description": "Attribute filter\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be considered to be ingested\n"
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "requiredInputs": [
                "description",
                "functionItems",
                "targetAsset",
                "targetAttribute",
                "targetVariable",
                "timeWindow",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Function resources.\n",
                "properties": {
                    "cronDom": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronDow": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronHours": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMinutes": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMonth": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronYear": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource\n"
                    },
                    "functionItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/FunctionFunctionItem:FunctionFunctionItem"
                        },
                        "description": "traces to be used to compute the results\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the resource\n"
                    },
                    "rateUnit": {
                        "type": "string",
                        "description": "[day|hour|minute] schedule unit\n"
                    },
                    "rateValue": {
                        "type": "integer",
                        "description": "schedule value\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/FunctionRelatedAsset:FunctionRelatedAsset"
                        },
                        "description": "related assets of the resource\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/FunctionTag:FunctionTag"
                        },
                        "description": "tags of the resource\n"
                    },
                    "targetAsset": {
                        "$ref": "#/types/splight:index/FunctionTargetAsset:FunctionTargetAsset",
                        "description": "Asset filter\n"
                    },
                    "targetAttribute": {
                        "$ref": "#/types/splight:index/FunctionTargetAttribute:FunctionTargetAttribute",
                        "description": "Attribute filter\n"
                    },
                    "targetVariable": {
                        "type": "string",
                        "description": "variable to be considered to be ingested\n"
                    },
                    "timeWindow": {
                        "type": "integer",
                        "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[cron|rate] type for the cron\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/line:Line": {
            "description": "## Example Usage\n\n## Import\n\n```sh\n$ pulumi import splight:index/line:Line [options] splight_line.\u003cname\u003e \u003cline_id\u003e\n```\n\n",
            "properties": {
                "absorptivity": {
                    "$ref": "#/types/splight:index/LineAbsorptivity:LineAbsorptivity",
                    "description": "attribute of the resource\n"
                },
                "activePowerEnds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineActivePowerEnd:LineActivePowerEnd"
                    },
                    "description": "attribute of the resource\n"
                },
                "activePowers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineActivePower:LineActivePower"
                    },
                    "description": "attribute of the resource\n"
                },
                "ampacities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineAmpacity:LineAmpacity"
                    },
                    "description": "attribute of the resource\n"
                },
                "atmosphere": {
                    "$ref": "#/types/splight:index/LineAtmosphere:LineAtmosphere",
                    "description": "attribute of the resource\n"
                },
                "capacitance": {
                    "$ref": "#/types/splight:index/LineCapacitance:LineCapacitance",
                    "description": "attribute of the resource\n"
                },
                "conductance": {
                    "$ref": "#/types/splight:index/LineConductance:LineConductance",
                    "description": "attribute of the resource\n"
                },
                "currentRs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineCurrentR:LineCurrentR"
                    },
                    "description": "attribute of the resource\n"
                },
                "currentS": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineCurrent:LineCurrent"
                    },
                    "description": "attribute of the resource\n"
                },
                "currentTs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineCurrentT:LineCurrentT"
                    },
                    "description": "attribute of the resource\n"
                },
                "currents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineCurrent:LineCurrent"
                    },
                    "description": "attribute of the resource\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of the resource\n"
                },
                "diameter": {
                    "$ref": "#/types/splight:index/LineDiameter:LineDiameter",
                    "description": "attribute of the resource\n"
                },
                "emissivity": {
                    "$ref": "#/types/splight:index/LineEmissivity:LineEmissivity",
                    "description": "attribute of the resource\n"
                },
                "energies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineEnergy:LineEnergy"
                    },
                    "description": "attribute of the resource\n"
                },
                "geometry": {
                    "type": "string",
                    "description": "geo position and shape of the resource\n"
                },
                "kinds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineKind:LineKind"
                    },
                    "description": "kind of the resource\n"
                },
                "length": {
                    "$ref": "#/types/splight:index/LineLength:LineLength",
                    "description": "attribute of the resource\n"
                },
                "maxTemperatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineMaxTemperature:LineMaxTemperature"
                    },
                    "description": "attribute of the resource\n"
                },
                "maximumAllowedCurrent": {
                    "$ref": "#/types/splight:index/LineMaximumAllowedCurrent:LineMaximumAllowedCurrent",
                    "description": "attribute of the resource\n"
                },
                "maximumAllowedPower": {
                    "$ref": "#/types/splight:index/LineMaximumAllowedPower:LineMaximumAllowedPower",
                    "description": "attribute of the resource\n"
                },
                "maximumAllowedTemperature": {
                    "$ref": "#/types/splight:index/LineMaximumAllowedTemperature:LineMaximumAllowedTemperature",
                    "description": "attribute of the resource\n"
                },
                "maximumAllowedTemperatureLte": {
                    "$ref": "#/types/splight:index/LineMaximumAllowedTemperatureLte:LineMaximumAllowedTemperatureLte",
                    "description": "attribute of the resource\n"
                },
                "maximumAllowedTemperatureSte": {
                    "$ref": "#/types/splight:index/LineMaximumAllowedTemperatureSte:LineMaximumAllowedTemperatureSte",
                    "description": "attribute of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "numberOfConductors": {
                    "$ref": "#/types/splight:index/LineNumberOfConductors:LineNumberOfConductors",
                    "description": "attribute of the resource\n"
                },
                "reactance": {
                    "$ref": "#/types/splight:index/LineReactance:LineReactance",
                    "description": "attribute of the resource\n"
                },
                "reactivePowers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineReactivePower:LineReactivePower"
                    },
                    "description": "attribute of the resource\n"
                },
                "referenceResistance": {
                    "$ref": "#/types/splight:index/LineReferenceResistance:LineReferenceResistance",
                    "description": "attribute of the resource\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineRelatedAsset:LineRelatedAsset"
                    },
                    "description": "related assets of the resource\n"
                },
                "resistance": {
                    "$ref": "#/types/splight:index/LineResistance:LineResistance",
                    "description": "attribute of the resource\n"
                },
                "safetyMarginForPower": {
                    "$ref": "#/types/splight:index/LineSafetyMarginForPower:LineSafetyMarginForPower",
                    "description": "attribute of the resource\n"
                },
                "susceptance": {
                    "$ref": "#/types/splight:index/LineSusceptance:LineSusceptance",
                    "description": "attribute of the resource\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineTag:LineTag"
                    },
                    "description": "tags of the resource\n"
                },
                "temperatureCoeffResistance": {
                    "$ref": "#/types/splight:index/LineTemperatureCoeffResistance:LineTemperatureCoeffResistance",
                    "description": "attribute of the resource\n"
                },
                "voltageRs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineVoltageR:LineVoltageR"
                    },
                    "description": "attribute of the resource\n"
                },
                "voltageSts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineVoltageSt:LineVoltageSt"
                    },
                    "description": "attribute of the resource\n"
                },
                "voltageTrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineVoltageTr:LineVoltageTr"
                    },
                    "description": "attribute of the resource\n"
                }
            },
            "required": [
                "absorptivity",
                "activePowers",
                "activePowerEnds",
                "ampacities",
                "atmosphere",
                "capacitance",
                "conductance",
                "currents",
                "currentRs",
                "currentS",
                "currentTs",
                "diameter",
                "emissivity",
                "energies",
                "kinds",
                "length",
                "maxTemperatures",
                "maximumAllowedCurrent",
                "maximumAllowedPower",
                "maximumAllowedTemperature",
                "maximumAllowedTemperatureLte",
                "maximumAllowedTemperatureSte",
                "name",
                "numberOfConductors",
                "reactance",
                "reactivePowers",
                "referenceResistance",
                "resistance",
                "safetyMarginForPower",
                "susceptance",
                "temperatureCoeffResistance",
                "voltageRs",
                "voltageSts",
                "voltageTrs"
            ],
            "inputProperties": {
                "absorptivity": {
                    "$ref": "#/types/splight:index/LineAbsorptivity:LineAbsorptivity",
                    "description": "attribute of the resource\n"
                },
                "atmosphere": {
                    "$ref": "#/types/splight:index/LineAtmosphere:LineAtmosphere",
                    "description": "attribute of the resource\n"
                },
                "capacitance": {
                    "$ref": "#/types/splight:index/LineCapacitance:LineCapacitance",
                    "description": "attribute of the resource\n"
                },
                "conductance": {
                    "$ref": "#/types/splight:index/LineConductance:LineConductance",
                    "description": "attribute of the resource\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of the resource\n"
                },
                "diameter": {
                    "$ref": "#/types/splight:index/LineDiameter:LineDiameter",
                    "description": "attribute of the resource\n"
                },
                "emissivity": {
                    "$ref": "#/types/splight:index/LineEmissivity:LineEmissivity",
                    "description": "attribute of the resource\n"
                },
                "geometry": {
                    "type": "string",
                    "description": "geo position and shape of the resource\n"
                },
                "length": {
                    "$ref": "#/types/splight:index/LineLength:LineLength",
                    "description": "attribute of the resource\n"
                },
                "maximumAllowedCurrent": {
                    "$ref": "#/types/splight:index/LineMaximumAllowedCurrent:LineMaximumAllowedCurrent",
                    "description": "attribute of the resource\n"
                },
                "maximumAllowedPower": {
                    "$ref": "#/types/splight:index/LineMaximumAllowedPower:LineMaximumAllowedPower",
                    "description": "attribute of the resource\n"
                },
                "maximumAllowedTemperature": {
                    "$ref": "#/types/splight:index/LineMaximumAllowedTemperature:LineMaximumAllowedTemperature",
                    "description": "attribute of the resource\n"
                },
                "maximumAllowedTemperatureLte": {
                    "$ref": "#/types/splight:index/LineMaximumAllowedTemperatureLte:LineMaximumAllowedTemperatureLte",
                    "description": "attribute of the resource\n"
                },
                "maximumAllowedTemperatureSte": {
                    "$ref": "#/types/splight:index/LineMaximumAllowedTemperatureSte:LineMaximumAllowedTemperatureSte",
                    "description": "attribute of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "numberOfConductors": {
                    "$ref": "#/types/splight:index/LineNumberOfConductors:LineNumberOfConductors",
                    "description": "attribute of the resource\n"
                },
                "reactance": {
                    "$ref": "#/types/splight:index/LineReactance:LineReactance",
                    "description": "attribute of the resource\n"
                },
                "referenceResistance": {
                    "$ref": "#/types/splight:index/LineReferenceResistance:LineReferenceResistance",
                    "description": "attribute of the resource\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineRelatedAsset:LineRelatedAsset"
                    },
                    "description": "related assets of the resource\n"
                },
                "resistance": {
                    "$ref": "#/types/splight:index/LineResistance:LineResistance",
                    "description": "attribute of the resource\n"
                },
                "safetyMarginForPower": {
                    "$ref": "#/types/splight:index/LineSafetyMarginForPower:LineSafetyMarginForPower",
                    "description": "attribute of the resource\n"
                },
                "susceptance": {
                    "$ref": "#/types/splight:index/LineSusceptance:LineSusceptance",
                    "description": "attribute of the resource\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/LineTag:LineTag"
                    },
                    "description": "tags of the resource\n"
                },
                "temperatureCoeffResistance": {
                    "$ref": "#/types/splight:index/LineTemperatureCoeffResistance:LineTemperatureCoeffResistance",
                    "description": "attribute of the resource\n"
                }
            },
            "requiredInputs": [
                "absorptivity",
                "atmosphere",
                "capacitance",
                "conductance",
                "diameter",
                "emissivity",
                "length",
                "maximumAllowedCurrent",
                "maximumAllowedPower",
                "maximumAllowedTemperature",
                "maximumAllowedTemperatureLte",
                "maximumAllowedTemperatureSte",
                "numberOfConductors",
                "reactance",
                "referenceResistance",
                "resistance",
                "safetyMarginForPower",
                "susceptance",
                "temperatureCoeffResistance"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Line resources.\n",
                "properties": {
                    "absorptivity": {
                        "$ref": "#/types/splight:index/LineAbsorptivity:LineAbsorptivity",
                        "description": "attribute of the resource\n"
                    },
                    "activePowerEnds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineActivePowerEnd:LineActivePowerEnd"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "activePowers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineActivePower:LineActivePower"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "ampacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineAmpacity:LineAmpacity"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "atmosphere": {
                        "$ref": "#/types/splight:index/LineAtmosphere:LineAtmosphere",
                        "description": "attribute of the resource\n"
                    },
                    "capacitance": {
                        "$ref": "#/types/splight:index/LineCapacitance:LineCapacitance",
                        "description": "attribute of the resource\n"
                    },
                    "conductance": {
                        "$ref": "#/types/splight:index/LineConductance:LineConductance",
                        "description": "attribute of the resource\n"
                    },
                    "currentRs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineCurrentR:LineCurrentR"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "currentS": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineCurrent:LineCurrent"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "currentTs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineCurrentT:LineCurrentT"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "currents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineCurrent:LineCurrent"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the resource\n"
                    },
                    "diameter": {
                        "$ref": "#/types/splight:index/LineDiameter:LineDiameter",
                        "description": "attribute of the resource\n"
                    },
                    "emissivity": {
                        "$ref": "#/types/splight:index/LineEmissivity:LineEmissivity",
                        "description": "attribute of the resource\n"
                    },
                    "energies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineEnergy:LineEnergy"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "geometry": {
                        "type": "string",
                        "description": "geo position and shape of the resource\n"
                    },
                    "kinds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineKind:LineKind"
                        },
                        "description": "kind of the resource\n"
                    },
                    "length": {
                        "$ref": "#/types/splight:index/LineLength:LineLength",
                        "description": "attribute of the resource\n"
                    },
                    "maxTemperatures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineMaxTemperature:LineMaxTemperature"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "maximumAllowedCurrent": {
                        "$ref": "#/types/splight:index/LineMaximumAllowedCurrent:LineMaximumAllowedCurrent",
                        "description": "attribute of the resource\n"
                    },
                    "maximumAllowedPower": {
                        "$ref": "#/types/splight:index/LineMaximumAllowedPower:LineMaximumAllowedPower",
                        "description": "attribute of the resource\n"
                    },
                    "maximumAllowedTemperature": {
                        "$ref": "#/types/splight:index/LineMaximumAllowedTemperature:LineMaximumAllowedTemperature",
                        "description": "attribute of the resource\n"
                    },
                    "maximumAllowedTemperatureLte": {
                        "$ref": "#/types/splight:index/LineMaximumAllowedTemperatureLte:LineMaximumAllowedTemperatureLte",
                        "description": "attribute of the resource\n"
                    },
                    "maximumAllowedTemperatureSte": {
                        "$ref": "#/types/splight:index/LineMaximumAllowedTemperatureSte:LineMaximumAllowedTemperatureSte",
                        "description": "attribute of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    },
                    "numberOfConductors": {
                        "$ref": "#/types/splight:index/LineNumberOfConductors:LineNumberOfConductors",
                        "description": "attribute of the resource\n"
                    },
                    "reactance": {
                        "$ref": "#/types/splight:index/LineReactance:LineReactance",
                        "description": "attribute of the resource\n"
                    },
                    "reactivePowers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineReactivePower:LineReactivePower"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "referenceResistance": {
                        "$ref": "#/types/splight:index/LineReferenceResistance:LineReferenceResistance",
                        "description": "attribute of the resource\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineRelatedAsset:LineRelatedAsset"
                        },
                        "description": "related assets of the resource\n"
                    },
                    "resistance": {
                        "$ref": "#/types/splight:index/LineResistance:LineResistance",
                        "description": "attribute of the resource\n"
                    },
                    "safetyMarginForPower": {
                        "$ref": "#/types/splight:index/LineSafetyMarginForPower:LineSafetyMarginForPower",
                        "description": "attribute of the resource\n"
                    },
                    "susceptance": {
                        "$ref": "#/types/splight:index/LineSusceptance:LineSusceptance",
                        "description": "attribute of the resource\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineTag:LineTag"
                        },
                        "description": "tags of the resource\n"
                    },
                    "temperatureCoeffResistance": {
                        "$ref": "#/types/splight:index/LineTemperatureCoeffResistance:LineTemperatureCoeffResistance",
                        "description": "attribute of the resource\n"
                    },
                    "voltageRs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineVoltageR:LineVoltageR"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "voltageSts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineVoltageSt:LineVoltageSt"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "voltageTrs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/LineVoltageTr:LineVoltageTr"
                        },
                        "description": "attribute of the resource\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/secret:Secret": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst mySecret = new splight.Secret(\"mySecret\", {rawValue: \"My Secret Value\"});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\nmy_secret = splight.Secret(\"mySecret\", raw_value=\"My Secret Value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySecret = new Splight.Secret(\"mySecret\", new()\n    {\n        RawValue = \"My Secret Value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.NewSecret(ctx, \"mySecret\", \u0026splight.SecretArgs{\n\t\t\tRawValue: pulumi.String(\"My Secret Value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Secret;\nimport com.pulumi.splight.SecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySecret = new Secret(\"mySecret\", SecretArgs.builder()\n            .rawValue(\"My Secret Value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySecret:\n    type: splight:Secret\n    properties:\n      rawValue: My Secret Value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/secret:Secret [options] splight_secret.\u003cname\u003e \u003csecret_id\u003e\n```\n\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "rawValue": {
                    "type": "string",
                    "secret": true
                },
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "rawValue",
                "value"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "rawValue": {
                    "type": "string",
                    "secret": true
                }
            },
            "requiredInputs": [
                "rawValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "rawValue": {
                        "type": "string",
                        "secret": true
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/segment:Segment": {
            "description": "## Example Usage\n\n## Import\n\n```sh\n$ pulumi import splight:index/segment:Segment [options] splight_segment.\u003cname\u003e \u003csegment_id\u003e\n```\n\n",
            "properties": {
                "altitude": {
                    "$ref": "#/types/splight:index/SegmentAltitude:SegmentAltitude",
                    "description": "attribute of the resource\n"
                },
                "azimuth": {
                    "$ref": "#/types/splight:index/SegmentAzimuth:SegmentAzimuth",
                    "description": "attribute of the resource\n"
                },
                "cumulativeDistance": {
                    "$ref": "#/types/splight:index/SegmentCumulativeDistance:SegmentCumulativeDistance",
                    "description": "attribute of the resource\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of the resource\n"
                },
                "geometry": {
                    "type": "string",
                    "description": "geo position and shape of the resource\n"
                },
                "kinds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/SegmentKind:SegmentKind"
                    },
                    "description": "kind of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/SegmentRelatedAsset:SegmentRelatedAsset"
                    },
                    "description": "related assets of the resource\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/SegmentTag:SegmentTag"
                    },
                    "description": "tags of the resource\n"
                },
                "temperatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/SegmentTemperature:SegmentTemperature"
                    },
                    "description": "attribute of the resource\n"
                },
                "windDirections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/SegmentWindDirection:SegmentWindDirection"
                    },
                    "description": "attribute of the resource\n"
                },
                "windSpeeds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/SegmentWindSpeed:SegmentWindSpeed"
                    },
                    "description": "attribute of the resource\n"
                }
            },
            "required": [
                "altitude",
                "azimuth",
                "cumulativeDistance",
                "kinds",
                "name",
                "temperatures",
                "windDirections",
                "windSpeeds"
            ],
            "inputProperties": {
                "altitude": {
                    "$ref": "#/types/splight:index/SegmentAltitude:SegmentAltitude",
                    "description": "attribute of the resource\n"
                },
                "azimuth": {
                    "$ref": "#/types/splight:index/SegmentAzimuth:SegmentAzimuth",
                    "description": "attribute of the resource\n"
                },
                "cumulativeDistance": {
                    "$ref": "#/types/splight:index/SegmentCumulativeDistance:SegmentCumulativeDistance",
                    "description": "attribute of the resource\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of the resource\n"
                },
                "geometry": {
                    "type": "string",
                    "description": "geo position and shape of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/SegmentRelatedAsset:SegmentRelatedAsset"
                    },
                    "description": "related assets of the resource\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/SegmentTag:SegmentTag"
                    },
                    "description": "tags of the resource\n"
                }
            },
            "requiredInputs": [
                "altitude",
                "azimuth",
                "cumulativeDistance"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Segment resources.\n",
                "properties": {
                    "altitude": {
                        "$ref": "#/types/splight:index/SegmentAltitude:SegmentAltitude",
                        "description": "attribute of the resource\n"
                    },
                    "azimuth": {
                        "$ref": "#/types/splight:index/SegmentAzimuth:SegmentAzimuth",
                        "description": "attribute of the resource\n"
                    },
                    "cumulativeDistance": {
                        "$ref": "#/types/splight:index/SegmentCumulativeDistance:SegmentCumulativeDistance",
                        "description": "attribute of the resource\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the resource\n"
                    },
                    "geometry": {
                        "type": "string",
                        "description": "geo position and shape of the resource\n"
                    },
                    "kinds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/SegmentKind:SegmentKind"
                        },
                        "description": "kind of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/SegmentRelatedAsset:SegmentRelatedAsset"
                        },
                        "description": "related assets of the resource\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/SegmentTag:SegmentTag"
                        },
                        "description": "tags of the resource\n"
                    },
                    "temperatures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/SegmentTemperature:SegmentTemperature"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "windDirections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/SegmentWindDirection:SegmentWindDirection"
                        },
                        "description": "attribute of the resource\n"
                    },
                    "windSpeeds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/SegmentWindSpeed:SegmentWindSpeed"
                        },
                        "description": "attribute of the resource\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/tag:Tag": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@splightplatform/pulumi-splight\";\n\nconst myTag = new splight.Tag(\"myTag\", {});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\nmy_tag = splight.Tag(\"myTag\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Splight.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTag = new Splight.Tag(\"myTag\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.NewTag(ctx, \"myTag\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.Tag;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myTag = new Tag(\"myTag\");\n\n    }\n}\n```\n```yaml\nresources:\n  myTag:\n    type: splight:Tag\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/tag:Tag [options] splight_tag.\u003cname\u003e \u003ctag_id\u003e\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "splight:index/getAssetKinds:getAssetKinds": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@pulumi/splight\";\n\nconst kinds = splight.getAssetKinds({});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\nkinds = splight.get_asset_kinds()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Pulumi.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var kinds = Splight.GetAssetKinds.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.GetAssetKinds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.SplightFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var kinds = SplightFunctions.getAssetKinds();\n\n    }\n}\n```\n```yaml\nvariables:\n  kinds:\n    fn::invoke:\n      Function: splight:getAssetKinds\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getAssetKinds.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kinds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/getAssetKindsKind:getAssetKindsKind"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "kinds",
                    "id"
                ]
            }
        },
        "splight:index/getTags:getTags": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as splight from \"@pulumi/splight\";\n\nconst tags = splight.getTags({});\n```\n```python\nimport pulumi\nimport pulumi_splight as splight\n\ntags = splight.get_tags()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Splight = Pulumi.Splight;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tags = Splight.GetTags.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/splightplatform/pulumi-splight/sdk/go/splight\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := splight.GetTags(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.splight.SplightFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tags = SplightFunctions.getTags();\n\n    }\n}\n```\n```yaml\nvariables:\n  tags:\n    fn::invoke:\n      Function: splight:getTags\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getTags.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/getTagsTag:getTagsTag"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "tags",
                    "id"
                ]
            }
        }
    }
}